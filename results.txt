[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Oct 11, 2017 6:41:01 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 2 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 2 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CodecBenchmark.scala:26:49: Generated codec for type 'com.github.plokhotnyuk.jsoniter_scala.AnyRefs':
[info] {
[info]   import com.jsoniter.CodegenAccess._;
[info]   import com.jsoniter.CodecBase;
[info]   import com.jsoniter.JsonIterator;
[info]   import com.jsoniter.output.JsonStream;
[info]   {
[info]     final class $anon extends com.github.plokhotnyuk.jsoniter_scala.Codec[com.github.plokhotnyuk.jsoniter_scala.AnyRefs] {
[info]       private val reqFields: Array[String] = Array("s", "bd");
[info]       override def decode(in: JsonIterator): AnyRef = nextToken(in) match {
[info]         case '{' => {
[info]           var req0: Long = 3L;
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           if (nextToken(in).!=('}'))
[info]             {
[info]               unreadByte(in);
[info]               do 
[info]                 (CodecBase.readObjectFieldAsHash(in) match {
[info]                   case 8782703599529504340L => {
[info]                     req0.&=(-2L);
[info]                     _s = in.readString()
[info]                   }
[info]                   case -3621593128239734518L => {
[info]                     req0.&=(-3L);
[info]                     _bd = BigDecimal(in.readBigDecimal())
[info]                   }
[info]                   case 3145557872620432656L => _os = Option(in.readString())
[info]                   case _ => in.skip()
[info]                 })
[info]                while (nextToken(in).==(',')) 
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             reqFieldError(in, reqFields, req0)
[info]         }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           null
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       override def encode(obj: AnyRef, out: JsonStream): Unit = if (obj.eq(null))
[info]         out.writeNull()
[info]       else
[info]         {
[info]           out.writeObjectStart();
[info]           val x = obj.asInstanceOf[com.github.plokhotnyuk.jsoniter_scala.AnyRefs];
[info]           var first = true;
[info]           if (x.s.ne(null))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("s");
[info]               out.writeVal(x.s)
[info]             }
[info]           else
[info]             ();
[info]           if (x.bd.ne(null))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("bd");
[info]               out.writeRaw(x.bd.toString)
[info]             }
[info]           else
[info]             ();
[info]           if (x.os.ne(null).&&(x.os.isDefined))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("os");
[info]               out.writeVal(x.os.get)
[info]             }
[info]           else
[info]             ();
[info]           out.writeObjectEnd()
[info]         }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: Codec[AnyRefs] = materialize[AnyRefs]
[info]                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CodecBenchmark.scala:28:49: Generated codec for type 'com.github.plokhotnyuk.jsoniter_scala.BitSets':
[info] {
[info]   import com.jsoniter.CodegenAccess._;
[info]   import com.jsoniter.CodecBase;
[info]   import com.jsoniter.JsonIterator;
[info]   import com.jsoniter.output.JsonStream;
[info]   {
[info]     final class $anon extends com.github.plokhotnyuk.jsoniter_scala.Codec[com.github.plokhotnyuk.jsoniter_scala.BitSets] {
[info]       override def decode(in: JsonIterator): AnyRef = nextToken(in) match {
[info]         case '{' => {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (nextToken(in).!=('}'))
[info]             {
[info]               unreadByte(in);
[info]               do 
[info]                 (CodecBase.readObjectFieldAsHash(in) match {
[info]                   case -2880316277851419472L => _bs = d0(in)
[info]                   case 6036675737602992569L => _mbs = d1(in)
[info]                   case _ => in.skip()
[info]                 })
[info]                while (nextToken(in).==(',')) 
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           null
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       override def encode(obj: AnyRef, out: JsonStream): Unit = if (obj.eq(null))
[info]         out.writeNull()
[info]       else
[info]         {
[info]           out.writeObjectStart();
[info]           val x = obj.asInstanceOf[com.github.plokhotnyuk.jsoniter_scala.BitSets];
[info]           var first = true;
[info]           if (x.bs.ne(null).&&(x.bs.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("bs");
[info]               e0(out, x.bs)
[info]             }
[info]           else
[info]             ();
[info]           if (x.mbs.ne(null).&&(x.mbs.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("mbs");
[info]               e1(out, x.mbs)
[info]             }
[info]           else
[info]             ();
[info]           out.writeObjectEnd()
[info]         };
[info]       private def d0(in: JsonIterator): scala.collection.immutable.BitSet = nextToken(in) match {
[info]         case '[' => if (nextToken(in).==(']'))
[info]           BitSet.empty
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = BitSet.newBuilder;
[info]             do 
[info]               buf.+=(in.readInt())
[info]              while (nextToken(in).==(',')) ;
[info]             buf.result()
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           BitSet.empty
[info]         }
[info]         case _ => decodeError(in, "expect [ or n")
[info]       };
[info]       private def d1(in: JsonIterator): scala.collection.mutable.BitSet = nextToken(in) match {
[info]         case '[' => if (nextToken(in).==(']'))
[info]           BitSet.empty
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = BitSet.empty;
[info]             do 
[info]               buf.add(in.readInt())
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           BitSet.empty
[info]         }
[info]         case _ => decodeError(in, "expect [ or n")
[info]       };
[info]       private def e0(out: JsonStream, x: scala.collection.immutable.BitSet): Unit = {
[info]         out.writeArrayStart();
[info]         var first = true;
[info]         x.foreach(((x) => {
[info]           first = writeSep(out, first);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e1(out: JsonStream, x: scala.collection.mutable.BitSet): Unit = {
[info]         out.writeArrayStart();
[info]         var first = true;
[info]         x.foreach(((x) => {
[info]           first = writeSep(out, first);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: Codec[BitSets] = materialize[BitSets]
[info]                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CodecBenchmark.scala:31:53: Generated codec for type 'com.github.plokhotnyuk.jsoniter_scala.Iterables':
[info] {
[info]   import com.jsoniter.CodegenAccess._;
[info]   import com.jsoniter.CodecBase;
[info]   import com.jsoniter.JsonIterator;
[info]   import com.jsoniter.output.JsonStream;
[info]   {
[info]     final class $anon extends com.github.plokhotnyuk.jsoniter_scala.Codec[com.github.plokhotnyuk.jsoniter_scala.Iterables] {
[info]       override def decode(in: JsonIterator): AnyRef = nextToken(in) match {
[info]         case '{' => {
[info]           var _l: List[String] = List.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[Set[Int]] = List.empty[scala.collection.immutable.Set[Int]];
[info]           if (nextToken(in).!=('}'))
[info]             {
[info]               unreadByte(in);
[info]               do 
[info]                 (CodecBase.readObjectFieldAsHash(in) match {
[info]                   case 7173115670136726671L => _l = d0(in)
[info]                   case 8782703599529504340L => _s = d1(in)
[info]                   case -8160163252060190562L => _ls = d2(in)
[info]                   case _ => in.skip()
[info]                 })
[info]                while (nextToken(in).==(',')) 
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           null
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       override def encode(obj: AnyRef, out: JsonStream): Unit = if (obj.eq(null))
[info]         out.writeNull()
[info]       else
[info]         {
[info]           out.writeObjectStart();
[info]           val x = obj.asInstanceOf[com.github.plokhotnyuk.jsoniter_scala.Iterables];
[info]           var first = true;
[info]           if (x.l.ne(null).&&(x.l.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("l");
[info]               e0(out, x.l)
[info]             }
[info]           else
[info]             ();
[info]           if (x.s.ne(null).&&(x.s.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("s");
[info]               e1(out, x.s)
[info]             }
[info]           else
[info]             ();
[info]           if (x.ls.ne(null).&&(x.ls.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("ls");
[info]               e2(out, x.ls)
[info]             }
[info]           else
[info]             ();
[info]           out.writeObjectEnd()
[info]         };
[info]       private def d0(in: JsonIterator): List[String] = nextToken(in) match {
[info]         case '[' => if (nextToken(in).==(']'))
[info]           List.empty[String]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = List.newBuilder[String];
[info]             do 
[info]               buf.+=(in.readString())
[info]              while (nextToken(in).==(',')) ;
[info]             buf.result()
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           List.empty[String]
[info]         }
[info]         case _ => decodeError(in, "expect [ or n")
[info]       };
[info]       private def d1(in: JsonIterator): scala.collection.immutable.Set[Int] = nextToken(in) match {
[info]         case '[' => if (nextToken(in).==(']'))
[info]           Set.empty[Int]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = Set.newBuilder[Int];
[info]             do 
[info]               buf.+=(in.readInt())
[info]              while (nextToken(in).==(',')) ;
[info]             buf.result()
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           Set.empty[Int]
[info]         }
[info]         case _ => decodeError(in, "expect [ or n")
[info]       };
[info]       private def d2(in: JsonIterator): List[Set[Int]] = nextToken(in) match {
[info]         case '[' => if (nextToken(in).==(']'))
[info]           List.empty[scala.collection.immutable.Set[Int]]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = List.newBuilder[scala.collection.immutable.Set[Int]];
[info]             do 
[info]               buf.+=(d1(in))
[info]              while (nextToken(in).==(',')) ;
[info]             buf.result()
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           List.empty[scala.collection.immutable.Set[Int]]
[info]         }
[info]         case _ => decodeError(in, "expect [ or n")
[info]       };
[info]       private def e0(out: JsonStream, x: List[String]): Unit = {
[info]         out.writeArrayStart();
[info]         var first = true;
[info]         x.foreach(((x) => {
[info]           first = writeSep(out, first);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e1(out: JsonStream, x: scala.collection.immutable.Set[Int]): Unit = {
[info]         out.writeArrayStart();
[info]         var first = true;
[info]         x.foreach(((x) => {
[info]           first = writeSep(out, first);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(out: JsonStream, x: List[Set[Int]]): Unit = {
[info]         out.writeArrayStart();
[info]         var first = true;
[info]         x.foreach(((x) => {
[info]           first = writeSep(out, first);
[info]           e1(out, x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: Codec[Iterables] = materialize[Iterables]
[info]                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CodecBenchmark.scala:33:43: Generated codec for type 'com.github.plokhotnyuk.jsoniter_scala.Maps':
[info] {
[info]   import com.jsoniter.CodegenAccess._;
[info]   import com.jsoniter.CodecBase;
[info]   import com.jsoniter.JsonIterator;
[info]   import com.jsoniter.output.JsonStream;
[info]   {
[info]     final class $anon extends com.github.plokhotnyuk.jsoniter_scala.Codec[com.github.plokhotnyuk.jsoniter_scala.Maps] {
[info]       override def decode(in: JsonIterator): AnyRef = nextToken(in) match {
[info]         case '{' => {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (nextToken(in).!=('}'))
[info]             {
[info]               unreadByte(in);
[info]               do 
[info]                 (CodecBase.readObjectFieldAsHash(in) match {
[info]                   case 5563527740743840757L => _m = d0(in)
[info]                   case -1832287182589162500L => _mm = d2(in)
[info]                   case _ => in.skip()
[info]                 })
[info]                while (nextToken(in).==(',')) 
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Maps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           null
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       override def encode(obj: AnyRef, out: JsonStream): Unit = if (obj.eq(null))
[info]         out.writeNull()
[info]       else
[info]         {
[info]           out.writeObjectStart();
[info]           val x = obj.asInstanceOf[com.github.plokhotnyuk.jsoniter_scala.Maps];
[info]           var first = true;
[info]           if (x.m.ne(null).&&(x.m.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("m");
[info]               e0(out, x.m)
[info]             }
[info]           else
[info]             ();
[info]           if (x.mm.ne(null).&&(x.mm.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("mm");
[info]               e2(out, x.mm)
[info]             }
[info]           else
[info]             ();
[info]           out.writeObjectEnd()
[info]         };
[info]       private def d0(in: JsonIterator): scala.collection.immutable.HashMap[String,Double] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           HashMap.empty[String, Double]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             var buf = HashMap.empty[String, Double];
[info]             do 
[info]               buf = buf.updated(readObjectFieldAsString(in), in.readDouble())
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           HashMap.empty[String, Double]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def d1(in: JsonIterator): scala.collection.immutable.HashMap[Long,Double] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           HashMap.empty[Long, Double]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             var buf = HashMap.empty[Long, Double];
[info]             do 
[info]               buf = buf.updated(readObjectFieldAsLong(in), in.readDouble())
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           HashMap.empty[Long, Double]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def d2(in: JsonIterator): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             var buf = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               buf = buf.updated(readObjectFieldAsInt(in), d1(in))
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def e0(out: JsonStream, x: scala.collection.immutable.HashMap[String,Double]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e1(out: JsonStream, x: scala.collection.immutable.HashMap[Long,Double]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(out: JsonStream, x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           e1(out, kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: Codec[Maps] = materialize[Maps]
[info]                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CodecBenchmark.scala:36:57: Generated codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableMaps':
[info] {
[info]   import com.jsoniter.CodegenAccess._;
[info]   import com.jsoniter.CodecBase;
[info]   import com.jsoniter.JsonIterator;
[info]   import com.jsoniter.output.JsonStream;
[info]   {
[info]     final class $anon extends com.github.plokhotnyuk.jsoniter_scala.Codec[com.github.plokhotnyuk.jsoniter_scala.MutableMaps] {
[info]       override def decode(in: JsonIterator): AnyRef = nextToken(in) match {
[info]         case '{' => {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (nextToken(in).!=('}'))
[info]             {
[info]               unreadByte(in);
[info]               do 
[info]                 (CodecBase.readObjectFieldAsHash(in) match {
[info]                   case 5563527740743840757L => _m = d0(in)
[info]                   case -1832287182589162500L => _mm = d2(in)
[info]                   case _ => in.skip()
[info]                 })
[info]                while (nextToken(in).==(',')) 
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           null
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       override def encode(obj: AnyRef, out: JsonStream): Unit = if (obj.eq(null))
[info]         out.writeNull()
[info]       else
[info]         {
[info]           out.writeObjectStart();
[info]           val x = obj.asInstanceOf[com.github.plokhotnyuk.jsoniter_scala.MutableMaps];
[info]           var first = true;
[info]           if (x.m.ne(null).&&(x.m.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("m");
[info]               e0(out, x.m)
[info]             }
[info]           else
[info]             ();
[info]           if (x.mm.ne(null).&&(x.mm.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("mm");
[info]               e2(out, x.mm)
[info]             }
[info]           else
[info]             ();
[info]           out.writeObjectEnd()
[info]         };
[info]       private def d0(in: JsonIterator): scala.collection.mutable.HashMap[String,Double] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           HashMap.empty[String, Double]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = HashMap.empty[String, Double];
[info]             do 
[info]               buf.update(readObjectFieldAsString(in), in.readDouble())
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           HashMap.empty[String, Double]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def d1(in: JsonIterator): scala.collection.mutable.OpenHashMap[Long,Double] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           OpenHashMap.empty[Long, Double]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = OpenHashMap.empty[Long, Double];
[info]             do 
[info]               buf.update(readObjectFieldAsLong(in), in.readDouble())
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           OpenHashMap.empty[Long, Double]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def d2(in: JsonIterator): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               buf.update(readObjectFieldAsInt(in), d1(in))
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def e0(out: JsonStream, x: scala.collection.mutable.HashMap[String,Double]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e1(out: JsonStream, x: scala.collection.mutable.OpenHashMap[Long,Double]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(out: JsonStream, x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           e1(out, kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: Codec[MutableMaps] = materialize[MutableMaps]
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CodecBenchmark.scala:39:63: Generated codec for type 'com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps':
[info] {
[info]   import com.jsoniter.CodegenAccess._;
[info]   import com.jsoniter.CodecBase;
[info]   import com.jsoniter.JsonIterator;
[info]   import com.jsoniter.output.JsonStream;
[info]   {
[info]     final class $anon extends com.github.plokhotnyuk.jsoniter_scala.Codec[com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps] {
[info]       override def decode(in: JsonIterator): AnyRef = nextToken(in) match {
[info]         case '{' => {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (nextToken(in).!=('}'))
[info]             {
[info]               unreadByte(in);
[info]               do 
[info]                 (CodecBase.readObjectFieldAsHash(in) match {
[info]                   case 5563527740743840757L => _m = d0(in)
[info]                   case -1832287182589162500L => _mm = d2(in)
[info]                   case _ => in.skip()
[info]                 })
[info]                while (nextToken(in).==(',')) 
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           null
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       override def encode(obj: AnyRef, out: JsonStream): Unit = if (obj.eq(null))
[info]         out.writeNull()
[info]       else
[info]         {
[info]           out.writeObjectStart();
[info]           val x = obj.asInstanceOf[com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps];
[info]           var first = true;
[info]           if (x.m.ne(null).&&(x.m.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("m");
[info]               e0(out, x.m)
[info]             }
[info]           else
[info]             ();
[info]           if (x.mm.ne(null).&&(x.mm.nonEmpty))
[info]             {
[info]               first = writeSep(out, first);
[info]               out.writeObjectField("mm");
[info]               e2(out, x.mm)
[info]             }
[info]           else
[info]             ();
[info]           out.writeObjectEnd()
[info]         };
[info]       private def d0(in: JsonIterator): scala.collection.immutable.IntMap[Double] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           IntMap.empty[Double]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             var buf = IntMap.empty[Double];
[info]             do 
[info]               buf = buf.updated(readObjectFieldAsInt(in), in.readDouble())
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           IntMap.empty[Double]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def d1(in: JsonIterator): scala.collection.immutable.LongMap[Double] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           LongMap.empty[Double]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             var buf = LongMap.empty[Double];
[info]             do 
[info]               buf = buf.updated(readObjectFieldAsLong(in), in.readDouble())
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           LongMap.empty[Double]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def d2(in: JsonIterator): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = nextToken(in) match {
[info]         case '{' => if (nextToken(in).==('}'))
[info]           LongMap.empty[scala.collection.immutable.LongMap[Double]]
[info]         else
[info]           {
[info]             unreadByte(in);
[info]             val buf = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               buf.update(readObjectFieldAsLong(in), d1(in))
[info]              while (nextToken(in).==(',')) ;
[info]             buf
[info]           }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           LongMap.empty[scala.collection.immutable.LongMap[Double]]
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       private def e0(out: JsonStream, x: scala.collection.immutable.IntMap[Double]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e1(out: JsonStream, x: scala.collection.immutable.LongMap[Double]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(out: JsonStream, x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): Unit = {
[info]         out.writeObjectStart();
[info]         var first = true;
[info]         x.foreach(((kv) => {
[info]           first = writeSep(out, first);
[info]           writeObjectField(out, kv._1);
[info]           e1(out, kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: Codec[IntAndLongMaps] = materialize[IntAndLongMaps]
[info]                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CodecBenchmark.scala:42:55: Generated codec for type 'com.github.plokhotnyuk.jsoniter_scala.Primitives':
[info] {
[info]   import com.jsoniter.CodegenAccess._;
[info]   import com.jsoniter.CodecBase;
[info]   import com.jsoniter.JsonIterator;
[info]   import com.jsoniter.output.JsonStream;
[info]   {
[info]     final class $anon extends com.github.plokhotnyuk.jsoniter_scala.Codec[com.github.plokhotnyuk.jsoniter_scala.Primitives] {
[info]       private val reqFields: Array[String] = Array("b", "s", "i", "l", "bl", "dbl", "f");
[info]       override def decode(in: JsonIterator): AnyRef = nextToken(in) match {
[info]         case '{' => {
[info]           var req0: Long = 127L;
[info]           var _b: Byte = 0;
[info]           var _s: Short = 0;
[info]           var _i: Int = 0;
[info]           var _l: Long = 0;
[info]           var _bl: Boolean = false;
[info]           var _dbl: Double = 0;
[info]           var _f: Float = 0;
[info]           if (nextToken(in).!=('}'))
[info]             {
[info]               unreadByte(in);
[info]               do 
[info]                 (CodecBase.readObjectFieldAsHash(in) match {
[info]                   case 3085628732346524253L => {
[info]                     req0.&=(-2L);
[info]                     _b = in.readInt().toByte
[info]                   }
[info]                   case 8782703599529504340L => {
[info]                     req0.&=(-3L);
[info]                     _s = in.readInt().toShort
[info]                   }
[info]                   case -874823976827361790L => {
[info]                     req0.&=(-5L);
[info]                     _i = in.readInt()
[info]                   }
[info]                   case 7173115670136726671L => {
[info]                     req0.&=(-9L);
[info]                     _l = in.readLong()
[info]                   }
[info]                   case 1948447510327205053L => {
[info]                     req0.&=(-17L);
[info]                     _bl = in.readBoolean()
[info]                   }
[info]                   case 4052889318286228612L => {
[info]                     req0.&=(-33L);
[info]                     _dbl = in.readDouble()
[info]                   }
[info]                   case -8922763623791618166L => {
[info]                     req0.&=(-65L);
[info]                     _f = in.readFloat()
[info]                   }
[info]                   case _ => in.skip()
[info]                 })
[info]                while (nextToken(in).==(',')) 
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, dbl = _dbl, f = _f)
[info]           else
[info]             reqFieldError(in, reqFields, req0)
[info]         }
[info]         case 'n' => {
[info]           skipFixedBytes(in, 3);
[info]           null
[info]         }
[info]         case _ => decodeError(in, "expect { or n")
[info]       };
[info]       override def encode(obj: AnyRef, out: JsonStream): Unit = if (obj.eq(null))
[info]         out.writeNull()
[info]       else
[info]         {
[info]           out.writeObjectStart();
[info]           val x = obj.asInstanceOf[com.github.plokhotnyuk.jsoniter_scala.Primitives];
[info]           var first = true;
[info]           {
[info]             first = writeSep(out, first);
[info]             out.writeObjectField("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             first = writeSep(out, first);
[info]             out.writeObjectField("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             first = writeSep(out, first);
[info]             out.writeObjectField("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             first = writeSep(out, first);
[info]             out.writeObjectField("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             first = writeSep(out, first);
[info]             out.writeObjectField("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             first = writeSep(out, first);
[info]             out.writeObjectField("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             first = writeSep(out, first);
[info]             out.writeObjectField("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: Codec[Primitives] = materialize[Primitives]
[info]                                                       ^
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT.jar ...
[info] Done packaging.
Processing 25 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Compiling 38 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*CodecBenchmark.*Play
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_112, VM 25.112-b15
[info] # VM invoker: /usr/lib/jvm/jdk1.8.0_112/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay
[info] # Run progress: 0.00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201829.561 ops/s
[info] # Warmup Iteration   2: 341316.834 ops/s
[info] # Warmup Iteration   3: 346399.668 ops/s
[info] # Warmup Iteration   4: 343367.460 ops/s
[info] # Warmup Iteration   5: 357877.669 ops/s
[info] Iteration   1: 362324.938 ops/s
[info]                  ·gc.alloc.rate:                   963.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              4184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          780.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3388.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 361255.684 ops/s
[info]                  ·gc.alloc.rate:               960.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          4184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      743.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3237.385 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 354965.234 ops/s
[info]                  ·gc.alloc.rate:                   944.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              4184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1383.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6131.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 355939.262 ops/s
[info]                  ·gc.alloc.rate:               946.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          4184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      643.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2843.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 354631.630 ops/s
[info]                  ·gc.alloc.rate:                   943.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              4184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1198.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5315.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay":
[info]   357823.350 ±(99.9%) 14141.736 ops/s [Average]
[info]   (min, avg, max) = (354631.630, 357823.350, 362324.938), stdev = 3672.564
[info]   CI (99.9%): [343681.614, 371965.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay:·gc.alloc.rate":
[info]   951.609 ±(99.9%) 37.657 MB/sec [Average]
[info]   (min, avg, max) = (943.114, 951.609, 963.609), stdev = 9.779
[info]   CI (99.9%): [913.952, 989.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm":
[info]   4184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4184.001, 4184.001, 4184.001), stdev = 0.001
[info]   CI (99.9%): [4184.001, 4184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay:·gc.churn.PS_Eden_Space":
[info]   949.755 ±(99.9%) 1240.204 MB/sec [Average]
[info]   (min, avg, max) = (643.404, 949.755, 1383.440), stdev = 322.077
[info]   CI (99.9%): [≈ 0, 2189.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay:·gc.churn.PS_Eden_Space.norm":
[info]   4183.388 ±(99.9%) 5579.677 B/op [Average]
[info]   (min, avg, max) = (2843.924, 4183.388, 6131.643), stdev = 1449.024
[info]   CI (99.9%): [≈ 0, 9763.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.165 ±(99.9%) 0.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.362), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readAnyRefsPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.800, 17.000), stdev = 7.155
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_112, VM 25.112-b15
[info] # VM invoker: /usr/lib/jvm/jdk1.8.0_112/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay
[info] # Run progress: 12.50% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67055.843 ops/s
[info] # Warmup Iteration   2: 157156.241 ops/s
[info] # Warmup Iteration   3: 156485.911 ops/s
[info] # Warmup Iteration   4: 154410.424 ops/s
[info] # Warmup Iteration   5: 159756.651 ops/s
[info] Iteration   1: 157619.726 ops/s
[info]                  ·gc.alloc.rate:                   1075.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1708.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17051.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 159047.032 ops/s
[info]                  ·gc.alloc.rate:               1085.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      793.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7851.119 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 160970.190 ops/s
[info]                  ·gc.alloc.rate:                   1098.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          756.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7389.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 158763.557 ops/s
[info]                  ·gc.alloc.rate:                   1083.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1406.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13940.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 158082.090 ops/s
[info]                  ·gc.alloc.rate:                   1078.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1277.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12713.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay":
[info]   158896.519 ±(99.9%) 4958.944 ops/s [Average]
[info]   (min, avg, max) = (157619.726, 158896.519, 160970.190), stdev = 1287.822
[info]   CI (99.9%): [153937.575, 163855.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay:·gc.alloc.rate":
[info]   1084.341 ±(99.9%) 33.897 MB/sec [Average]
[info]   (min, avg, max) = (1075.615, 1084.341, 1098.521), stdev = 8.803
[info]   CI (99.9%): [1050.443, 1118.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay:·gc.alloc.rate.norm":
[info]   10736.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10736.003, 10736.003, 10736.003), stdev = 0.001
[info]   CI (99.9%): [10736.002, 10736.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay:·gc.churn.PS_Eden_Space":
[info]   1188.481 ±(99.9%) 1574.370 MB/sec [Average]
[info]   (min, avg, max) = (756.077, 1188.481, 1708.334), stdev = 408.859
[info]   CI (99.9%): [≈ 0, 2762.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay:·gc.churn.PS_Eden_Space.norm":
[info]   11789.090 ±(99.9%) 15881.175 B/op [Average]
[info]   (min, avg, max) = (7389.246, 11789.090, 17051.341), stdev = 4124.291
[info]   CI (99.9%): [≈ 0, 27670.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.248 ±(99.9%) 0.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.248, 0.416), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readIterablesPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.800, 13.000), stdev = 5.762
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_112, VM 25.112-b15
[info] # VM invoker: /usr/lib/jvm/jdk1.8.0_112/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay
[info] # Run progress: 25.00% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120474.614 ops/s
[info] # Warmup Iteration   2: 227551.309 ops/s
[info] # Warmup Iteration   3: 237500.469 ops/s
[info] # Warmup Iteration   4: 242002.295 ops/s
[info] # Warmup Iteration   5: 242571.705 ops/s
[info] Iteration   1: 243863.638 ops/s
[info]                  ·gc.alloc.rate:               1311.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          8464.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      743.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4795.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 243070.345 ops/s
[info]                  ·gc.alloc.rate:                   1307.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1383.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8954.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 243495.397 ops/s
[info]                  ·gc.alloc.rate:                   1309.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1841.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11898.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 244184.884 ops/s
[info]                  ·gc.alloc.rate:                   1313.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1089.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7022.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 241055.372 ops/s
[info]                  ·gc.alloc.rate:                   1296.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1453.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9488.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay":
[info]   243133.927 ±(99.9%) 4752.107 ops/s [Average]
[info]   (min, avg, max) = (241055.372, 243133.927, 244184.884), stdev = 1234.107
[info]   CI (99.9%): [238381.820, 247886.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay:·gc.alloc.rate":
[info]   1308.033 ±(99.9%) 25.626 MB/sec [Average]
[info]   (min, avg, max) = (1296.834, 1308.033, 1313.734), stdev = 6.655
[info]   CI (99.9%): [1282.407, 1333.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay:·gc.alloc.rate.norm":
[info]   8464.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8464.002, 8464.002, 8464.002), stdev = 0.001
[info]   CI (99.9%): [8464.002, 8464.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay:·gc.churn.PS_Eden_Space":
[info]   1302.424 ±(99.9%) 1585.198 MB/sec [Average]
[info]   (min, avg, max) = (743.362, 1302.424, 1841.614), stdev = 411.671
[info]   CI (99.9%): [≈ 0, 2887.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8431.917 ±(99.9%) 10299.634 B/op [Average]
[info]   (min, avg, max) = (4795.802, 8431.917, 11898.952), stdev = 2674.782
[info]   CI (99.9%): [≈ 0, 18731.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.404 ±(99.9%) 1.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 0.944), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readMapsPlay:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_112, VM 25.112-b15
[info] # VM invoker: /usr/lib/jvm/jdk1.8.0_112/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay
[info] # Run progress: 37.50% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48125.973 ops/s
[info] # Warmup Iteration   2: 149947.804 ops/s
[info] # Warmup Iteration   3: 154577.016 ops/s
[info] # Warmup Iteration   4: 155470.753 ops/s
[info] # Warmup Iteration   5: 157764.783 ops/s
[info] Iteration   1: 160759.964 ops/s
[info]                  ·gc.alloc.rate:                   958.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1599.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15652.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 159945.837 ops/s
[info]                  ·gc.alloc.rate:               954.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          9384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      743.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7312.140 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 159574.462 ops/s
[info]                  ·gc.alloc.rate:               951.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          9384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      708.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6984.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 157635.021 ops/s
[info]                  ·gc.alloc.rate:                   940.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13159.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 158497.880 ops/s
[info]                  ·gc.alloc.rate:               945.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          9384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      613.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6088.873 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay":
[info]   159282.633 ±(99.9%) 4730.956 ops/s [Average]
[info]   (min, avg, max) = (157635.021, 159282.633, 160759.964), stdev = 1228.614
[info]   CI (99.9%): [154551.677, 164013.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay:·gc.alloc.rate":
[info]   950.056 ±(99.9%) 28.255 MB/sec [Average]
[info]   (min, avg, max) = (940.213, 950.056, 958.880), stdev = 7.338
[info]   CI (99.9%): [921.801, 978.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm":
[info]   9384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.003, 9384.003, 9384.003), stdev = 0.001
[info]   CI (99.9%): [9384.003, 9384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay:·gc.churn.PS_Eden_Space":
[info]   996.604 ±(99.9%) 1679.506 MB/sec [Average]
[info]   (min, avg, max) = (613.413, 996.604, 1599.383), stdev = 436.162
[info]   CI (99.9%): [≈ 0, 2676.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay:·gc.churn.PS_Eden_Space.norm":
[info]   9839.306 ±(99.9%) 16496.651 B/op [Average]
[info]   (min, avg, max) = (6088.873, 9839.306, 15652.238), stdev = 4284.128
[info]   CI (99.9%): [≈ 0, 26335.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.207 ±(99.9%) 1.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.207, 0.831), stdev = 0.360
[info]   CI (99.9%): [≈ 0, 1.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.readPrimitivesPlay:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_112, VM 25.112-b15
[info] # VM invoker: /usr/lib/jvm/jdk1.8.0_112/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay
[info] # Run progress: 50.00% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 600401.593 ops/s
[info] # Warmup Iteration   2: 965187.481 ops/s
[info] # Warmup Iteration   3: 949264.249 ops/s
[info] # Warmup Iteration   4: 997773.513 ops/s
[info] # Warmup Iteration   5: 1005309.658 ops/s
[info] Iteration   1: 992865.806 ops/s
[info]                  ·gc.alloc.rate:                   1489.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1383.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2192.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 976218.177 ops/s
[info]                  ·gc.alloc.rate:                   1464.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1256.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2025.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 991730.678 ops/s
[info]                  ·gc.alloc.rate:                   1487.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2654.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 989809.623 ops/s
[info]                  ·gc.alloc.rate:                   1484.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1518.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2413.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 990741.151 ops/s
[info]                  ·gc.alloc.rate:                   1486.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1378.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2189.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay":
[info]   988273.087 ±(99.9%) 26315.788 ops/s [Average]
[info]   (min, avg, max) = (976218.177, 988273.087, 992865.806), stdev = 6834.127
[info]   CI (99.9%): [961957.299, 1014588.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay:·gc.alloc.rate":
[info]   1482.477 ±(99.9%) 39.457 MB/sec [Average]
[info]   (min, avg, max) = (1464.399, 1482.477, 1489.336), stdev = 10.247
[info]   CI (99.9%): [1443.020, 1521.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm":
[info]   2360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2360.000, 2360.000, 2360.000), stdev = 0.001
[info]   CI (99.9%): [2360.000, 2360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay:·gc.churn.PS_Eden_Space":
[info]   1442.230 ±(99.9%) 612.205 MB/sec [Average]
[info]   (min, avg, max) = (1256.826, 1442.230, 1673.321), stdev = 158.988
[info]   CI (99.9%): [830.024, 2054.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay:·gc.churn.PS_Eden_Space.norm":
[info]   2295.131 ±(99.9%) 938.767 B/op [Average]
[info]   (min, avg, max) = (2025.480, 2295.131, 2654.510), stdev = 243.795
[info]   CI (99.9%): [1356.364, 3233.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.284 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.080, 0.201), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeAnyRefsPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 15.000), stdev = 5.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_112, VM 25.112-b15
[info] # VM invoker: /usr/lib/jvm/jdk1.8.0_112/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay
[info] # Run progress: 62.50% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177624.976 ops/s
[info] # Warmup Iteration   2: 335007.305 ops/s
[info] # Warmup Iteration   3: 343589.891 ops/s
[info] # Warmup Iteration   4: 336819.211 ops/s
[info] # Warmup Iteration   5: 350028.426 ops/s
[info] Iteration   1: 348504.724 ops/s
[info]                  ·gc.alloc.rate:               1199.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1523.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6878.793 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 346650.576 ops/s
[info]                  ·gc.alloc.rate:               1193.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      708.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3214.997 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 344651.636 ops/s
[info]                  ·gc.alloc.rate:                   1186.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6018.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 343555.019 ops/s
[info]                  ·gc.alloc.rate:               1182.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1198.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5487.067 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 339859.637 ops/s
[info]                  ·gc.alloc.rate:                   1169.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1597.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7394.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay":
[info]   344644.319 ±(99.9%) 12626.297 ops/s [Average]
[info]   (min, avg, max) = (339859.637, 344644.319, 348504.724), stdev = 3279.009
[info]   CI (99.9%): [332018.022, 357270.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay:·gc.alloc.rate":
[info]   1186.430 ±(99.9%) 43.571 MB/sec [Average]
[info]   (min, avg, max) = (1169.931, 1186.430, 1199.783), stdev = 11.315
[info]   CI (99.9%): [1142.860, 1230.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay:·gc.alloc.rate.norm":
[info]   5416.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5416.001, 5416.001, 5416.001), stdev = 0.001
[info]   CI (99.9%): [5416.001, 5416.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay:·gc.churn.PS_Eden_Space":
[info]   1269.242 ±(99.9%) 1353.930 MB/sec [Average]
[info]   (min, avg, max) = (708.365, 1269.242, 1597.343), stdev = 351.611
[info]   CI (99.9%): [≈ 0, 2623.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay:·gc.churn.PS_Eden_Space.norm":
[info]   5798.841 ±(99.9%) 6249.043 B/op [Average]
[info]   (min, avg, max) = (3214.997, 5798.841, 7394.636), stdev = 1622.857
[info]   CI (99.9%): [≈ 0, 12047.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 0.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.380), stdev = 0.186
[info]   CI (99.9%): [≈ 0, 0.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeIterablesPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.400, 17.000), stdev = 6.107
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_112, VM 25.112-b15
[info] # VM invoker: /usr/lib/jvm/jdk1.8.0_112/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay
[info] # Run progress: 75.00% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126983.855 ops/s
[info] # Warmup Iteration   2: 266824.641 ops/s
[info] # Warmup Iteration   3: 272957.639 ops/s
[info] # Warmup Iteration   4: 269746.784 ops/s
[info] # Warmup Iteration   5: 276378.250 ops/s
[info] Iteration   1: 280144.517 ops/s
[info]                  ·gc.alloc.rate:               1008.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          5664.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      780.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4382.368 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 278760.529 ops/s
[info]                  ·gc.alloc.rate:               1003.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          5664.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1451.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8193.528 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 279145.216 ops/s
[info]                  ·gc.alloc.rate:                   1004.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              5664.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3804.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 279252.707 ops/s
[info]                  ·gc.alloc.rate:                   1005.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              5664.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1256.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7080.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 275939.925 ops/s
[info]                  ·gc.alloc.rate:               993.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          5664.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1142.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6514.157 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay":
[info]   278648.579 ±(99.9%) 6148.621 ops/s [Average]
[info]   (min, avg, max) = (275939.925, 278648.579, 280144.517), stdev = 1596.777
[info]   CI (99.9%): [272499.958, 284797.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay:·gc.alloc.rate":
[info]   1003.174 ±(99.9%) 22.176 MB/sec [Average]
[info]   (min, avg, max) = (993.408, 1003.174, 1008.570), stdev = 5.759
[info]   CI (99.9%): [980.998, 1025.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay:·gc.alloc.rate.norm":
[info]   5664.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5664.002, 5664.002, 5664.002), stdev = 0.001
[info]   CI (99.9%): [5664.001, 5664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay:·gc.churn.PS_Eden_Space":
[info]   1061.310 ±(99.9%) 1255.700 MB/sec [Average]
[info]   (min, avg, max) = (675.089, 1061.310, 1451.739), stdev = 326.101
[info]   CI (99.9%): [≈ 0, 2317.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay:·gc.churn.PS_Eden_Space.norm":
[info]   5995.139 ±(99.9%) 7121.125 B/op [Average]
[info]   (min, avg, max) = (3804.727, 5995.139, 8193.528), stdev = 1849.333
[info]   CI (99.9%): [≈ 0, 13116.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.094 ±(99.9%) 0.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.352), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writeMapsPlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_112, VM 25.112-b15
[info] # VM invoker: /usr/lib/jvm/jdk1.8.0_112/jre/bin/java
[info] # VM options: <none>
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay
[info] # Run progress: 87.50% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106944.634 ops/s
[info] # Warmup Iteration   2: 218876.177 ops/s
[info] # Warmup Iteration   3: 224005.745 ops/s
[info] # Warmup Iteration   4: 222411.366 ops/s
[info] # Warmup Iteration   5: 230895.051 ops/s
[info] Iteration   1: 229028.249 ops/s
[info]                  ·gc.alloc.rate:                   1056.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              7256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1599.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10986.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 228691.544 ops/s
[info]                  ·gc.alloc.rate:               1054.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          7256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      743.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5114.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 226784.862 ops/s
[info]                  ·gc.alloc.rate:                   1045.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              7256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1383.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9597.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 227120.663 ops/s
[info]                  ·gc.alloc.rate:               1047.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          7256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      643.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4456.791 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 226245.170 ops/s
[info]                  ·gc.alloc.rate:                   1043.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              7256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1198.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8332.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay":
[info]   227574.098 ±(99.9%) 4699.437 ops/s [Average]
[info]   (min, avg, max) = (226245.170, 227574.098, 229028.249), stdev = 1220.429
[info]   CI (99.9%): [222874.661, 232273.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay:·gc.alloc.rate":
[info]   1049.605 ±(99.9%) 21.614 MB/sec [Average]
[info]   (min, avg, max) = (1043.499, 1049.605, 1056.285), stdev = 5.613
[info]   CI (99.9%): [1027.992, 1071.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm":
[info]   7256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7256.002, 7256.002, 7256.002), stdev = 0.001
[info]   CI (99.9%): [7256.002, 7256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay:·gc.churn.PS_Eden_Space":
[info]   1113.585 ±(99.9%) 1580.789 MB/sec [Average]
[info]   (min, avg, max) = (643.409, 1113.585, 1599.393), stdev = 410.526
[info]   CI (99.9%): [≈ 0, 2694.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay:·gc.churn.PS_Eden_Space.norm":
[info]   7697.412 ±(99.9%) 10892.644 B/op [Average]
[info]   (min, avg, max) = (4456.791, 7697.412, 10986.804), stdev = 2828.785
[info]   CI (99.9%): [≈ 0, 18590.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0.347 ±(99.9%) 1.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.347, 0.724), stdev = 0.363
[info]   CI (99.9%): [≈ 0, 1.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.CodecBenchmark.writePrimitivesPlay:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.200, 7.000), stdev = 2.280
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # Run complete. Total time: 00:02:08
[info] Benchmark                                                             Mode  Cnt       Score       Error   Units
[info] CodecBenchmark.readAnyRefsPlay                                       thrpt    5  357823.350 ± 14141.736   ops/s
[info] CodecBenchmark.readAnyRefsPlay:·gc.alloc.rate                        thrpt    5     951.609 ±    37.657  MB/sec
[info] CodecBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm                   thrpt    5    4184.001 ±     0.001    B/op
[info] CodecBenchmark.readAnyRefsPlay:·gc.churn.PS_Eden_Space               thrpt    5     949.755 ±  1240.204  MB/sec
[info] CodecBenchmark.readAnyRefsPlay:·gc.churn.PS_Eden_Space.norm          thrpt    5    4183.388 ±  5579.677    B/op
[info] CodecBenchmark.readAnyRefsPlay:·gc.churn.PS_Survivor_Space           thrpt    5       0.037 ±     0.143  MB/sec
[info] CodecBenchmark.readAnyRefsPlay:·gc.churn.PS_Survivor_Space.norm      thrpt    5       0.165 ±     0.627    B/op
[info] CodecBenchmark.readAnyRefsPlay:·gc.count                             thrpt    5       7.000              counts
[info] CodecBenchmark.readAnyRefsPlay:·gc.time                              thrpt    5      29.000                  ms
[info] CodecBenchmark.readIterablesPlay                                     thrpt    5  158896.519 ±  4958.944   ops/s
[info] CodecBenchmark.readIterablesPlay:·gc.alloc.rate                      thrpt    5    1084.341 ±    33.897  MB/sec
[info] CodecBenchmark.readIterablesPlay:·gc.alloc.rate.norm                 thrpt    5   10736.003 ±     0.001    B/op
[info] CodecBenchmark.readIterablesPlay:·gc.churn.PS_Eden_Space             thrpt    5    1188.481 ±  1574.370  MB/sec
[info] CodecBenchmark.readIterablesPlay:·gc.churn.PS_Eden_Space.norm        thrpt    5   11789.090 ± 15881.175    B/op
[info] CodecBenchmark.readIterablesPlay:·gc.churn.PS_Survivor_Space         thrpt    5       0.025 ±     0.067  MB/sec
[info] CodecBenchmark.readIterablesPlay:·gc.churn.PS_Survivor_Space.norm    thrpt    5       0.248 ±     0.668    B/op
[info] CodecBenchmark.readIterablesPlay:·gc.count                           thrpt    5       8.000              counts
[info] CodecBenchmark.readIterablesPlay:·gc.time                            thrpt    5      34.000                  ms
[info] CodecBenchmark.readMapsPlay                                          thrpt    5  243133.927 ±  4752.107   ops/s
[info] CodecBenchmark.readMapsPlay:·gc.alloc.rate                           thrpt    5    1308.033 ±    25.626  MB/sec
[info] CodecBenchmark.readMapsPlay:·gc.alloc.rate.norm                      thrpt    5    8464.002 ±     0.001    B/op
[info] CodecBenchmark.readMapsPlay:·gc.churn.PS_Eden_Space                  thrpt    5    1302.424 ±  1585.198  MB/sec
[info] CodecBenchmark.readMapsPlay:·gc.churn.PS_Eden_Space.norm             thrpt    5    8431.917 ± 10299.634    B/op
[info] CodecBenchmark.readMapsPlay:·gc.churn.PS_Survivor_Space              thrpt    5       0.062 ±     0.220  MB/sec
[info] CodecBenchmark.readMapsPlay:·gc.churn.PS_Survivor_Space.norm         thrpt    5       0.404 ±     1.420    B/op
[info] CodecBenchmark.readMapsPlay:·gc.count                                thrpt    5      11.000              counts
[info] CodecBenchmark.readMapsPlay:·gc.time                                 thrpt    5      19.000                  ms
[info] CodecBenchmark.readPrimitivesPlay                                    thrpt    5  159282.633 ±  4730.956   ops/s
[info] CodecBenchmark.readPrimitivesPlay:·gc.alloc.rate                     thrpt    5     950.056 ±    28.255  MB/sec
[info] CodecBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm                thrpt    5    9384.003 ±     0.001    B/op
[info] CodecBenchmark.readPrimitivesPlay:·gc.churn.PS_Eden_Space            thrpt    5     996.604 ±  1679.506  MB/sec
[info] CodecBenchmark.readPrimitivesPlay:·gc.churn.PS_Eden_Space.norm       thrpt    5    9839.306 ± 16496.651    B/op
[info] CodecBenchmark.readPrimitivesPlay:·gc.churn.PS_Survivor_Space        thrpt    5       0.021 ±     0.139  MB/sec
[info] CodecBenchmark.readPrimitivesPlay:·gc.churn.PS_Survivor_Space.norm   thrpt    5       0.207 ±     1.386    B/op
[info] CodecBenchmark.readPrimitivesPlay:·gc.count                          thrpt    5       7.000              counts
[info] CodecBenchmark.readPrimitivesPlay:·gc.time                           thrpt    5      11.000                  ms
[info] CodecBenchmark.writeAnyRefsPlay                                      thrpt    5  988273.087 ± 26315.788   ops/s
[info] CodecBenchmark.writeAnyRefsPlay:·gc.alloc.rate                       thrpt    5    1482.477 ±    39.457  MB/sec
[info] CodecBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm                  thrpt    5    2360.000 ±     0.001    B/op
[info] CodecBenchmark.writeAnyRefsPlay:·gc.churn.PS_Eden_Space              thrpt    5    1442.230 ±   612.205  MB/sec
[info] CodecBenchmark.writeAnyRefsPlay:·gc.churn.PS_Eden_Space.norm         thrpt    5    2295.131 ±   938.767    B/op
[info] CodecBenchmark.writeAnyRefsPlay:·gc.churn.PS_Survivor_Space          thrpt    5       0.050 ±     0.176  MB/sec
[info] CodecBenchmark.writeAnyRefsPlay:·gc.churn.PS_Survivor_Space.norm     thrpt    5       0.080 ±     0.284    B/op
[info] CodecBenchmark.writeAnyRefsPlay:·gc.count                            thrpt    5      10.000              counts
[info] CodecBenchmark.writeAnyRefsPlay:·gc.time                             thrpt    5      35.000                  ms
[info] CodecBenchmark.writeIterablesPlay                                    thrpt    5  344644.319 ± 12626.297   ops/s
[info] CodecBenchmark.writeIterablesPlay:·gc.alloc.rate                     thrpt    5    1186.430 ±    43.571  MB/sec
[info] CodecBenchmark.writeIterablesPlay:·gc.alloc.rate.norm                thrpt    5    5416.001 ±     0.001    B/op
[info] CodecBenchmark.writeIterablesPlay:·gc.churn.PS_Eden_Space            thrpt    5    1269.242 ±  1353.930  MB/sec
[info] CodecBenchmark.writeIterablesPlay:·gc.churn.PS_Eden_Space.norm       thrpt    5    5798.841 ±  6249.043    B/op
[info] CodecBenchmark.writeIterablesPlay:·gc.churn.PS_Survivor_Space        thrpt    5       0.029 ±     0.156  MB/sec
[info] CodecBenchmark.writeIterablesPlay:·gc.churn.PS_Survivor_Space.norm   thrpt    5       0.134 ±     0.717    B/op
[info] CodecBenchmark.writeIterablesPlay:·gc.count                          thrpt    5      10.000              counts
[info] CodecBenchmark.writeIterablesPlay:·gc.time                           thrpt    5      37.000                  ms
[info] CodecBenchmark.writeMapsPlay                                         thrpt    5  278648.579 ±  6148.621   ops/s
[info] CodecBenchmark.writeMapsPlay:·gc.alloc.rate                          thrpt    5    1003.174 ±    22.176  MB/sec
[info] CodecBenchmark.writeMapsPlay:·gc.alloc.rate.norm                     thrpt    5    5664.002 ±     0.001    B/op
[info] CodecBenchmark.writeMapsPlay:·gc.churn.PS_Eden_Space                 thrpt    5    1061.310 ±  1255.700  MB/sec
[info] CodecBenchmark.writeMapsPlay:·gc.churn.PS_Eden_Space.norm            thrpt    5    5995.139 ±  7121.125    B/op
[info] CodecBenchmark.writeMapsPlay:·gc.churn.PS_Survivor_Space             thrpt    5       0.017 ±     0.105  MB/sec
[info] CodecBenchmark.writeMapsPlay:·gc.churn.PS_Survivor_Space.norm        thrpt    5       0.094 ±     0.589    B/op
[info] CodecBenchmark.writeMapsPlay:·gc.count                               thrpt    5       8.000              counts
[info] CodecBenchmark.writeMapsPlay:·gc.time                                thrpt    5      22.000                  ms
[info] CodecBenchmark.writePrimitivesPlay                                   thrpt    5  227574.098 ±  4699.437   ops/s
[info] CodecBenchmark.writePrimitivesPlay:·gc.alloc.rate                    thrpt    5    1049.605 ±    21.614  MB/sec
[info] CodecBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm               thrpt    5    7256.002 ±     0.001    B/op
[info] CodecBenchmark.writePrimitivesPlay:·gc.churn.PS_Eden_Space           thrpt    5    1113.585 ±  1580.789  MB/sec
[info] CodecBenchmark.writePrimitivesPlay:·gc.churn.PS_Eden_Space.norm      thrpt    5    7697.412 ± 10892.644    B/op
[info] CodecBenchmark.writePrimitivesPlay:·gc.churn.PS_Survivor_Space       thrpt    5       0.050 ±     0.201  MB/sec
[info] CodecBenchmark.writePrimitivesPlay:·gc.churn.PS_Survivor_Space.norm  thrpt    5       0.347 ±     1.398    B/op
[info] CodecBenchmark.writePrimitivesPlay:·gc.count                         thrpt    5       8.000              counts
[info] CodecBenchmark.writePrimitivesPlay:·gc.time                          thrpt    5      16.000                  ms
[success] Total time: 150 s, completed Oct 11, 2017 6:43:32 PM
