[info] Loading settings from build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Nov 30, 2017, 9:11:42 AM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonWriter.scala:208:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] one warning found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.1-SNAPSHOT.jar ...
[info] Compiling 6 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:32:62: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -854843732 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1882203379 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -739937554 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1690673754 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -553105946 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 14144516 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case -11755678 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:27:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:28:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:29:18: local val v3 in value format is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:61:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:63:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1868115770 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 135249149 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:65:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Array[Int]];
[info]             do 
[info]               x.+=(d2(in, v2))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[scala.math.BigInt];
[info]             do 
[info]               x.+=(in.readBigInt(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1396692260 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             e2(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeObjectField(c, "aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeObjectField(c, "a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:67:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -311899171 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 395882128 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:69:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:71:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:73:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:75:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readObjectFieldAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readObjectFieldAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:77:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readObjectFieldAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:79:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = 0.toByte;
[info]           var _s: Short = 0.toShort;
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = 0.toChar;
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -986815646 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1128364876 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 977778859 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2108804597 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:81:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:83:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.A): com.github.plokhotnyuk.jsoniter_scala.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.A(a = _a)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.B): com.github.plokhotnyuk.jsoniter_scala.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.B(b = _b)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.C): com.github.plokhotnyuk.jsoniter_scala.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1283270383 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.C(l = _l, r = _r)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToObjectField("type");
[info]             val l = in.readValueAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 1042714897 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 1249097774 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case -251352298 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.A, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("A")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.B, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("B")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.C, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("C")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]         case _ => out.encodeError("unexpected type: ".+(x.getClass))
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:284:54: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1125392404 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -758822041 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1567327321 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -2118257363 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -560369018 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d11(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d11(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredObjectFieldError(r4, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1994874891 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d10(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -422319283 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1231204836 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1565337738 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -903425777 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1481771385 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1617333980 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1034472816 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1096575944 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1766340764 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 656981833 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1692587979 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -761280539 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1523152584 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1042811670 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1322051899 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 430342393 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1547487212 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -738485249 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -869817957 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1479864213 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 892046337 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1815398146 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1854913126 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1700955824 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2002464660 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 196017265 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1725122937 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1346866717 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1251129302 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1343246339 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 929396071 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 356376530 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredObjectFieldError(r3, req0, req1)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredObjectFieldError(r5, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -350359215 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d12(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:134:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:135:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:137:18: local val v4 in value format is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:83:51: unreachable code
[warn]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[warn]                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CustomPlayJsonFormats.scala:65:45: Reference to uninitialized value v14
[warn]   implicit val v13: OFormat[C] = Json.format[C]
[warn]                                             ^
[warn] 8 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT.jar ...
Processing 290 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 107 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*JsonCodecMakerBenchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_335f9fe6/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce
[info] # Run progress: 0.00% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 844083.954 ops/s
[info] # Warmup Iteration   2: 1181140.712 ops/s
[info] # Warmup Iteration   3: 1370665.170 ops/s
[info] # Warmup Iteration   4: 1427547.582 ops/s
[info] # Warmup Iteration   5: 1387906.808 ops/s
[info] Iteration   1: 1422907.957 ops/s
[info]                  ·gc.alloc.rate:            2169.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2258.967 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1408464.821 ops/s
[info]                  ·gc.alloc.rate:                                  2147.699 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2400.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2282.165 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 1399182.470 ops/s
[info]                  ·gc.alloc.rate:                                  2133.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2400.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2680.186 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 1399172.223 ops/s
[info]                  ·gc.alloc.rate:                                  2133.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2400.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2297.309 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 1397608.744 ops/s
[info]                  ·gc.alloc.rate:                                  2131.465 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2400.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2299.741 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce":
[info]   1405467.243 ±(99.9%) 41025.429 ops/s [Average]
[info]   (min, avg, max) = (1397608.744, 1405467.243, 1422907.957), stdev = 10654.174
[info]   CI (99.9%): [1364441.814, 1446492.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate":
[info]   2143.220 ±(99.9%) 62.340 MB/sec [Average]
[info]   (min, avg, max) = (2131.465, 2143.220, 2169.762), stdev = 16.190
[info]   CI (99.9%): [2080.879, 2205.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm":
[info]   2400.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2400.000, 2400.000, 2400.000), stdev = 0.001
[info]   CI (99.9%): [2400.000, 2400.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen":
[info]   2110.385 ±(99.9%) 586.558 MB/sec [Average]
[info]   (min, avg, max) = (2042.117, 2110.385, 2382.876), stdev = 152.327
[info]   CI (99.9%): [1523.827, 2696.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2363.673 ±(99.9%) 684.177 B/op [Average]
[info]   (min, avg, max) = (2258.967, 2363.673, 2680.186), stdev = 177.679
[info]   CI (99.9%): [1679.496, 3047.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.600, 12.000), stdev = 2.074
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson
[info] # Run progress: 0.97% complete, ETA 00:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58806.176 ops/s
[info] # Warmup Iteration   2: 155469.748 ops/s
[info] # Warmup Iteration   3: 155291.104 ops/s
[info] # Warmup Iteration   4: 160232.590 ops/s
[info] # Warmup Iteration   5: 157614.580 ops/s
[info] Iteration   1: 158680.003 ops/s
[info]                  ·gc.alloc.rate:            287.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       2856.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3336.594 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 158363.625 ops/s
[info]                  ·gc.alloc.rate:            287.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       2856.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3343.272 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 158729.331 ops/s
[info]                  ·gc.alloc.rate:            287.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       2856.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3335.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 159356.751 ops/s
[info]                  ·gc.alloc.rate:            289.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       2856.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3322.401 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 158781.014 ops/s
[info]                  ·gc.alloc.rate:            288.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       2856.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3334.241 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson":
[info]   158782.145 ±(99.9%) 1386.438 ops/s [Average]
[info]   (min, avg, max) = (158363.625, 158782.145, 159356.751), stdev = 360.054
[info]   CI (99.9%): [157395.706, 160168.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate":
[info]   288.091 ±(99.9%) 2.547 MB/sec [Average]
[info]   (min, avg, max) = (287.324, 288.091, 289.148), stdev = 0.661
[info]   CI (99.9%): [285.544, 290.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm":
[info]   2856.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2856.003, 2856.003, 2856.003), stdev = 0.001
[info]   CI (99.9%): [2856.002, 2856.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen":
[info]   336.346 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (336.325, 336.346, 336.367), stdev = 0.015
[info]   CI (99.9%): [336.288, 336.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3334.398 ±(99.9%) 29.117 B/op [Average]
[info]   (min, avg, max) = (3322.401, 3334.398, 3343.272), stdev = 7.562
[info]   CI (99.9%): [3305.281, 3363.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter
[info] # Run progress: 1.94% complete, ETA 00:27:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302032.653 ops/s
[info] # Warmup Iteration   2: 307667.358 ops/s
[info] # Warmup Iteration   3: 310447.035 ops/s
[info] # Warmup Iteration   4: 302766.669 ops/s
[info] # Warmup Iteration   5: 299498.436 ops/s
[info] Iteration   1: 310846.433 ops/s
[info]                  ·gc.alloc.rate:      205.360 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 308784.980 ops/s
[info]                  ·gc.alloc.rate:            204.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1714.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 312446.064 ops/s
[info]                  ·gc.alloc.rate:      206.499 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 309293.688 ops/s
[info]                  ·gc.alloc.rate:            204.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1711.742 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 309034.135 ops/s
[info]                  ·gc.alloc.rate:            204.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1713.254 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter":
[info]   310081.060 ±(99.9%) 5957.578 ops/s [Average]
[info]   (min, avg, max) = (308784.980, 310081.060, 312446.064), stdev = 1547.164
[info]   CI (99.9%): [304123.482, 316038.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate":
[info]   204.907 ±(99.9%) 3.948 MB/sec [Average]
[info]   (min, avg, max) = (204.032, 204.907, 206.499), stdev = 1.025
[info]   CI (99.9%): [200.959, 208.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm":
[info]   1040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1040.001, 1040.001, 1040.001), stdev = 0.001
[info]   CI (99.9%): [1040.001, 1040.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.854 ±(99.9%) 709.546 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.854, 336.463), stdev = 184.267
[info]   CI (99.9%): [≈ 0, 911.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1027.929 ±(99.9%) 3613.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1027.929, 1714.647), stdev = 938.367
[info]   CI (99.9%): [≈ 0, 4641.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless
[info] # Run progress: 2.91% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 722015.463 ops/s
[info] # Warmup Iteration   2: 747567.753 ops/s
[info] # Warmup Iteration   3: 747054.422 ops/s
[info] # Warmup Iteration   4: 718939.240 ops/s
[info] # Warmup Iteration   5: 725661.295 ops/s
[info] Iteration   1: 736400.913 ops/s
[info]                  ·gc.alloc.rate:            258.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 718.942 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 681320.827 ops/s
[info]                  ·gc.alloc.rate:            238.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 777.100 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 633499.343 ops/s
[info]                  ·gc.alloc.rate:            222.174 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 835.744 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 743805.369 ops/s
[info]                  ·gc.alloc.rate:      260.832 MB/sec
[info]                  ·gc.alloc.rate.norm: 552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 727304.101 ops/s
[info]                  ·gc.alloc.rate:            255.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 727.978 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless":
[info]   704466.111 ±(99.9%) 179178.793 ops/s [Average]
[info]   (min, avg, max) = (633499.343, 704466.111, 743805.369), stdev = 46532.164
[info]   CI (99.9%): [525287.318, 883644.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate":
[info]   247.045 ±(99.9%) 62.788 MB/sec [Average]
[info]   (min, avg, max) = (222.174, 247.045, 260.832), stdev = 16.306
[info]   CI (99.9%): [184.257, 309.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm":
[info]   552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (552.001, 552.001, 552.001), stdev = 0.001
[info]   CI (99.9%): [552.000, 552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   269.088 ±(99.9%) 579.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.088, 336.379), stdev = 150.425
[info]   CI (99.9%): [≈ 0, 848.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   611.953 ±(99.9%) 1329.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 611.953, 835.744), stdev = 345.236
[info]   CI (99.9%): [≈ 0, 1941.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump
[info] # Run progress: 3.88% complete, ETA 00:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2725584.420 ops/s
[info] # Warmup Iteration   2: 2452293.058 ops/s
[info] # Warmup Iteration   3: 2804229.710 ops/s
[info] # Warmup Iteration   4: 2846832.433 ops/s
[info] # Warmup Iteration   5: 2828993.373 ops/s
[info] Iteration   1: 2806352.080 ops/s
[info]                  ·gc.alloc.rate:            313.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2832892.893 ops/s
[info]                  ·gc.alloc.rate:            316.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.894 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2847376.954 ops/s
[info]                  ·gc.alloc.rate:            318.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2831429.931 ops/s
[info]                  ·gc.alloc.rate:            316.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.990 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2856824.013 ops/s
[info]                  ·gc.alloc.rate:            319.497 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.326 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump":
[info]   2834975.174 ±(99.9%) 73751.696 ops/s [Average]
[info]   (min, avg, max) = (2806352.080, 2834975.174, 2856824.013), stdev = 19153.081
[info]   CI (99.9%): [2761223.478, 2908726.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   317.014 ±(99.9%) 8.375 MB/sec [Average]
[info]   (min, avg, max) = (313.767, 317.014, 319.497), stdev = 2.175
[info]   CI (99.9%): [308.639, 325.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   336.387 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (336.345, 336.387, 336.426), stdev = 0.032
[info]   CI (99.9%): [336.263, 336.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   186.763 ±(99.9%) 4.882 B/op [Average]
[info]   (min, avg, max) = (185.326, 186.763, 188.665), stdev = 1.268
[info]   CI (99.9%): [181.880, 191.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay
[info] # Run progress: 4.85% complete, ETA 00:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38248.533 ops/s
[info] # Warmup Iteration   2: 114460.340 ops/s
[info] # Warmup Iteration   3: 116646.917 ops/s
[info] # Warmup Iteration   4: 120672.195 ops/s
[info] # Warmup Iteration   5: 121502.261 ops/s
[info] Iteration   1: 119069.132 ops/s
[info]                  ·gc.alloc.rate:            764.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       10112.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13339.765 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 119664.317 ops/s
[info]                  ·gc.alloc.rate:            768.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       10112.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8849.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 119905.087 ops/s
[info]                  ·gc.alloc.rate:                   770.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              10112.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8874.382 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 121581.853 ops/s
[info]                  ·gc.alloc.rate:                                  781.345 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10112.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.208 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.692 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13219.192 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 121295.024 ops/s
[info]                  ·gc.alloc.rate:                                  779.443 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10112.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8833.862 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay":
[info]   120303.083 ±(99.9%) 4177.664 ops/s [Average]
[info]   (min, avg, max) = (119069.132, 120303.083, 121581.853), stdev = 1084.926
[info]   CI (99.9%): [116125.419, 124480.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate":
[info]   772.990 ±(99.9%) 27.222 MB/sec [Average]
[info]   (min, avg, max) = (764.975, 772.990, 781.345), stdev = 7.069
[info]   CI (99.9%): [745.768, 800.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm":
[info]   10112.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10112.003, 10112.003, 10112.004), stdev = 0.001
[info]   CI (99.9%): [10112.003, 10112.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.208), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.544 ±(99.9%) 4.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.544, 2.692), stdev = 1.201
[info]   CI (99.9%): [≈ 0, 5.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen":
[info]   812.078 ±(99.9%) 714.618 MB/sec [Average]
[info]   (min, avg, max) = (672.807, 812.078, 1021.434), stdev = 185.584
[info]   CI (99.9%): [97.460, 1526.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10623.248 ±(99.9%) 9338.635 B/op [Average]
[info]   (min, avg, max) = (8833.862, 10623.248, 13339.765), stdev = 2425.214
[info]   CI (99.9%): [1284.614, 19961.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   10.492 ±(99.9%) 90.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.492, 52.459), stdev = 23.461
[info]   CI (99.9%): [≈ 0, 100.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 17.000), stdev = 5.874
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce
[info] # Run progress: 5.83% complete, ETA 00:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328316.889 ops/s
[info] # Warmup Iteration   2: 469642.734 ops/s
[info] # Warmup Iteration   3: 476698.395 ops/s
[info] # Warmup Iteration   4: 469518.813 ops/s
[info] # Warmup Iteration   5: 475274.498 ops/s
[info] Iteration   1: 475943.293 ops/s
[info]                  ·gc.alloc.rate:                                  1228.821 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3376.953 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 477934.076 ops/s
[info]                  ·gc.alloc.rate:            1233.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4483.728 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 489299.960 ops/s
[info]                  ·gc.alloc.rate:            1263.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4379.530 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 489606.363 ops/s
[info]                  ·gc.alloc.rate:                                  1264.042 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3282.675 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 489766.324 ops/s
[info]                  ·gc.alloc.rate:                                  1264.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4375.489 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce":
[info]   484510.003 ±(99.9%) 26759.677 ops/s [Average]
[info]   (min, avg, max) = (475943.293, 484510.003, 489766.324), stdev = 6949.403
[info]   CI (99.9%): [457750.326, 511269.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate":
[info]   1250.923 ±(99.9%) 69.037 MB/sec [Average]
[info]   (min, avg, max) = (1228.821, 1250.923, 1264.339), stdev = 17.929
[info]   CI (99.9%): [1181.886, 1319.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm":
[info]   4064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4064.001, 4064.001, 4064.001), stdev = 0.001
[info]   CI (99.9%): [4064.001, 4064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1225.260 ±(99.9%) 717.819 MB/sec [Average]
[info]   (min, avg, max) = (1021.023, 1225.260, 1361.556), stdev = 186.415
[info]   CI (99.9%): [507.441, 1943.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3979.675 ±(99.9%) 2294.047 B/op [Average]
[info]   (min, avg, max) = (3282.675, 3979.675, 4483.728), stdev = 595.757
[info]   CI (99.9%): [1685.629, 6273.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson
[info] # Run progress: 6.80% complete, ETA 00:26:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 628059.136 ops/s
[info] # Warmup Iteration   2: 1015575.303 ops/s
[info] # Warmup Iteration   3: 996312.125 ops/s
[info] # Warmup Iteration   4: 1003486.384 ops/s
[info] # Warmup Iteration   5: 1001162.575 ops/s
[info] Iteration   1: 990257.088 ops/s
[info]                  ·gc.alloc.rate:            704.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1603.938 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 1004279.428 ops/s
[info]                  ·gc.alloc.rate:            714.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1054.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1000913.573 ops/s
[info]                  ·gc.alloc.rate:                   712.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1063.126 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 992304.282 ops/s
[info]                  ·gc.alloc.rate:                                  706.111 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1079.763 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 1004595.037 ops/s
[info]                  ·gc.alloc.rate:                                  714.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1066.585 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson":
[info]   998469.881 ±(99.9%) 26024.242 ops/s [Average]
[info]   (min, avg, max) = (990257.088, 998469.881, 1004595.037), stdev = 6758.413
[info]   CI (99.9%): [972445.639, 1024494.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate":
[info]   710.477 ±(99.9%) 18.522 MB/sec [Average]
[info]   (min, avg, max) = (704.606, 710.477, 714.815), stdev = 4.810
[info]   CI (99.9%): [691.955, 728.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen":
[info]   743.866 ±(99.9%) 570.992 MB/sec [Average]
[info]   (min, avg, max) = (672.731, 743.866, 1009.057), stdev = 148.285
[info]   CI (99.9%): [172.874, 1314.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1173.555 ±(99.9%) 927.097 B/op [Average]
[info]   (min, avg, max) = (1054.365, 1173.555, 1603.938), stdev = 240.764
[info]   CI (99.9%): [246.458, 2100.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.257 ±(99.9%) 10.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.257, 6.284), stdev = 2.811
[info]   CI (99.9%): [≈ 0, 12.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.200, 18.000), stdev = 5.762
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter
[info] # Run progress: 7.77% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2156684.991 ops/s
[info] # Warmup Iteration   2: 2805834.226 ops/s
[info] # Warmup Iteration   3: 2813537.559 ops/s
[info] # Warmup Iteration   4: 2813304.101 ops/s
[info] # Warmup Iteration   5: 2822728.344 ops/s
[info] Iteration   1: 2805543.452 ops/s
[info]                  ·gc.alloc.rate:            185.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.715 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2836573.042 ops/s
[info]                  ·gc.alloc.rate:      187.327 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2791158.228 ops/s
[info]                  ·gc.alloc.rate:            184.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2817977.793 ops/s
[info]                  ·gc.alloc.rate:      186.201 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2795525.052 ops/s
[info]                  ·gc.alloc.rate:            184.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.384 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter":
[info]   2809355.513 ±(99.9%) 70795.642 ops/s [Average]
[info]   (min, avg, max) = (2791158.228, 2809355.513, 2836573.042), stdev = 18385.403
[info]   CI (99.9%): [2738559.871, 2880151.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate":
[info]   185.586 ±(99.9%) 4.604 MB/sec [Average]
[info]   (min, avg, max) = (184.377, 185.586, 187.327), stdev = 1.196
[info]   CI (99.9%): [180.982, 190.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.780 ±(99.9%) 709.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.780, 336.345), stdev = 184.199
[info]   CI (99.9%): [≈ 0, 911.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   113.556 ±(99.9%) 399.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.556, 189.684), stdev = 103.663
[info]   CI (99.9%): [≈ 0, 512.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay
[info] # Run progress: 8.74% complete, ETA 00:25:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51254.770 ops/s
[info] # Warmup Iteration   2: 102674.588 ops/s
[info] # Warmup Iteration   3: 100241.847 ops/s
[info] # Warmup Iteration   4: 101668.672 ops/s
[info] # Warmup Iteration   5: 103687.106 ops/s
[info] Iteration   1: 102885.625 ops/s
[info]                  ·gc.alloc.rate:            867.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       13264.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15437.768 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 104110.771 ops/s
[info]                  ·gc.alloc.rate:                   877.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              13264.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10220.922 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 60.419 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 105121.071 ops/s
[info]                  ·gc.alloc.rate:                                  886.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13264.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15289.261 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 105156.940 ops/s
[info]                  ·gc.alloc.rate:            886.375 MB/sec
[info]                  ·gc.alloc.rate.norm:       13264.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15283.591 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 105345.644 ops/s
[info]                  ·gc.alloc.rate:                                  887.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13264.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10171.170 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay":
[info]   104524.010 ±(99.9%) 3986.503 ops/s [Average]
[info]   (min, avg, max) = (102885.625, 104524.010, 105345.644), stdev = 1035.282
[info]   CI (99.9%): [100537.507, 108510.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate":
[info]   880.970 ±(99.9%) 33.724 MB/sec [Average]
[info]   (min, avg, max) = (867.076, 880.970, 887.802), stdev = 8.758
[info]   CI (99.9%): [847.246, 914.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm":
[info]   13264.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13264.004, 13264.004, 13264.004), stdev = 0.001
[info]   CI (99.9%): [13264.003, 13264.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.220 ±(99.9%) 1.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.220, 1.082), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen":
[info]   881.773 ±(99.9%) 714.834 MB/sec [Average]
[info]   (min, avg, max) = (676.201, 881.773, 1021.362), stdev = 185.640
[info]   CI (99.9%): [166.939, 1596.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   13280.543 ±(99.9%) 10845.263 B/op [Average]
[info]   (min, avg, max) = (10171.170, 13280.543, 15437.768), stdev = 2816.480
[info]   CI (99.9%): [2435.279, 24125.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   12.084 ±(99.9%) 104.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.084, 60.419), stdev = 27.020
[info]   CI (99.9%): [≈ 0, 116.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 17.000), stdev = 5.339
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce
[info] # Run progress: 9.71% complete, ETA 00:25:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 767036.845 ops/s
[info] # Warmup Iteration   2: 1097956.442 ops/s
[info] # Warmup Iteration   3: 1080929.929 ops/s
[info] # Warmup Iteration   4: 1093409.024 ops/s
[info] # Warmup Iteration   5: 1099142.334 ops/s
[info] Iteration   1: 1116880.285 ops/s
[info]                  ·gc.alloc.rate:            1753.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.555 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2398.293 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1110135.301 ops/s
[info]                  ·gc.alloc.rate:                                  1743.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2412.914 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 1103605.239 ops/s
[info]                  ·gc.alloc.rate:                                  1733.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2427.130 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 1088161.303 ops/s
[info]                  ·gc.alloc.rate:                                  1708.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2461.670 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   5: 1097165.623 ops/s
[info]                  ·gc.alloc.rate:            1723.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2441.415 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce":
[info]   1103189.550 ±(99.9%) 42964.817 ops/s [Average]
[info]   (min, avg, max) = (1088161.303, 1103189.550, 1116880.285), stdev = 11157.826
[info]   CI (99.9%): [1060224.733, 1146154.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate":
[info]   1732.433 ±(99.9%) 67.021 MB/sec [Average]
[info]   (min, avg, max) = (1708.998, 1732.433, 1753.849), stdev = 17.405
[info]   CI (99.9%): [1665.412, 1799.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm":
[info]   2472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.000, 2472.000, 2472.000), stdev = 0.001
[info]   CI (99.9%): [2472.000, 2472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1701.657 ±(99.9%) 0.539 MB/sec [Average]
[info]   (min, avg, max) = (1701.526, 1701.657, 1701.856), stdev = 0.140
[info]   CI (99.9%): [1701.118, 1702.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2428.284 ±(99.9%) 94.793 B/op [Average]
[info]   (min, avg, max) = (2398.293, 2428.284, 2461.670), stdev = 24.617
[info]   CI (99.9%): [2333.491, 2523.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 15.000), stdev = 3.782
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson
[info] # Run progress: 10.68% complete, ETA 00:25:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 949098.078 ops/s
[info] # Warmup Iteration   2: 1524830.516 ops/s
[info] # Warmup Iteration   3: 1562844.501 ops/s
[info] # Warmup Iteration   4: 1552699.606 ops/s
[info] # Warmup Iteration   5: 1552884.051 ops/s
[info] Iteration   1: 1568825.466 ops/s
[info]                  ·gc.alloc.rate:                                  1100.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.175 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1361.200 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.009 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 1569994.204 ops/s
[info]                  ·gc.alloc.rate:                                  1101.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1023.665 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1557068.529 ops/s
[info]                  ·gc.alloc.rate:            1092.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1032.186 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1565725.862 ops/s
[info]                  ·gc.alloc.rate:                                  1098.099 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1026.520 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1548984.227 ops/s
[info]                  ·gc.alloc.rate:            1086.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1383.484 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson":
[info]   1562119.658 ±(99.9%) 34335.271 ops/s [Average]
[info]   (min, avg, max) = (1548984.227, 1562119.658, 1569994.204), stdev = 8916.761
[info]   CI (99.9%): [1527784.387, 1596454.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate":
[info]   1095.611 ±(99.9%) 23.884 MB/sec [Average]
[info]   (min, avg, max) = (1086.498, 1095.611, 1101.170), stdev = 6.203
[info]   CI (99.9%): [1071.727, 1119.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.175), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.175), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1156.238 ±(99.9%) 712.923 MB/sec [Average]
[info]   (min, avg, max) = (1021.032, 1156.238, 1361.551), stdev = 185.144
[info]   CI (99.9%): [443.315, 1869.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1165.411 ±(99.9%) 728.121 B/op [Average]
[info]   (min, avg, max) = (1023.665, 1165.411, 1383.484), stdev = 189.091
[info]   CI (99.9%): [437.290, 1893.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.802 ±(99.9%) 6.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.802, 4.009), stdev = 1.793
[info]   CI (99.9%): [≈ 0, 7.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter
[info] # Run progress: 11.65% complete, ETA 00:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6758118.067 ops/s
[info] # Warmup Iteration   2: 6739173.200 ops/s
[info] # Warmup Iteration   3: 7133957.524 ops/s
[info] # Warmup Iteration   4: 7144338.876 ops/s
[info] # Warmup Iteration   5: 7085273.693 ops/s
[info] Iteration   1: 7105683.980 ops/s
[info]                  ·gc.alloc.rate:                   902.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        149.018 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 7372429.882 ops/s
[info]                  ·gc.alloc.rate:                                  936.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       217.858 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.142 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7354961.608 ops/s
[info]                  ·gc.alloc.rate:                                  934.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       218.504 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7362818.077 ops/s
[info]                  ·gc.alloc.rate:            935.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 218.293 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 7420097.635 ops/s
[info]                  ·gc.alloc.rate:            942.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.401 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter":
[info]   7323198.236 ±(99.9%) 478256.889 ops/s [Average]
[info]   (min, avg, max) = (7105683.980, 7323198.236, 7420097.635), stdev = 124201.795
[info]   CI (99.9%): [6844941.348, 7801455.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate":
[info]   930.390 ±(99.9%) 60.786 MB/sec [Average]
[info]   (min, avg, max) = (902.754, 930.390, 942.747), stdev = 15.786
[info]   CI (99.9%): [869.604, 991.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.140), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   883.078 ±(99.9%) 725.705 MB/sec [Average]
[info]   (min, avg, max) = (672.632, 883.078, 1021.017), stdev = 188.463
[info]   CI (99.9%): [157.373, 1608.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   189.615 ±(99.9%) 150.952 B/op [Average]
[info]   (min, avg, max) = (144.401, 189.615, 218.504), stdev = 39.202
[info]   CI (99.9%): [38.663, 340.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.176 ±(99.9%) 1.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.738), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 12.000), stdev = 3.847
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay
[info] # Run progress: 12.62% complete, ETA 00:24:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189847.368 ops/s
[info] # Warmup Iteration   2: 324669.938 ops/s
[info] # Warmup Iteration   3: 332416.950 ops/s
[info] # Warmup Iteration   4: 330510.795 ops/s
[info] # Warmup Iteration   5: 333847.664 ops/s
[info] Iteration   1: 325723.444 ops/s
[info]                  ·gc.alloc.rate:            837.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4876.304 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 334280.198 ops/s
[info]                  ·gc.alloc.rate:                   859.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3183.177 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 335954.214 ops/s
[info]                  ·gc.alloc.rate:                                  863.931 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4784.028 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 335886.834 ops/s
[info]                  ·gc.alloc.rate:            864.000 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3189.893 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 335360.131 ops/s
[info]                  ·gc.alloc.rate:                                  862.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4792.558 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay":
[info]   333440.964 ±(99.9%) 16811.748 ops/s [Average]
[info]   (min, avg, max) = (325723.444, 333440.964, 335954.214), stdev = 4365.957
[info]   CI (99.9%): [316629.217, 350252.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate":
[info]   857.520 ±(99.9%) 43.558 MB/sec [Average]
[info]   (min, avg, max) = (837.550, 857.520, 864.000), stdev = 11.312
[info]   CI (99.9%): [813.961, 901.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.082 ±(99.9%) 0.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.402), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   881.590 ±(99.9%) 714.675 MB/sec [Average]
[info]   (min, avg, max) = (675.871, 881.590, 1021.286), stdev = 185.599
[info]   CI (99.9%): [166.914, 1596.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4165.192 ±(99.9%) 3442.930 B/op [Average]
[info]   (min, avg, max) = (3183.177, 4165.192, 4876.304), stdev = 894.118
[info]   CI (99.9%): [722.262, 7608.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.763 ±(99.9%) 32.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.763, 18.817), stdev = 8.415
[info]   CI (99.9%): [≈ 0, 36.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 5.857
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce
[info] # Run progress: 13.59% complete, ETA 00:24:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375841.439 ops/s
[info] # Warmup Iteration   2: 561541.077 ops/s
[info] # Warmup Iteration   3: 580041.876 ops/s
[info] # Warmup Iteration   4: 590922.199 ops/s
[info] # Warmup Iteration   5: 589993.614 ops/s
[info] Iteration   1: 589801.395 ops/s
[info]                  ·gc.alloc.rate:                                  1915.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4541.753 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 588513.459 ops/s
[info]                  ·gc.alloc.rate:                                  1911.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5461.528 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   3: 582130.079 ops/s
[info]                  ·gc.alloc.rate:                                  1890.409 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4601.371 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 585464.945 ops/s
[info]                  ·gc.alloc.rate:                                  1901.641 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5490.283 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 590081.876 ops/s
[info]                  ·gc.alloc.rate:                                  1916.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5447.490 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce":
[info]   587198.351 ±(99.9%) 12988.739 ops/s [Average]
[info]   (min, avg, max) = (582130.079, 587198.351, 590081.876), stdev = 3373.134
[info]   CI (99.9%): [574209.611, 600187.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate":
[info]   1907.032 ±(99.9%) 42.255 MB/sec [Average]
[info]   (min, avg, max) = (1890.409, 1907.032, 1916.479), stdev = 10.973
[info]   CI (99.9%): [1864.777, 1949.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm":
[info]   5112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5112.001, 5112.001, 5112.001), stdev = 0.001
[info]   CI (99.9%): [5112.001, 5112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1905.971 ±(99.9%) 718.315 MB/sec [Average]
[info]   (min, avg, max) = (1701.579, 1905.971, 2042.360), stdev = 186.544
[info]   CI (99.9%): [1187.655, 2624.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5108.485 ±(99.9%) 1890.038 B/op [Average]
[info]   (min, avg, max) = (4541.753, 5108.485, 5490.283), stdev = 490.837
[info]   CI (99.9%): [3218.447, 6998.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.800, 15.000), stdev = 3.564
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson
[info] # Run progress: 14.56% complete, ETA 00:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 618871.549 ops/s
[info] # Warmup Iteration   2: 996057.212 ops/s
[info] # Warmup Iteration   3: 999585.312 ops/s
[info] # Warmup Iteration   4: 1012877.136 ops/s
[info] # Warmup Iteration   5: 1004784.052 ops/s
[info] Iteration   1: 998130.876 ops/s
[info]                  ·gc.alloc.rate:                   907.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1591.205 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 1019528.066 ops/s
[info]                  ·gc.alloc.rate:                                  927.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1575.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.028 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1014691.397 ops/s
[info]                  ·gc.alloc.rate:            923.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1055.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1012593.413 ops/s
[info]                  ·gc.alloc.rate:                                  921.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1587.261 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 1024234.227 ops/s
[info]                  ·gc.alloc.rate:            931.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1569.210 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson":
[info]   1013835.596 ±(99.9%) 37995.212 ops/s [Average]
[info]   (min, avg, max) = (998130.876, 1013835.596, 1024234.227), stdev = 9867.236
[info]   CI (99.9%): [975840.384, 1051830.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate":
[info]   922.275 ±(99.9%) 34.805 MB/sec [Average]
[info]   (min, avg, max) = (907.863, 922.275, 931.800), stdev = 9.039
[info]   CI (99.9%): [887.471, 957.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.112), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen":
[info]   950.375 ±(99.9%) 580.878 MB/sec [Average]
[info]   (min, avg, max) = (680.683, 950.375, 1021.084), stdev = 150.852
[info]   CI (99.9%): [369.496, 1531.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1475.785 ±(99.9%) 904.344 B/op [Average]
[info]   (min, avg, max) = (1055.964, 1475.785, 1591.205), stdev = 234.855
[info]   CI (99.9%): [571.442, 2380.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.329), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.256 ±(99.9%) 8.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.256, 5.252), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.301
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter
[info] # Run progress: 15.53% complete, ETA 00:23:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2170876.652 ops/s
[info] # Warmup Iteration   2: 2562040.572 ops/s
[info] # Warmup Iteration   3: 2541744.426 ops/s
[info] # Warmup Iteration   4: 2547533.844 ops/s
[info] # Warmup Iteration   5: 2557877.116 ops/s
[info] Iteration   1: 2573649.693 ops/s
[info]                  ·gc.alloc.rate:                                  1072.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       624.084 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.407 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2600670.011 ops/s
[info]                  ·gc.alloc.rate:                                  1084.075 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       617.999 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2596108.410 ops/s
[info]                  ·gc.alloc.rate:                                  1081.985 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       619.072 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2579321.993 ops/s
[info]                  ·gc.alloc.rate:            1075.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 830.808 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2599047.201 ops/s
[info]                  ·gc.alloc.rate:            1083.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 618.372 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter":
[info]   2589759.462 ±(99.9%) 47710.578 ops/s [Average]
[info]   (min, avg, max) = (2573649.693, 2589759.462, 2600670.011), stdev = 12390.286
[info]   CI (99.9%): [2542048.883, 2637470.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate":
[info]   1079.360 ±(99.9%) 20.270 MB/sec [Average]
[info]   (min, avg, max) = (1072.445, 1079.360, 1084.075), stdev = 5.264
[info]   CI (99.9%): [1059.090, 1099.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.113), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1089.049 ±(99.9%) 586.484 MB/sec [Average]
[info]   (min, avg, max) = (1020.267, 1089.049, 1361.505), stdev = 152.308
[info]   CI (99.9%): [502.566, 1675.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   662.067 ±(99.9%) 363.350 B/op [Average]
[info]   (min, avg, max) = (617.999, 662.067, 830.808), stdev = 94.361
[info]   CI (99.9%): [298.717, 1025.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.407), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay
[info] # Run progress: 16.50% complete, ETA 00:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79297.699 ops/s
[info] # Warmup Iteration   2: 171293.812 ops/s
[info] # Warmup Iteration   3: 174674.384 ops/s
[info] # Warmup Iteration   4: 174126.490 ops/s
[info] # Warmup Iteration   5: 174805.653 ops/s
[info] Iteration   1: 175109.007 ops/s
[info]                  ·gc.alloc.rate:                   1047.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              9416.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9100.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 177863.005 ops/s
[info]                  ·gc.alloc.rate:                                  1063.763 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9416.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.652 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12048.532 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 177950.313 ops/s
[info]                  ·gc.alloc.rate:                                  1064.449 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9416.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9031.576 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 176395.729 ops/s
[info]                  ·gc.alloc.rate:            1055.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       9416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9111.282 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 176857.492 ops/s
[info]                  ·gc.alloc.rate:            1057.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       9416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9087.331 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay":
[info]   176835.109 ±(99.9%) 4504.280 ops/s [Average]
[info]   (min, avg, max) = (175109.007, 176835.109, 177950.313), stdev = 1169.747
[info]   CI (99.9%): [172330.829, 181339.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate":
[info]   1057.749 ±(99.9%) 26.913 MB/sec [Average]
[info]   (min, avg, max) = (1047.357, 1057.749, 1064.449), stdev = 6.989
[info]   CI (99.9%): [1030.836, 1084.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm":
[info]   9416.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9416.002, 9416.002, 9416.003), stdev = 0.001
[info]   CI (99.9%): [9416.002, 9416.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.133 ±(99.9%) 1.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.652), stdev = 0.290
[info]   CI (99.9%): [≈ 0, 1.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1087.296 ±(99.9%) 589.717 MB/sec [Average]
[info]   (min, avg, max) = (1012.224, 1087.296, 1361.170), stdev = 153.148
[info]   CI (99.9%): [497.579, 1677.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9675.773 ±(99.9%) 5108.907 B/op [Average]
[info]   (min, avg, max) = (9031.576, 9675.773, 12048.532), stdev = 1326.767
[info]   CI (99.9%): [4566.866, 14784.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.184 ±(99.9%) 61.859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.184, 35.922), stdev = 16.065
[info]   CI (99.9%): [≈ 0, 69.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson
[info] # Run progress: 17.48% complete, ETA 00:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 841578.187 ops/s
[info] # Warmup Iteration   2: 1346491.307 ops/s
[info] # Warmup Iteration   3: 1363523.267 ops/s
[info] # Warmup Iteration   4: 1351018.144 ops/s
[info] # Warmup Iteration   5: 1362772.545 ops/s
[info] Iteration   1: 1347401.657 ops/s
[info]                  ·gc.alloc.rate:                   856.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1178.026 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 1352836.635 ops/s
[info]                  ·gc.alloc.rate:                   859.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1016.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1182.591 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1360354.394 ops/s
[info]                  ·gc.alloc.rate:                                  864.085 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       787.609 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1350277.045 ops/s
[info]                  ·gc.alloc.rate:            857.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1190.226 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1366228.030 ops/s
[info]                  ·gc.alloc.rate:            868.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 784.251 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson":
[info]   1355419.552 ±(99.9%) 29738.548 ops/s [Average]
[info]   (min, avg, max) = (1347401.657, 1355419.552, 1366228.030), stdev = 7723.007
[info]   CI (99.9%): [1325681.004, 1385158.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate":
[info]   861.172 ±(99.9%) 18.812 MB/sec [Average]
[info]   (min, avg, max) = (856.184, 861.172, 868.166), stdev = 4.885
[info]   CI (99.9%): [842.361, 879.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   881.518 ±(99.9%) 706.079 MB/sec [Average]
[info]   (min, avg, max) = (680.561, 881.518, 1021.183), stdev = 183.367
[info]   CI (99.9%): [175.439, 1587.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1024.540 ±(99.9%) 838.930 B/op [Average]
[info]   (min, avg, max) = (784.251, 1024.540, 1190.226), stdev = 217.868
[info]   CI (99.9%): [185.610, 1863.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.086 ±(99.9%) 7.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.086, 4.650), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.504
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter
[info] # Run progress: 18.45% complete, ETA 00:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3049522.213 ops/s
[info] # Warmup Iteration   2: 3970875.503 ops/s
[info] # Warmup Iteration   3: 3983724.235 ops/s
[info] # Warmup Iteration   4: 4008086.740 ops/s
[info] # Warmup Iteration   5: 3980316.554 ops/s
[info] Iteration   1: 3979012.640 ops/s
[info]                  ·gc.alloc.rate:            525.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 266.114 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 4026433.421 ops/s
[info]                  ·gc.alloc.rate:            532.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 3976799.773 ops/s
[info]                  ·gc.alloc.rate:            525.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 266.274 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4021287.077 ops/s
[info]                  ·gc.alloc.rate:            531.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3973436.146 ops/s
[info]                  ·gc.alloc.rate:                   525.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        266.501 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter":
[info]   3995393.811 ±(99.9%) 100599.476 ops/s [Average]
[info]   (min, avg, max) = (3973436.146, 3995393.811, 4026433.421), stdev = 26125.365
[info]   CI (99.9%): [3894794.335, 4095993.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate":
[info]   527.983 ±(99.9%) 13.264 MB/sec [Average]
[info]   (min, avg, max) = (525.249, 527.983, 532.094), stdev = 3.445
[info]   CI (99.9%): [514.720, 541.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.200 ±(99.9%) 709.460 MB/sec [Average]
[info]   (min, avg, max) = (336.366, 538.200, 672.977), stdev = 184.244
[info]   CI (99.9%): [≈ 0, 1247.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   212.409 ±(99.9%) 284.135 B/op [Average]
[info]   (min, avg, max) = (131.492, 212.409, 266.501), stdev = 73.789
[info]   CI (99.9%): [≈ 0, 496.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.264 ±(99.9%) 2.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.264, 1.319), stdev = 0.590
[info]   CI (99.9%): [≈ 0, 2.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 12.000), stdev = 3.240
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay
[info] # Run progress: 19.42% complete, ETA 00:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93638.267 ops/s
[info] # Warmup Iteration   2: 206470.490 ops/s
[info] # Warmup Iteration   3: 207139.120 ops/s
[info] # Warmup Iteration   4: 207442.921 ops/s
[info] # Warmup Iteration   5: 206578.503 ops/s
[info] Iteration   1: 207039.126 ops/s
[info]                  ·gc.alloc.rate:                   954.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7671.285 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 209305.510 ops/s
[info]                  ·gc.alloc.rate:                                  964.734 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7673.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.009 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 210371.026 ops/s
[info]                  ·gc.alloc.rate:            969.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7639.508 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 209886.213 ops/s
[info]                  ·gc.alloc.rate:                                  967.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7657.413 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 210168.234 ops/s
[info]                  ·gc.alloc.rate:            968.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5098.117 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay":
[info]   209354.022 ±(99.9%) 5216.721 ops/s [Average]
[info]   (min, avg, max) = (207039.126, 209354.022, 210371.026), stdev = 1354.766
[info]   CI (99.9%): [204137.300, 214570.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate":
[info]   965.046 ±(99.9%) 24.170 MB/sec [Average]
[info]   (min, avg, max) = (954.336, 965.046, 969.706), stdev = 6.277
[info]   CI (99.9%): [940.876, 989.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm":
[info]   7256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7256.002, 7256.002, 7256.002), stdev = 0.001
[info]   CI (99.9%): [7256.002, 7256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.297), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   950.404 ±(99.9%) 580.812 MB/sec [Average]
[info]   (min, avg, max) = (680.738, 950.404, 1021.109), stdev = 150.835
[info]   CI (99.9%): [369.592, 1531.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   7147.988 ±(99.9%) 4412.812 B/op [Average]
[info]   (min, avg, max) = (5098.117, 7147.988, 7673.619), stdev = 1145.993
[info]   CI (99.9%): [2735.176, 11560.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.065 ±(99.9%) 42.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.065, 25.318), stdev = 10.979
[info]   CI (99.9%): [≈ 0, 48.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 18.000), stdev = 6.205
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce
[info] # Run progress: 20.39% complete, ETA 00:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359037.465 ops/s
[info] # Warmup Iteration   2: 487057.823 ops/s
[info] # Warmup Iteration   3: 494744.476 ops/s
[info] # Warmup Iteration   4: 504507.818 ops/s
[info] # Warmup Iteration   5: 512316.896 ops/s
[info] Iteration   1: 513181.367 ops/s
[info]                  ·gc.alloc.rate:                                  1677.115 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5219.815 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 508648.031 ops/s
[info]                  ·gc.alloc.rate:            1662.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5266.191 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 509421.620 ops/s
[info]                  ·gc.alloc.rate:                                  1664.733 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5258.336 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 504465.377 ops/s
[info]                  ·gc.alloc.rate:                                  1648.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5309.798 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 505800.786 ops/s
[info]                  ·gc.alloc.rate:            1652.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5295.755 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce":
[info]   508303.436 ±(99.9%) 13080.469 ops/s [Average]
[info]   (min, avg, max) = (504465.377, 508303.436, 513181.367), stdev = 3396.956
[info]   CI (99.9%): [495222.967, 521383.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate":
[info]   1661.165 ±(99.9%) 42.873 MB/sec [Average]
[info]   (min, avg, max) = (1648.669, 1661.165, 1677.115), stdev = 11.134
[info]   CI (99.9%): [1618.292, 1704.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.001, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.001, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen":
[info]   1701.787 ±(99.9%) 0.732 MB/sec [Average]
[info]   (min, avg, max) = (1701.516, 1701.787, 1702.044), stdev = 0.190
[info]   CI (99.9%): [1701.055, 1702.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5269.979 ±(99.9%) 134.996 B/op [Average]
[info]   (min, avg, max) = (5219.815, 5269.979, 5309.798), stdev = 35.058
[info]   CI (99.9%): [5134.983, 5404.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson
[info] # Run progress: 21.36% complete, ETA 00:22:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270529.228 ops/s
[info] # Warmup Iteration   2: 484426.784 ops/s
[info] # Warmup Iteration   3: 461222.017 ops/s
[info] # Warmup Iteration   4: 479342.246 ops/s
[info] # Warmup Iteration   5: 478799.588 ops/s
[info] Iteration   1: 485412.018 ops/s
[info]                  ·gc.alloc.rate:            601.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1090.687 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 483030.363 ops/s
[info]                  ·gc.alloc.rate:            598.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2191.998 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 481607.472 ops/s
[info]                  ·gc.alloc.rate:            597.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2198.569 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 485049.604 ops/s
[info]                  ·gc.alloc.rate:                   601.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2183.083 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 487985.206 ops/s
[info]                  ·gc.alloc.rate:                   605.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2193.606 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson":
[info]   484616.933 ±(99.9%) 9380.624 ops/s [Average]
[info]   (min, avg, max) = (481607.472, 484616.933, 487985.206), stdev = 2436.118
[info]   CI (99.9%): [475236.309, 493997.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate":
[info]   600.971 ±(99.9%) 11.740 MB/sec [Average]
[info]   (min, avg, max) = (597.209, 600.971, 605.178), stdev = 3.049
[info]   CI (99.9%): [589.231, 612.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen":
[info]   606.887 ±(99.9%) 582.481 MB/sec [Average]
[info]   (min, avg, max) = (336.351, 606.887, 680.082), stdev = 151.268
[info]   CI (99.9%): [24.406, 1189.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1971.589 ±(99.9%) 1896.329 B/op [Average]
[info]   (min, avg, max) = (1090.687, 1971.589, 2198.569), stdev = 492.471
[info]   CI (99.9%): [75.260, 3867.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.591 ±(99.9%) 18.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.591, 10.807), stdev = 4.686
[info]   CI (99.9%): [≈ 0, 20.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.400, 12.000), stdev = 3.578
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter
[info] # Run progress: 22.33% complete, ETA 00:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4684252.354 ops/s
[info] # Warmup Iteration   2: 5023600.083 ops/s
[info] # Warmup Iteration   3: 5041168.326 ops/s
[info] # Warmup Iteration   4: 4971373.257 ops/s
[info] # Warmup Iteration   5: 5009077.193 ops/s
[info] Iteration   1: 5054328.339 ops/s
[info]                  ·gc.alloc.rate:            231.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104.753 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 5103642.723 ops/s
[info]                  ·gc.alloc.rate:      233.476 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5055456.037 ops/s
[info]                  ·gc.alloc.rate:            231.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 3804903.544 ops/s
[info]                  ·gc.alloc.rate:            174.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 5102122.086 ops/s
[info]                  ·gc.alloc.rate:      233.455 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter":
[info]   4824090.546 ±(99.9%) 2195823.187 ops/s [Average]
[info]   (min, avg, max) = (3804903.544, 4824090.546, 5103642.723), stdev = 570248.308
[info]   CI (99.9%): [2628267.359, 7019913.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate":
[info]   220.692 ±(99.9%) 100.458 MB/sec [Average]
[info]   (min, avg, max) = (174.066, 220.692, 233.476), stdev = 26.089
[info]   CI (99.9%): [120.234, 321.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.833 ±(99.9%) 709.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.833, 336.429), stdev = 184.247
[info]   CI (99.9%): [≈ 0, 911.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   69.726 ±(99.9%) 250.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.726, 139.152), stdev = 65.183
[info]   CI (99.9%): [≈ 0, 320.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay
[info] # Run progress: 23.30% complete, ETA 00:21:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51990.514 ops/s
[info] # Warmup Iteration   2: 151696.873 ops/s
[info] # Warmup Iteration   3: 152301.230 ops/s
[info] # Warmup Iteration   4: 154658.619 ops/s
[info] # Warmup Iteration   5: 155202.808 ops/s
[info] Iteration   1: 153323.522 ops/s
[info]                  ·gc.alloc.rate:            842.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       8648.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10359.261 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 154474.615 ops/s
[info]                  ·gc.alloc.rate:                   848.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10316.088 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.721 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 156850.290 ops/s
[info]                  ·gc.alloc.rate:                                  861.757 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8648.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.199 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.997 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6831.158 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 156144.898 ops/s
[info]                  ·gc.alloc.rate:            857.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       8648.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10292.861 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 156645.570 ops/s
[info]                  ·gc.alloc.rate:            860.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       8648.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6840.271 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay":
[info]   155487.779 ±(99.9%) 5883.813 ops/s [Average]
[info]   (min, avg, max) = (153323.522, 155487.779, 156850.290), stdev = 1528.008
[info]   CI (99.9%): [149603.965, 161371.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate":
[info]   854.238 ±(99.9%) 32.419 MB/sec [Average]
[info]   (min, avg, max) = (842.279, 854.238, 861.757), stdev = 8.419
[info]   CI (99.9%): [821.818, 886.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm":
[info]   8648.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8648.003, 8648.003, 8648.003), stdev = 0.001
[info]   CI (99.9%): [8648.002, 8648.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.199), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.399 ±(99.9%) 3.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.399, 1.997), stdev = 0.893
[info]   CI (99.9%): [≈ 0, 3.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen":
[info]   880.757 ±(99.9%) 703.416 MB/sec [Average]
[info]   (min, avg, max) = (680.698, 880.757, 1021.015), stdev = 182.675
[info]   CI (99.9%): [177.341, 1584.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8927.928 ±(99.9%) 7355.008 B/op [Average]
[info]   (min, avg, max) = (6831.158, 8927.928, 10359.261), stdev = 1910.072
[info]   CI (99.9%): [1572.920, 16282.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   8.144 ±(99.9%) 70.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.144, 40.721), stdev = 18.211
[info]   CI (99.9%): [≈ 0, 78.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 17.000), stdev = 6.964
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce
[info] # Run progress: 24.27% complete, ETA 00:21:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2818.914 ops/s
[info] # Warmup Iteration   2: 4263.194 ops/s
[info] # Warmup Iteration   3: 4319.868 ops/s
[info] # Warmup Iteration   4: 4374.632 ops/s
[info] # Warmup Iteration   5: 4391.066 ops/s
[info] Iteration   1: 4446.096 ops/s
[info]                  ·gc.alloc.rate:                                  1070.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.099 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 56.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       359740.777 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1414.446 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 4488.841 ops/s
[info]                  ·gc.alloc.rate:                                  1080.418 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 29.734 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       358010.469 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4459.786 ops/s
[info]                  ·gc.alloc.rate:                                  1073.279 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.099 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.698 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       480450.425 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4472.993 ops/s
[info]                  ·gc.alloc.rate:                                  1076.512 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 31.605 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       359290.793 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4481.004 ops/s
[info]                  ·gc.alloc.rate:                                  1078.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.928 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       358649.489 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce":
[info]   4469.744 ±(99.9%) 65.587 ops/s [Average]
[info]   (min, avg, max) = (4446.096, 4469.744, 4488.841), stdev = 17.033
[info]   CI (99.9%): [4404.157, 4535.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1075.755 ±(99.9%) 15.685 MB/sec [Average]
[info]   (min, avg, max) = (1070.186, 1075.755, 1080.418), stdev = 4.073
[info]   CI (99.9%): [1060.071, 1091.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   378808.097 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (378808.091, 378808.097, 378808.099), stdev = 0.003
[info]   CI (99.9%): [378808.084, 378808.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.082 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (0.025, 0.082, 0.158), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   28.801 ±(99.9%) 68.695 B/op [Average]
[info]   (min, avg, max) = (8.698, 28.801, 56.040), stdev = 17.840
[info]   CI (99.9%): [≈ 0, 97.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1088.145 ±(99.9%) 587.960 MB/sec [Average]
[info]   (min, avg, max) = (1016.318, 1088.145, 1361.262), stdev = 152.691
[info]   CI (99.9%): [500.185, 1676.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   383228.391 ±(99.9%) 209292.916 B/op [Average]
[info]   (min, avg, max) = (358010.469, 383228.391, 480450.425), stdev = 54352.706
[info]   CI (99.9%): [173935.475, 592521.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   282.889 ±(99.9%) 2435.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 282.889, 1414.446), stdev = 632.560
[info]   CI (99.9%): [≈ 0, 2718.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson
[info] # Run progress: 25.24% complete, ETA 00:21:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5646.272 ops/s
[info] # Warmup Iteration   2: 9338.853 ops/s
[info] # Warmup Iteration   3: 9430.355 ops/s
[info] # Warmup Iteration   4: 9385.151 ops/s
[info] # Warmup Iteration   5: 9410.564 ops/s
[info] Iteration   1: 9405.501 ops/s
[info]                  ·gc.alloc.rate:            238.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56179.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 9463.672 ops/s
[info]                  ·gc.alloc.rate:      239.833 MB/sec
[info]                  ·gc.alloc.rate.norm: 39888.043 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9470.049 ops/s
[info]                  ·gc.alloc.rate:            239.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55794.162 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 9460.291 ops/s
[info]                  ·gc.alloc.rate:            239.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55853.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 9539.843 ops/s
[info]                  ·gc.alloc.rate:      241.766 MB/sec
[info]                  ·gc.alloc.rate.norm: 39888.043 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson":
[info]   9467.871 ±(99.9%) 184.166 ops/s [Average]
[info]   (min, avg, max) = (9405.501, 9467.871, 9539.843), stdev = 47.827
[info]   CI (99.9%): [9283.705, 9652.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   239.925 ±(99.9%) 4.723 MB/sec [Average]
[info]   (min, avg, max) = (238.317, 239.925, 241.766), stdev = 1.226
[info]   CI (99.9%): [235.202, 244.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   39888.044 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (39888.043, 39888.044, 39888.046), stdev = 0.002
[info]   CI (99.9%): [39888.038, 39888.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   201.403 ±(99.9%) 707.959 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.403, 335.696), stdev = 183.855
[info]   CI (99.9%): [≈ 0, 909.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   33565.395 ±(99.9%) 117988.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33565.395, 56179.686), stdev = 30641.225
[info]   CI (99.9%): [≈ 0, 151553.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 7.000), stdev = 3.493
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter
[info] # Run progress: 26.21% complete, ETA 00:20:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13300.544 ops/s
[info] # Warmup Iteration   2: 17194.300 ops/s
[info] # Warmup Iteration   3: 17163.014 ops/s
[info] # Warmup Iteration   4: 17088.299 ops/s
[info] # Warmup Iteration   5: 17167.996 ops/s
[info] Iteration   1: 17176.809 ops/s
[info]                  ·gc.alloc.rate:            293.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30820.725 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 17293.721 ops/s
[info]                  ·gc.alloc.rate:      295.525 MB/sec
[info]                  ·gc.alloc.rate.norm: 26896.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17138.237 ops/s
[info]                  ·gc.alloc.rate:            292.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30889.044 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 17225.926 ops/s
[info]                  ·gc.alloc.rate:            294.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30734.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 17225.336 ops/s
[info]                  ·gc.alloc.rate:            294.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30736.643 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter":
[info]   17212.006 ±(99.9%) 225.596 ops/s [Average]
[info]   (min, avg, max) = (17138.237, 17212.006, 17293.721), stdev = 58.587
[info]   CI (99.9%): [16986.409, 17437.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   294.100 ±(99.9%) 3.892 MB/sec [Average]
[info]   (min, avg, max) = (292.857, 294.100, 295.525), stdev = 1.011
[info]   CI (99.9%): [290.208, 297.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   26896.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (26896.024, 26896.025, 26896.030), stdev = 0.003
[info]   CI (99.9%): [26896.015, 26896.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.063 ±(99.9%) 579.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.063, 336.367), stdev = 150.411
[info]   CI (99.9%): [≈ 0, 848.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   24636.254 ±(99.9%) 53031.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24636.254, 30889.044), stdev = 13772.235
[info]   CI (99.9%): [≈ 0, 77668.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay
[info] # Run progress: 27.18% complete, ETA 00:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 754.502 ops/s
[info] # Warmup Iteration   2: 1699.989 ops/s
[info] # Warmup Iteration   3: 1727.346 ops/s
[info] # Warmup Iteration   4: 1675.175 ops/s
[info] # Warmup Iteration   5: 1751.041 ops/s
[info] Iteration   1: 1753.554 ops/s
[info]                  ·gc.alloc.rate:                   1061.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        908686.157 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3586.919 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1783.512 ops/s
[info]                  ·gc.alloc.rate:                                  1079.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.247 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 68.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1201395.372 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1780.529 ops/s
[info]                  ·gc.alloc.rate:                                  1077.409 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.229 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 97.864 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       902564.294 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1757.861 ops/s
[info]                  ·gc.alloc.rate:                                  1064.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.250 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       913852.762 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1791.351 ops/s
[info]                  ·gc.alloc.rate:                                  1084.226 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.228 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.433 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       897024.000 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay":
[info]   1773.362 ±(99.9%) 64.163 ops/s [Average]
[info]   (min, avg, max) = (1753.554, 1773.362, 1791.351), stdev = 16.663
[info]   CI (99.9%): [1709.199, 1837.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1073.278 ±(99.9%) 38.635 MB/sec [Average]
[info]   (min, avg, max) = (1061.256, 1073.278, 1084.226), stdev = 10.033
[info]   CI (99.9%): [1034.643, 1111.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   952664.241 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (952664.228, 952664.241, 952664.251), stdev = 0.012
[info]   CI (99.9%): [952664.196, 952664.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   38.075 ±(99.9%) 167.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.075, 97.864), stdev = 43.454
[info]   CI (99.9%): [≈ 0, 205.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1087.176 ±(99.9%) 590.027 MB/sec [Average]
[info]   (min, avg, max) = (1012.265, 1087.176, 1361.199), stdev = 153.228
[info]   CI (99.9%): [497.149, 1677.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   964704.517 ±(99.9%) 510077.995 B/op [Average]
[info]   (min, avg, max) = (897024.000, 964704.517, 1201395.372), stdev = 132465.635
[info]   CI (99.9%): [454626.522, 1474782.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   717.384 ±(99.9%) 6176.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 717.384, 3586.919), stdev = 1604.119
[info]   CI (99.9%): [≈ 0, 6894.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 14.000), stdev = 4.207
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter
[info] # Run progress: 28.16% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3177334.811 ops/s
[info] # Warmup Iteration   2: 3460445.949 ops/s
[info] # Warmup Iteration   3: 3453436.491 ops/s
[info] # Warmup Iteration   4: 3428923.277 ops/s
[info] # Warmup Iteration   5: 3456305.271 ops/s
[info] Iteration   1: 3484951.707 ops/s
[info]                  ·gc.alloc.rate:                                  1045.097 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       460.870 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.301 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 3530858.963 ops/s
[info]                  ·gc.alloc.rate:                                  1058.808 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       455.191 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3545956.790 ops/s
[info]                  ·gc.alloc.rate:            1063.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 453.226 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3527254.851 ops/s
[info]                  ·gc.alloc.rate:            1057.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 455.655 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 3544451.677 ops/s
[info]                  ·gc.alloc.rate:                                  1062.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       453.446 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter":
[info]   3526694.798 ±(99.9%) 95229.909 ops/s [Average]
[info]   (min, avg, max) = (3484951.707, 3526694.798, 3545956.790), stdev = 24730.905
[info]   CI (99.9%): [3431464.889, 3621924.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   1057.560 ±(99.9%) 28.480 MB/sec [Average]
[info]   (min, avg, max) = (1045.097, 1057.560, 1063.303), stdev = 7.396
[info]   CI (99.9%): [1029.080, 1086.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.114), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   1020.949 ±(99.9%) 1.094 MB/sec [Average]
[info]   (min, avg, max) = (1020.452, 1020.949, 1021.156), stdev = 0.284
[info]   CI (99.9%): [1019.855, 1022.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   455.677 ±(99.9%) 11.897 B/op [Average]
[info]   (min, avg, max) = (453.226, 455.677, 460.870), stdev = 3.090
[info]   CI (99.9%): [443.780, 467.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.060 ±(99.9%) 0.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.301), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 3.050
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay
[info] # Run progress: 29.13% complete, ETA 00:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100783.973 ops/s
[info] # Warmup Iteration   2: 180536.912 ops/s
[info] # Warmup Iteration   3: 183430.326 ops/s
[info] # Warmup Iteration   4: 182501.312 ops/s
[info] # Warmup Iteration   5: 183707.230 ops/s
[info] Iteration   1: 182312.930 ops/s
[info]                  ·gc.alloc.rate:                                  1034.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8936.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8775.416 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                34.504 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 182506.655 ops/s
[info]                  ·gc.alloc.rate:                                  1036.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8936.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.312 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8805.578 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 183259.195 ops/s
[info]                  ·gc.alloc.rate:            1040.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       8936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8769.788 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 183885.549 ops/s
[info]                  ·gc.alloc.rate:                                  1043.910 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8936.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8740.461 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 183462.844 ops/s
[info]                  ·gc.alloc.rate:                                  1041.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8936.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8760.516 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay":
[info]   183085.434 ±(99.9%) 2543.002 ops/s [Average]
[info]   (min, avg, max) = (182312.930, 183085.434, 183885.549), stdev = 660.410
[info]   CI (99.9%): [180542.432, 185628.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate":
[info]   1039.318 ±(99.9%) 14.661 MB/sec [Average]
[info]   (min, avg, max) = (1034.848, 1039.318, 1043.910), stdev = 3.807
[info]   CI (99.9%): [1024.658, 1053.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   8936.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8936.002, 8936.002, 8936.002), stdev = 0.001
[info]   CI (99.9%): [8936.002, 8936.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.036), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.115 ±(99.9%) 0.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.312), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1020.046 ±(99.9%) 8.176 MB/sec [Average]
[info]   (min, avg, max) = (1016.251, 1020.046, 1021.113), stdev = 2.123
[info]   CI (99.9%): [1011.870, 1028.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8770.352 ±(99.9%) 91.468 B/op [Average]
[info]   (min, avg, max) = (8740.461, 8770.352, 8805.578), stdev = 23.754
[info]   CI (99.9%): [8678.884, 8861.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.901 ±(99.9%) 59.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.901, 34.504), stdev = 15.430
[info]   CI (99.9%): [≈ 0, 66.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce
[info] # Run progress: 30.10% complete, ETA 00:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291264.948 ops/s
[info] # Warmup Iteration   2: 438362.783 ops/s
[info] # Warmup Iteration   3: 455929.963 ops/s
[info] # Warmup Iteration   4: 457200.262 ops/s
[info] # Warmup Iteration   5: 469557.435 ops/s
[info] Iteration   1: 469972.244 ops/s
[info]                  ·gc.alloc.rate:                                  1698.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5699.571 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 468956.605 ops/s
[info]                  ·gc.alloc.rate:                                  1694.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5711.844 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 467772.482 ops/s
[info]                  ·gc.alloc.rate:                                  1690.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5726.617 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 468361.538 ops/s
[info]                  ·gc.alloc.rate:                                  1692.502 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5719.404 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 468428.366 ops/s
[info]                  ·gc.alloc.rate:                                  1692.791 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5718.574 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce":
[info]   468698.247 ±(99.9%) 3182.940 ops/s [Average]
[info]   (min, avg, max) = (467772.482, 468698.247, 469972.244), stdev = 826.599
[info]   CI (99.9%): [465515.307, 471881.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate":
[info]   1693.781 ±(99.9%) 11.178 MB/sec [Average]
[info]   (min, avg, max) = (1690.537, 1693.781, 1698.175), stdev = 2.903
[info]   CI (99.9%): [1682.604, 1704.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.006, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1701.877 ±(99.9%) 0.604 MB/sec [Average]
[info]   (min, avg, max) = (1701.629, 1701.877, 1702.014), stdev = 0.157
[info]   CI (99.9%): [1701.273, 1702.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5715.202 ±(99.9%) 39.219 B/op [Average]
[info]   (min, avg, max) = (5699.571, 5715.202, 5726.617), stdev = 10.185
[info]   CI (99.9%): [5675.983, 5754.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson
[info] # Run progress: 31.07% complete, ETA 00:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229809.583 ops/s
[info] # Warmup Iteration   2: 452912.362 ops/s
[info] # Warmup Iteration   3: 455177.115 ops/s
[info] # Warmup Iteration   4: 458584.530 ops/s
[info] # Warmup Iteration   5: 459448.367 ops/s
[info] Iteration   1: 462105.731 ops/s
[info]                  ·gc.alloc.rate:            537.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1143.448 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 455846.670 ops/s
[info]                  ·gc.alloc.rate:            530.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2318.129 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 457812.102 ops/s
[info]                  ·gc.alloc.rate:            534.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2293.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 462666.695 ops/s
[info]                  ·gc.alloc.rate:            538.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1142.104 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 455964.311 ops/s
[info]                  ·gc.alloc.rate:                   530.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2317.773 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson":
[info]   458879.102 ±(99.9%) 12711.082 ops/s [Average]
[info]   (min, avg, max) = (455846.670, 458879.102, 462666.695), stdev = 3301.028
[info]   CI (99.9%): [446168.020, 471590.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate":
[info]   534.308 ±(99.9%) 14.578 MB/sec [Average]
[info]   (min, avg, max) = (530.496, 534.308, 538.493), stdev = 3.786
[info]   CI (99.9%): [519.731, 548.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   536.510 ±(99.9%) 705.955 MB/sec [Average]
[info]   (min, avg, max) = (335.657, 536.510, 671.391), stdev = 183.334
[info]   CI (99.9%): [≈ 0, 1242.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1842.917 ±(99.9%) 2461.405 B/op [Average]
[info]   (min, avg, max) = (1142.104, 1842.917, 2318.129), stdev = 639.219
[info]   CI (99.9%): [≈ 0, 4304.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.759 ±(99.9%) 23.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.759, 13.796), stdev = 6.170
[info]   CI (99.9%): [≈ 0, 26.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter
[info] # Run progress: 32.04% complete, ETA 00:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2634738.693 ops/s
[info] # Warmup Iteration   2: 2992430.188 ops/s
[info] # Warmup Iteration   3: 2982522.731 ops/s
[info] # Warmup Iteration   4: 2992661.872 ops/s
[info] # Warmup Iteration   5: 2981557.033 ops/s
[info] Iteration   1: 3053168.387 ops/s
[info]                  ·gc.alloc.rate:                                  1210.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       526.394 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 3036086.322 ops/s
[info]                  ·gc.alloc.rate:            1203.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 705.762 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 3026045.563 ops/s
[info]                  ·gc.alloc.rate:                                  1199.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       531.071 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2997197.743 ops/s
[info]                  ·gc.alloc.rate:            1188.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 714.995 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 3014606.422 ops/s
[info]                  ·gc.alloc.rate:                                  1195.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       533.128 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter":
[info]   3025420.888 ±(99.9%) 81629.200 ops/s [Average]
[info]   (min, avg, max) = (2997197.743, 3025420.888, 3053168.387), stdev = 21198.844
[info]   CI (99.9%): [2943791.687, 3107050.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate":
[info]   1199.396 ±(99.9%) 31.689 MB/sec [Average]
[info]   (min, avg, max) = (1188.490, 1199.396, 1210.144), stdev = 8.230
[info]   CI (99.9%): [1167.706, 1231.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1157.198 ±(99.9%) 718.209 MB/sec [Average]
[info]   (min, avg, max) = (1020.854, 1157.198, 1361.801), stdev = 186.517
[info]   CI (99.9%): [438.989, 1875.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   602.270 ±(99.9%) 380.341 B/op [Average]
[info]   (min, avg, max) = (526.394, 602.270, 714.995), stdev = 98.773
[info]   CI (99.9%): [221.929, 982.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.550
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay
[info] # Run progress: 33.01% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51047.052 ops/s
[info] # Warmup Iteration   2: 136392.322 ops/s
[info] # Warmup Iteration   3: 130563.463 ops/s
[info] # Warmup Iteration   4: 137353.599 ops/s
[info] # Warmup Iteration   5: 136386.673 ops/s
[info] Iteration   1: 135761.493 ops/s
[info]                  ·gc.alloc.rate:                   943.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11699.323 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 140063.656 ops/s
[info]                  ·gc.alloc.rate:                   973.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7642.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.485 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 140396.169 ops/s
[info]                  ·gc.alloc.rate:                                  975.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10936.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11447.483 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 139694.748 ops/s
[info]                  ·gc.alloc.rate:            970.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11505.246 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 139154.659 ops/s
[info]                  ·gc.alloc.rate:            966.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11549.555 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay":
[info]   139014.145 ±(99.9%) 7222.953 ops/s [Average]
[info]   (min, avg, max) = (135761.493, 139014.145, 140396.169), stdev = 1875.778
[info]   CI (99.9%): [131791.192, 146237.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate":
[info]   965.794 ±(99.9%) 50.177 MB/sec [Average]
[info]   (min, avg, max) = (943.162, 965.794, 975.292), stdev = 13.031
[info]   CI (99.9%): [915.617, 1015.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm":
[info]   10936.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10936.003, 10936.003, 10936.003), stdev = 0.001
[info]   CI (99.9%): [10936.003, 10936.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.354), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   950.428 ±(99.9%) 582.428 MB/sec [Average]
[info]   (min, avg, max) = (680.016, 950.428, 1021.133), stdev = 151.255
[info]   CI (99.9%): [367.999, 1532.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10768.827 ±(99.9%) 6739.172 B/op [Average]
[info]   (min, avg, max) = (7642.529, 10768.827, 11699.323), stdev = 1750.142
[info]   CI (99.9%): [4029.655, 17508.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.219 ±(99.9%) 64.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.219, 38.612), stdev = 16.747
[info]   CI (99.9%): [≈ 0, 73.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 18.000), stdev = 5.958
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce
[info] # Run progress: 33.98% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217154.314 ops/s
[info] # Warmup Iteration   2: 391219.010 ops/s
[info] # Warmup Iteration   3: 395725.750 ops/s
[info] # Warmup Iteration   4: 395481.027 ops/s
[info] # Warmup Iteration   5: 397123.118 ops/s
[info] Iteration   1: 401847.197 ops/s
[info]                  ·gc.alloc.rate:                                  1400.936 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5332.627 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 397674.217 ops/s
[info]                  ·gc.alloc.rate:            1386.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       5488.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5388.412 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 399647.559 ops/s
[info]                  ·gc.alloc.rate:                                  1393.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6702.102 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 403605.500 ops/s
[info]                  ·gc.alloc.rate:            1407.023 MB/sec
[info]                  ·gc.alloc.rate.norm:       5488.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5309.548 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 402679.317 ops/s
[info]                  ·gc.alloc.rate:            1403.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       5488.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5321.558 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce":
[info]   401090.758 ±(99.9%) 9268.625 ops/s [Average]
[info]   (min, avg, max) = (397674.217, 401090.758, 403605.500), stdev = 2407.033
[info]   CI (99.9%): [391822.132, 410359.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate":
[info]   1398.350 ±(99.9%) 32.018 MB/sec [Average]
[info]   (min, avg, max) = (1386.549, 1398.350, 1407.023), stdev = 8.315
[info]   CI (99.9%): [1366.332, 1430.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm":
[info]   5488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5488.001, 5488.001, 5488.001), stdev = 0.001
[info]   CI (99.9%): [5488.001, 5488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen":
[info]   1429.369 ±(99.9%) 586.032 MB/sec [Average]
[info]   (min, avg, max) = (1361.271, 1429.369, 1701.616), stdev = 152.191
[info]   CI (99.9%): [843.337, 2015.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5610.849 ±(99.9%) 2351.882 B/op [Average]
[info]   (min, avg, max) = (5309.548, 5610.849, 6702.102), stdev = 610.776
[info]   CI (99.9%): [3258.967, 7962.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson
[info] # Run progress: 34.95% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316339.980 ops/s
[info] # Warmup Iteration   2: 682148.105 ops/s
[info] # Warmup Iteration   3: 682916.465 ops/s
[info] # Warmup Iteration   4: 695115.284 ops/s
[info] # Warmup Iteration   5: 696428.895 ops/s
[info] Iteration   1: 687546.109 ops/s
[info]                  ·gc.alloc.rate:            810.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2305.558 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 690633.665 ops/s
[info]                  ·gc.alloc.rate:                   814.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1530.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 701758.736 ops/s
[info]                  ·gc.alloc.rate:                                  827.485 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2288.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.494 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 704710.306 ops/s
[info]                  ·gc.alloc.rate:            831.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1520.458 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 697169.844 ops/s
[info]                  ·gc.alloc.rate:            822.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2305.303 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson":
[info]   696363.732 ±(99.9%) 27900.920 ops/s [Average]
[info]   (min, avg, max) = (687546.109, 696363.732, 704710.306), stdev = 7245.780
[info]   CI (99.9%): [668462.812, 724264.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate":
[info]   821.109 ±(99.9%) 33.042 MB/sec [Average]
[info]   (min, avg, max) = (810.655, 821.109, 831.003), stdev = 8.581
[info]   CI (99.9%): [788.067, 854.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.001, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.187), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen":
[info]   880.121 ±(99.9%) 717.711 MB/sec [Average]
[info]   (min, avg, max) = (671.370, 880.121, 1021.068), stdev = 186.387
[info]   CI (99.9%): [162.410, 1597.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1990.028 ±(99.9%) 1633.837 B/op [Average]
[info]   (min, avg, max) = (1520.458, 1990.028, 2305.558), stdev = 424.302
[info]   CI (99.9%): [356.191, 3623.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.120 ±(99.9%) 15.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.120, 9.108), stdev = 3.959
[info]   CI (99.9%): [≈ 0, 17.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 18.000), stdev = 6.181
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter
[info] # Run progress: 35.92% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2937460.764 ops/s
[info] # Warmup Iteration   2: 3118172.285 ops/s
[info] # Warmup Iteration   3: 3160470.329 ops/s
[info] # Warmup Iteration   4: 3148723.694 ops/s
[info] # Warmup Iteration   5: 3153778.420 ops/s
[info] Iteration   1: 3113695.982 ops/s
[info]                  ·gc.alloc.rate:            775.375 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 340.075 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3108164.558 ops/s
[info]                  ·gc.alloc.rate:                   774.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        512.701 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 3153089.907 ops/s
[info]                  ·gc.alloc.rate:                                  785.248 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       339.811 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3167922.504 ops/s
[info]                  ·gc.alloc.rate:            789.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 338.230 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3176245.341 ops/s
[info]                  ·gc.alloc.rate:            791.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 506.021 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter":
[info]   3143823.659 ±(99.9%) 120190.552 ops/s [Average]
[info]   (min, avg, max) = (3108164.558, 3143823.659, 3176245.341), stdev = 31213.105
[info]   CI (99.9%): [3023633.107, 3264014.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate":
[info]   782.973 ±(99.9%) 29.836 MB/sec [Average]
[info]   (min, avg, max) = (774.234, 782.973, 791.002), stdev = 7.748
[info]   CI (99.9%): [753.137, 812.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.163), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   813.571 ±(99.9%) 714.776 MB/sec [Average]
[info]   (min, avg, max) = (672.666, 813.571, 1021.082), stdev = 185.625
[info]   CI (99.9%): [98.796, 1528.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   407.367 ±(99.9%) 358.648 B/op [Average]
[info]   (min, avg, max) = (338.230, 407.367, 512.701), stdev = 93.140
[info]   CI (99.9%): [48.720, 766.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.405 ±(99.9%) 3.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.405, 2.024), stdev = 0.905
[info]   CI (99.9%): [≈ 0, 3.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 13.000), stdev = 4.637
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay
[info] # Run progress: 36.89% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102564.062 ops/s
[info] # Warmup Iteration   2: 197918.250 ops/s
[info] # Warmup Iteration   3: 198838.938 ops/s
[info] # Warmup Iteration   4: 199188.013 ops/s
[info] # Warmup Iteration   5: 197688.576 ops/s
[info] Iteration   1: 198833.007 ops/s
[info]                  ·gc.alloc.rate:                   1031.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              8168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8014.258 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.635 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 202229.972 ops/s
[info]                  ·gc.alloc.rate:                                  1049.239 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8168.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10596.547 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 200335.524 ops/s
[info]                  ·gc.alloc.rate:            1039.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       8168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8022.133 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 200558.846 ops/s
[info]                  ·gc.alloc.rate:            1041.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       8168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8013.615 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 200677.396 ops/s
[info]                  ·gc.alloc.rate:            1041.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       8168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8008.983 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay":
[info]   200526.949 ±(99.9%) 4648.775 ops/s [Average]
[info]   (min, avg, max) = (198833.007, 200526.949, 202229.972), stdev = 1207.272
[info]   CI (99.9%): [195878.174, 205175.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate":
[info]   1040.616 ±(99.9%) 24.018 MB/sec [Average]
[info]   (min, avg, max) = (1031.706, 1040.616, 1049.239), stdev = 6.238
[info]   CI (99.9%): [1016.597, 1064.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm":
[info]   8168.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8168.002, 8168.002, 8168.002), stdev = 0.001
[info]   CI (99.9%): [8168.002, 8168.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.091 ±(99.9%) 0.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.455), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 0.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1087.421 ±(99.9%) 589.525 MB/sec [Average]
[info]   (min, avg, max) = (1012.287, 1087.421, 1361.203), stdev = 153.098
[info]   CI (99.9%): [497.896, 1676.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8531.107 ±(99.9%) 4446.052 B/op [Average]
[info]   (min, avg, max) = (8008.983, 8531.107, 10596.547), stdev = 1154.626
[info]   CI (99.9%): [4085.055, 12977.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.327 ±(99.9%) 54.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.327, 31.635), stdev = 14.148
[info]   CI (99.9%): [≈ 0, 60.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 14.000), stdev = 4.336
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce
[info] # Run progress: 37.86% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279874.752 ops/s
[info] # Warmup Iteration   2: 453303.264 ops/s
[info] # Warmup Iteration   3: 458714.904 ops/s
[info] # Warmup Iteration   4: 459808.887 ops/s
[info] # Warmup Iteration   5: 469482.200 ops/s
[info] Iteration   1: 469389.333 ops/s
[info]                  ·gc.alloc.rate:            1794.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5706.697 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 467564.026 ops/s
[info]                  ·gc.alloc.rate:                                  1787.468 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5728.968 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 468145.565 ops/s
[info]                  ·gc.alloc.rate:                                  1789.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5721.871 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 463093.779 ops/s
[info]                  ·gc.alloc.rate:                                  1770.382 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6940.794 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 471464.524 ops/s
[info]                  ·gc.alloc.rate:            1802.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5681.151 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce":
[info]   467931.445 ±(99.9%) 11898.418 ops/s [Average]
[info]   (min, avg, max) = (463093.779, 467931.445, 471464.524), stdev = 3089.981
[info]   CI (99.9%): [456033.028, 479829.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate":
[info]   1788.847 ±(99.9%) 45.422 MB/sec [Average]
[info]   (min, avg, max) = (1770.382, 1788.847, 1802.397), stdev = 11.796
[info]   CI (99.9%): [1743.425, 1834.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1770.206 ±(99.9%) 586.198 MB/sec [Average]
[info]   (min, avg, max) = (1702.018, 1770.206, 2042.529), stdev = 152.234
[info]   CI (99.9%): [1184.008, 2356.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5955.896 ±(99.9%) 2121.240 B/op [Average]
[info]   (min, avg, max) = (5681.151, 5955.896, 6940.794), stdev = 550.879
[info]   CI (99.9%): [3834.656, 8077.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 10.000), stdev = 1.414
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter
[info] # Run progress: 38.83% complete, ETA 00:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2118637.430 ops/s
[info] # Warmup Iteration   2: 2233804.316 ops/s
[info] # Warmup Iteration   3: 2232166.814 ops/s
[info] # Warmup Iteration   4: 2224629.815 ops/s
[info] # Warmup Iteration   5: 2264174.163 ops/s
[info] Iteration   1: 2264967.963 ops/s
[info]                  ·gc.alloc.rate:            1461.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 946.119 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 2276878.559 ops/s
[info]                  ·gc.alloc.rate:            1469.833 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 941.135 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2277790.763 ops/s
[info]                  ·gc.alloc.rate:                                  1470.300 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1175.996 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 2235268.921 ops/s
[info]                  ·gc.alloc.rate:                                  1442.643 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       958.679 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 2272522.004 ops/s
[info]                  ·gc.alloc.rate:                                  1466.890 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       942.904 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter":
[info]   2265485.642 ±(99.9%) 67908.024 ops/s [Average]
[info]   (min, avg, max) = (2235268.921, 2265485.642, 2277790.763), stdev = 17635.498
[info]   CI (99.9%): [2197577.619, 2333393.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate":
[info]   1462.281 ±(99.9%) 44.263 MB/sec [Average]
[info]   (min, avg, max) = (1442.643, 1462.281, 1470.300), stdev = 11.495
[info]   CI (99.9%): [1418.018, 1506.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1429.433 ±(99.9%) 586.371 MB/sec [Average]
[info]   (min, avg, max) = (1361.198, 1429.433, 1701.838), stdev = 152.279
[info]   CI (99.9%): [843.062, 2015.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   992.967 ±(99.9%) 394.869 B/op [Average]
[info]   (min, avg, max) = (941.135, 992.967, 1175.996), stdev = 102.546
[info]   CI (99.9%): [598.098, 1387.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 12.000), stdev = 3.674
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay
[info] # Run progress: 39.81% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39857.691 ops/s
[info] # Warmup Iteration   2: 126357.733 ops/s
[info] # Warmup Iteration   3: 127523.097 ops/s
[info] # Warmup Iteration   4: 129471.202 ops/s
[info] # Warmup Iteration   5: 130166.107 ops/s
[info] Iteration   1: 127516.731 ops/s
[info]                  ·gc.alloc.rate:            912.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       11264.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12456.228 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 128233.247 ops/s
[info]                  ·gc.alloc.rate:                                  917.612 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11264.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12476.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                49.055 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 129819.573 ops/s
[info]                  ·gc.alloc.rate:                                  929.039 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11264.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.327 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12380.082 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 130027.030 ops/s
[info]                  ·gc.alloc.rate:            930.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       11264.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8240.505 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 130342.851 ops/s
[info]                  ·gc.alloc.rate:            932.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       11264.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12330.605 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay":
[info]   129187.887 ±(99.9%) 4771.238 ops/s [Average]
[info]   (min, avg, max) = (127516.731, 129187.887, 130342.851), stdev = 1239.075
[info]   CI (99.9%): [124416.649, 133959.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate":
[info]   924.487 ±(99.9%) 34.287 MB/sec [Average]
[info]   (min, avg, max) = (912.484, 924.487, 932.767), stdev = 8.904
[info]   CI (99.9%): [890.199, 958.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   11264.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11264.003, 11264.003, 11264.003), stdev = 0.001
[info]   CI (99.9%): [11264.003, 11264.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.182), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.512 ±(99.9%) 3.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.233), stdev = 0.972
[info]   CI (99.9%): [≈ 0, 4.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   949.676 ±(99.9%) 579.179 MB/sec [Average]
[info]   (min, avg, max) = (680.756, 949.676, 1021.092), stdev = 150.411
[info]   CI (99.9%): [370.496, 1528.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   11576.750 ±(99.9%) 7185.064 B/op [Average]
[info]   (min, avg, max) = (8240.505, 11576.750, 12476.332), stdev = 1865.938
[info]   CI (99.9%): [4391.687, 18761.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.811 ±(99.9%) 84.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.811, 49.055), stdev = 21.938
[info]   CI (99.9%): [≈ 0, 94.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 18.000), stdev = 6.542
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson
[info] # Run progress: 40.78% complete, ETA 00:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156766.140 ops/s
[info] # Warmup Iteration   2: 657409.903 ops/s
[info] # Warmup Iteration   3: 665135.339 ops/s
[info] # Warmup Iteration   4: 661983.373 ops/s
[info] # Warmup Iteration   5: 673583.538 ops/s
[info] Iteration   1: 669694.547 ops/s
[info]                  ·gc.alloc.rate:            867.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2367.024 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 667405.742 ops/s
[info]                  ·gc.alloc.rate:                   864.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2384.559 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.996 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 681514.622 ops/s
[info]                  ·gc.alloc.rate:                                  883.322 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.304 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.701 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1572.136 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 679508.108 ops/s
[info]                  ·gc.alloc.rate:            880.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2365.226 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 677311.655 ops/s
[info]                  ·gc.alloc.rate:            877.749 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1581.945 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson":
[info]   675086.935 ±(99.9%) 23884.075 ops/s [Average]
[info]   (min, avg, max) = (667405.742, 675086.935, 681514.622), stdev = 6202.618
[info]   CI (99.9%): [651202.860, 698971.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate":
[info]   874.905 ±(99.9%) 31.165 MB/sec [Average]
[info]   (min, avg, max) = (864.865, 874.905, 883.322), stdev = 8.093
[info]   CI (99.9%): [843.741, 906.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2040.001, 2040.001, 2040.001), stdev = 0.001
[info]   CI (99.9%): [2040.001, 2040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.061 ±(99.9%) 0.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.304), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.140 ±(99.9%) 1.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.701), stdev = 0.314
[info]   CI (99.9%): [≈ 0, 1.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   880.092 ±(99.9%) 701.174 MB/sec [Average]
[info]   (min, avg, max) = (680.662, 880.092, 1021.081), stdev = 182.093
[info]   CI (99.9%): [178.919, 1581.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2054.178 ±(99.9%) 1677.511 B/op [Average]
[info]   (min, avg, max) = (1572.136, 2054.178, 2384.559), stdev = 435.644
[info]   CI (99.9%): [376.667, 3731.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.199 ±(99.9%) 18.936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.199, 10.996), stdev = 4.918
[info]   CI (99.9%): [≈ 0, 21.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 19.000), stdev = 7.629
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter
[info] # Run progress: 41.75% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2092602.031 ops/s
[info] # Warmup Iteration   2: 1366697.106 ops/s
[info] # Warmup Iteration   3: 1396284.213 ops/s
[info] # Warmup Iteration   4: 1381056.482 ops/s
[info] # Warmup Iteration   5: 1387873.145 ops/s
[info] Iteration   1: 1399373.949 ops/s
[info]                  ·gc.alloc.rate:            661.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 756.696 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 1394606.858 ops/s
[info]                  ·gc.alloc.rate:            659.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 759.290 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 1388244.427 ops/s
[info]                  ·gc.alloc.rate:                   656.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        766.528 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1394020.687 ops/s
[info]                  ·gc.alloc.rate:                                  659.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.137 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       768.590 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1405608.108 ops/s
[info]                  ·gc.alloc.rate:            664.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 762.277 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter":
[info]   1396370.806 ±(99.9%) 25030.609 ops/s [Average]
[info]   (min, avg, max) = (1388244.427, 1396370.806, 1405608.108), stdev = 6500.370
[info]   CI (99.9%): [1371340.197, 1421401.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate":
[info]   660.124 ±(99.9%) 11.742 MB/sec [Average]
[info]   (min, avg, max) = (656.314, 660.124, 664.437), stdev = 3.049
[info]   CI (99.9%): [648.382, 671.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.031 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   676.687 ±(99.9%) 15.377 MB/sec [Average]
[info]   (min, avg, max) = (672.783, 676.687, 680.831), stdev = 3.993
[info]   CI (99.9%): [661.310, 692.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   762.676 ±(99.9%) 18.981 B/op [Average]
[info]   (min, avg, max) = (756.696, 762.676, 768.590), stdev = 4.929
[info]   CI (99.9%): [743.695, 781.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.906 ±(99.9%) 7.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.906, 4.531), stdev = 2.026
[info]   CI (99.9%): [≈ 0, 8.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 11.000), stdev = 4.301
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay
[info] # Run progress: 42.72% complete, ETA 00:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93491.680 ops/s
[info] # Warmup Iteration   2: 159035.141 ops/s
[info] # Warmup Iteration   3: 161876.602 ops/s
[info] # Warmup Iteration   4: 158651.934 ops/s
[info] # Warmup Iteration   5: 160132.550 ops/s
[info] Iteration   1: 158384.218 ops/s
[info]                  ·gc.alloc.rate:            848.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10028.487 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 160626.013 ops/s
[info]                  ·gc.alloc.rate:                   860.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6624.701 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 162293.338 ops/s
[info]                  ·gc.alloc.rate:                                  869.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9902.708 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 162805.440 ops/s
[info]                  ·gc.alloc.rate:            872.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6580.846 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 159717.761 ops/s
[info]                  ·gc.alloc.rate:                                  855.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10062.832 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay":
[info]   160765.354 ±(99.9%) 7017.095 ops/s [Average]
[info]   (min, avg, max) = (158384.218, 160765.354, 162805.440), stdev = 1822.317
[info]   CI (99.9%): [153748.259, 167782.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate":
[info]   861.176 ±(99.9%) 37.740 MB/sec [Average]
[info]   (min, avg, max) = (848.356, 861.176, 872.151), stdev = 9.801
[info]   CI (99.9%): [823.436, 898.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm":
[info]   8432.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.003, 8432.003, 8432.003), stdev = 0.001
[info]   CI (99.9%): [8432.002, 8432.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.413), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 0.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.541 ±(99.9%) 714.486 MB/sec [Average]
[info]   (min, avg, max) = (676.042, 881.541, 1021.002), stdev = 185.550
[info]   CI (99.9%): [167.055, 1596.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8639.915 ±(99.9%) 7164.766 B/op [Average]
[info]   (min, avg, max) = (6580.846, 8639.915, 10062.832), stdev = 1860.667
[info]   CI (99.9%): [1475.149, 15804.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.832 ±(99.9%) 67.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.832, 39.161), stdev = 17.513
[info]   CI (99.9%): [≈ 0, 75.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 17.000), stdev = 6.058
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce
[info] # Run progress: 43.69% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211857.678 ops/s
[info] # Warmup Iteration   2: 380938.415 ops/s
[info] # Warmup Iteration   3: 383441.056 ops/s
[info] # Warmup Iteration   4: 386304.763 ops/s
[info] # Warmup Iteration   5: 388113.301 ops/s
[info] Iteration   1: 398052.848 ops/s
[info]                  ·gc.alloc.rate:                                  1232.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4037.573 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 396727.578 ops/s
[info]                  ·gc.alloc.rate:            1228.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5401.462 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 393102.341 ops/s
[info]                  ·gc.alloc.rate:                                  1216.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5451.083 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 394534.886 ops/s
[info]                  ·gc.alloc.rate:                                  1221.427 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4073.600 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 393766.221 ops/s
[info]                  ·gc.alloc.rate:                                  1218.837 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5442.141 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce":
[info]   395236.774 ±(99.9%) 8022.783 ops/s [Average]
[info]   (min, avg, max) = (393102.341, 395236.774, 398052.848), stdev = 2083.491
[info]   CI (99.9%): [387213.991, 403259.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate":
[info]   1223.463 ±(99.9%) 24.804 MB/sec [Average]
[info]   (min, avg, max) = (1216.822, 1223.463, 1232.098), stdev = 6.442
[info]   CI (99.9%): [1198.659, 1248.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.077 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.375), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   1225.372 ±(99.9%) 717.794 MB/sec [Average]
[info]   (min, avg, max) = (1021.076, 1225.372, 1361.594), stdev = 186.409
[info]   CI (99.9%): [507.577, 1943.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4881.172 ±(99.9%) 2903.356 B/op [Average]
[info]   (min, avg, max) = (4037.573, 4881.172, 5451.083), stdev = 753.992
[info]   CI (99.9%): [1977.816, 7784.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson
[info] # Run progress: 44.66% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 557997.884 ops/s
[info] # Warmup Iteration   2: 926180.471 ops/s
[info] # Warmup Iteration   3: 938975.318 ops/s
[info] # Warmup Iteration   4: 928447.224 ops/s
[info] # Warmup Iteration   5: 939314.109 ops/s
[info] Iteration   1: 936722.206 ops/s
[info]                  ·gc.alloc.rate:            709.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1130.413 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 932348.730 ops/s
[info]                  ·gc.alloc.rate:                   706.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1134.595 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 927447.184 ops/s
[info]                  ·gc.alloc.rate:                   702.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1718.191 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 928559.846 ops/s
[info]                  ·gc.alloc.rate:                                  703.258 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1153.893 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 941955.987 ops/s
[info]                  ·gc.alloc.rate:                                  713.462 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1137.526 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson":
[info]   933406.791 ±(99.9%) 23120.706 ops/s [Average]
[info]   (min, avg, max) = (927447.184, 933406.791, 941955.987), stdev = 6004.374
[info]   CI (99.9%): [910286.085, 956527.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate":
[info]   706.904 ±(99.9%) 17.553 MB/sec [Average]
[info]   (min, avg, max) = (702.400, 706.904, 713.462), stdev = 4.559
[info]   CI (99.9%): [689.351, 724.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.153), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   743.769 ±(99.9%) 578.615 MB/sec [Average]
[info]   (min, avg, max) = (672.074, 743.769, 1012.464), stdev = 150.264
[info]   CI (99.9%): [165.154, 1322.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1254.924 ±(99.9%) 997.808 B/op [Average]
[info]   (min, avg, max) = (1130.413, 1254.924, 1718.191), stdev = 259.127
[info]   CI (99.9%): [257.116, 2252.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.581 ±(99.9%) 11.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.581, 6.782), stdev = 2.948
[info]   CI (99.9%): [≈ 0, 12.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 14.000), stdev = 5.020
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter
[info] # Run progress: 45.63% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3973331.301 ops/s
[info] # Warmup Iteration   2: 4252333.419 ops/s
[info] # Warmup Iteration   3: 4181119.420 ops/s
[info] # Warmup Iteration   4: 4233900.926 ops/s
[info] # Warmup Iteration   5: 4241735.179 ops/s
[info] Iteration   1: 4160709.096 ops/s
[info]                  ·gc.alloc.rate:                   126.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        126.730 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.504 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 4216929.324 ops/s
[info]                  ·gc.alloc.rate:      128.591 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4123923.863 ops/s
[info]                  ·gc.alloc.rate:            125.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.383 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4184968.412 ops/s
[info]                  ·gc.alloc.rate:      127.628 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4175174.645 ops/s
[info]                  ·gc.alloc.rate:      127.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter":
[info]   4172341.068 ±(99.9%) 131079.223 ops/s [Average]
[info]   (min, avg, max) = (4123923.863, 4172341.068, 4216929.324), stdev = 34040.858
[info]   CI (99.9%): [4041261.845, 4303420.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate":
[info]   127.230 ±(99.9%) 4.013 MB/sec [Average]
[info]   (min, avg, max) = (125.752, 127.230, 128.591), stdev = 1.042
[info]   CI (99.9%): [123.217, 131.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.253 ±(99.9%) 707.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.253, 336.340), stdev = 183.834
[info]   CI (99.9%): [≈ 0, 842.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   51.023 ±(99.9%) 269.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.023, 128.383), stdev = 69.868
[info]   CI (99.9%): [≈ 0, 320.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.101 ±(99.9%) 0.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.504), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 0.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 11.000), stdev = 4.868
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay
[info] # Run progress: 46.60% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70672.189 ops/s
[info] # Warmup Iteration   2: 132139.465 ops/s
[info] # Warmup Iteration   3: 136465.126 ops/s
[info] # Warmup Iteration   4: 136085.155 ops/s
[info] # Warmup Iteration   5: 137896.372 ops/s
[info] Iteration   1: 137096.434 ops/s
[info]                  ·gc.alloc.rate:            891.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11585.503 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 137791.590 ops/s
[info]                  ·gc.alloc.rate:                                  896.348 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.259 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11610.604 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.651 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 139790.649 ops/s
[info]                  ·gc.alloc.rate:                                  909.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7664.075 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 138763.578 ops/s
[info]                  ·gc.alloc.rate:            902.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11581.675 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 139259.641 ops/s
[info]                  ·gc.alloc.rate:            906.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11540.931 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay":
[info]   138540.378 ±(99.9%) 4207.607 ops/s [Average]
[info]   (min, avg, max) = (137096.434, 138540.378, 139790.649), stdev = 1092.702
[info]   CI (99.9%): [134332.771, 142747.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate":
[info]   901.322 ±(99.9%) 27.680 MB/sec [Average]
[info]   (min, avg, max) = (891.825, 901.322, 909.429), stdev = 7.188
[info]   CI (99.9%): [873.642, 929.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.135 ±(99.9%) 0.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.414), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   949.682 ±(99.9%) 579.417 MB/sec [Average]
[info]   (min, avg, max) = (680.657, 949.682, 1021.331), stdev = 150.473
[info]   CI (99.9%): [370.265, 1529.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10796.558 ±(99.9%) 6743.590 B/op [Average]
[info]   (min, avg, max) = (7664.075, 10796.558, 11610.604), stdev = 1751.289
[info]   CI (99.9%): [4052.967, 17540.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.130 ±(99.9%) 78.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.130, 45.651), stdev = 20.416
[info]   CI (99.9%): [≈ 0, 87.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 18.000), stdev = 6.542
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce
[info] # Run progress: 47.57% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2897.035 ops/s
[info] # Warmup Iteration   2: 4921.805 ops/s
[info] # Warmup Iteration   3: 6647.266 ops/s
[info] # Warmup Iteration   4: 7431.399 ops/s
[info] # Warmup Iteration   5: 7413.728 ops/s
[info] Iteration   1: 7488.542 ops/s
[info]                  ·gc.alloc.rate:                   1102.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              231656.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        212655.133 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 979.978 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 7574.517 ops/s
[info]                  ·gc.alloc.rate:                                  1114.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.186 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       212150.852 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 7447.121 ops/s
[info]                  ·gc.alloc.rate:                                  1096.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       215796.350 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7485.024 ops/s
[info]                  ·gc.alloc.rate:                                  1101.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       286268.111 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 7516.249 ops/s
[info]                  ·gc.alloc.rate:                                  1106.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231673.289 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.664 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       213815.777 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce":
[info]   7502.291 ±(99.9%) 182.067 ops/s [Average]
[info]   (min, avg, max) = (7447.121, 7502.291, 7574.517), stdev = 47.282
[info]   CI (99.9%): [7320.224, 7684.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate":
[info]   1104.155 ±(99.9%) 26.733 MB/sec [Average]
[info]   (min, avg, max) = (1096.072, 1104.155, 1114.745), stdev = 6.943
[info]   CI (99.9%): [1077.422, 1130.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm":
[info]   231659.504 ±(99.9%) 29.673 B/op [Average]
[info]   (min, avg, max) = (231656.054, 231659.504, 231673.289), stdev = 7.706
[info]   CI (99.9%): [231629.831, 231689.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.121), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   9.217 ±(99.9%) 36.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.217, 25.186), stdev = 9.575
[info]   CI (99.9%): [≈ 0, 46.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   1087.186 ±(99.9%) 590.448 MB/sec [Average]
[info]   (min, avg, max) = (1011.614, 1087.186, 1361.388), stdev = 153.337
[info]   CI (99.9%): [496.738, 1677.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   228137.244 ±(99.9%) 125247.488 B/op [Average]
[info]   (min, avg, max) = (212150.852, 228137.244, 286268.111), stdev = 32526.375
[info]   CI (99.9%): [102889.756, 353384.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   195.996 ±(99.9%) 1687.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 195.996, 979.978), stdev = 438.259
[info]   CI (99.9%): [≈ 0, 1883.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 16.000), stdev = 5.196
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson
[info] # Run progress: 48.54% complete, ETA 00:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3739.437 ops/s
[info] # Warmup Iteration   2: 8631.173 ops/s
[info] # Warmup Iteration   3: 10633.887 ops/s
[info] # Warmup Iteration   4: 10828.089 ops/s
[info] # Warmup Iteration   5: 10823.169 ops/s
[info] Iteration   1: 10645.705 ops/s
[info]                  ·gc.alloc.rate:                   150.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49238.167 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 393.905 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10724.655 ops/s
[info]                  ·gc.alloc.rate:      151.477 MB/sec
[info]                  ·gc.alloc.rate.norm: 22230.895 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10632.962 ops/s
[info]                  ·gc.alloc.rate:            150.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49692.741 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 10710.836 ops/s
[info]                  ·gc.alloc.rate:      151.380 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.041 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10653.307 ops/s
[info]                  ·gc.alloc.rate:                   150.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49501.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 98.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson":
[info]   10673.493 ±(99.9%) 159.168 ops/s [Average]
[info]   (min, avg, max) = (10632.962, 10673.493, 10724.655), stdev = 41.335
[info]   CI (99.9%): [10514.325, 10832.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate":
[info]   150.808 ±(99.9%) 2.223 MB/sec [Average]
[info]   (min, avg, max) = (150.269, 150.808, 151.477), stdev = 0.577
[info]   CI (99.9%): [148.584, 153.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   22235.011 ±(99.9%) 28.103 B/op [Average]
[info]   (min, avg, max) = (22224.044, 22235.011, 22240.041), stdev = 7.298
[info]   CI (99.9%): [22206.908, 22263.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   200.797 ±(99.9%) 705.838 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 200.797, 335.759), stdev = 183.304
[info]   CI (99.9%): [≈ 0, 906.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   29686.392 ±(99.9%) 104353.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29686.392, 49692.741), stdev = 27100.325
[info]   CI (99.9%): [≈ 0, 134040.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.665), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   98.463 ±(99.9%) 656.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98.463, 393.905), stdev = 170.566
[info]   CI (99.9%): [≈ 0, 755.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 7.000), stdev = 3.674
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter
[info] # Run progress: 49.51% complete, ETA 00:14:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7798.581 ops/s
[info] # Warmup Iteration   2: 13151.657 ops/s
[info] # Warmup Iteration   3: 21782.938 ops/s
[info] # Warmup Iteration   4: 21965.182 ops/s
[info] # Warmup Iteration   5: 21477.140 ops/s
[info] Iteration   1: 22080.492 ops/s
[info]                  ·gc.alloc.rate:      199.047 MB/sec
[info]                  ·gc.alloc.rate.norm: 14192.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21910.463 ops/s
[info]                  ·gc.alloc.rate:            197.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       14190.525 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24164.045 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 21858.943 ops/s
[info]                  ·gc.alloc.rate:            197.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       14192.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24220.413 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 21764.286 ops/s
[info]                  ·gc.alloc.rate:      196.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 14192.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21799.033 ops/s
[info]                  ·gc.alloc.rate:            196.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       14192.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24287.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter":
[info]   21882.643 ±(99.9%) 477.382 ops/s [Average]
[info]   (min, avg, max) = (21764.286, 21882.643, 22080.492), stdev = 123.975
[info]   CI (99.9%): [21405.261, 22360.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate":
[info]   197.290 ±(99.9%) 4.246 MB/sec [Average]
[info]   (min, avg, max) = (196.228, 197.290, 199.047), stdev = 1.103
[info]   CI (99.9%): [193.044, 201.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   14191.721 ±(99.9%) 2.576 B/op [Average]
[info]   (min, avg, max) = (14190.525, 14191.721, 14192.025), stdev = 0.669
[info]   CI (99.9%): [14189.146, 14194.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.818 ±(99.9%) 709.419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.818, 336.371), stdev = 184.234
[info]   CI (99.9%): [≈ 0, 911.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   14534.305 ±(99.9%) 51090.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14534.305, 24287.065), stdev = 13268.016
[info]   CI (99.9%): [≈ 0, 65624.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 6.000), stdev = 3.286
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay
[info] # Run progress: 50.49% complete, ETA 00:13:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 823.309 ops/s
[info] # Warmup Iteration   2: 2729.433 ops/s
[info] # Warmup Iteration   3: 2951.819 ops/s
[info] # Warmup Iteration   4: 3007.145 ops/s
[info] # Warmup Iteration   5: 3071.008 ops/s
[info] Iteration   1: 3045.945 ops/s
[info]                  ·gc.alloc.rate:                   883.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              456584.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        521018.728 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 344.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 3039.741 ops/s
[info]                  ·gc.alloc.rate:                   881.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              456584.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        524115.594 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2068.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 3074.818 ops/s
[info]                  ·gc.alloc.rate:                                  892.005 MB/sec
[info]                  ·gc.alloc.rate.norm:                             456584.143 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 54.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       348389.035 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 3044.627 ops/s
[info]                  ·gc.alloc.rate:                                  883.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             456584.144 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       527730.469 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3058.008 ops/s
[info]                  ·gc.alloc.rate:                                  887.107 MB/sec
[info]                  ·gc.alloc.rate.norm:                             456584.133 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       525487.744 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay":
[info]   3052.628 ±(99.9%) 54.323 ops/s [Average]
[info]   (min, avg, max) = (3039.741, 3052.628, 3074.818), stdev = 14.108
[info]   CI (99.9%): [2998.305, 3106.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate":
[info]   885.544 ±(99.9%) 15.799 MB/sec [Average]
[info]   (min, avg, max) = (881.816, 885.544, 892.005), stdev = 4.103
[info]   CI (99.9%): [869.744, 901.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   456584.140 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (456584.133, 456584.140, 456584.145), stdev = 0.006
[info]   CI (99.9%): [456584.118, 456584.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.107), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   11.775 ±(99.9%) 92.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.775, 54.835), stdev = 24.107
[info]   CI (99.9%): [≈ 0, 104.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   948.593 ±(99.9%) 577.208 MB/sec [Average]
[info]   (min, avg, max) = (680.630, 948.593, 1020.982), stdev = 149.899
[info]   CI (99.9%): [371.385, 1525.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   489348.314 ±(99.9%) 303569.888 B/op [Average]
[info]   (min, avg, max) = (348389.035, 489348.314, 527730.469), stdev = 78836.136
[info]   CI (99.9%): [185778.426, 792918.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   482.602 ±(99.9%) 3462.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 482.602, 2068.877), stdev = 899.188
[info]   CI (99.9%): [≈ 0, 3945.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.600, 19.000), stdev = 6.950
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce
[info] # Run progress: 51.46% complete, ETA 00:13:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196170.117 ops/s
[info] # Warmup Iteration   2: 327411.782 ops/s
[info] # Warmup Iteration   3: 335442.573 ops/s
[info] # Warmup Iteration   4: 332701.373 ops/s
[info] # Warmup Iteration   5: 330847.671 ops/s
[info] Iteration   1: 337039.269 ops/s
[info]                  ·gc.alloc.rate:                                  1120.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5232.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.378 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4765.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.111 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 337121.090 ops/s
[info]                  ·gc.alloc.rate:                                  1120.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5232.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4767.202 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 338209.388 ops/s
[info]                  ·gc.alloc.rate:            1124.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       5232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6336.050 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 337500.280 ops/s
[info]                  ·gc.alloc.rate:                                  1121.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5232.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4762.103 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 338684.831 ops/s
[info]                  ·gc.alloc.rate:            1125.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       5232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4745.332 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce":
[info]   337710.972 ±(99.9%) 2750.151 ops/s [Average]
[info]   (min, avg, max) = (337039.269, 337710.972, 338684.831), stdev = 714.205
[info]   CI (99.9%): [334960.821, 340461.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate":
[info]   1122.525 ±(99.9%) 9.292 MB/sec [Average]
[info]   (min, avg, max) = (1120.320, 1122.525, 1125.768), stdev = 2.413
[info]   CI (99.9%): [1113.233, 1131.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm":
[info]   5232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5232.001, 5232.001, 5232.001), stdev = 0.001
[info]   CI (99.9%): [5232.001, 5232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.082 ±(99.9%) 0.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.378), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1088.986 ±(99.9%) 586.601 MB/sec [Average]
[info]   (min, avg, max) = (1020.394, 1088.986, 1361.496), stdev = 152.338
[info]   CI (99.9%): [502.384, 1675.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5075.205 ±(99.9%) 2714.270 B/op [Average]
[info]   (min, avg, max) = (4745.332, 5075.205, 6336.050), stdev = 704.887
[info]   CI (99.9%): [2360.934, 7789.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.622 ±(99.9%) 5.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.622, 3.111), stdev = 1.391
[info]   CI (99.9%): [≈ 0, 5.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson
[info] # Run progress: 52.43% complete, ETA 00:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 819837.759 ops/s
[info] # Warmup Iteration   2: 1347983.818 ops/s
[info] # Warmup Iteration   3: 1333683.382 ops/s
[info] # Warmup Iteration   4: 1321618.335 ops/s
[info] # Warmup Iteration   5: 1355354.862 ops/s
[info] Iteration   1: 1352085.516 ops/s
[info]                  ·gc.alloc.rate:            563.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 781.604 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1360051.767 ops/s
[info]                  ·gc.alloc.rate:            566.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 777.026 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1351416.728 ops/s
[info]                  ·gc.alloc.rate:            563.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 390.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1355670.221 ops/s
[info]                  ·gc.alloc.rate:            564.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 779.544 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 1360383.438 ops/s
[info]                  ·gc.alloc.rate:                   567.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        781.467 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson":
[info]   1355921.534 ±(99.9%) 16341.309 ops/s [Average]
[info]   (min, avg, max) = (1351416.728, 1355921.534, 1360383.438), stdev = 4243.786
[info]   CI (99.9%): [1339580.225, 1372262.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate":
[info]   565.116 ±(99.9%) 6.852 MB/sec [Average]
[info]   (min, avg, max) = (563.194, 565.116, 567.033), stdev = 1.779
[info]   CI (99.9%): [558.264, 571.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen":
[info]   605.071 ±(99.9%) 580.002 MB/sec [Average]
[info]   (min, avg, max) = (335.644, 605.071, 675.484), stdev = 150.625
[info]   CI (99.9%): [25.069, 1185.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   702.119 ±(99.9%) 669.845 B/op [Average]
[info]   (min, avg, max) = (390.953, 702.119, 781.604), stdev = 173.957
[info]   CI (99.9%): [32.274, 1371.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.079 ±(99.9%) 9.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.079, 5.395), stdev = 2.413
[info]   CI (99.9%): [≈ 0, 10.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 12.000), stdev = 2.683
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter
[info] # Run progress: 53.40% complete, ETA 00:13:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10281501.100 ops/s
[info] # Warmup Iteration   2: 10793225.669 ops/s
[info] # Warmup Iteration   3: 11588336.651 ops/s
[info] # Warmup Iteration   4: 11559759.567 ops/s
[info] # Warmup Iteration   5: 11417936.614 ops/s
[info] Iteration   1: 11299319.691 ops/s
[info]                  ·gc.alloc.rate:            574.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.712 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 11406448.807 ops/s
[info]                  ·gc.alloc.rate:            579.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46.416 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11037609.492 ops/s
[info]                  ·gc.alloc.rate:            560.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95.929 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 10982174.315 ops/s
[info]                  ·gc.alloc.rate:                   558.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        96.418 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.477 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 11543991.744 ops/s
[info]                  ·gc.alloc.rate:                   586.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             339.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46.316 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter":
[info]   11253908.810 ±(99.9%) 923560.186 ops/s [Average]
[info]   (min, avg, max) = (10982174.315, 11253908.810, 11543991.744), stdev = 239845.647
[info]   CI (99.9%): [10330348.623, 12177468.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate":
[info]   571.969 ±(99.9%) 46.937 MB/sec [Average]
[info]   (min, avg, max) = (558.182, 571.969, 586.734), stdev = 12.189
[info]   CI (99.9%): [525.032, 618.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.819 ±(99.9%) 705.845 MB/sec [Average]
[info]   (min, avg, max) = (336.358, 538.819, 672.731), stdev = 183.306
[info]   CI (99.9%): [≈ 0, 1244.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   75.758 ±(99.9%) 103.393 B/op [Average]
[info]   (min, avg, max) = (46.316, 75.758, 96.418), stdev = 26.851
[info]   CI (99.9%): [≈ 0, 179.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.114 ±(99.9%) 0.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.477), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 0.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 12.000), stdev = 4.438
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay
[info] # Run progress: 54.37% complete, ETA 00:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124303.731 ops/s
[info] # Warmup Iteration   2: 182035.830 ops/s
[info] # Warmup Iteration   3: 200388.913 ops/s
[info] # Warmup Iteration   4: 200561.426 ops/s
[info] # Warmup Iteration   5: 201748.828 ops/s
[info] Iteration   1: 201075.563 ops/s
[info]                  ·gc.alloc.rate:            681.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       5336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5266.213 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 201570.455 ops/s
[info]                  ·gc.alloc.rate:            683.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       5336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5253.230 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 200268.201 ops/s
[info]                  ·gc.alloc.rate:                   679.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5287.378 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 202277.861 ops/s
[info]                  ·gc.alloc.rate:                   685.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5291.729 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 202864.073 ops/s
[info]                  ·gc.alloc.rate:                                  687.693 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5281.692 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay":
[info]   201611.230 ±(99.9%) 3901.494 ops/s [Average]
[info]   (min, avg, max) = (200268.201, 201611.230, 202864.073), stdev = 1013.205
[info]   CI (99.9%): [197709.737, 205512.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate":
[info]   683.531 ±(99.9%) 13.032 MB/sec [Average]
[info]   (min, avg, max) = (679.001, 683.531, 687.693), stdev = 3.384
[info]   CI (99.9%): [670.499, 696.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm":
[info]   5336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.002, 5336.002, 5336.002), stdev = 0.001
[info]   CI (99.9%): [5336.002, 5336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.337), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen":
[info]   675.852 ±(99.9%) 15.922 MB/sec [Average]
[info]   (min, avg, max) = (672.813, 675.852, 680.693), stdev = 4.135
[info]   CI (99.9%): [659.930, 691.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5276.048 ±(99.9%) 61.594 B/op [Average]
[info]   (min, avg, max) = (5253.230, 5276.048, 5291.729), stdev = 15.996
[info]   CI (99.9%): [5214.454, 5337.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.272 ±(99.9%) 43.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.272, 26.175), stdev = 11.350
[info]   CI (99.9%): [≈ 0, 49.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 12.000), stdev = 4.506
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce
[info] # Run progress: 55.34% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 909415.066 ops/s
[info] # Warmup Iteration   2: 1193290.614 ops/s
[info] # Warmup Iteration   3: 1190198.773 ops/s
[info] # Warmup Iteration   4: 1206966.698 ops/s
[info] # Warmup Iteration   5: 1211514.222 ops/s
[info] Iteration   1: 1233057.341 ops/s
[info]                  ·gc.alloc.rate:                                  1259.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1737.891 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1224962.164 ops/s
[info]                  ·gc.alloc.rate:                                  1251.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1312.003 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1207531.080 ops/s
[info]                  ·gc.alloc.rate:                                  1233.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1774.599 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1221961.525 ops/s
[info]                  ·gc.alloc.rate:                                  1248.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1753.700 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1225084.343 ops/s
[info]                  ·gc.alloc.rate:            1251.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       1608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1311.927 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce":
[info]   1222519.290 ±(99.9%) 35945.054 ops/s [Average]
[info]   (min, avg, max) = (1207531.080, 1222519.290, 1233057.341), stdev = 9334.816
[info]   CI (99.9%): [1186574.236, 1258464.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate":
[info]   1248.783 ±(99.9%) 36.413 MB/sec [Average]
[info]   (min, avg, max) = (1233.590, 1248.783, 1259.467), stdev = 9.456
[info]   CI (99.9%): [1212.371, 1285.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm":
[info]   1608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.000, 1608.000, 1608.000), stdev = 0.001
[info]   CI (99.9%): [1608.000, 1608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1225.169 ±(99.9%) 717.977 MB/sec [Average]
[info]   (min, avg, max) = (1020.849, 1225.169, 1361.411), stdev = 186.456
[info]   CI (99.9%): [507.191, 1943.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1578.024 ±(99.9%) 936.578 B/op [Average]
[info]   (min, avg, max) = (1311.927, 1578.024, 1774.599), stdev = 243.226
[info]   CI (99.9%): [641.446, 2514.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson
[info] # Run progress: 56.31% complete, ETA 00:12:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2149740.556 ops/s
[info] # Warmup Iteration   2: 3601209.275 ops/s
[info] # Warmup Iteration   3: 3601854.443 ops/s
[info] # Warmup Iteration   4: 3563828.074 ops/s
[info] # Warmup Iteration   5: 3601762.565 ops/s
[info] Iteration   1: 3610766.369 ops/s
[info]                  ·gc.alloc.rate:                   990.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        440.757 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 3654597.192 ops/s
[info]                  ·gc.alloc.rate:                                  1002.853 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       439.777 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 3647814.751 ops/s
[info]                  ·gc.alloc.rate:            1001.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 440.564 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3650975.237 ops/s
[info]                  ·gc.alloc.rate:                                  1001.997 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       440.222 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3658173.361 ops/s
[info]                  ·gc.alloc.rate:            1004.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 439.356 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson":
[info]   3644465.382 ±(99.9%) 74063.165 ops/s [Average]
[info]   (min, avg, max) = (3610766.369, 3644465.382, 3658173.361), stdev = 19233.969
[info]   CI (99.9%): [3570402.217, 3718528.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate":
[info]   1000.207 ±(99.9%) 20.436 MB/sec [Average]
[info]   (min, avg, max) = (990.895, 1000.207, 1004.036), stdev = 5.307
[info]   CI (99.9%): [979.771, 1020.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1019.037 ±(99.9%) 17.345 MB/sec [Average]
[info]   (min, avg, max) = (1010.981, 1019.037, 1021.132), stdev = 4.504
[info]   CI (99.9%): [1001.693, 1036.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   440.135 ±(99.9%) 2.206 B/op [Average]
[info]   (min, avg, max) = (439.356, 440.135, 440.757), stdev = 0.573
[info]   CI (99.9%): [437.929, 442.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.406 ±(99.9%) 3.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.406, 2.032), stdev = 0.909
[info]   CI (99.9%): [≈ 0, 3.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter
[info] # Run progress: 57.28% complete, ETA 00:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14621340.498 ops/s
[info] # Warmup Iteration   2: 15253313.582 ops/s
[info] # Warmup Iteration   3: 14937920.974 ops/s
[info] # Warmup Iteration   4: 15264918.738 ops/s
[info] # Warmup Iteration   5: 14920048.892 ops/s
[info] Iteration   1: 14690074.247 ops/s
[info]                  ·gc.alloc.rate:            447.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.082 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 15004060.501 ops/s
[info]                  ·gc.alloc.rate:            457.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35.286 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 15036476.717 ops/s
[info]                  ·gc.alloc.rate:            458.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35.211 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 15127763.675 ops/s
[info]                  ·gc.alloc.rate:            461.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.997 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 15303665.608 ops/s
[info]                  ·gc.alloc.rate:            466.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34.596 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter":
[info]   15032408.150 ±(99.9%) 862505.406 ops/s [Average]
[info]   (min, avg, max) = (14690074.247, 15032408.150, 15303665.608), stdev = 223989.915
[info]   CI (99.9%): [14169902.743, 15894913.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate":
[info]   458.482 ±(99.9%) 26.539 MB/sec [Average]
[info]   (min, avg, max) = (447.968, 458.482, 466.832), stdev = 6.892
[info]   CI (99.9%): [431.943, 485.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.980 ±(99.9%) 709.523 MB/sec [Average]
[info]   (min, avg, max) = (336.364, 470.980, 672.934), stdev = 184.261
[info]   CI (99.9%): [≈ 0, 1180.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   49.435 ±(99.9%) 76.005 B/op [Average]
[info]   (min, avg, max) = (34.596, 49.435, 72.082), stdev = 19.738
[info]   CI (99.9%): [≈ 0, 125.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 12.000), stdev = 3.421
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc
[info] # Run progress: 58.25% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16936336.140 ops/s
[info] # Warmup Iteration   2: 18836660.588 ops/s
[info] # Warmup Iteration   3: 19472067.307 ops/s
[info] # Warmup Iteration   4: 19427418.295 ops/s
[info] # Warmup Iteration   5: 19450939.479 ops/s
[info] Iteration   1: 19512332.780 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19501776.779 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19495679.400 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19434785.422 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19504934.084 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc":
[info]   19489901.693 ±(99.9%) 120871.727 ops/s [Average]
[info]   (min, avg, max) = (19434785.422, 19489901.693, 19512332.780), stdev = 31390.004
[info]   CI (99.9%): [19369029.966, 19610773.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay
[info] # Run progress: 59.22% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531884.873 ops/s
[info] # Warmup Iteration   2: 811224.430 ops/s
[info] # Warmup Iteration   3: 813471.118 ops/s
[info] # Warmup Iteration   4: 798734.304 ops/s
[info] # Warmup Iteration   5: 816650.159 ops/s
[info] Iteration   1: 820215.037 ops/s
[info]                  ·gc.alloc.rate:                                  1213.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.179 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2612.726 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 819205.022 ops/s
[info]                  ·gc.alloc.rate:            1211.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.207 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1961.893 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 825959.624 ops/s
[info]                  ·gc.alloc.rate:            1221.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2594.461 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 826406.900 ops/s
[info]                  ·gc.alloc.rate:                                  1222.325 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2593.164 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 824882.328 ops/s
[info]                  ·gc.alloc.rate:            1220.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1948.426 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay":
[info]   823333.782 ±(99.9%) 12988.481 ops/s [Average]
[info]   (min, avg, max) = (819205.022, 823333.782, 826406.900), stdev = 3373.067
[info]   CI (99.9%): [810345.301, 836322.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate":
[info]   1217.891 ±(99.9%) 19.366 MB/sec [Average]
[info]   (min, avg, max) = (1211.775, 1217.891, 1222.325), stdev = 5.029
[info]   CI (99.9%): [1198.524, 1237.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm":
[info]   2328.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.001, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.179), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.069 ±(99.9%) 0.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.343), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   1225.472 ±(99.9%) 717.717 MB/sec [Average]
[info]   (min, avg, max) = (1021.207, 1225.472, 1361.694), stdev = 186.389
[info]   CI (99.9%): [507.755, 1943.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   2342.134 ±(99.9%) 1360.720 B/op [Average]
[info]   (min, avg, max) = (1948.426, 2342.134, 2612.726), stdev = 353.375
[info]   CI (99.9%): [981.414, 3702.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 14.000), stdev = 3.975
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce
[info] # Run progress: 60.19% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447837.778 ops/s
[info] # Warmup Iteration   2: 675918.743 ops/s
[info] # Warmup Iteration   3: 695509.914 ops/s
[info] # Warmup Iteration   4: 698487.062 ops/s
[info] # Warmup Iteration   5: 712546.940 ops/s
[info] Iteration   1: 712380.926 ops/s
[info]                  ·gc.alloc.rate:            1607.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       3552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3760.004 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 709547.054 ops/s
[info]                  ·gc.alloc.rate:                                  1601.062 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3774.928 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 703413.809 ops/s
[info]                  ·gc.alloc.rate:                                  1587.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3046.436 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 714289.752 ops/s
[info]                  ·gc.alloc.rate:                                  1611.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3750.083 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 717810.499 ops/s
[info]                  ·gc.alloc.rate:                                  1619.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3731.702 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce":
[info]   711488.408 ±(99.9%) 20877.181 ops/s [Average]
[info]   (min, avg, max) = (703413.809, 711488.408, 717810.499), stdev = 5421.738
[info]   CI (99.9%): [690611.227, 732365.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate":
[info]   1605.499 ±(99.9%) 47.193 MB/sec [Average]
[info]   (min, avg, max) = (1587.292, 1605.499, 1619.784), stdev = 12.256
[info]   CI (99.9%): [1558.306, 1652.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm":
[info]   3552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3552.001, 3552.001, 3552.001), stdev = 0.001
[info]   CI (99.9%): [3552.000, 3552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1633.605 ±(99.9%) 586.009 MB/sec [Average]
[info]   (min, avg, max) = (1361.369, 1633.605, 1701.879), stdev = 152.185
[info]   CI (99.9%): [1047.596, 2219.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3612.630 ±(99.9%) 1220.276 B/op [Average]
[info]   (min, avg, max) = (3046.436, 3612.630, 3774.928), stdev = 316.902
[info]   CI (99.9%): [2392.354, 4832.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson
[info] # Run progress: 61.17% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1179428.448 ops/s
[info] # Warmup Iteration   2: 2185056.801 ops/s
[info] # Warmup Iteration   3: 2057397.407 ops/s
[info] # Warmup Iteration   4: 2057401.705 ops/s
[info] # Warmup Iteration   5: 2074229.548 ops/s
[info] Iteration   1: 2089951.100 ops/s
[info]                  ·gc.alloc.rate:                                  1189.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.197 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       768.989 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 2099589.433 ops/s
[info]                  ·gc.alloc.rate:            1195.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1020.599 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2122313.762 ops/s
[info]                  ·gc.alloc.rate:            1208.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 757.238 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2122279.772 ops/s
[info]                  ·gc.alloc.rate:                                  1207.837 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1009.731 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 488115.238 ops/s
[info]                  ·gc.alloc.rate:            277.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      340.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1097.365 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson":
[info]   1784449.861 ±(99.9%) 2790992.087 ops/s [Average]
[info]   (min, avg, max) = (488115.238, 1784449.861, 2122313.762), stdev = 724811.782
[info]   CI (99.9%): [≈ 0, 4575441.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate":
[info]   1015.675 ±(99.9%) 1588.805 MB/sec [Average]
[info]   (min, avg, max) = (277.719, 1015.675, 1208.022), stdev = 412.608
[info]   CI (99.9%): [≈ 0, 2604.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.001), stdev = 0.001
[info]   CI (99.9%): [895.999, 896.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.339 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.197), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen":
[info]   1020.918 ±(99.9%) 1605.251 MB/sec [Average]
[info]   (min, avg, max) = (340.133, 1020.918, 1361.395), stdev = 416.879
[info]   CI (99.9%): [≈ 0, 2626.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   930.784 ±(99.9%) 603.779 B/op [Average]
[info]   (min, avg, max) = (757.238, 930.784, 1097.365), stdev = 156.800
[info]   CI (99.9%): [327.005, 1534.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 3.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter
[info] # Run progress: 62.14% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3531542.214 ops/s
[info] # Warmup Iteration   2: 4254553.636 ops/s
[info] # Warmup Iteration   3: 4866990.081 ops/s
[info] # Warmup Iteration   4: 4926958.614 ops/s
[info] # Warmup Iteration   5: 4878013.021 ops/s
[info] Iteration   1: 4863803.508 ops/s
[info]                  ·gc.alloc.rate:                                  1285.510 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       440.594 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4831209.861 ops/s
[info]                  ·gc.alloc.rate:            1277.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 443.569 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 4913815.194 ops/s
[info]                  ·gc.alloc.rate:            1298.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 436.064 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4860585.262 ops/s
[info]                  ·gc.alloc.rate:                                  1284.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       330.657 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4869824.450 ops/s
[info]                  ·gc.alloc.rate:                                  1287.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       440.029 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter":
[info]   4867847.655 ±(99.9%) 114363.927 ops/s [Average]
[info]   (min, avg, max) = (4831209.861, 4867847.655, 4913815.194), stdev = 29699.949
[info]   CI (99.9%): [4753483.728, 4982211.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate":
[info]   1286.589 ±(99.9%) 30.077 MB/sec [Average]
[info]   (min, avg, max) = (1277.035, 1286.589, 1298.740), stdev = 7.811
[info]   CI (99.9%): [1256.512, 1316.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1293.402 ±(99.9%) 586.153 MB/sec [Average]
[info]   (min, avg, max) = (1021.099, 1293.402, 1361.667), stdev = 152.222
[info]   CI (99.9%): [707.248, 1879.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   418.183 ±(99.9%) 188.685 B/op [Average]
[info]   (min, avg, max) = (330.657, 418.183, 443.569), stdev = 49.001
[info]   CI (99.9%): [229.497, 606.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 12.000), stdev = 3.507
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay
[info] # Run progress: 63.11% complete, ETA 00:10:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123379.025 ops/s
[info] # Warmup Iteration   2: 296656.188 ops/s
[info] # Warmup Iteration   3: 299351.857 ops/s
[info] # Warmup Iteration   4: 296656.863 ops/s
[info] # Warmup Iteration   5: 297770.626 ops/s
[info] Iteration   1: 298265.174 ops/s
[info]                  ·gc.alloc.rate:                   1037.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5342.776 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 299731.977 ops/s
[info]                  ·gc.alloc.rate:                                  1042.040 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.296 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5362.138 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 302638.426 ops/s
[info]                  ·gc.alloc.rate:            1052.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5310.465 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 251758.509 ops/s
[info]                  ·gc.alloc.rate:                                  875.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6383.828 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 301605.266 ops/s
[info]                  ·gc.alloc.rate:                                  1048.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5328.632 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay":
[info]   290799.870 ±(99.9%) 84289.732 ops/s [Average]
[info]   (min, avg, max) = (251758.509, 290799.870, 302638.426), stdev = 21889.776
[info]   CI (99.9%): [206510.138, 375089.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate":
[info]   1010.999 ±(99.9%) 293.180 MB/sec [Average]
[info]   (min, avg, max) = (875.203, 1010.999, 1052.317), stdev = 76.138
[info]   CI (99.9%): [717.819, 1304.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.063 ±(99.9%) 0.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.296), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1019.378 ±(99.9%) 14.703 MB/sec [Average]
[info]   (min, avg, max) = (1012.551, 1019.378, 1021.251), stdev = 3.818
[info]   CI (99.9%): [1004.675, 1034.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5545.568 ±(99.9%) 1805.892 B/op [Average]
[info]   (min, avg, max) = (5310.465, 5545.568, 6383.828), stdev = 468.985
[info]   CI (99.9%): [3739.675, 7351.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.218 ±(99.9%) 36.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.218, 21.090), stdev = 9.432
[info]   CI (99.9%): [≈ 0, 40.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 14.000), stdev = 4.336
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson
[info] # Run progress: 64.08% complete, ETA 00:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1120036.090 ops/s
[info] # Warmup Iteration   2: 1850084.423 ops/s
[info] # Warmup Iteration   3: 1844662.009 ops/s
[info] # Warmup Iteration   4: 1840027.209 ops/s
[info] # Warmup Iteration   5: 1852992.243 ops/s
[info] Iteration   1: 1848889.064 ops/s
[info]                  ·gc.alloc.rate:                   977.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        860.796 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 1862652.065 ops/s
[info]                  ·gc.alloc.rate:                                  984.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       862.784 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1880928.155 ops/s
[info]                  ·gc.alloc.rate:            994.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 854.428 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1879209.895 ops/s
[info]                  ·gc.alloc.rate:                                  993.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       855.190 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1884035.215 ops/s
[info]                  ·gc.alloc.rate:            995.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 853.068 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson":
[info]   1871142.879 ±(99.9%) 57578.617 ops/s [Average]
[info]   (min, avg, max) = (1848889.064, 1871142.879, 1884035.215), stdev = 14952.984
[info]   CI (99.9%): [1813564.262, 1928721.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate":
[info]   988.899 ±(99.9%) 30.657 MB/sec [Average]
[info]   (min, avg, max) = (977.115, 988.899, 995.721), stdev = 7.962
[info]   CI (99.9%): [958.242, 1019.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.102), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   1018.885 ±(99.9%) 17.122 MB/sec [Average]
[info]   (min, avg, max) = (1010.934, 1018.885, 1020.972), stdev = 4.446
[info]   CI (99.9%): [1001.764, 1036.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   857.253 ±(99.9%) 16.438 B/op [Average]
[info]   (min, avg, max) = (853.068, 857.253, 862.784), stdev = 4.269
[info]   CI (99.9%): [840.815, 873.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.794 ±(99.9%) 6.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.794, 3.969), stdev = 1.775
[info]   CI (99.9%): [≈ 0, 7.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 17.000), stdev = 5.367
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter
[info] # Run progress: 65.05% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4117252.327 ops/s
[info] # Warmup Iteration   2: 4466354.209 ops/s
[info] # Warmup Iteration   3: 4455922.530 ops/s
[info] # Warmup Iteration   4: 4354776.930 ops/s
[info] # Warmup Iteration   5: 4466947.415 ops/s
[info] Iteration   1: 4429918.604 ops/s
[info]                  ·gc.alloc.rate:            810.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 358.535 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  21.000 ms
[info] Iteration   2: 4505773.802 ops/s
[info]                  ·gc.alloc.rate:                   824.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        236.170 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.396 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4487751.801 ops/s
[info]                  ·gc.alloc.rate:                                  821.090 MB/sec
[info]                  ·gc.alloc.rate.norm:                             288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       358.103 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4520335.297 ops/s
[info]                  ·gc.alloc.rate:            827.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237.033 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4474896.628 ops/s
[info]                  ·gc.alloc.rate:            818.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 359.159 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter":
[info]   4483735.226 ±(99.9%) 133608.834 ops/s [Average]
[info]   (min, avg, max) = (4429918.604, 4483735.226, 4520335.297), stdev = 34697.790
[info]   CI (99.9%): [4350126.392, 4617344.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate":
[info]   820.340 ±(99.9%) 24.526 MB/sec [Average]
[info]   (min, avg, max) = (810.445, 820.340, 827.067), stdev = 6.369
[info]   CI (99.9%): [795.814, 844.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (288.000, 288.000, 288.000), stdev = 0.001
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.271 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   881.526 ±(99.9%) 714.489 MB/sec [Average]
[info]   (min, avg, max) = (675.989, 881.526, 1021.053), stdev = 185.551
[info]   CI (99.9%): [167.037, 1596.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   309.800 ±(99.9%) 257.310 B/op [Average]
[info]   (min, avg, max) = (236.170, 309.800, 359.159), stdev = 66.823
[info]   CI (99.9%): [52.490, 567.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 2.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.396), stdev = 0.624
[info]   CI (99.9%): [≈ 0, 2.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 21.000), stdev = 7.403
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay
[info] # Run progress: 66.02% complete, ETA 00:09:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189023.497 ops/s
[info] # Warmup Iteration   2: 370689.007 ops/s
[info] # Warmup Iteration   3: 368079.282 ops/s
[info] # Warmup Iteration   4: 377453.750 ops/s
[info] # Warmup Iteration   5: 379313.308 ops/s
[info] Iteration   1: 380001.131 ops/s
[info]                  ·gc.alloc.rate:                                  1100.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4210.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.554 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 384804.039 ops/s
[info]                  ·gc.alloc.rate:                                  1114.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5568.851 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 383600.616 ops/s
[info]                  ·gc.alloc.rate:            1111.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4189.330 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 384605.868 ops/s
[info]                  ·gc.alloc.rate:            1114.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4178.767 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 383533.375 ops/s
[info]                  ·gc.alloc.rate:                                  1111.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5587.521 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay":
[info]   383309.006 ±(99.9%) 7455.345 ops/s [Average]
[info]   (min, avg, max) = (380001.131, 383309.006, 384804.039), stdev = 1936.129
[info]   CI (99.9%): [375853.660, 390764.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate":
[info]   1110.350 ±(99.9%) 21.672 MB/sec [Average]
[info]   (min, avg, max) = (1100.728, 1110.350, 1114.698), stdev = 5.628
[info]   CI (99.9%): [1088.678, 1132.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.201), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   1156.161 ±(99.9%) 721.401 MB/sec [Average]
[info]   (min, avg, max) = (1016.268, 1156.161, 1361.441), stdev = 187.346
[info]   CI (99.9%): [434.759, 1877.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4746.915 ±(99.9%) 2922.468 B/op [Average]
[info]   (min, avg, max) = (4178.767, 4746.915, 5587.521), stdev = 758.956
[info]   CI (99.9%): [1824.448, 7669.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.311 ±(99.9%) 28.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.311, 16.554), stdev = 7.403
[info]   CI (99.9%): [≈ 0, 31.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 15.000), stdev = 4.506
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce
[info] # Run progress: 66.99% complete, ETA 00:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3132.705 ops/s
[info] # Warmup Iteration   2: 4299.670 ops/s
[info] # Warmup Iteration   3: 4273.737 ops/s
[info] # Warmup Iteration   4: 4349.664 ops/s
[info] # Warmup Iteration   5: 4371.659 ops/s
[info] Iteration   1: 4398.565 ops/s
[info]                  ·gc.alloc.rate:                                  1069.927 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.100 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 58.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       485443.025 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1429.876 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 4454.015 ops/s
[info]                  ·gc.alloc.rate:                                  1083.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.099 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       360823.122 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4404.515 ops/s
[info]                  ·gc.alloc.rate:                                  1071.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.100 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.914 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       364835.907 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4418.882 ops/s
[info]                  ·gc.alloc.rate:                                  1075.021 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.092 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       363680.319 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4437.504 ops/s
[info]                  ·gc.alloc.rate:                                  1079.571 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.092 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.692 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       362123.678 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce":
[info]   4422.696 ±(99.9%) 88.807 ops/s [Average]
[info]   (min, avg, max) = (4398.565, 4422.696, 4454.015), stdev = 23.063
[info]   CI (99.9%): [4333.889, 4511.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1075.927 ±(99.9%) 21.654 MB/sec [Average]
[info]   (min, avg, max) = (1069.927, 1075.927, 1083.520), stdev = 5.623
[info]   CI (99.9%): [1054.273, 1097.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   382912.097 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (382912.092, 382912.097, 382912.100), stdev = 0.004
[info]   CI (99.9%): [382912.081, 382912.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.063 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.063, 0.163), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   22.510 ±(99.9%) 82.697 B/op [Average]
[info]   (min, avg, max) = (0.354, 22.510, 58.382), stdev = 21.476
[info]   CI (99.9%): [≈ 0, 105.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1088.086 ±(99.9%) 577.604 MB/sec [Average]
[info]   (min, avg, max) = (1020.961, 1088.086, 1356.418), stdev = 150.002
[info]   CI (99.9%): [510.482, 1665.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   387381.210 ±(99.9%) 211166.813 B/op [Average]
[info]   (min, avg, max) = (360823.122, 387381.210, 485443.025), stdev = 54839.351
[info]   CI (99.9%): [176214.398, 598548.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   285.975 ±(99.9%) 2462.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 285.975, 1429.876), stdev = 639.460
[info]   CI (99.9%): [≈ 0, 2748.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.464
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson
[info] # Run progress: 67.96% complete, ETA 00:09:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 16870.683 ops/s
[info] # Warmup Iteration   2: 26541.898 ops/s
[info] # Warmup Iteration   3: 26267.985 ops/s
[info] # Warmup Iteration   4: 26443.812 ops/s
[info] # Warmup Iteration   5: 26506.193 ops/s
[info] Iteration   1: 26431.840 ops/s
[info]                  ·gc.alloc.rate:            383.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.975 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19991.009 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 26469.138 ops/s
[info]                  ·gc.alloc.rate:            383.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.905 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19963.068 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 26536.691 ops/s
[info]                  ·gc.alloc.rate:            384.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.893 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19911.921 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 26336.901 ops/s
[info]                  ·gc.alloc.rate:            381.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.743 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20063.107 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 26265.400 ops/s
[info]                  ·gc.alloc.rate:            380.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.850 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40233.132 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson":
[info]   26407.994 ±(99.9%) 414.090 ops/s [Average]
[info]   (min, avg, max) = (26265.400, 26407.994, 26536.691), stdev = 107.538
[info]   CI (99.9%): [25993.905, 26822.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   382.675 ±(99.9%) 6.112 MB/sec [Average]
[info]   (min, avg, max) = (380.571, 382.675, 384.607), stdev = 1.587
[info]   CI (99.9%): [376.562, 388.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   22807.873 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (22807.743, 22807.873, 22807.975), stdev = 0.085
[info]   CI (99.9%): [22807.545, 22808.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   402.845 ±(99.9%) 577.933 MB/sec [Average]
[info]   (min, avg, max) = (335.700, 402.845, 671.329), stdev = 150.087
[info]   CI (99.9%): [≈ 0, 980.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   24032.447 ±(99.9%) 34873.829 B/op [Average]
[info]   (min, avg, max) = (19911.921, 24032.447, 40233.132), stdev = 9056.623
[info]   CI (99.9%): [≈ 0, 58906.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.400, 18.000), stdev = 4.930
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter
[info] # Run progress: 68.93% complete, ETA 00:08:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31421.202 ops/s
[info] # Warmup Iteration   2: 36374.370 ops/s
[info] # Warmup Iteration   3: 35439.049 ops/s
[info] # Warmup Iteration   4: 35219.217 ops/s
[info] # Warmup Iteration   5: 35517.184 ops/s
[info] Iteration   1: 35671.668 ops/s
[info]                  ·gc.alloc.rate:      273.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 12064.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35558.775 ops/s
[info]                  ·gc.alloc.rate:            272.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14888.264 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 35720.167 ops/s
[info]                  ·gc.alloc.rate:            273.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14821.588 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 35760.049 ops/s
[info]                  ·gc.alloc.rate:            274.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14805.426 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 35723.766 ops/s
[info]                  ·gc.alloc.rate:            273.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14820.344 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter":
[info]   35686.885 ±(99.9%) 301.142 ops/s [Average]
[info]   (min, avg, max) = (35558.775, 35686.885, 35760.049), stdev = 78.206
[info]   CI (99.9%): [35385.743, 35988.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   273.518 ±(99.9%) 2.323 MB/sec [Average]
[info]   (min, avg, max) = (272.529, 273.518, 274.062), stdev = 0.603
[info]   CI (99.9%): [271.195, 275.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   12064.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (12064.011, 12064.012, 12064.012), stdev = 0.001
[info]   CI (99.9%): [12064.010, 12064.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.085 ±(99.9%) 579.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.085, 336.383), stdev = 150.423
[info]   CI (99.9%): [≈ 0, 848.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   11867.124 ±(99.9%) 25545.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11867.124, 14888.264), stdev = 6634.002
[info]   CI (99.9%): [≈ 0, 37412.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc
[info] # Run progress: 69.90% complete, ETA 00:08:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36306.971 ops/s
[info] # Warmup Iteration   2: 41283.853 ops/s
[info] # Warmup Iteration   3: 40355.900 ops/s
[info] # Warmup Iteration   4: 40398.588 ops/s
[info] # Warmup Iteration   5: 40640.655 ops/s
[info] Iteration   1: 40560.363 ops/s
[info]                  ·gc.alloc.rate:      5.977 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 40540.623 ops/s
[info]                  ·gc.alloc.rate:      5.976 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 40517.922 ops/s
[info]                  ·gc.alloc.rate:      5.972 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 40528.572 ops/s
[info]                  ·gc.alloc.rate:      5.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 40670.435 ops/s
[info]                  ·gc.alloc.rate:      5.996 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc":
[info]   40563.583 ±(99.9%) 237.881 ops/s [Average]
[info]   (min, avg, max) = (40517.922, 40563.583, 40670.435), stdev = 61.777
[info]   CI (99.9%): [40325.702, 40801.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   5.979 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (5.972, 5.979, 5.996), stdev = 0.010
[info]   CI (99.9%): [5.942, 6.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   232.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.010, 232.010, 232.010), stdev = 0.001
[info]   CI (99.9%): [232.010, 232.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay
[info] # Run progress: 70.87% complete, ETA 00:08:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1950.445 ops/s
[info] # Warmup Iteration   2: 3583.197 ops/s
[info] # Warmup Iteration   3: 3733.098 ops/s
[info] # Warmup Iteration   4: 3759.471 ops/s
[info] # Warmup Iteration   5: 3674.569 ops/s
[info] Iteration   1: 3710.202 ops/s
[info]                  ·gc.alloc.rate:                                  1121.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475640.591 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.538 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       432880.203 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                282.559 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 3734.903 ops/s
[info]                  ·gc.alloc.rate:            1128.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       475639.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 430264.188 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 3758.713 ops/s
[info]                  ·gc.alloc.rate:                                  1136.046 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475639.434 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       570023.762 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 3815.391 ops/s
[info]                  ·gc.alloc.rate:                                  1153.106 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475639.440 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.847 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       421133.615 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3815.879 ops/s
[info]                  ·gc.alloc.rate:            1153.164 MB/sec
[info]                  ·gc.alloc.rate.norm:       475640.591 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 421133.615 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay":
[info]   3767.017 ±(99.9%) 183.216 ops/s [Average]
[info]   (min, avg, max) = (3710.202, 3767.017, 3815.879), stdev = 47.581
[info]   CI (99.9%): [3583.801, 3950.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1138.453 ±(99.9%) 55.417 MB/sec [Average]
[info]   (min, avg, max) = (1121.215, 1138.453, 1153.164), stdev = 14.392
[info]   CI (99.9%): [1083.037, 1193.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   475639.928 ±(99.9%) 2.341 B/op [Average]
[info]   (min, avg, max) = (475639.434, 475639.928, 475640.591), stdev = 0.608
[info]   CI (99.9%): [475637.587, 475642.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.055), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   10.313 ±(99.9%) 45.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.313, 23.179), stdev = 11.813
[info]   CI (99.9%): [≈ 0, 55.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1088.987 ±(99.9%) 586.563 MB/sec [Average]
[info]   (min, avg, max) = (1020.417, 1088.987, 1361.480), stdev = 152.328
[info]   CI (99.9%): [502.424, 1675.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   455087.077 ±(99.9%) 248250.373 B/op [Average]
[info]   (min, avg, max) = (421133.615, 455087.077, 570023.762), stdev = 64469.834
[info]   CI (99.9%): [206836.703, 703337.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   56.512 ±(99.9%) 486.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.512, 282.559), stdev = 126.364
[info]   CI (99.9%): [≈ 0, 543.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson
[info] # Run progress: 71.84% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 114971.649 ops/s
[info] # Warmup Iteration   2: 495251.591 ops/s
[info] # Warmup Iteration   3: 497750.959 ops/s
[info] # Warmup Iteration   4: 495951.347 ops/s
[info] # Warmup Iteration   5: 494660.820 ops/s
[info] Iteration   1: 494740.113 ops/s
[info]                  ·gc.alloc.rate:                                  1083.790 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.272 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1350.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4297.651 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                14.834 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        26.000 ms
[info] Iteration   2: 504893.101 ops/s
[info]                  ·gc.alloc.rate:                                  1105.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3183.305 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 507820.046 ops/s
[info]                  ·gc.alloc.rate:            1112.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       3448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3164.885 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 500684.361 ops/s
[info]                  ·gc.alloc.rate:            1096.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       3448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3209.689 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 502536.605 ops/s
[info]                  ·gc.alloc.rate:            1100.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       3448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4264.370 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson":
[info]   502134.845 ±(99.9%) 18950.182 ops/s [Average]
[info]   (min, avg, max) = (494740.113, 502134.845, 507820.046), stdev = 4921.302
[info]   CI (99.9%): [483184.663, 521085.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate":
[info]   1099.924 ±(99.9%) 41.427 MB/sec [Average]
[info]   (min, avg, max) = (1083.790, 1099.924, 1112.360), stdev = 10.759
[info]   CI (99.9%): [1058.497, 1141.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm":
[info]   3448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3448.001, 3448.001, 3448.001), stdev = 0.001
[info]   CI (99.9%): [3448.001, 3448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.068 ±(99.9%) 0.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.272), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.216 ±(99.9%) 1.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 0.866), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen":
[info]   1155.057 ±(99.9%) 707.036 MB/sec [Average]
[info]   (min, avg, max) = (1020.875, 1155.057, 1361.455), stdev = 183.615
[info]   CI (99.9%): [448.021, 1862.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3623.980 ±(99.9%) 2310.813 B/op [Average]
[info]   (min, avg, max) = (3164.885, 3623.980, 4297.651), stdev = 600.111
[info]   CI (99.9%): [1313.167, 5934.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.967 ±(99.9%) 25.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.967, 14.834), stdev = 6.634
[info]   CI (99.9%): [≈ 0, 28.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.200, 26.000), stdev = 9.471
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter
[info] # Run progress: 72.82% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2101686.911 ops/s
[info] # Warmup Iteration   2: 2344313.741 ops/s
[info] # Warmup Iteration   3: 2355803.039 ops/s
[info] # Warmup Iteration   4: 2380692.368 ops/s
[info] # Warmup Iteration   5: 2370263.808 ops/s
[info] Iteration   1: 2377235.245 ops/s
[info]                  ·gc.alloc.rate:            495.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 222.706 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2352642.666 ops/s
[info]                  ·gc.alloc.rate:            490.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 450.077 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 2382856.967 ops/s
[info]                  ·gc.alloc.rate:            496.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 222.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2364832.704 ops/s
[info]                  ·gc.alloc.rate:            492.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 447.777 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 2386463.280 ops/s
[info]                  ·gc.alloc.rate:            497.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 221.849 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter":
[info]   2372806.172 ±(99.9%) 53677.995 ops/s [Average]
[info]   (min, avg, max) = (2352642.666, 2372806.172, 2386463.280), stdev = 13940.005
[info]   CI (99.9%): [2319128.178, 2426484.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   494.412 ±(99.9%) 11.128 MB/sec [Average]
[info]   (min, avg, max) = (490.273, 494.412, 497.284), stdev = 2.890
[info]   CI (99.9%): [483.284, 505.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (328.000, 328.000, 328.000), stdev = 0.001
[info]   CI (99.9%): [328.000, 328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.870 ±(99.9%) 709.453 MB/sec [Average]
[info]   (min, avg, max) = (336.273, 470.870, 672.745), stdev = 184.243
[info]   CI (99.9%): [≈ 0, 1180.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   312.918 ±(99.9%) 478.102 B/op [Average]
[info]   (min, avg, max) = (221.849, 312.918, 450.077), stdev = 124.162
[info]   CI (99.9%): [≈ 0, 791.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 14.000), stdev = 3.715
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay
[info] # Run progress: 73.79% complete, ETA 00:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77190.335 ops/s
[info] # Warmup Iteration   2: 220887.670 ops/s
[info] # Warmup Iteration   3: 219147.031 ops/s
[info] # Warmup Iteration   4: 221349.192 ops/s
[info] # Warmup Iteration   5: 218971.398 ops/s
[info] Iteration   1: 221995.174 ops/s
[info]                  ·gc.alloc.rate:            870.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       6176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4769.839 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 220471.275 ops/s
[info]                  ·gc.alloc.rate:                   865.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              6176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7227.689 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.530 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 221561.096 ops/s
[info]                  ·gc.alloc.rate:                                  869.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.486 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7253.127 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 226062.818 ops/s
[info]                  ·gc.alloc.rate:            886.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       6176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4739.714 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 225841.678 ops/s
[info]                  ·gc.alloc.rate:                                  886.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7116.559 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay":
[info]   223186.408 ±(99.9%) 9959.111 ops/s [Average]
[info]   (min, avg, max) = (220471.275, 223186.408, 226062.818), stdev = 2586.349
[info]   CI (99.9%): [213227.297, 233145.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate":
[info]   875.660 ±(99.9%) 39.121 MB/sec [Average]
[info]   (min, avg, max) = (865.092, 875.660, 886.977), stdev = 10.160
[info]   CI (99.9%): [836.539, 914.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   6176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6176.002, 6176.002, 6176.002), stdev = 0.001
[info]   CI (99.9%): [6176.002, 6176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.097 ±(99.9%) 0.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.486), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 0.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.514 ±(99.9%) 720.209 MB/sec [Average]
[info]   (min, avg, max) = (672.668, 881.514, 1021.043), stdev = 187.036
[info]   CI (99.9%): [161.305, 1601.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6221.386 ±(99.9%) 5159.291 B/op [Average]
[info]   (min, avg, max) = (4739.714, 6221.386, 7253.127), stdev = 1339.852
[info]   CI (99.9%): [1062.095, 11380.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.706 ±(99.9%) 49.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.706, 28.530), stdev = 12.759
[info]   CI (99.9%): [≈ 0, 54.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.573
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce
[info] # Run progress: 74.76% complete, ETA 00:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353957.988 ops/s
[info] # Warmup Iteration   2: 519322.531 ops/s
[info] # Warmup Iteration   3: 518964.971 ops/s
[info] # Warmup Iteration   4: 530225.095 ops/s
[info] # Warmup Iteration   5: 534546.335 ops/s
[info] Iteration   1: 541506.594 ops/s
[info]                  ·gc.alloc.rate:                                  1309.852 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3957.234 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 538035.241 ops/s
[info]                  ·gc.alloc.rate:            1301.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3982.610 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 538440.316 ops/s
[info]                  ·gc.alloc.rate:            1302.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3979.755 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 538074.381 ops/s
[info]                  ·gc.alloc.rate:            1301.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3982.455 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 541300.859 ops/s
[info]                  ·gc.alloc.rate:                                  1309.458 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2969.181 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce":
[info]   539471.478 ±(99.9%) 6825.066 ops/s [Average]
[info]   (min, avg, max) = (538035.241, 539471.478, 541506.594), stdev = 1772.448
[info]   CI (99.9%): [532646.412, 546296.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate":
[info]   1304.985 ±(99.9%) 16.518 MB/sec [Average]
[info]   (min, avg, max) = (1301.398, 1304.985, 1309.852), stdev = 4.290
[info]   CI (99.9%): [1288.467, 1321.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm":
[info]   3808.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3808.001, 3808.001, 3808.001), stdev = 0.001
[info]   CI (99.9%): [3808.001, 3808.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1293.173 ±(99.9%) 585.846 MB/sec [Average]
[info]   (min, avg, max) = (1021.013, 1293.173, 1361.347), stdev = 152.142
[info]   CI (99.9%): [707.327, 1879.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3774.247 ±(99.9%) 1733.447 B/op [Average]
[info]   (min, avg, max) = (2969.181, 3774.247, 3982.610), stdev = 450.171
[info]   CI (99.9%): [2040.800, 5507.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson
[info] # Run progress: 75.73% complete, ETA 00:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 545541.727 ops/s
[info] # Warmup Iteration   2: 1012488.593 ops/s
[info] # Warmup Iteration   3: 1033037.789 ops/s
[info] # Warmup Iteration   4: 1021402.570 ops/s
[info] # Warmup Iteration   5: 1015063.789 ops/s
[info] Iteration   1: 1024251.845 ops/s
[info]                  ·gc.alloc.rate:            692.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1031.768 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 1020808.335 ops/s
[info]                  ·gc.alloc.rate:            690.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1035.238 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 1023396.773 ops/s
[info]                  ·gc.alloc.rate:                   691.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1032.551 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1029654.605 ops/s
[info]                  ·gc.alloc.rate:                   696.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             679.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1038.551 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1033662.227 ops/s
[info]                  ·gc.alloc.rate:                                  698.694 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1036.593 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson":
[info]   1026354.757 ±(99.9%) 20029.163 ops/s [Average]
[info]   (min, avg, max) = (1020808.335, 1026354.757, 1033662.227), stdev = 5201.510
[info]   CI (99.9%): [1006325.594, 1046383.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate":
[info]   693.808 ±(99.9%) 13.382 MB/sec [Average]
[info]   (min, avg, max) = (690.108, 693.808, 698.694), stdev = 3.475
[info]   CI (99.9%): [680.426, 707.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   674.863 ±(99.9%) 18.247 MB/sec [Average]
[info]   (min, avg, max) = (671.364, 674.863, 680.696), stdev = 4.739
[info]   CI (99.9%): [656.616, 693.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1034.940 ±(99.9%) 10.828 B/op [Average]
[info]   (min, avg, max) = (1031.768, 1034.940, 1038.551), stdev = 2.812
[info]   CI (99.9%): [1024.112, 1045.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.432 ±(99.9%) 8.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.432, 5.122), stdev = 2.243
[info]   CI (99.9%): [≈ 0, 10.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.400, 18.000), stdev = 6.269
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter
[info] # Run progress: 76.70% complete, ETA 00:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5194198.002 ops/s
[info] # Warmup Iteration   2: 4705380.018 ops/s
[info] # Warmup Iteration   3: 4657892.170 ops/s
[info] # Warmup Iteration   4: 4737558.131 ops/s
[info] # Warmup Iteration   5: 4649005.443 ops/s
[info] Iteration   1: 4719224.203 ops/s
[info]                  ·gc.alloc.rate:                   911.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        337.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.333 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 4810902.427 ops/s
[info]                  ·gc.alloc.rate:                                  929.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       222.719 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4811979.567 ops/s
[info]                  ·gc.alloc.rate:                                  929.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       333.995 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4803651.010 ops/s
[info]                  ·gc.alloc.rate:                                  927.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       334.590 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4835431.569 ops/s
[info]                  ·gc.alloc.rate:            933.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 332.383 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter":
[info]   4796237.755 ±(99.9%) 172045.114 ops/s [Average]
[info]   (min, avg, max) = (4719224.203, 4796237.755, 4835431.569), stdev = 44679.570
[info]   CI (99.9%): [4624192.641, 4968282.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate":
[info]   926.285 ±(99.9%) 33.303 MB/sec [Average]
[info]   (min, avg, max) = (911.351, 926.285, 933.791), stdev = 8.649
[info]   CI (99.9%): [892.983, 959.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.147), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   951.240 ±(99.9%) 582.566 MB/sec [Average]
[info]   (min, avg, max) = (680.688, 951.240, 1021.156), stdev = 151.291
[info]   CI (99.9%): [368.674, 1533.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   312.272 ±(99.9%) 192.911 B/op [Average]
[info]   (min, avg, max) = (222.719, 312.272, 337.674), stdev = 50.098
[info]   CI (99.9%): [119.362, 505.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.267 ±(99.9%) 2.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.267, 1.333), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 18.000), stdev = 6.261
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay
[info] # Run progress: 77.67% complete, ETA 00:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135382.461 ops/s
[info] # Warmup Iteration   2: 288989.269 ops/s
[info] # Warmup Iteration   3: 295741.080 ops/s
[info] # Warmup Iteration   4: 298127.178 ops/s
[info] # Warmup Iteration   5: 296757.724 ops/s
[info] Iteration   1: 296323.429 ops/s
[info]                  ·gc.alloc.rate:                   1013.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5377.712 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 297119.038 ops/s
[info]                  ·gc.alloc.rate:                                  1016.155 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.464 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5408.832 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 299375.595 ops/s
[info]                  ·gc.alloc.rate:                                  1023.948 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5368.101 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 301751.312 ops/s
[info]                  ·gc.alloc.rate:            1032.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5326.089 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 301779.177 ops/s
[info]                  ·gc.alloc.rate:            1032.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5325.472 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay":
[info]   299269.710 ±(99.9%) 9774.295 ops/s [Average]
[info]   (min, avg, max) = (296323.429, 299269.710, 301779.177), stdev = 2538.353
[info]   CI (99.9%): [289495.416, 309044.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate":
[info]   1023.557 ±(99.9%) 33.595 MB/sec [Average]
[info]   (min, avg, max) = (1013.426, 1023.557, 1032.155), stdev = 8.724
[info]   CI (99.9%): [989.962, 1057.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.464), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 0.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.188 ±(99.9%) 14.954 MB/sec [Average]
[info]   (min, avg, max) = (1012.243, 1019.188, 1021.053), stdev = 3.883
[info]   CI (99.9%): [1004.234, 1034.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5361.241 ±(99.9%) 137.473 B/op [Average]
[info]   (min, avg, max) = (5325.472, 5361.241, 5408.832), stdev = 35.701
[info]   CI (99.9%): [5223.768, 5498.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.246 ±(99.9%) 36.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.246, 21.228), stdev = 9.493
[info]   CI (99.9%): [≈ 0, 40.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.413
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce
[info] # Run progress: 78.64% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145800.303 ops/s
[info] # Warmup Iteration   2: 299522.265 ops/s
[info] # Warmup Iteration   3: 301639.646 ops/s
[info] # Warmup Iteration   4: 303397.293 ops/s
[info] # Warmup Iteration   5: 296742.689 ops/s
[info] Iteration   1: 303887.589 ops/s
[info]                  ·gc.alloc.rate:            829.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3484.352 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 305313.071 ops/s
[info]                  ·gc.alloc.rate:                   833.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3467.956 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 310282.857 ops/s
[info]                  ·gc.alloc.rate:                                  846.913 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4296.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.328 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5176.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.379 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 311310.839 ops/s
[info]                  ·gc.alloc.rate:            849.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3441.664 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 309779.088 ops/s
[info]                  ·gc.alloc.rate:            845.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5188.273 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce":
[info]   308114.689 ±(99.9%) 12684.349 ops/s [Average]
[info]   (min, avg, max) = (303887.589, 308114.689, 311310.839), stdev = 3294.085
[info]   CI (99.9%): [295430.340, 320799.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate":
[info]   840.994 ±(99.9%) 35.039 MB/sec [Average]
[info]   (min, avg, max) = (829.188, 840.994, 849.845), stdev = 9.100
[info]   CI (99.9%): [805.955, 876.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.328), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen":
[info]   813.563 ±(99.9%) 728.690 MB/sec [Average]
[info]   (min, avg, max) = (672.528, 813.563, 1021.225), stdev = 189.238
[info]   CI (99.9%): [84.873, 1542.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4151.689 ±(99.9%) 3623.032 B/op [Average]
[info]   (min, avg, max) = (3441.664, 4151.689, 5188.273), stdev = 940.890
[info]   CI (99.9%): [528.657, 7774.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.109 ±(99.9%) 28.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.109, 17.168), stdev = 7.445
[info]   CI (99.9%): [≈ 0, 32.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 17.000), stdev = 6.066
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson
[info] # Run progress: 79.61% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 102822.338 ops/s
[info] # Warmup Iteration   2: 569901.166 ops/s
[info] # Warmup Iteration   3: 588177.557 ops/s
[info] # Warmup Iteration   4: 583311.144 ops/s
[info] # Warmup Iteration   5: 583661.697 ops/s
[info] Iteration   1: 583281.816 ops/s
[info]                  ·gc.alloc.rate:            915.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2717.692 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 593050.052 ops/s
[info]                  ·gc.alloc.rate:                   931.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1790.788 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 593350.364 ops/s
[info]                  ·gc.alloc.rate:                                  931.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.293 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2708.650 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 592979.224 ops/s
[info]                  ·gc.alloc.rate:            931.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2710.380 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 590906.243 ops/s
[info]                  ·gc.alloc.rate:                                  928.246 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2719.869 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson":
[info]   590713.540 ±(99.9%) 16428.888 ops/s [Average]
[info]   (min, avg, max) = (583281.816, 590713.540, 593350.364), stdev = 4266.530
[info]   CI (99.9%): [574284.652, 607142.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate":
[info]   927.814 ±(99.9%) 26.209 MB/sec [Average]
[info]   (min, avg, max) = (915.930, 927.814, 931.949), stdev = 6.806
[info]   CI (99.9%): [901.605, 954.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.059 ±(99.9%) 0.504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.293), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.156 ±(99.9%) 1.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.778), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen":
[info]   949.101 ±(99.9%) 590.857 MB/sec [Average]
[info]   (min, avg, max) = (674.836, 949.101, 1021.322), stdev = 153.444
[info]   CI (99.9%): [358.245, 1539.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2529.476 ±(99.9%) 1590.186 B/op [Average]
[info]   (min, avg, max) = (1790.788, 2529.476, 2719.869), stdev = 412.966
[info]   CI (99.9%): [939.290, 4119.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.475 ±(99.9%) 21.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.475, 12.375), stdev = 5.534
[info]   CI (99.9%): [≈ 0, 23.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 22.000), stdev = 7.797
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter
[info] # Run progress: 80.58% complete, ETA 00:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2140322.973 ops/s
[info] # Warmup Iteration   2: 2338453.958 ops/s
[info] # Warmup Iteration   3: 2352779.289 ops/s
[info] # Warmup Iteration   4: 2356015.750 ops/s
[info] # Warmup Iteration   5: 2346902.487 ops/s
[info] Iteration   1: 2366074.800 ops/s
[info]                  ·gc.alloc.rate:            565.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 223.765 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2345018.818 ops/s
[info]                  ·gc.alloc.rate:            560.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 451.538 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 2346076.886 ops/s
[info]                  ·gc.alloc.rate:            560.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 451.307 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2395857.573 ops/s
[info]                  ·gc.alloc.rate:            572.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 220.989 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2385477.220 ops/s
[info]                  ·gc.alloc.rate:                   569.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        446.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter":
[info]   2367701.059 ±(99.9%) 88092.997 ops/s [Average]
[info]   (min, avg, max) = (2345018.818, 2367701.059, 2395857.573), stdev = 22877.472
[info]   CI (99.9%): [2279608.062, 2455794.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate":
[info]   565.629 ±(99.9%) 21.185 MB/sec [Average]
[info]   (min, avg, max) = (560.210, 565.629, 572.420), stdev = 5.502
[info]   CI (99.9%): [544.444, 586.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.885 ±(99.9%) 711.905 MB/sec [Average]
[info]   (min, avg, max) = (336.298, 538.885, 676.215), stdev = 184.879
[info]   CI (99.9%): [≈ 0, 1250.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   358.740 ±(99.9%) 479.423 B/op [Average]
[info]   (min, avg, max) = (220.989, 358.740, 451.538), stdev = 124.505
[info]   CI (99.9%): [≈ 0, 838.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.527 ±(99.9%) 4.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.527, 2.637), stdev = 1.179
[info]   CI (99.9%): [≈ 0, 5.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 15.000), stdev = 4.062
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay
[info] # Run progress: 81.55% complete, ETA 00:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86798.820 ops/s
[info] # Warmup Iteration   2: 242672.035 ops/s
[info] # Warmup Iteration   3: 241601.230 ops/s
[info] # Warmup Iteration   4: 245783.211 ops/s
[info] # Warmup Iteration   5: 241393.500 ops/s
[info] Iteration   1: 239548.751 ops/s
[info]                  ·gc.alloc.rate:            865.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6630.435 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 243535.494 ops/s
[info]                  ·gc.alloc.rate:                   880.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4369.390 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 246452.007 ops/s
[info]                  ·gc.alloc.rate:                                  890.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.429 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6521.138 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 248201.748 ops/s
[info]                  ·gc.alloc.rate:            896.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4316.901 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 248654.174 ops/s
[info]                  ·gc.alloc.rate:            898.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6463.790 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay":
[info]   245278.435 ±(99.9%) 14559.529 ops/s [Average]
[info]   (min, avg, max) = (239548.751, 245278.435, 248654.174), stdev = 3781.063
[info]   CI (99.9%): [230718.906, 259837.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate":
[info]   886.352 ±(99.9%) 52.674 MB/sec [Average]
[info]   (min, avg, max) = (865.606, 886.352, 898.543), stdev = 13.679
[info]   CI (99.9%): [833.678, 939.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm":
[info]   5688.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.002, 5688.002, 5688.002), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.086 ±(99.9%) 0.739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.429), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.590 ±(99.9%) 714.549 MB/sec [Average]
[info]   (min, avg, max) = (676.053, 881.590, 1021.096), stdev = 185.566
[info]   CI (99.9%): [167.040, 1596.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5660.331 ±(99.9%) 4636.379 B/op [Average]
[info]   (min, avg, max) = (4316.901, 5660.331, 6630.435), stdev = 1204.053
[info]   CI (99.9%): [1023.952, 10296.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.166 ±(99.9%) 44.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.166, 25.829), stdev = 11.551
[info]   CI (99.9%): [≈ 0, 49.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 22.000), stdev = 7.987
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce
[info] # Run progress: 82.52% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351504.082 ops/s
[info] # Warmup Iteration   2: 480306.668 ops/s
[info] # Warmup Iteration   3: 479636.674 ops/s
[info] # Warmup Iteration   4: 480865.786 ops/s
[info] # Warmup Iteration   5: 485973.290 ops/s
[info] Iteration   1: 489978.164 ops/s
[info]                  ·gc.alloc.rate:                                  1142.878 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3672.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.166 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.533 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4371.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.140 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 490135.696 ops/s
[info]                  ·gc.alloc.rate:                                  1143.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3672.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3279.053 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 490864.050 ops/s
[info]                  ·gc.alloc.rate:                                  1144.982 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3672.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3274.030 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 490492.255 ops/s
[info]                  ·gc.alloc.rate:            1144.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       3672.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4369.013 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 490285.260 ops/s
[info]                  ·gc.alloc.rate:                                  1143.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3672.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3278.103 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce":
[info]   490351.085 ±(99.9%) 1323.941 ops/s [Average]
[info]   (min, avg, max) = (489978.164, 490351.085, 490864.050), stdev = 343.823
[info]   CI (99.9%): [489027.144, 491675.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate":
[info]   1143.803 ±(99.9%) 3.225 MB/sec [Average]
[info]   (min, avg, max) = (1142.878, 1143.803, 1144.982), stdev = 0.837
[info]   CI (99.9%): [1140.578, 1147.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   3672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3672.001, 3672.001, 3672.001), stdev = 0.001
[info]   CI (99.9%): [3672.001, 3672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.110 ±(99.9%) 0.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.533), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1156.933 ±(99.9%) 717.112 MB/sec [Average]
[info]   (min, avg, max) = (1020.860, 1156.933, 1361.429), stdev = 186.232
[info]   CI (99.9%): [439.821, 1874.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3714.249 ±(99.9%) 2305.174 B/op [Average]
[info]   (min, avg, max) = (3274.030, 3714.249, 4371.046), stdev = 598.646
[info]   CI (99.9%): [1409.075, 6019.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.428 ±(99.9%) 3.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.428, 2.140), stdev = 0.957
[info]   CI (99.9%): [≈ 0, 4.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson
[info] # Run progress: 83.50% complete, ETA 00:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 577231.291 ops/s
[info] # Warmup Iteration   2: 1024576.261 ops/s
[info] # Warmup Iteration   3: 1017100.310 ops/s
[info] # Warmup Iteration   4: 1016925.315 ops/s
[info] # Warmup Iteration   5: 1016229.594 ops/s
[info] Iteration   1: 1017511.519 ops/s
[info]                  ·gc.alloc.rate:            584.503 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 519.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1016455.142 ops/s
[info]                  ·gc.alloc.rate:            583.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1039.723 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1018032.082 ops/s
[info]                  ·gc.alloc.rate:            584.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1038.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1017849.534 ops/s
[info]                  ·gc.alloc.rate:                   584.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1037.207 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 1023647.536 ops/s
[info]                  ·gc.alloc.rate:                   588.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             339.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        521.308 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson":
[info]   1018699.163 ±(99.9%) 10908.166 ops/s [Average]
[info]   (min, avg, max) = (1016455.142, 1018699.163, 1023647.536), stdev = 2832.816
[info]   CI (99.9%): [1007790.997, 1029607.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate":
[info]   585.126 ±(99.9%) 6.358 MB/sec [Average]
[info]   (min, avg, max) = (583.787, 585.126, 588.006), stdev = 1.651
[info]   CI (99.9%): [578.768, 591.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   537.690 ±(99.9%) 703.985 MB/sec [Average]
[info]   (min, avg, max) = (335.760, 537.690, 671.434), stdev = 182.823
[info]   CI (99.9%): [≈ 0, 1241.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   831.112 ±(99.9%) 1092.559 B/op [Average]
[info]   (min, avg, max) = (519.291, 831.112, 1039.723), stdev = 283.734
[info]   CI (99.9%): [≈ 0, 1923.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.646 ±(99.9%) 10.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.646, 6.180), stdev = 2.685
[info]   CI (99.9%): [≈ 0, 11.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.600, 13.000), stdev = 3.050
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter
[info] # Run progress: 84.47% complete, ETA 00:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4091851.537 ops/s
[info] # Warmup Iteration   2: 4455650.752 ops/s
[info] # Warmup Iteration   3: 4469921.912 ops/s
[info] # Warmup Iteration   4: 4491616.101 ops/s
[info] # Warmup Iteration   5: 4489426.560 ops/s
[info] Iteration   1: 4486975.763 ops/s
[info]                  ·gc.alloc.rate:            615.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4497700.121 ops/s
[info]                  ·gc.alloc.rate:            617.174 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4494476.887 ops/s
[info]                  ·gc.alloc.rate:            616.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235.601 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4454956.775 ops/s
[info]                  ·gc.alloc.rate:                   611.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        238.870 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4501659.009 ops/s
[info]                  ·gc.alloc.rate:                                  617.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             216.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       238.018 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter":
[info]   4487153.711 ±(99.9%) 72345.333 ops/s [Average]
[info]   (min, avg, max) = (4454956.775, 4487153.711, 4501659.009), stdev = 18787.853
[info]   CI (99.9%): [4414808.378, 4559499.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate":
[info]   615.747 ±(99.9%) 9.938 MB/sec [Average]
[info]   (min, avg, max) = (611.345, 615.747, 617.801), stdev = 2.581
[info]   CI (99.9%): [605.809, 625.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   216.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (216.000, 216.000, 216.000), stdev = 0.001
[info]   CI (99.9%): [216.000, 216.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   607.719 ±(99.9%) 584.332 MB/sec [Average]
[info]   (min, avg, max) = (336.326, 607.719, 680.776), stdev = 151.749
[info]   CI (99.9%): [23.387, 1192.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   213.184 ±(99.9%) 204.978 B/op [Average]
[info]   (min, avg, max) = (117.997, 213.184, 238.870), stdev = 53.232
[info]   CI (99.9%): [8.206, 418.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.282 ±(99.9%) 2.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.282, 1.412), stdev = 0.631
[info]   CI (99.9%): [≈ 0, 2.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.200, 11.000), stdev = 2.168
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay
[info] # Run progress: 85.44% complete, ETA 00:04:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132653.994 ops/s
[info] # Warmup Iteration   2: 278934.105 ops/s
[info] # Warmup Iteration   3: 281142.913 ops/s
[info] # Warmup Iteration   4: 287173.534 ops/s
[info] # Warmup Iteration   5: 284498.105 ops/s
[info] Iteration   1: 281270.165 ops/s
[info]                  ·gc.alloc.rate:                   944.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              5288.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5646.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.637 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 289663.199 ops/s
[info]                  ·gc.alloc.rate:                                  972.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5288.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.335 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5544.919 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.619 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 288958.496 ops/s
[info]                  ·gc.alloc.rate:            970.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       5288.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5561.823 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 281863.499 ops/s
[info]                  ·gc.alloc.rate:                                  946.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5288.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5701.693 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 291314.952 ops/s
[info]                  ·gc.alloc.rate:            978.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       5288.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3678.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay":
[info]   286614.062 ±(99.9%) 18062.871 ops/s [Average]
[info]   (min, avg, max) = (281270.165, 286614.062, 291314.952), stdev = 4690.870
[info]   CI (99.9%): [268551.192, 304676.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate":
[info]   962.837 ±(99.9%) 60.608 MB/sec [Average]
[info]   (min, avg, max) = (944.872, 962.837, 978.651), stdev = 15.740
[info]   CI (99.9%): [902.229, 1023.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   5288.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5288.001, 5288.001, 5288.002), stdev = 0.001
[info]   CI (99.9%): [5288.001, 5288.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.070 ±(99.9%) 0.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.335), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   950.397 ±(99.9%) 580.866 MB/sec [Average]
[info]   (min, avg, max) = (680.705, 950.397, 1021.020), stdev = 150.849
[info]   CI (99.9%): [369.531, 1531.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5226.686 ±(99.9%) 3342.502 B/op [Average]
[info]   (min, avg, max) = (3678.090, 5226.686, 5701.693), stdev = 868.037
[info]   CI (99.9%): [1884.184, 8569.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.451 ±(99.9%) 31.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.451, 18.637), stdev = 8.083
[info]   CI (99.9%): [≈ 0, 35.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 18.000), stdev = 6.403
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce
[info] # Run progress: 86.41% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127165.285 ops/s
[info] # Warmup Iteration   2: 273932.969 ops/s
[info] # Warmup Iteration   3: 283073.594 ops/s
[info] # Warmup Iteration   4: 283170.068 ops/s
[info] # Warmup Iteration   5: 278956.067 ops/s
[info] Iteration   1: 282529.938 ops/s
[info]                  ·gc.alloc.rate:            761.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       4240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3747.870 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 279398.772 ops/s
[info]                  ·gc.alloc.rate:            752.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3789.726 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 281560.463 ops/s
[info]                  ·gc.alloc.rate:                   758.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3779.410 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 282198.822 ops/s
[info]                  ·gc.alloc.rate:                                  760.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.334 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5695.249 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 282871.604 ops/s
[info]                  ·gc.alloc.rate:            762.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3787.881 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce":
[info]   281711.920 ±(99.9%) 5316.360 ops/s [Average]
[info]   (min, avg, max) = (279398.772, 281711.920, 282871.604), stdev = 1380.642
[info]   CI (99.9%): [276395.560, 287028.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate":
[info]   758.907 ±(99.9%) 14.285 MB/sec [Average]
[info]   (min, avg, max) = (752.678, 758.907, 762.008), stdev = 3.710
[info]   CI (99.9%): [744.622, 773.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm":
[info]   4240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4240.001, 4240.001, 4240.002), stdev = 0.001
[info]   CI (99.9%): [4240.001, 4240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.334), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen":
[info]   744.715 ±(99.9%) 595.448 MB/sec [Average]
[info]   (min, avg, max) = (672.691, 744.715, 1021.274), stdev = 154.636
[info]   CI (99.9%): [149.267, 1340.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4160.027 ±(99.9%) 3305.316 B/op [Average]
[info]   (min, avg, max) = (3747.870, 4160.027, 5695.249), stdev = 858.380
[info]   CI (99.9%): [854.712, 7465.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.468 ±(99.9%) 38.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.468, 22.341), stdev = 9.991
[info]   CI (99.9%): [≈ 0, 42.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 12.000), stdev = 3.834
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson
[info] # Run progress: 87.38% complete, ETA 00:03:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 100119.586 ops/s
[info] # Warmup Iteration   2: 574600.604 ops/s
[info] # Warmup Iteration   3: 575230.831 ops/s
[info] # Warmup Iteration   4: 576304.222 ops/s
[info] # Warmup Iteration   5: 569685.022 ops/s
[info] Iteration   1: 575851.419 ops/s
[info]                  ·gc.alloc.rate:            936.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2752.837 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 578600.783 ops/s
[info]                  ·gc.alloc.rate:                                  940.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.263 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.715 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2761.432 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.684 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 575019.889 ops/s
[info]                  ·gc.alloc.rate:                                  935.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2794.992 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 583564.371 ops/s
[info]                  ·gc.alloc.rate:            949.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1836.083 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 582954.556 ops/s
[info]                  ·gc.alloc.rate:                                  948.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2756.997 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson":
[info]   579198.204 ±(99.9%) 15183.186 ops/s [Average]
[info]   (min, avg, max) = (575019.889, 579198.204, 583564.371), stdev = 3943.025
[info]   CI (99.9%): [564015.018, 594381.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate":
[info]   941.963 ±(99.9%) 24.849 MB/sec [Average]
[info]   (min, avg, max) = (935.280, 941.963, 949.156), stdev = 6.453
[info]   CI (99.9%): [917.114, 966.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2560.001, 2560.001, 2560.001), stdev = 0.001
[info]   CI (99.9%): [2560.001, 2560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.065 ±(99.9%) 0.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.263), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.176 ±(99.9%) 1.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.715), stdev = 0.310
[info]   CI (99.9%): [≈ 0, 1.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   948.958 ±(99.9%) 577.763 MB/sec [Average]
[info]   (min, avg, max) = (680.754, 948.958, 1021.133), stdev = 150.043
[info]   CI (99.9%): [371.195, 1526.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2580.468 ±(99.9%) 1603.633 B/op [Average]
[info]   (min, avg, max) = (1836.083, 2580.468, 2794.992), stdev = 416.459
[info]   CI (99.9%): [976.835, 4184.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.537 ±(99.9%) 21.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.537, 12.684), stdev = 5.672
[info]   CI (99.9%): [≈ 0, 24.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 19.000), stdev = 7.036
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter
[info] # Run progress: 88.35% complete, ETA 00:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1787406.919 ops/s
[info] # Warmup Iteration   2: 2026347.457 ops/s
[info] # Warmup Iteration   3: 2011234.387 ops/s
[info] # Warmup Iteration   4: 2007845.595 ops/s
[info] # Warmup Iteration   5: 2017182.436 ops/s
[info] Iteration   1: 1993259.879 ops/s
[info]                  ·gc.alloc.rate:            516.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.612 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 531.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2018974.775 ops/s
[info]                  ·gc.alloc.rate:            523.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 262.234 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1995291.743 ops/s
[info]                  ·gc.alloc.rate:            517.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530.685 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 2005220.410 ops/s
[info]                  ·gc.alloc.rate:            519.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 264.035 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1995416.576 ops/s
[info]                  ·gc.alloc.rate:                   517.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        530.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter":
[info]   2001632.677 ±(99.9%) 41408.806 ops/s [Average]
[info]   (min, avg, max) = (1993259.879, 2001632.677, 2018974.775), stdev = 10753.735
[info]   CI (99.9%): [1960223.871, 2043041.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate":
[info]   518.797 ±(99.9%) 10.831 MB/sec [Average]
[info]   (min, avg, max) = (516.580, 518.797, 523.341), stdev = 2.813
[info]   CI (99.9%): [507.966, 529.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.135 ±(99.9%) 709.313 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 538.135, 672.716), stdev = 184.206
[info]   CI (99.9%): [≈ 0, 1247.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   423.773 ±(99.9%) 564.672 B/op [Average]
[info]   (min, avg, max) = (262.234, 423.773, 531.235), stdev = 146.643
[info]   CI (99.9%): [≈ 0, 988.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.525 ±(99.9%) 4.524 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.525, 2.627), stdev = 1.175
[info]   CI (99.9%): [≈ 0, 5.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay
[info] # Run progress: 89.32% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85550.967 ops/s
[info] # Warmup Iteration   2: 231404.586 ops/s
[info] # Warmup Iteration   3: 233065.204 ops/s
[info] # Warmup Iteration   4: 233279.571 ops/s
[info] # Warmup Iteration   5: 235386.565 ops/s
[info] Iteration   1: 234060.841 ops/s
[info]                  ·gc.alloc.rate:            899.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       6048.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6785.957 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 236215.225 ops/s
[info]                  ·gc.alloc.rate:                                  907.574 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6772.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.630 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 239073.077 ops/s
[info]                  ·gc.alloc.rate:                                  918.518 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4481.619 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 236639.723 ops/s
[info]                  ·gc.alloc.rate:            909.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       6048.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6791.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 237903.703 ops/s
[info]                  ·gc.alloc.rate:                                  914.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6755.511 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay":
[info]   236778.514 ±(99.9%) 7268.791 ops/s [Average]
[info]   (min, avg, max) = (234060.841, 236778.514, 239073.077), stdev = 1887.682
[info]   CI (99.9%): [229509.723, 244047.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate":
[info]   909.759 ±(99.9%) 28.150 MB/sec [Average]
[info]   (min, avg, max) = (899.214, 909.759, 918.518), stdev = 7.310
[info]   CI (99.9%): [881.610, 937.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm":
[info]   6048.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6048.002, 6048.002, 6048.002), stdev = 0.001
[info]   CI (99.9%): [6048.002, 6048.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.088 ±(99.9%) 0.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.287), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   949.632 ±(99.9%) 579.367 MB/sec [Average]
[info]   (min, avg, max) = (680.630, 949.632, 1021.271), stdev = 150.460
[info]   CI (99.9%): [370.265, 1528.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6317.534 ±(99.9%) 3952.310 B/op [Average]
[info]   (min, avg, max) = (4481.619, 6317.534, 6791.760), stdev = 1026.402
[info]   CI (99.9%): [2365.224, 10269.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.326 ±(99.9%) 45.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.326, 26.630), stdev = 11.909
[info]   CI (99.9%): [≈ 0, 51.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 6.107
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce
[info] # Run progress: 90.29% complete, ETA 00:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 332156.883 ops/s
[info] # Warmup Iteration   2: 516984.163 ops/s
[info] # Warmup Iteration   3: 519909.093 ops/s
[info] # Warmup Iteration   4: 527862.618 ops/s
[info] # Warmup Iteration   5: 514172.820 ops/s
[info] Iteration   1: 513691.827 ops/s
[info]                  ·gc.alloc.rate:                   898.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3092.043 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 525577.138 ops/s
[info]                  ·gc.alloc.rate:                                  918.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3055.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.995 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 534362.929 ops/s
[info]                  ·gc.alloc.rate:            934.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2005.087 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 534208.390 ops/s
[info]                  ·gc.alloc.rate:            934.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3008.458 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 531765.307 ops/s
[info]                  ·gc.alloc.rate:            929.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3022.276 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce":
[info]   527921.118 ±(99.9%) 33556.515 ops/s [Average]
[info]   (min, avg, max) = (513691.827, 527921.118, 534362.929), stdev = 8714.520
[info]   CI (99.9%): [494364.603, 561477.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate":
[info]   922.976 ±(99.9%) 58.796 MB/sec [Average]
[info]   (min, avg, max) = (898.067, 922.976, 934.335), stdev = 15.269
[info]   CI (99.9%): [864.180, 981.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm":
[info]   2752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2752.001, 2752.001, 2752.001), stdev = 0.001
[info]   CI (99.9%): [2752.001, 2752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   950.417 ±(99.9%) 580.811 MB/sec [Average]
[info]   (min, avg, max) = (680.749, 950.417, 1021.056), stdev = 150.835
[info]   CI (99.9%): [369.606, 1531.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2836.766 ±(99.9%) 1794.580 B/op [Average]
[info]   (min, avg, max) = (2005.087, 2836.766, 3092.043), stdev = 466.047
[info]   CI (99.9%): [1042.186, 4631.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.440 ±(99.9%) 17.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.440, 10.205), stdev = 4.426
[info]   CI (99.9%): [≈ 0, 19.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.788
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson
[info] # Run progress: 91.26% complete, ETA 00:02:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 936902.361 ops/s
[info] # Warmup Iteration   2: 1456283.527 ops/s
[info] # Warmup Iteration   3: 1485070.174 ops/s
[info] # Warmup Iteration   4: 1466326.258 ops/s
[info] # Warmup Iteration   5: 1464886.978 ops/s
[info] Iteration   1: 1469234.283 ops/s
[info]                  ·gc.alloc.rate:            604.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 719.303 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1462222.715 ops/s
[info]                  ·gc.alloc.rate:            601.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 722.740 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1483266.204 ops/s
[info]                  ·gc.alloc.rate:            610.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 356.248 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1424905.435 ops/s
[info]                  ·gc.alloc.rate:                   586.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        741.670 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 1486531.908 ops/s
[info]                  ·gc.alloc.rate:                                  611.963 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       720.103 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.705 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson":
[info]   1465232.109 ±(99.9%) 94913.188 ops/s [Average]
[info]   (min, avg, max) = (1424905.435, 1465232.109, 1486531.908), stdev = 24648.654
[info]   CI (99.9%): [1370318.921, 1560145.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate":
[info]   603.239 ±(99.9%) 38.797 MB/sec [Average]
[info]   (min, avg, max) = (586.780, 603.239, 611.963), stdev = 10.075
[info]   CI (99.9%): [564.442, 642.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   606.031 ±(99.9%) 582.054 MB/sec [Average]
[info]   (min, avg, max) = (335.714, 606.031, 680.056), stdev = 151.158
[info]   CI (99.9%): [23.977, 1188.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   652.013 ±(99.9%) 637.632 B/op [Average]
[info]   (min, avg, max) = (356.248, 652.013, 741.670), stdev = 165.591
[info]   CI (99.9%): [14.381, 1289.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.024 ±(99.9%) 7.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.024, 4.415), stdev = 1.920
[info]   CI (99.9%): [≈ 0, 8.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter
[info] # Run progress: 92.23% complete, ETA 00:02:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3621350.258 ops/s
[info] # Warmup Iteration   2: 4120288.501 ops/s
[info] # Warmup Iteration   3: 4098145.561 ops/s
[info] # Warmup Iteration   4: 4136585.281 ops/s
[info] # Warmup Iteration   5: 4144852.923 ops/s
[info] Iteration   1: 4134401.323 ops/s
[info]                  ·gc.alloc.rate:            462.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256.118 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4146548.023 ops/s
[info]                  ·gc.alloc.rate:            463.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 127.683 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4151664.581 ops/s
[info]                  ·gc.alloc.rate:            464.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 127.526 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4111259.108 ops/s
[info]                  ·gc.alloc.rate:            459.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 257.565 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 4105361.165 ops/s
[info]                  ·gc.alloc.rate:            459.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.963 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter":
[info]   4129846.840 ±(99.9%) 79865.798 ops/s [Average]
[info]   (min, avg, max) = (4105361.165, 4129846.840, 4151664.581), stdev = 20740.894
[info]   CI (99.9%): [4049981.042, 4209712.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate":
[info]   461.797 ±(99.9%) 8.899 MB/sec [Average]
[info]   (min, avg, max) = (459.106, 461.797, 464.239), stdev = 2.311
[info]   CI (99.9%): [452.898, 470.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.920 ±(99.9%) 709.343 MB/sec [Average]
[info]   (min, avg, max) = (336.378, 470.920, 672.740), stdev = 184.214
[info]   CI (99.9%): [≈ 0, 1180.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   179.571 ±(99.9%) 271.632 B/op [Average]
[info]   (min, avg, max) = (127.526, 179.571, 257.565), stdev = 70.542
[info]   CI (99.9%): [≈ 0, 451.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc
[info] # Run progress: 93.20% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3883105.638 ops/s
[info] # Warmup Iteration   2: 4225450.525 ops/s
[info] # Warmup Iteration   3: 4230811.396 ops/s
[info] # Warmup Iteration   4: 4293147.435 ops/s
[info] # Warmup Iteration   5: 4259323.012 ops/s
[info] Iteration   1: 4265903.724 ops/s
[info]                  ·gc.alloc.rate:            260.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 124.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4276886.378 ops/s
[info]                  ·gc.alloc.rate:            260.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123.796 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4283632.886 ops/s
[info]                  ·gc.alloc.rate:            261.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123.602 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4302974.754 ops/s
[info]                  ·gc.alloc.rate:      262.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4272244.117 ops/s
[info]                  ·gc.alloc.rate:            260.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc":
[info]   4280328.372 ±(99.9%) 54763.528 ops/s [Average]
[info]   (min, avg, max) = (4265903.724, 4280328.372, 4302974.754), stdev = 14221.914
[info]   CI (99.9%): [4225564.844, 4335091.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate":
[info]   261.041 ±(99.9%) 3.422 MB/sec [Average]
[info]   (min, avg, max) = (260.097, 261.041, 262.437), stdev = 0.889
[info]   CI (99.9%): [257.619, 264.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.075 ±(99.9%) 579.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.075, 336.382), stdev = 150.418
[info]   CI (99.9%): [≈ 0, 848.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   99.088 ±(99.9%) 213.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.088, 124.110), stdev = 55.392
[info]   CI (99.9%): [≈ 0, 312.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay
[info] # Run progress: 94.17% complete, ETA 00:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68363.513 ops/s
[info] # Warmup Iteration   2: 179152.528 ops/s
[info] # Warmup Iteration   3: 177296.435 ops/s
[info] # Warmup Iteration   4: 179747.700 ops/s
[info] # Warmup Iteration   5: 181349.330 ops/s
[info] Iteration   1: 179888.928 ops/s
[info]                  ·gc.alloc.rate:            907.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       7936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8829.488 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 181959.049 ops/s
[info]                  ·gc.alloc.rate:                                  917.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8792.390 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                34.570 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 181897.247 ops/s
[info]                  ·gc.alloc.rate:                                  917.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8835.829 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 183569.840 ops/s
[info]                  ·gc.alloc.rate:            925.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       7936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5836.908 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 182679.954 ops/s
[info]                  ·gc.alloc.rate:            921.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       7936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8797.915 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay":
[info]   181999.003 ±(99.9%) 5235.881 ops/s [Average]
[info]   (min, avg, max) = (179888.928, 181999.003, 183569.840), stdev = 1359.742
[info]   CI (99.9%): [176763.122, 187234.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate":
[info]   917.763 ±(99.9%) 26.664 MB/sec [Average]
[info]   (min, avg, max) = (907.006, 917.763, 925.817), stdev = 6.925
[info]   CI (99.9%): [891.099, 944.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm":
[info]   7936.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7936.002, 7936.002, 7936.002), stdev = 0.001
[info]   CI (99.9%): [7936.002, 7936.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.103 ±(99.9%) 0.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.348), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   949.824 ±(99.9%) 579.117 MB/sec [Average]
[info]   (min, avg, max) = (680.936, 949.824, 1021.385), stdev = 150.395
[info]   CI (99.9%): [370.707, 1528.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8218.506 ±(99.9%) 5127.090 B/op [Average]
[info]   (min, avg, max) = (5836.908, 8218.506, 8835.829), stdev = 1331.489
[info]   CI (99.9%): [3091.416, 13345.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.914 ±(99.9%) 59.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.914, 34.570), stdev = 15.460
[info]   CI (99.9%): [≈ 0, 66.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 18.000), stdev = 5.814
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce
[info] # Run progress: 95.15% complete, ETA 00:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2945.431 ops/s
[info] # Warmup Iteration   2: 4853.407 ops/s
[info] # Warmup Iteration   3: 6100.276 ops/s
[info] # Warmup Iteration   4: 6194.680 ops/s
[info] # Warmup Iteration   5: 6190.134 ops/s
[info] Iteration   1: 6114.122 ops/s
[info]                  ·gc.alloc.rate:            815.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       209992.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 259743.728 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 6267.965 ops/s
[info]                  ·gc.alloc.rate:                   836.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              209992.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        168909.372 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 836.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 6232.029 ops/s
[info]                  ·gc.alloc.rate:                   831.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              209992.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        171735.017 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 168.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6275.119 ops/s
[info]                  ·gc.alloc.rate:            837.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       209992.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256088.419 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 6297.204 ops/s
[info]                  ·gc.alloc.rate:                                  840.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             209992.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       170129.334 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce":
[info]   6237.288 ±(99.9%) 280.065 ops/s [Average]
[info]   (min, avg, max) = (6114.122, 6237.288, 6297.204), stdev = 72.732
[info]   CI (99.9%): [5957.222, 6517.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate":
[info]   832.208 ±(99.9%) 37.473 MB/sec [Average]
[info]   (min, avg, max) = (815.680, 832.208, 840.152), stdev = 9.732
[info]   CI (99.9%): [794.734, 869.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm":
[info]   209992.068 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (209992.065, 209992.068, 209992.076), stdev = 0.005
[info]   CI (99.9%): [209992.051, 209992.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   812.696 ±(99.9%) 711.456 MB/sec [Average]
[info]   (min, avg, max) = (672.654, 812.696, 1021.087), stdev = 184.763
[info]   CI (99.9%): [101.241, 1524.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   205321.174 ±(99.9%) 184985.697 B/op [Average]
[info]   (min, avg, max) = (168909.372, 205321.174, 259743.728), stdev = 48040.198
[info]   CI (99.9%): [20335.477, 390306.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   200.878 ±(99.9%) 1396.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 200.878, 836.185), stdev = 362.539
[info]   CI (99.9%): [≈ 0, 1596.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 18.000), stdev = 6.504
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson
[info] # Run progress: 96.12% complete, ETA 00:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_335f9fe6/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 16547.981 ops/s
[info] # Warmup Iteration   2: 33408.663 ops/s
[info] # Warmup Iteration   3: 33858.064 ops/s
[info] # Warmup Iteration   4: 33597.499 ops/s
[info] # Warmup Iteration   5: 33768.259 ops/s
[info] Iteration   1: 33569.006 ops/s
[info]                  ·gc.alloc.rate:            428.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31479.766 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 34070.883 ops/s
[info]                  ·gc.alloc.rate:            434.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15508.475 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 33923.439 ops/s
[info]                  ·gc.alloc.rate:            433.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15575.206 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 33538.981 ops/s
[info]                  ·gc.alloc.rate:                   428.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31477.598 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 33837.599 ops/s
[info]                  ·gc.alloc.rate:            432.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.933 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15584.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson":
[info]   33787.982 ±(99.9%) 883.962 ops/s [Average]
[info]   (min, avg, max) = (33538.981, 33787.982, 34070.883), stdev = 229.562
[info]   CI (99.9%): [32904.019, 34671.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate":
[info]   431.414 ±(99.9%) 11.091 MB/sec [Average]
[info]   (min, avg, max) = (428.274, 431.414, 434.933), stdev = 2.880
[info]   CI (99.9%): [420.324, 442.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   20099.997 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (20099.933, 20099.997, 20100.048), stdev = 0.042
[info]   CI (99.9%): [20099.837, 20100.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   469.653 ±(99.9%) 707.846 MB/sec [Average]
[info]   (min, avg, max) = (335.022, 469.653, 671.349), stdev = 183.825
[info]   CI (99.9%): [≈ 0, 1177.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   21925.153 ±(99.9%) 33582.190 B/op [Average]
[info]   (min, avg, max) = (15508.475, 21925.153, 31479.766), stdev = 8721.188
[info]   CI (99.9%): [≈ 0, 55507.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.252 ±(99.9%) 53.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.252, 31.259), stdev = 13.979
[info]   CI (99.9%): [≈ 0, 60.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 13.000), stdev = 3.286
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter
[info] # Run progress: 97.09% complete, ETA 00:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25936.956 ops/s
[info] # Warmup Iteration   2: 38202.824 ops/s
[info] # Warmup Iteration   3: 38386.342 ops/s
[info] # Warmup Iteration   4: 38408.071 ops/s
[info] # Warmup Iteration   5: 38066.792 ops/s
[info] Iteration   1: 38478.802 ops/s
[info]                  ·gc.alloc.rate:            259.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13758.337 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 38455.971 ops/s
[info]                  ·gc.alloc.rate:            258.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13767.280 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 38323.782 ops/s
[info]                  ·gc.alloc.rate:            258.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13813.969 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 38488.067 ops/s
[info]                  ·gc.alloc.rate:      259.182 MB/sec
[info]                  ·gc.alloc.rate.norm: 10600.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38128.514 ops/s
[info]                  ·gc.alloc.rate:            256.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13885.328 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter":
[info]   38375.027 ±(99.9%) 588.702 ops/s [Average]
[info]   (min, avg, max) = (38128.514, 38375.027, 38488.067), stdev = 152.884
[info]   CI (99.9%): [37786.325, 38963.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate":
[info]   258.419 ±(99.9%) 3.930 MB/sec [Average]
[info]   (min, avg, max) = (256.772, 258.419, 259.182), stdev = 1.021
[info]   CI (99.9%): [254.489, 262.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   10600.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10600.011, 10600.011, 10600.011), stdev = 0.001
[info]   CI (99.9%): [10600.009, 10600.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.065 ±(99.9%) 579.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.065, 336.365), stdev = 150.412
[info]   CI (99.9%): [≈ 0, 848.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   11044.983 ±(99.9%) 23775.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11044.983, 13885.328), stdev = 6174.538
[info]   CI (99.9%): [≈ 0, 34820.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc
[info] # Run progress: 98.06% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28166.636 ops/s
[info] # Warmup Iteration   2: 39832.727 ops/s
[info] # Warmup Iteration   3: 39991.835 ops/s
[info] # Warmup Iteration   4: 40154.497 ops/s
[info] # Warmup Iteration   5: 40251.559 ops/s
[info] Iteration   1: 40262.629 ops/s
[info]                  ·gc.alloc.rate:      12.890 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 40263.307 ops/s
[info]                  ·gc.alloc.rate:      12.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 40153.736 ops/s
[info]                  ·gc.alloc.rate:      12.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 39448.446 ops/s
[info]                  ·gc.alloc.rate:      12.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 40074.172 ops/s
[info]                  ·gc.alloc.rate:      12.832 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc":
[info]   40040.458 ±(99.9%) 1310.731 ops/s [Average]
[info]   (min, avg, max) = (39448.446, 40040.458, 40263.307), stdev = 340.393
[info]   CI (99.9%): [38729.727, 41351.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   12.820 ±(99.9%) 0.415 MB/sec [Average]
[info]   (min, avg, max) = (12.633, 12.820, 12.892), stdev = 0.108
[info]   CI (99.9%): [12.405, 13.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   504.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (504.010, 504.011, 504.011), stdev = 0.001
[info]   CI (99.9%): [504.009, 504.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay
[info] # Run progress: 99.03% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1700.755 ops/s
[info] # Warmup Iteration   2: 3813.075 ops/s
[info] # Warmup Iteration   3: 4002.840 ops/s
[info] # Warmup Iteration   4: 4062.788 ops/s
[info] # Warmup Iteration   5: 4042.670 ops/s
[info] Iteration   1: 4107.114 ops/s
[info]                  ·gc.alloc.rate:                   1042.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              399677.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        387983.330 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1531.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 4210.789 ops/s
[info]                  ·gc.alloc.rate:                                  1069.369 MB/sec
[info]                  ·gc.alloc.rate.norm:                             399679.580 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       381639.840 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4200.992 ops/s
[info]                  ·gc.alloc.rate:            1066.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       399677.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 382548.074 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 4214.392 ops/s
[info]                  ·gc.alloc.rate:                                  1070.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                             399678.195 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.820 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       381277.753 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4202.823 ops/s
[info]                  ·gc.alloc.rate:            1067.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       399677.949 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 509821.442 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay":
[info]   4187.222 ±(99.9%) 173.748 ops/s [Average]
[info]   (min, avg, max) = (4107.114, 4187.222, 4214.392), stdev = 45.122
[info]   CI (99.9%): [4013.475, 4360.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate":
[info]   1063.287 ±(99.9%) 44.459 MB/sec [Average]
[info]   (min, avg, max) = (1042.793, 1063.287, 1070.242), stdev = 11.546
[info]   CI (99.9%): [1018.828, 1107.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   399678.003 ±(99.9%) 3.855 B/op [Average]
[info]   (min, avg, max) = (399677.087, 399678.003, 399679.580), stdev = 1.001
[info]   CI (99.9%): [399674.148, 399681.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.675 ±(99.9%) 38.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.675, 22.555), stdev = 10.001
[info]   CI (99.9%): [≈ 0, 43.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1087.352 ±(99.9%) 589.839 MB/sec [Average]
[info]   (min, avg, max) = (1012.282, 1087.352, 1361.283), stdev = 153.179
[info]   CI (99.9%): [497.513, 1677.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   408654.088 ±(99.9%) 218019.833 B/op [Average]
[info]   (min, avg, max) = (381277.753, 408654.088, 509821.442), stdev = 56619.058
[info]   CI (99.9%): [190634.255, 626673.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   306.303 ±(99.9%) 2637.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 306.303, 1531.513), stdev = 684.914
[info]   CI (99.9%): [≈ 0, 2943.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # Run complete. Total time: 00:28:08
[info] Benchmark                                                                                               Mode  Cnt         Score         Error   Units
[info] JsonCodecMakerBenchmark.missingReqFieldCirce                                                           thrpt    5   1405467.243 ±   41025.429   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate                                            thrpt    5      2143.220 ±      62.340  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm                                       thrpt    5      2400.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.001 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.002 ±       0.005    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      2110.385 ±     586.558  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      2363.673 ±     684.177    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count                                                 thrpt    5        31.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time                                                  thrpt    5        48.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJackson                                                         thrpt    5    158782.145 ±    1386.438   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate                                          thrpt    5       288.091 ±       2.547  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm                                     thrpt    5      2856.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       336.346 ±       0.058  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      3334.398 ±      29.117    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count                                               thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time                                                thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter                                                        thrpt    5    310081.060 ±    5957.578   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate                                         thrpt    5       204.907 ±       3.948  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm                                    thrpt    5      1040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       201.854 ±     709.546  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5      1027.929 ±    3613.316    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count                                              thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time                                               thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless                                               thrpt    5    704466.111 ±  179178.793   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate                                thrpt    5       247.045 ±      62.788  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm                           thrpt    5       552.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen                          thrpt    5       269.088 ±     579.232  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm                     thrpt    5       611.953 ±    1329.380    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count                                     thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time                                      thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump                                         thrpt    5   2834975.174 ±   73751.696   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate                          thrpt    5       317.014 ±       8.375  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm                     thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                    thrpt    5       336.387 ±       0.124  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm               thrpt    5       186.763 ±       4.882    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count                               thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time                                thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldPlay                                                            thrpt    5    120303.083 ±    4177.664   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate                                             thrpt    5       772.990 ±      27.222  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm                                        thrpt    5     10112.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.042 ±       0.357  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.544 ±       4.623    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       812.078 ±     714.618  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     10623.248 ±    9338.635    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        10.492 ±      90.338    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count                                                  thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time                                                   thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.readAdtCirce                                                                   thrpt    5    484510.003 ±   26759.677   ops/s
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate                                                    thrpt    5      1250.923 ±      69.037  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm                                               thrpt    5      4064.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.002 ±       0.014  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.007 ±       0.045    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1225.260 ±     717.819  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      3979.675 ±    2294.047    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.count                                                         thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.time                                                          thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJackson                                                                 thrpt    5    998469.881 ±   26024.242   ops/s
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate                                                  thrpt    5       710.477 ±      18.522  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm                                             thrpt    5      1120.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.016 ±       0.138  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.026 ±       0.219    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen                                            thrpt    5       743.866 ±     570.992  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1173.555 ±     927.097    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         1.257 ±      10.822    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.count                                                       thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.time                                                        thrpt    5        51.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJsoniter                                                                thrpt    5   2809355.513 ±   70795.642   ops/s
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate                                                 thrpt    5       185.586 ±       4.604  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm                                            thrpt    5       104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen                                           thrpt    5       201.780 ±     709.286  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       113.556 ±     399.169    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count                                                      thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time                                                       thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.readAdtPlay                                                                    thrpt    5    104524.010 ±    3986.503   ops/s
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate                                                     thrpt    5       880.970 ±      33.724  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm                                                thrpt    5     13264.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.015 ±       0.124  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.220 ±       1.855    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen                                               thrpt    5       881.773 ±     714.834  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     13280.543 ±   10845.263    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        12.084 ±     104.046    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.count                                                          thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.time                                                           thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsCirce                                                               thrpt    5   1103189.550 ±   42964.817   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate                                                thrpt    5      1732.433 ±      67.021  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm                                           thrpt    5      2472.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.001 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.001 ±       0.006    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1701.657 ±       0.539  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2428.284 ±      94.793    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count                                                     thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time                                                      thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJackson                                                             thrpt    5   1562119.658 ±   34335.271   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate                                              thrpt    5      1095.611 ±      23.884  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm                                         thrpt    5      1104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.036 ±       0.298  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.036 ±       0.299    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen                                        thrpt    5      1156.238 ±     712.923  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1165.411 ±     728.121    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.802 ±       6.904    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count                                                   thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time                                                    thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter                                                            thrpt    5   7323198.236 ±  478256.889   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate                                             thrpt    5       930.390 ±      60.786  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm                                        thrpt    5       200.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.029 ±       0.239  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.006 ±       0.051    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5       883.078 ±     725.705  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       189.615 ±     150.952    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.176 ±       1.232    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count                                                  thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time                                                   thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsPlay                                                                thrpt    5    333440.964 ±   16811.748   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate                                                 thrpt    5       857.520 ±      43.558  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm                                            thrpt    5      4048.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.017 ±       0.147  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.082 ±       0.689    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen                                           thrpt    5       881.590 ±     714.675  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      4165.192 ±    3442.930    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         3.763 ±      32.404    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count                                                      thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time                                                       thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.readArraysCirce                                                                thrpt    5    587198.351 ±   12988.739   ops/s
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate                                                 thrpt    5      1907.032 ±      42.255  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm                                            thrpt    5      5112.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.001 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.004 ±       0.013    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1905.971 ±     718.315  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5108.485 ±    1890.038    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.count                                                      thrpt    5        28.000                counts
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.time                                                       thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJackson                                                              thrpt    5   1013835.596 ±   37995.212   ops/s
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate                                               thrpt    5       922.275 ±      34.805  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm                                          thrpt    5      1432.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.015 ±       0.125  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.022 ±       0.193    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen                                         thrpt    5       950.375 ±     580.878  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1475.785 ±     904.344    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       5.559  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.256 ±       8.770    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.count                                                    thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.time                                                     thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJsoniter                                                             thrpt    5   2589759.462 ±   47710.578   ops/s
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate                                              thrpt    5      1079.360 ±      20.270  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm                                         thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.023 ±       0.195  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.014 ±       0.119    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen                                        thrpt    5      1089.049 ±     586.484  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       662.067 ±     363.350    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.081 ±       0.702    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count                                                   thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time                                                    thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.readArraysPlay                                                                 thrpt    5    176835.109 ±    4504.280   ops/s
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate                                                  thrpt    5      1057.749 ±      26.913  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm                                             thrpt    5      9416.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.015 ±       0.126  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.133 ±       1.118    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen                                            thrpt    5      1087.296 ±     589.717  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      9675.773 ±    5108.907    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         7.184 ±      61.859    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.count                                                       thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.time                                                        thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJackson                                                             thrpt    5   1355419.552 ±   29738.548   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate                                              thrpt    5       861.172 ±      18.812  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm                                         thrpt    5      1000.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.011 ±       0.092  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.012 ±       0.106    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen                                        thrpt    5       881.518 ±     706.079  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1024.540 ±     838.930    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.932 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.086 ±       7.781    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count                                                   thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time                                                    thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter                                                            thrpt    5   3995393.811 ±  100599.476   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate                                             thrpt    5       527.983 ±      13.264  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm                                        thrpt    5       208.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5       538.200 ±     709.460  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       212.409 ±     284.135    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space                                thrpt    5         0.666 ±       5.737  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.264 ±       2.272    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count                                                  thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time                                                   thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsPlay                                                                thrpt    5    209354.022 ±    5216.721   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate                                                 thrpt    5       965.046 ±      24.170  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm                                            thrpt    5      7256.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.008 ±       0.067  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.061 ±       0.507    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen                                           thrpt    5       950.404 ±     580.812  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      7147.988 ±    4412.812    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         6.065 ±      42.275    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count                                                      thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time                                                       thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce                                                         thrpt    5    508303.436 ±   13080.469   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate                                          thrpt    5      1661.165 ±      42.873  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm                                     thrpt    5      5144.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.002 ±       0.011  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.008 ±       0.034    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen                                    thrpt    5      1701.787 ±       0.732  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm                               thrpt    5      5269.979 ±     134.996    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count                                               thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time                                                thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson                                                       thrpt    5    484616.933 ±    9380.624   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate                                        thrpt    5       600.971 ±      11.740  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm                                   thrpt    5      1952.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen                                  thrpt    5       606.887 ±     582.481  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm                             thrpt    5      1971.589 ±    1896.329    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       5.561  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         2.591 ±      18.045    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count                                             thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time                                              thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter                                                      thrpt    5   4824090.546 ± 2195823.187   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate                                       thrpt    5       220.692 ±     100.458  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm                                  thrpt    5        72.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen                                 thrpt    5       201.833 ±     709.471  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm                            thrpt    5        69.726 ±     250.997    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count                                            thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time                                             thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay                                                          thrpt    5    155487.779 ±    5883.813   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate                                           thrpt    5       854.238 ±      32.419  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm                                      thrpt    5      8648.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.040 ±       0.343  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.399 ±       3.439    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen                                     thrpt    5       880.757 ±     703.416  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm                                thrpt    5      8927.928 ±    7355.008    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         8.144 ±      70.125    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time                                                 thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce                                                         thrpt    5      4469.744 ±      65.587   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate                                          thrpt    5      1075.755 ±      15.685  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm                                     thrpt    5    378808.097 ±       0.013    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.082 ±       0.194  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5        28.801 ±      68.695    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                    thrpt    5      1088.145 ±     587.960  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                               thrpt    5    383228.391 ±  209292.916    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       282.889 ±    2435.761    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count                                               thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time                                                thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson                                                       thrpt    5      9467.871 ±     184.166   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate                                        thrpt    5       239.925 ±       4.723  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm                                   thrpt    5     39888.044 ±       0.006    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                  thrpt    5       201.403 ±     707.959  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                             thrpt    5     33565.395 ±  117988.449    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count                                             thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time                                              thrpt    5        19.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter                                                      thrpt    5     17212.006 ±     225.596   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate                                       thrpt    5       294.100 ±       3.892  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                  thrpt    5     26896.025 ±       0.010    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                                 thrpt    5       269.063 ±     579.178  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                            thrpt    5     24636.254 ±   53031.972    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count                                            thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time                                             thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay                                                          thrpt    5      1773.362 ±      64.163   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate                                           thrpt    5      1073.278 ±      38.635  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm                                      thrpt    5    952664.241 ±       0.044    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.043 ±       0.189  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5        38.075 ±     167.325    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                     thrpt    5      1087.176 ±     590.027  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                                thrpt    5    964704.517 ±  510077.995    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                         thrpt    5       717.384 ±    6176.891    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count                                                thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time                                                 thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter                                                     thrpt    5   3526694.798 ±   95229.909   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate                                      thrpt    5      1057.560 ±      28.480  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm                                 thrpt    5       472.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.023 ±       0.195  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.011 ±       0.088    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5      1020.949 ±       1.094  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5       455.677 ±      11.897    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space                         thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                    thrpt    5         0.060 ±       0.518    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count                                           thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time                                            thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay                                                         thrpt    5    183085.434 ±    2543.002   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate                                          thrpt    5      1039.318 ±      14.661  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm                                     thrpt    5      8936.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.013 ±       0.067  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.115 ±       0.582    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                    thrpt    5      1020.046 ±       8.176  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5      8770.352 ±      91.468    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         6.901 ±      59.417    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count                                               thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time                                                thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesCirce                                                             thrpt    5    468698.247 ±    3182.940   ops/s
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate                                              thrpt    5      1693.781 ±      11.178  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm                                         thrpt    5      5688.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.006 ±       0.019    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen                                        thrpt    5      1701.877 ±       0.604  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      5715.202 ±      39.219    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.count                                                   thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.time                                                    thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJackson                                                           thrpt    5    458879.102 ±   12711.082   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate                                            thrpt    5       534.308 ±      14.578  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm                                       thrpt    5      1832.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen                                      thrpt    5       536.510 ±     705.955  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1842.917 ±    2461.405    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         2.759 ±      23.758    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.count                                                 thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.time                                                  thrpt    5        51.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJsoniter                                                          thrpt    5   3025420.888 ±   81629.200   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate                                           thrpt    5      1199.396 ±      31.689  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm                                      thrpt    5       624.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.002 ±       0.011  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.001 ±       0.006    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5      1157.198 ±     718.209  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5       602.270 ±     380.341    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count                                                thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time                                                 thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesPlay                                                              thrpt    5    139014.145 ±    7222.953   ops/s
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate                                               thrpt    5       965.794 ±      50.177  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm                                          thrpt    5     10936.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.006 ±       0.054  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.071 ±       0.609    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen                                         thrpt    5       950.428 ±     582.428  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     10768.827 ±    6739.172    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         9.219 ±      64.488    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.count                                                    thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.time                                                     thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readMapsCirce                                                                  thrpt    5    401090.758 ±    9268.625   ops/s
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate                                                   thrpt    5      1398.350 ±      32.018  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm                                              thrpt    5      5488.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.002 ±       0.014  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.009 ±       0.054    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1429.369 ±     586.032  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5610.849 ±    2351.882    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.count                                                        thrpt    5        21.000                counts
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.time                                                         thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJackson                                                                thrpt    5    696363.732 ±   27900.920   ops/s
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate                                                 thrpt    5       821.109 ±      33.042  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm                                            thrpt    5      1856.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.017 ±       0.144  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.037 ±       0.322    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen                                           thrpt    5       880.121 ±     717.711  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1990.028 ±    1633.837    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         2.120 ±      15.246    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.count                                                      thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.time                                                       thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJsoniter                                                               thrpt    5   3143823.659 ±  120190.552   ops/s
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate                                                thrpt    5       782.973 ±      29.836  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm                                           thrpt    5       392.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.033 ±       0.281  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.016 ±       0.140    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen                                          thrpt    5       813.571 ±     714.776  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       407.367 ±     358.648    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.405 ±       3.485    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count                                                     thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time                                                      thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readMapsPlay                                                                   thrpt    5    200526.949 ±    4648.775   ops/s
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate                                                    thrpt    5      1040.616 ±      24.018  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm                                               thrpt    5      8168.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.012 ±       0.101  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.091 ±       0.784    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen                                              thrpt    5      1087.421 ±     589.525  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      8531.107 ±    4446.052    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         6.327 ±      54.478    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.count                                                         thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.time                                                          thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce                                                      thrpt    5    467931.445 ±   11898.418   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate                                       thrpt    5      1788.847 ±      45.422  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm                                  thrpt    5      6016.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.002 ±       0.007  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.005 ±       0.022    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen                                 thrpt    5      1770.206 ±     586.198  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                            thrpt    5      5955.896 ±    2121.240    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count                                            thrpt    5        26.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time                                             thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter                                                   thrpt    5   2265485.642 ±   67908.024   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate                                    thrpt    5      1462.281 ±      44.263  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm                               thrpt    5      1016.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'        thrpt    5         0.001 ±       0.003  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm   thrpt    5        ≈ 10⁻³                  B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                              thrpt    5      1429.433 ±     586.371  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                         thrpt    5       992.967 ±     394.869    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count                                         thrpt    5        21.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time                                          thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay                                                       thrpt    5    129187.887 ±    4771.238   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate                                        thrpt    5       924.487 ±      34.287  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm                                   thrpt    5     11264.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.042 ±       0.305  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.512 ±       3.744    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen                                  thrpt    5       949.676 ±     579.179  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                             thrpt    5     11576.750 ±    7185.064    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         9.811 ±      84.476    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count                                             thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time                                              thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJackson                                                         thrpt    5    675086.935 ±   23884.075   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate                                          thrpt    5       874.905 ±      31.165  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm                                     thrpt    5      2040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.061 ±       0.523  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.140 ±       1.208    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       880.092 ±     701.174  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      2054.178 ±    1677.511    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         2.199 ±      18.936    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count                                               thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time                                                thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter                                                        thrpt    5   1396370.806 ±   25030.609   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate                                         thrpt    5       660.124 ±      11.742  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm                                    thrpt    5       744.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.027 ±       0.236  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.031 ±       0.267    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       676.687 ±      15.377  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5       762.676 ±      18.981    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.906 ±       7.803    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count                                              thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time                                               thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsPlay                                                            thrpt    5    160765.354 ±    7017.095   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate                                             thrpt    5       861.176 ±      37.740  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm                                        thrpt    5      8432.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.009 ±       0.073  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.085 ±       0.706    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       881.541 ±     714.486  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      8639.915 ±    7164.766    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         7.832 ±      67.437    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count                                                  thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time                                                   thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesCirce                                                            thrpt    5    395236.774 ±    8022.783   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate                                             thrpt    5      1223.463 ±      24.804  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm                                        thrpt    5      4872.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.020 ±       0.162  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.077 ±       0.641    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen                                       thrpt    5      1225.372 ±     717.794  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      4881.172 ±    2903.356    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count                                                  thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time                                                   thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJackson                                                          thrpt    5    933406.791 ±   23120.706   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate                                           thrpt    5       706.904 ±      17.553  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm                                      thrpt    5      1192.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.019 ±       0.154  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.032 ±       0.262    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen                                     thrpt    5       743.769 ±     578.615  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1254.924 ±     997.808    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space                              thrpt    5         0.933 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.581 ±      11.351    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count                                                thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time                                                 thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter                                                         thrpt    5   4172341.068 ±  131079.223   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate                                          thrpt    5       127.230 ±       4.013  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm                                     thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen                                    thrpt    5       134.253 ±     707.881  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                               thrpt    5        51.023 ±     269.036    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space                             thrpt    5         0.266 ±       2.293  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         0.101 ±       0.868    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count                                               thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time                                                thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesPlay                                                             thrpt    5    138540.378 ±    4207.607   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate                                              thrpt    5       901.322 ±      27.680  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm                                         thrpt    5     10240.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.012 ±       0.066  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.135 ±       0.740    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen                                        thrpt    5       949.682 ±     579.417  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     10796.558 ±    6743.590    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         9.130 ±      78.614    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count                                                   thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time                                                    thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPICirce                                                            thrpt    5      7502.291 ±     182.067   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate                                             thrpt    5      1104.155 ±      26.733  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm                                        thrpt    5    231659.504 ±      29.673    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.044 ±       0.178  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         9.217 ±      36.871    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen                                       thrpt    5      1087.186 ±     590.448  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    228137.244 ±  125247.488    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       195.996 ±    1687.580    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count                                                  thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time                                                   thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson                                                          thrpt    5     10673.493 ±     159.168   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate                                           thrpt    5       150.808 ±       2.223  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm                                      thrpt    5     22235.011 ±      28.103    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen                                     thrpt    5       200.797 ±     705.838  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                                thrpt    5     29686.392 ±  104353.702    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space                              thrpt    5         0.666 ±       4.443  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm                         thrpt    5        98.463 ±     656.789    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count                                                thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time                                                 thrpt    5        20.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter                                                         thrpt    5     21882.643 ±     477.382   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate                                          thrpt    5       197.290 ±       4.246  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm                                     thrpt    5     14191.721 ±       2.576    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                    thrpt    5       201.818 ±     709.419  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                               thrpt    5     14534.305 ±   51090.403    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count                                               thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time                                                thrpt    5        18.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay                                                             thrpt    5      3052.628 ±      54.323   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate                                              thrpt    5       885.544 ±      15.799  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm                                         thrpt    5    456584.140 ±       0.022    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.023 ±       0.181  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5        11.775 ±      92.827    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen                                        thrpt    5       948.593 ±     577.208  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    489348.314 ±  303569.888    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.932 ±       6.687  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       482.602 ±    3462.453    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count                                                   thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time                                                    thrpt    5        48.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtCirce                                                                  thrpt    5    337710.972 ±    2750.151   ops/s
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate                                                   thrpt    5      1122.525 ±       9.292  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm                                              thrpt    5      5232.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.017 ±       0.137  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.082 ±       0.639    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1088.986 ±     586.601  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5075.205 ±    2714.270    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.622 ±       5.357    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.count                                                        thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.time                                                         thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJackson                                                                thrpt    5   1355921.534 ±   16341.309   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate                                                 thrpt    5       565.116 ±       6.852  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm                                            thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen                                           thrpt    5       605.071 ±     580.002  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       702.119 ±     669.845    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.933 ±       8.030  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.079 ±       9.290    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.count                                                      thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.time                                                       thrpt    5        51.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJsoniter                                                               thrpt    5  11253908.810 ±  923560.186   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate                                                thrpt    5       571.969 ±      46.937  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm                                           thrpt    5        80.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen                                          thrpt    5       538.819 ±     705.845  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                     thrpt    5        75.758 ±     103.393    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.114 ±       0.797    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count                                                     thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time                                                      thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtPlay                                                                   thrpt    5    201611.230 ±    3901.494   ops/s
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate                                                    thrpt    5       683.531 ±      13.032  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm                                               thrpt    5      5336.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.009 ±       0.075  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.067 ±       0.580    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen                                              thrpt    5       675.852 ±      15.922  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      5276.048 ±      61.594    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±       5.561  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         6.272 ±      43.707    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.count                                                         thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.time                                                          thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce                                                              thrpt    5   1222519.290 ±   35945.054   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate                                               thrpt    5      1248.783 ±      36.413  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm                                          thrpt    5      1608.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.003 ±       0.014  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.004 ±       0.018    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1225.169 ±     717.977  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1578.024 ±     936.578    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count                                                    thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time                                                     thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson                                                            thrpt    5   3644465.382 ±   74063.165   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate                                             thrpt    5      1000.207 ±      20.436  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm                                        thrpt    5       432.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.014 ±       0.114  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.006 ±       0.049    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1019.037 ±      17.345  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       440.135 ±       2.206    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.406 ±       3.500    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count                                                  thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time                                                   thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter                                                           thrpt    5  15032408.150 ±  862505.406   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate                                            thrpt    5       458.482 ±      26.539  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm                                       thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       470.980 ±     709.523  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5        49.435 ±      76.005    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count                                                 thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time                                                  thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc                                                   thrpt    5  19489901.693 ±  120871.727   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm                               thrpt    5        ≈ 10⁻⁵                  B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count                                         thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay                                                               thrpt    5    823333.782 ±   12988.481   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate                                                thrpt    5      1217.891 ±      19.366  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm                                           thrpt    5      2328.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.036 ±       0.308  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.069 ±       0.590    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1225.472 ±     717.717  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2342.134 ±    1360.720    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count                                                     thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time                                                      thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysCirce                                                               thrpt    5    711488.408 ±   20877.181   ops/s
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate                                                thrpt    5      1605.499 ±      47.193  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm                                           thrpt    5      3552.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.002 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.004 ±       0.010    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1633.605 ±     586.009  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      3612.630 ±    1220.276    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.count                                                     thrpt    5        24.000                counts
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.time                                                      thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJackson                                                             thrpt    5   1784449.861 ± 2790992.087   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate                                              thrpt    5      1015.675 ±    1588.805  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm                                         thrpt    5       896.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.039 ±       0.339  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.030 ±       0.255    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen                                        thrpt    5      1020.918 ±    1605.251  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       930.784 ±     603.779    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.count                                                   thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.time                                                    thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJsoniter                                                            thrpt    5   4867847.655 ±  114363.927   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate                                             thrpt    5      1286.589 ±      30.077  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm                                        thrpt    5       416.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.002 ±       0.012  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.001 ±       0.004    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5      1293.402 ±     586.153  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       418.183 ±     188.685    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count                                                  thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time                                                   thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysPlay                                                                thrpt    5    290799.870 ±   84289.732   ops/s
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate                                                 thrpt    5      1010.999 ±     293.180  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm                                            thrpt    5      5472.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±       0.096  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.063 ±       0.502    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1019.378 ±      14.703  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5545.568 ±    1805.892    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.218 ±      36.318    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.count                                                      thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.time                                                       thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJackson                                                            thrpt    5   1871142.879 ±   57578.617   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate                                             thrpt    5       988.899 ±      30.657  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm                                        thrpt    5       832.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.021 ±       0.176  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.017 ±       0.149    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1018.885 ±      17.122  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       857.253 ±      16.438    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.794 ±       6.836    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count                                                  thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time                                                   thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter                                                           thrpt    5   4483735.226 ±  133608.834   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate                                            thrpt    5       820.340 ±      24.526  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       288.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.032 ±       0.271  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.011 ±       0.095    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       881.526 ±     714.489  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       309.800 ±     257.310    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.279 ±       2.404    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count                                                 thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time                                                  thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsPlay                                                               thrpt    5    383309.006 ±    7455.345   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate                                                thrpt    5      1110.350 ±      21.672  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm                                           thrpt    5      4560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.015 ±       0.083  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.061 ±       0.339    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1156.161 ±     721.401  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4746.915 ±    2922.468    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         3.311 ±      28.506    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count                                                     thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time                                                      thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce                                                        thrpt    5      4422.696 ±      88.807   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate                                         thrpt    5      1075.927 ±      21.654  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm                                    thrpt    5    382912.097 ±       0.016    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.063 ±       0.231  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        22.510 ±      82.697    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1088.086 ±     577.604  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5    387381.210 ±  211166.813    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       285.975 ±    2462.333    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count                                              thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time                                               thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson                                                      thrpt    5     26407.994 ±     414.090   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate                                       thrpt    5       382.675 ±       6.112  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm                                  thrpt    5     22807.873 ±       0.328    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       402.845 ±     577.933  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5     24032.447 ±   34873.829    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count                                            thrpt    5         6.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time                                             thrpt    5        52.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter                                                     thrpt    5     35686.885 ±     301.142   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate                                      thrpt    5       273.518 ±       2.323  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                 thrpt    5     12064.012 ±       0.002    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       269.085 ±     579.225  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5     11867.124 ±   25545.178    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count                                           thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time                                            thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc                                             thrpt    5     40563.583 ±     237.881   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate                              thrpt    5         5.979 ±       0.037  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5       232.010 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count                                   thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay                                                         thrpt    5      3767.017 ±     183.216   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate                                          thrpt    5      1138.453 ±      55.417  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm                                     thrpt    5    475639.928 ±       2.341    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.025 ±       0.110  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5        10.313 ±      45.486    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                    thrpt    5      1088.987 ±     586.563  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5    455087.077 ±  248250.373    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5        56.512 ±     486.583    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count                                               thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time                                                thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson                                                     thrpt    5    502134.845 ±   18950.182   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate                                      thrpt    5      1099.924 ±      41.427  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm                                 thrpt    5      3448.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.068 ±       0.454  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.216 ±       1.444    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen                                thrpt    5      1155.057 ±     707.036  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm                           thrpt    5      3623.980 ±    2310.813    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space                         thrpt    5         0.933 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm                    thrpt    5         2.967 ±      25.545    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count                                           thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time                                            thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter                                                    thrpt    5   2372806.172 ±   53677.995   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate                                     thrpt    5       494.412 ±      11.128  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm                                thrpt    5       328.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5       470.870 ±     709.453  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5       312.918 ±     478.102    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count                                          thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time                                           thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay                                                        thrpt    5    223186.408 ±    9959.111   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate                                         thrpt    5       875.660 ±      39.121  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm                                    thrpt    5      6176.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.014 ±       0.118  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.097 ±       0.836    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                   thrpt    5       881.514 ±     720.209  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5      6221.386 ±    5159.291    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         5.706 ±      49.131    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count                                              thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time                                               thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesCirce                                                            thrpt    5    539471.478 ±    6825.066   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate                                             thrpt    5      1304.985 ±      16.518  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm                                        thrpt    5      3808.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.001 ±       0.009  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.004 ±       0.027    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen                                       thrpt    5      1293.173 ±     585.846  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      3774.247 ±    1733.447    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count                                                  thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time                                                   thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJackson                                                          thrpt    5   1026354.757 ±   20029.163   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate                                           thrpt    5       693.808 ±      13.382  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm                                      thrpt    5      1064.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.011 ±       0.091  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.016 ±       0.138    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen                                     thrpt    5       674.863 ±      18.247  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1034.940 ±      10.828    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space                              thrpt    5         0.932 ±       5.619  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.432 ±       8.639    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count                                                thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time                                                 thrpt    5        62.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter                                                         thrpt    5   4796237.755 ±  172045.114   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate                                          thrpt    5       926.285 ±      33.303  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm                                     thrpt    5       304.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.030 ±       0.252  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.010 ±       0.082    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen                                    thrpt    5       951.240 ±     582.566  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                               thrpt    5       312.272 ±     192.911    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         0.267 ±       2.295    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count                                               thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time                                                thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesPlay                                                             thrpt    5    299269.710 ±    9774.295   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate                                              thrpt    5      1023.557 ±      33.595  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm                                         thrpt    5      5384.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.018 ±       0.150  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.096 ±       0.794    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen                                        thrpt    5      1019.188 ±      14.954  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      5361.241 ±     137.473    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         4.246 ±      36.556    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count                                                   thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time                                                    thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsCirce                                                                 thrpt    5    308114.689 ±   12684.349   ops/s
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate                                                  thrpt    5       840.994 ±      35.039  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm                                             thrpt    5      4296.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.013 ±       0.111  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.066 ±       0.564    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen                                            thrpt    5       813.563 ±     728.690  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4151.689 ±    3623.032    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       5.561  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         4.109 ±      28.669    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.count                                                       thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.time                                                        thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJackson                                                               thrpt    5    590713.540 ±   16428.888   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate                                                thrpt    5       927.814 ±      26.209  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm                                           thrpt    5      2472.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.059 ±       0.504  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.156 ±       1.338    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       949.101 ±     590.857  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2529.476 ±    1590.186    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.933 ±       8.030  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         2.475 ±      21.310    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.count                                                     thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.time                                                      thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJsoniter                                                              thrpt    5   2367701.059 ±   88092.997   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate                                               thrpt    5       565.629 ±      21.185  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm                                          thrpt    5       376.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       538.885 ±     711.905  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       358.740 ±     479.423    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.884  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.527 ±       4.541    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count                                                    thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time                                                     thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsPlay                                                                  thrpt    5    245278.435 ±   14559.529   ops/s
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate                                                   thrpt    5       886.352 ±      52.674  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm                                              thrpt    5      5688.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.013 ±       0.116  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.086 ±       0.739    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen                                             thrpt    5       881.590 ±     714.549  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5660.331 ±    4636.379    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         5.166 ±      44.479    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.count                                                        thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.time                                                         thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce                                                     thrpt    5    490351.085 ±    1323.941   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate                                      thrpt    5      1143.803 ±       3.225  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm                                 thrpt    5      3672.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.034 ±       0.283  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.110 ±       0.910    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen                                thrpt    5      1156.933 ±     717.112  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                           thrpt    5      3714.249 ±    2305.174    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Survivor_Space                         thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Survivor_Space.norm                    thrpt    5         0.428 ±       3.684    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count                                           thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time                                            thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson                                                   thrpt    5   1018699.163 ±   10908.166   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate                                    thrpt    5       585.126 ±       6.358  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm                               thrpt    5       904.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen                              thrpt    5       537.690 ±     703.985  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm                         thrpt    5       831.112 ±    1092.559    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space                       thrpt    5         1.066 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm                  thrpt    5         1.646 ±      10.341    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count                                         thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time                                          thrpt    5        53.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter                                                  thrpt    5   4487153.711 ±   72345.333   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate                                   thrpt    5       615.747 ±       9.938  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm                              thrpt    5       216.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.017 ±       0.148  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         0.006 ±       0.052    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                             thrpt    5       607.719 ±     584.332  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                        thrpt    5       213.184 ±     204.978    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space                      thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                 thrpt    5         0.282 ±       2.432    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count                                        thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time                                         thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay                                                      thrpt    5    286614.062 ±   18062.871   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate                                       thrpt    5       962.837 ±      60.608  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm                                  thrpt    5      5288.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.013 ±       0.105  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.070 ±       0.571    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen                                 thrpt    5       950.397 ±     580.866  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                            thrpt    5      5226.686 ±    3342.502    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         4.451 ±      31.126    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count                                            thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time                                             thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce                                                          thrpt    5    281711.920 ±    5316.360   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate                                           thrpt    5       758.907 ±      14.285  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm                                      thrpt    5      4240.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.012 ±       0.103  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.067 ±       0.576    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen                                     thrpt    5       744.715 ±     595.448  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      4160.027 ±    3305.316    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         4.468 ±      38.473    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count                                                thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time                                                 thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson                                                        thrpt    5    579198.204 ±   15183.186   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate                                         thrpt    5       941.963 ±      24.849  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm                                    thrpt    5      2560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.065 ±       0.438  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.176 ±       1.192    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       948.958 ±     577.763  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      2580.468 ±    1603.633    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.932 ±       8.027  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         2.537 ±      21.842    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count                                              thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time                                               thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter                                                       thrpt    5   2001632.677 ±   41408.806   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate                                        thrpt    5       518.797 ±      10.831  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm                                   thrpt    5       408.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       538.135 ±     709.313  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       423.773 ±     564.672    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                           thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         0.525 ±       4.524    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count                                             thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time                                              thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay                                                           thrpt    5    236778.514 ±    7268.791   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate                                            thrpt    5       909.759 ±      28.150  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm                                       thrpt    5      6048.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.013 ±       0.074  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.088 ±       0.489    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       949.632 ±     579.367  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      6317.534 ±    3952.310    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         5.326 ±      45.858    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time                                                  thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesCirce                                                           thrpt    5    527921.118 ±   33556.515   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate                                            thrpt    5       922.976 ±      58.796  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm                                       thrpt    5      2752.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.007 ±       0.064  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.022 ±       0.190    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5       950.417 ±     580.811  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      2836.766 ±    1794.580    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         2.440 ±      17.042    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time                                                  thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJackson                                                         thrpt    5   1465232.109 ±   94913.188   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate                                          thrpt    5       603.239 ±      38.797  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm                                     thrpt    5       648.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.003 ±       0.030  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.004 ±       0.032    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       606.031 ±     582.054  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5       652.013 ±     637.632    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.933 ±       6.690  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.024 ±       7.393    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count                                               thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time                                                thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter                                                        thrpt    5   4129846.840 ±   79865.798   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate                                         thrpt    5       461.797 ±       8.899  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm                                    thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       470.920 ±     709.343  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5       179.571 ±     271.632    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count                                              thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time                                               thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc                                                thrpt    5   4280328.372 ±   54763.528   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5       261.041 ±       3.422  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5        96.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen                           thrpt    5       269.075 ±     579.205  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm                      thrpt    5        99.088 ±     213.295    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count                                      thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time                                       thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesPlay                                                            thrpt    5    181999.003 ±    5235.881   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate                                             thrpt    5       917.763 ±      26.664  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm                                        thrpt    5      7936.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.012 ±       0.069  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.103 ±       0.597    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       949.824 ±     579.117  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      8218.506 ±    5127.090    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         6.914 ±      59.532    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count                                                  thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time                                                   thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce                                                           thrpt    5      6237.288 ±     280.065   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate                                            thrpt    5       832.208 ±      37.473  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm                                       thrpt    5    209992.068 ±       0.018    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.011 ±       0.098    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen                                      thrpt    5       812.696 ±     711.456  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    205321.174 ±  184985.697    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       200.878 ±    1396.009    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count                                                 thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time                                                  thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson                                                         thrpt    5     33787.982 ±     883.962   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate                                          thrpt    5       431.414 ±      11.091  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm                                     thrpt    5     20099.997 ±       0.161    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       469.653 ±     707.846  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5     21925.153 ±   33582.190    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         6.252 ±      53.830    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count                                               thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time                                                thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter                                                        thrpt    5     38375.027 ±     588.702   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate                                         thrpt    5       258.419 ±       3.930  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm                                    thrpt    5     10600.011 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       269.065 ±     579.182  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5     11044.983 ±   23775.948    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count                                              thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time                                               thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc                                                thrpt    5     40040.458 ±    1310.731   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5        12.820 ±       0.415  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5       504.011 ±       0.002    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count                                      thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay                                                            thrpt    5      4187.222 ±     173.748   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate                                             thrpt    5      1063.287 ±      44.459  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm                                        thrpt    5    399678.003 ±       3.855    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.013 ±       0.103  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         4.675 ±      38.512    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen                                       thrpt    5      1087.352 ±     589.839  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    408654.088 ±  218019.833    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       306.303 ±    2637.358    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count                                                  thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time                                                   thrpt    5        32.000                    ms
[success] Total time: 1743 s, completed Nov 30, 2017, 9:40:45 AM
