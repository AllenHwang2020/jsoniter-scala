[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jan 11, 2018, 8:19:20 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:793:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:336:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:344:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] three warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.3.4-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.3.4-SNAPSHOT.jar ...
[info] Compiling 25 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:9:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:10:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:11:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.4-SNAPSHOT.jar ...
[info] Compiling 19 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 286 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 206 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.4-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.4-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_ba3b2a41/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 414706.430 ops/s
[info] # Warmup Iteration   2: 736096.857 ops/s
[info] # Warmup Iteration   3: 743349.032 ops/s
[info] # Warmup Iteration   4: 749852.464 ops/s
[info] # Warmup Iteration   5: 742849.588 ops/s
[info] Iteration   1: 741552.475 ops/s
[info]                  ·gc.alloc.rate:                   1959.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4265.412 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 747873.990 ops/s
[info]                  ·gc.alloc.rate:                   1976.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4255.740 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 738543.358 ops/s
[info]                  ·gc.alloc.rate:                   1951.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4326.741 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 734131.120 ops/s
[info]                  ·gc.alloc.rate:                   1940.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4362.736 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 743200.552 ops/s
[info]                  ·gc.alloc.rate:                   1963.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3597.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   741060.299 ±(99.9%) 19784.762 ops/s [Average]
[info]   (min, avg, max) = (734131.120, 741060.299, 747873.990), stdev = 5138.040
[info]   CI (99.9%): [721275.537, 760845.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1958.480 ±(99.9%) 52.310 MB/sec [Average]
[info]   (min, avg, max) = (1940.166, 1958.480, 1976.514), stdev = 13.585
[info]   CI (99.9%): [1906.170, 2010.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.187), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.274 ±(99.9%) 0.367 B/op [Average]
[info]   (min, avg, max) = (0.177, 0.274, 0.394), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1958.909 ±(99.9%) 562.394 MB/sec [Average]
[info]   (min, avg, max) = (1698.198, 1958.909, 2034.719), stdev = 146.052
[info]   CI (99.9%): [1396.515, 2521.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4161.530 ±(99.9%) 1226.950 B/op [Average]
[info]   (min, avg, max) = (3597.023, 4161.530, 4362.736), stdev = 318.635
[info]   CI (99.9%): [2934.580, 5388.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson
[info] # Run progress: 0.75% complete, ETA 00:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525222.930 ops/s
[info] # Warmup Iteration   2: 1703602.999 ops/s
[info] # Warmup Iteration   3: 1693462.057 ops/s
[info] # Warmup Iteration   4: 1692522.730 ops/s
[info] # Warmup Iteration   5: 1684857.703 ops/s
[info] Iteration   1: 1702126.099 ops/s
[info]                  ·gc.alloc.rate:                   1210.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 922.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1684040.693 ops/s
[info]                  ·gc.alloc.rate:                   1198.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1249.823 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1710774.125 ops/s
[info]                  ·gc.alloc.rate:                   1217.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 926.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1684739.300 ops/s
[info]                  ·gc.alloc.rate:                   1198.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1258.845 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1704692.511 ops/s
[info]                  ·gc.alloc.rate:                   1212.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1247.838 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson":
[info]   1697274.546 ±(99.9%) 46887.408 ops/s [Average]
[info]   (min, avg, max) = (1684040.693, 1697274.546, 1710774.125), stdev = 12176.511
[info]   CI (99.9%): [1650387.138, 1744161.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate":
[info]   1207.522 ±(99.9%) 33.073 MB/sec [Average]
[info]   (min, avg, max) = (1198.257, 1207.522, 1217.094), stdev = 8.589
[info]   CI (99.9%): [1174.449, 1240.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.100 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.100, 0.156), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1207.915 ±(99.9%) 723.997 MB/sec [Average]
[info]   (min, avg, max) = (997.225, 1207.915, 1351.095), stdev = 188.020
[info]   CI (99.9%): [483.919, 1931.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1121.079 ±(99.9%) 691.406 B/op [Average]
[info]   (min, avg, max) = (922.321, 1121.079, 1258.845), stdev = 179.556
[info]   CI (99.9%): [429.673, 1812.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter
[info] # Run progress: 1.49% complete, ETA 00:34:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3204274.399 ops/s
[info] # Warmup Iteration   2: 3948063.479 ops/s
[info] # Warmup Iteration   3: 4085341.737 ops/s
[info] # Warmup Iteration   4: 4084187.770 ops/s
[info] # Warmup Iteration   5: 4105447.032 ops/s
[info] Iteration   1: 4049655.619 ops/s
[info]                  ·gc.alloc.rate:                   267.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4125034.889 ops/s
[info]                  ·gc.alloc.rate:                   272.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3956940.453 ops/s
[info]                  ·gc.alloc.rate:      261.381 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4113533.997 ops/s
[info]                  ·gc.alloc.rate:                   271.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.169 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4111812.836 ops/s
[info]                  ·gc.alloc.rate:                   271.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.459 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter":
[info]   4071395.559 ±(99.9%) 271320.004 ops/s [Average]
[info]   (min, avg, max) = (3956940.453, 4071395.559, 4125034.889), stdev = 70460.943
[info]   CI (99.9%): [3800075.555, 4342715.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate":
[info]   268.962 ±(99.9%) 17.986 MB/sec [Average]
[info]   (min, avg, max) = (261.381, 268.962, 272.557), stdev = 4.671
[info]   CI (99.9%): [250.976, 286.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.628 ±(99.9%) 5.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.628, 3.078), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 5.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 2.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 1.174), stdev = 0.523
[info]   CI (99.9%): [≈ 0, 2.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   250.133 ±(99.9%) 553.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 250.133, 332.395), stdev = 143.645
[info]   CI (99.9%): [≈ 0, 803.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   95.975 ±(99.9%) 211.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.975, 127.169), stdev = 54.949
[info]   CI (99.9%): [≈ 0, 307.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay
[info] # Run progress: 2.24% complete, ETA 00:34:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26643.558 ops/s
[info] # Warmup Iteration   2: 175448.356 ops/s
[info] # Warmup Iteration   3: 172583.188 ops/s
[info] # Warmup Iteration   4: 175664.325 ops/s
[info] # Warmup Iteration   5: 175862.768 ops/s
[info] Iteration   1: 177896.714 ops/s
[info]                  ·gc.alloc.rate:                   1542.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              13648.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11792.347 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 177613.024 ops/s
[info]                  ·gc.alloc.rate:                   1540.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              13648.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14854.684 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 175164.342 ops/s
[info]                  ·gc.alloc.rate:                   1518.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              13648.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15133.562 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 177158.692 ops/s
[info]                  ·gc.alloc.rate:                   1535.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              13648.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12012.942 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 174747.305 ops/s
[info]                  ·gc.alloc.rate:                   1515.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              13648.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15256.749 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay":
[info]   176516.015 ±(99.9%) 5606.010 ops/s [Average]
[info]   (min, avg, max) = (174747.305, 176516.015, 177896.714), stdev = 1455.863
[info]   CI (99.9%): [170910.006, 182122.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate":
[info]   1530.457 ±(99.9%) 48.544 MB/sec [Average]
[info]   (min, avg, max) = (1515.382, 1530.457, 1542.133), stdev = 12.607
[info]   CI (99.9%): [1481.913, 1579.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13648.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13648.002, 13648.002, 13648.003), stdev = 0.001
[info]   CI (99.9%): [13648.002, 13648.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.966 ±(99.9%) 1.855 B/op [Average]
[info]   (min, avg, max) = (0.552, 0.966, 1.496), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1547.744 ±(99.9%) 723.578 MB/sec [Average]
[info]   (min, avg, max) = (1332.456, 1547.744, 1694.006), stdev = 187.911
[info]   CI (99.9%): [824.166, 2271.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   13810.057 ±(99.9%) 6734.941 B/op [Average]
[info]   (min, avg, max) = (11792.347, 13810.057, 15256.749), stdev = 1749.043
[info]   CI (99.9%): [7075.116, 20544.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson
[info] # Run progress: 2.99% complete, ETA 00:33:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 621407.375 ops/s
[info] # Warmup Iteration   2: 2065736.372 ops/s
[info] # Warmup Iteration   3: 2080276.981 ops/s
[info] # Warmup Iteration   4: 2097979.216 ops/s
[info] # Warmup Iteration   5: 2079661.326 ops/s
[info] Iteration   1: 2091573.579 ops/s
[info]                  ·gc.alloc.rate:                   680.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492.731 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2084660.297 ops/s
[info]                  ·gc.alloc.rate:                   678.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 496.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2094288.031 ops/s
[info]                  ·gc.alloc.rate:                   681.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 496.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2090585.671 ops/s
[info]                  ·gc.alloc.rate:                   679.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2073392.780 ops/s
[info]                  ·gc.alloc.rate:                   674.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 504.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson":
[info]   2086900.072 ±(99.9%) 32070.963 ops/s [Average]
[info]   (min, avg, max) = (2073392.780, 2086900.072, 2094288.031), stdev = 8328.727
[info]   CI (99.9%): [2054829.109, 2118971.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate":
[info]   678.709 ±(99.9%) 10.464 MB/sec [Average]
[info]   (min, avg, max) = (674.292, 678.709, 681.115), stdev = 2.717
[info]   CI (99.9%): [668.246, 689.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.066 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.066, 0.110), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   659.874 ±(99.9%) 15.721 MB/sec [Average]
[info]   (min, avg, max) = (654.645, 659.874, 664.908), stdev = 4.083
[info]   CI (99.9%): [644.153, 675.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   497.804 ±(99.9%) 17.451 B/op [Average]
[info]   (min, avg, max) = (492.731, 497.804, 504.875), stdev = 4.532
[info]   CI (99.9%): [480.353, 515.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter
[info] # Run progress: 3.73% complete, ETA 00:33:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5861552.952 ops/s
[info] # Warmup Iteration   2: 13187330.491 ops/s
[info] # Warmup Iteration   3: 13566509.573 ops/s
[info] # Warmup Iteration   4: 13621433.103 ops/s
[info] # Warmup Iteration   5: 13678351.479 ops/s
[info] Iteration   1: 13687474.426 ops/s
[info]                  ·gc.alloc.rate:                   695.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13676333.624 ops/s
[info]                  ·gc.alloc.rate:                   695.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.461 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13613886.469 ops/s
[info]                  ·gc.alloc.rate:                   692.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13573862.253 ops/s
[info]                  ·gc.alloc.rate:                   689.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13564365.541 ops/s
[info]                  ·gc.alloc.rate:                   689.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter":
[info]   13623184.463 ±(99.9%) 218986.491 ops/s [Average]
[info]   (min, avg, max) = (13564365.541, 13623184.463, 13687474.426), stdev = 56870.096
[info]   CI (99.9%): [13404197.972, 13842170.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   692.377 ±(99.9%) 11.348 MB/sec [Average]
[info]   (min, avg, max) = (689.289, 692.377, 695.592), stdev = 2.947
[info]   CI (99.9%): [681.029, 703.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   724.742 ±(99.9%) 562.387 MB/sec [Average]
[info]   (min, avg, max) = (656.693, 724.742, 985.981), stdev = 146.050
[info]   CI (99.9%): [162.355, 1287.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   83.711 ±(99.9%) 64.067 B/op [Average]
[info]   (min, avg, max) = (75.526, 83.711, 113.461), stdev = 16.638
[info]   CI (99.9%): [19.643, 147.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay
[info] # Run progress: 4.48% complete, ETA 00:33:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65166.739 ops/s
[info] # Warmup Iteration   2: 321140.980 ops/s
[info] # Warmup Iteration   3: 320191.378 ops/s
[info] # Warmup Iteration   4: 322825.005 ops/s
[info] # Warmup Iteration   5: 322528.461 ops/s
[info] Iteration   1: 320918.396 ops/s
[info]                  ·gc.alloc.rate:                   1068.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4872.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 323815.589 ops/s
[info]                  ·gc.alloc.rate:                   1077.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4851.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 322905.880 ops/s
[info]                  ·gc.alloc.rate:                   1074.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4887.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 322062.084 ops/s
[info]                  ·gc.alloc.rate:                   1072.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4917.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 321558.181 ops/s
[info]                  ·gc.alloc.rate:                   1070.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6592.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay":
[info]   322252.026 ±(99.9%) 4377.015 ops/s [Average]
[info]   (min, avg, max) = (320918.396, 322252.026, 323815.589), stdev = 1136.697
[info]   CI (99.9%): [317875.011, 326629.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate":
[info]   1072.724 ±(99.9%) 14.132 MB/sec [Average]
[info]   (min, avg, max) = (1068.526, 1072.724, 1077.845), stdev = 3.670
[info]   CI (99.9%): [1058.592, 1086.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5240.001, 5240.001, 5240.001), stdev = 0.001
[info]   CI (99.9%): [5240.001, 5240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.345 ±(99.9%) 0.347 B/op [Average]
[info]   (min, avg, max) = (0.204, 0.345, 0.407), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1069.329 ±(99.9%) 596.861 MB/sec [Average]
[info]   (min, avg, max) = (993.546, 1069.329, 1346.477), stdev = 155.003
[info]   CI (99.9%): [472.468, 1666.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5224.213 ±(99.9%) 2945.803 B/op [Average]
[info]   (min, avg, max) = (4851.805, 5224.213, 6592.050), stdev = 765.016
[info]   CI (99.9%): [2278.409, 8170.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 5.22% complete, ETA 00:33:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1013218.905 ops/s
[info] # Warmup Iteration   2: 1662498.830 ops/s
[info] # Warmup Iteration   3: 1681429.777 ops/s
[info] # Warmup Iteration   4: 1686370.866 ops/s
[info] # Warmup Iteration   5: 1688974.359 ops/s
[info] Iteration   1: 1687595.798 ops/s
[info]                  ·gc.alloc.rate:                   2633.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2207.508 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1672931.618 ops/s
[info]                  ·gc.alloc.rate:                   2610.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2553.524 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1656648.389 ops/s
[info]                  ·gc.alloc.rate:                   2585.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2582.461 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1677218.168 ops/s
[info]                  ·gc.alloc.rate:                   2616.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2235.959 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1687967.538 ops/s
[info]                  ·gc.alloc.rate:                   2633.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2539.128 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1676472.302 ±(99.9%) 49535.542 ops/s [Average]
[info]   (min, avg, max) = (1656648.389, 1676472.302, 1687967.538), stdev = 12864.223
[info]   CI (99.9%): [1626936.761, 1726007.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2615.804 ±(99.9%) 76.207 MB/sec [Average]
[info]   (min, avg, max) = (2585.490, 2615.804, 2633.452), stdev = 19.791
[info]   CI (99.9%): [2539.597, 2692.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.109 ±(99.9%) 0.165 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.109, 0.137), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2580.811 ±(99.9%) 725.398 MB/sec [Average]
[info]   (min, avg, max) = (2366.779, 2580.811, 2722.586), stdev = 188.384
[info]   CI (99.9%): [1855.413, 3306.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2423.716 ±(99.9%) 713.587 B/op [Average]
[info]   (min, avg, max) = (2207.508, 2423.716, 2582.461), stdev = 185.316
[info]   CI (99.9%): [1710.129, 3137.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson
[info] # Run progress: 5.97% complete, ETA 00:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964208.398 ops/s
[info] # Warmup Iteration   2: 2629228.273 ops/s
[info] # Warmup Iteration   3: 2595899.495 ops/s
[info] # Warmup Iteration   4: 2643418.918 ops/s
[info] # Warmup Iteration   5: 2642346.478 ops/s
[info] Iteration   1: 2620108.998 ops/s
[info]                  ·gc.alloc.rate:                   1837.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1213.540 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2647943.431 ops/s
[info]                  ·gc.alloc.rate:                   1857.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1004.887 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2632180.482 ops/s
[info]                  ·gc.alloc.rate:                   1846.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1216.141 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2608978.364 ops/s
[info]                  ·gc.alloc.rate:                   1829.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1024.455 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2621321.106 ops/s
[info]                  ·gc.alloc.rate:                   1838.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1019.839 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson":
[info]   2626106.476 ±(99.9%) 56657.743 ops/s [Average]
[info]   (min, avg, max) = (2608978.364, 2626106.476, 2647943.431), stdev = 14713.836
[info]   CI (99.9%): [2569448.733, 2682764.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate":
[info]   1841.703 ±(99.9%) 40.041 MB/sec [Average]
[info]   (min, avg, max) = (1829.718, 1841.703, 1857.187), stdev = 10.399
[info]   CI (99.9%): [1801.662, 1881.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.070, 0.087), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1827.929 ±(99.9%) 698.820 MB/sec [Average]
[info]   (min, avg, max) = (1690.456, 1827.929, 2033.512), stdev = 181.481
[info]   CI (99.9%): [1129.109, 2526.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1095.772 ±(99.9%) 419.481 B/op [Average]
[info]   (min, avg, max) = (1004.887, 1095.772, 1216.141), stdev = 108.938
[info]   CI (99.9%): [676.291, 1515.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter
[info] # Run progress: 6.72% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10422414.957 ops/s
[info] # Warmup Iteration   2: 11137378.193 ops/s
[info] # Warmup Iteration   3: 11008380.390 ops/s
[info] # Warmup Iteration   4: 11122949.282 ops/s
[info] # Warmup Iteration   5: 11208335.441 ops/s
[info] Iteration   1: 11209156.676 ops/s
[info]                  ·gc.alloc.rate:                   1423.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.342 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11208032.069 ops/s
[info]                  ·gc.alloc.rate:                   1424.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235.397 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11191675.351 ops/s
[info]                  ·gc.alloc.rate:                   1421.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.374 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11204806.308 ops/s
[info]                  ·gc.alloc.rate:                   1423.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.704 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11136026.205 ops/s
[info]                  ·gc.alloc.rate:                   1415.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.346 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter":
[info]   11189939.322 ±(99.9%) 119110.685 ops/s [Average]
[info]   (min, avg, max) = (11136026.205, 11189939.322, 11209156.676), stdev = 30932.667
[info]   CI (99.9%): [11070828.637, 11309050.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1421.800 ±(99.9%) 14.902 MB/sec [Average]
[info]   (min, avg, max) = (1415.089, 1421.800, 1424.353), stdev = 3.870
[info]   CI (99.9%): [1406.897, 1436.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.012 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.012, 0.020), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1412.180 ±(99.9%) 569.593 MB/sec [Average]
[info]   (min, avg, max) = (1333.775, 1412.180, 1676.440), stdev = 147.921
[info]   CI (99.9%): [842.587, 1981.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   198.633 ±(99.9%) 79.327 B/op [Average]
[info]   (min, avg, max) = (187.342, 198.633, 235.397), stdev = 20.601
[info]   CI (99.9%): [119.306, 277.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay
[info] # Run progress: 7.46% complete, ETA 00:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142317.199 ops/s
[info] # Warmup Iteration   2: 685773.060 ops/s
[info] # Warmup Iteration   3: 696656.152 ops/s
[info] # Warmup Iteration   4: 706645.632 ops/s
[info] # Warmup Iteration   5: 704541.756 ops/s
[info] Iteration   1: 704342.095 ops/s
[info]                  ·gc.alloc.rate:                   1833.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3752.426 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 714276.323 ops/s
[info]                  ·gc.alloc.rate:                   1859.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4463.699 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 708351.226 ops/s
[info]                  ·gc.alloc.rate:                   1843.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3762.416 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 714570.165 ops/s
[info]                  ·gc.alloc.rate:                   1859.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4485.345 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 712863.235 ops/s
[info]                  ·gc.alloc.rate:                   1855.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3750.198 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay":
[info]   710880.609 ±(99.9%) 17028.430 ops/s [Average]
[info]   (min, avg, max) = (704342.095, 710880.609, 714570.165), stdev = 4422.229
[info]   CI (99.9%): [693852.178, 727909.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate":
[info]   1850.258 ±(99.9%) 44.383 MB/sec [Average]
[info]   (min, avg, max) = (1833.202, 1850.258, 1859.895), stdev = 11.526
[info]   CI (99.9%): [1805.874, 1894.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.000, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.108, 0.125), stdev = 0.009
[info]   CI (99.9%): [0.072, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.229, 0.240, 0.275), stdev = 0.020
[info]   CI (99.9%): [0.163, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1826.881 ±(99.9%) 719.336 MB/sec [Average]
[info]   (min, avg, max) = (1679.432, 1826.881, 2036.687), stdev = 186.809
[info]   CI (99.9%): [1107.545, 2546.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   4042.817 ±(99.9%) 1517.895 B/op [Average]
[info]   (min, avg, max) = (3750.198, 4042.817, 4485.345), stdev = 394.192
[info]   CI (99.9%): [2524.922, 5560.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 8.21% complete, ETA 00:32:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1152465.868 ops/s
[info] # Warmup Iteration   2: 1896355.271 ops/s
[info] # Warmup Iteration   3: 1949550.044 ops/s
[info] # Warmup Iteration   4: 1933792.260 ops/s
[info] # Warmup Iteration   5: 1966407.715 ops/s
[info] Iteration   1: 1963120.223 ops/s
[info]                  ·gc.alloc.rate:                   1815.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1607.980 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1962930.398 ops/s
[info]                  ·gc.alloc.rate:                   1816.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1348.126 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1917788.148 ops/s
[info]                  ·gc.alloc.rate:                   1774.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1385.809 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1950022.302 ops/s
[info]                  ·gc.alloc.rate:                   1804.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1640.263 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1959221.589 ops/s
[info]                  ·gc.alloc.rate:                   1812.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1363.601 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1950616.532 ±(99.9%) 73568.377 ops/s [Average]
[info]   (min, avg, max) = (1917788.148, 1950616.532, 1963120.223), stdev = 19105.474
[info]   CI (99.9%): [1877048.155, 2024184.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1804.436 ±(99.9%) 67.898 MB/sec [Average]
[info]   (min, avg, max) = (1774.114, 1804.436, 1816.058), stdev = 17.633
[info]   CI (99.9%): [1736.539, 1872.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.064 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.064, 0.083), stdev = 0.014
[info]   CI (99.9%): [0.010, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1820.991 ±(99.9%) 696.840 MB/sec [Average]
[info]   (min, avg, max) = (1681.508, 1820.991, 2032.356), stdev = 180.967
[info]   CI (99.9%): [1124.151, 2517.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1469.156 ±(99.9%) 548.925 B/op [Average]
[info]   (min, avg, max) = (1348.126, 1469.156, 1640.263), stdev = 142.554
[info]   CI (99.9%): [920.231, 2018.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson
[info] # Run progress: 8.96% complete, ETA 00:31:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2029069.630 ops/s
[info] # Warmup Iteration   2: 6357753.928 ops/s
[info] # Warmup Iteration   3: 6325475.926 ops/s
[info] # Warmup Iteration   4: 6399037.202 ops/s
[info] # Warmup Iteration   5: 6385428.082 ops/s
[info] Iteration   1: 6402876.771 ops/s
[info]                  ·gc.alloc.rate:                   1757.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.529 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6189814.155 ops/s
[info]                  ·gc.alloc.rate:                   1698.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 428.720 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6348200.824 ops/s
[info]                  ·gc.alloc.rate:                   1742.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 419.486 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6375760.426 ops/s
[info]                  ·gc.alloc.rate:                   1749.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.563 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6360983.416 ops/s
[info]                  ·gc.alloc.rate:                   1745.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 420.176 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson":
[info]   6335527.119 ±(99.9%) 323291.361 ops/s [Average]
[info]   (min, avg, max) = (6189814.155, 6335527.119, 6402876.771), stdev = 83957.740
[info]   CI (99.9%): [6012235.758, 6658818.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1738.563 ±(99.9%) 88.892 MB/sec [Average]
[info]   (min, avg, max) = (1698.559, 1738.563, 1757.368), stdev = 23.085
[info]   CI (99.9%): [1649.671, 1827.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.133, 0.167), stdev = 0.032
[info]   CI (99.9%): [0.012, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.033, 0.042), stdev = 0.008
[info]   CI (99.9%): [0.002, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1689.612 ±(99.9%) 30.064 MB/sec [Average]
[info]   (min, avg, max) = (1678.159, 1689.612, 1697.559), stdev = 7.807
[info]   CI (99.9%): [1659.548, 1719.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   419.895 ±(99.9%) 22.301 B/op [Average]
[info]   (min, avg, max) = (412.529, 419.895, 428.720), stdev = 5.792
[info]   CI (99.9%): [397.594, 442.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter
[info] # Run progress: 9.70% complete, ETA 00:31:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17816628.349 ops/s
[info] # Warmup Iteration   2: 22644092.584 ops/s
[info] # Warmup Iteration   3: 23428454.294 ops/s
[info] # Warmup Iteration   4: 23242999.403 ops/s
[info] # Warmup Iteration   5: 23026027.318 ops/s
[info] Iteration   1: 23407424.855 ops/s
[info]                  ·gc.alloc.rate:                   713.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 23283289.302 ops/s
[info]                  ·gc.alloc.rate:                   709.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.637 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23171294.822 ops/s
[info]                  ·gc.alloc.rate:                   706.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23245983.223 ops/s
[info]                  ·gc.alloc.rate:                   708.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 23363184.299 ops/s
[info]                  ·gc.alloc.rate:                   712.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter":
[info]   23294235.300 ±(99.9%) 360854.230 ops/s [Average]
[info]   (min, avg, max) = (23171294.822, 23294235.300, 23407424.855), stdev = 93712.698
[info]   CI (99.9%): [22933381.070, 23655089.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   710.243 ±(99.9%) 10.850 MB/sec [Average]
[info]   (min, avg, max) = (706.520, 710.243, 713.631), stdev = 2.818
[info]   CI (99.9%): [699.393, 721.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   724.934 ±(99.9%) 561.200 MB/sec [Average]
[info]   (min, avg, max) = (656.532, 724.934, 985.616), stdev = 145.742
[info]   CI (99.9%): [163.734, 1286.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   48.995 ±(99.9%) 37.987 B/op [Average]
[info]   (min, avg, max) = (44.159, 48.995, 66.637), stdev = 9.865
[info]   CI (99.9%): [11.008, 86.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc
[info] # Run progress: 10.45% complete, ETA 00:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18377366.495 ops/s
[info] # Warmup Iteration   2: 22524714.173 ops/s
[info] # Warmup Iteration   3: 23078095.807 ops/s
[info] # Warmup Iteration   4: 23075340.945 ops/s
[info] # Warmup Iteration   5: 23059126.342 ops/s
[info] Iteration   1: 22895554.291 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23111463.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23039580.689 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23116862.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23033424.840 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc":
[info]   23039377.180 ±(99.9%) 343986.237 ops/s [Average]
[info]   (min, avg, max) = (22895554.291, 23039377.180, 23116862.631), stdev = 89332.133
[info]   CI (99.9%): [22695390.942, 23383363.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay
[info] # Run progress: 11.19% complete, ETA 00:31:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 364601.207 ops/s
[info] # Warmup Iteration   2: 1180070.575 ops/s
[info] # Warmup Iteration   3: 1179161.471 ops/s
[info] # Warmup Iteration   4: 1165853.149 ops/s
[info] # Warmup Iteration   5: 1174409.845 ops/s
[info] Iteration   1: 1167777.310 ops/s
[info]                  ·gc.alloc.rate:                   1762.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2264.080 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1176738.705 ops/s
[info]                  ·gc.alloc.rate:                   1776.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2257.243 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1165998.512 ops/s
[info]                  ·gc.alloc.rate:                   1760.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2741.861 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1164878.381 ops/s
[info]                  ·gc.alloc.rate:                   1758.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2292.271 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1168344.979 ops/s
[info]                  ·gc.alloc.rate:                   1763.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2288.294 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay":
[info]   1168747.578 ±(99.9%) 18008.674 ops/s [Average]
[info]   (min, avg, max) = (1164878.381, 1168747.578, 1176738.705), stdev = 4676.795
[info]   CI (99.9%): [1150738.904, 1186756.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate":
[info]   1764.112 ±(99.9%) 27.858 MB/sec [Average]
[info]   (min, avg, max) = (1758.197, 1764.112, 1776.532), stdev = 7.235
[info]   CI (99.9%): [1736.253, 1791.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   2376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2376.000, 2376.000, 2376.000), stdev = 0.001
[info]   CI (99.9%): [2376.000, 2376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.033, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.163 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (0.112, 0.163, 0.195), stdev = 0.030
[info]   CI (99.9%): [0.046, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1758.541 ±(99.9%) 587.267 MB/sec [Average]
[info]   (min, avg, max) = (1679.402, 1758.541, 2031.033), stdev = 152.511
[info]   CI (99.9%): [1171.274, 2345.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   2368.750 ±(99.9%) 805.245 B/op [Average]
[info]   (min, avg, max) = (2257.243, 2368.750, 2741.861), stdev = 209.119
[info]   CI (99.9%): [1563.505, 3173.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 11.94% complete, ETA 00:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 625794.493 ops/s
[info] # Warmup Iteration   2: 926294.817 ops/s
[info] # Warmup Iteration   3: 934023.651 ops/s
[info] # Warmup Iteration   4: 931022.904 ops/s
[info] # Warmup Iteration   5: 939169.980 ops/s
[info] Iteration   1: 929826.962 ops/s
[info]                  ·gc.alloc.rate:                   3009.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4592.233 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 944542.463 ops/s
[info]                  ·gc.alloc.rate:                   3058.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5095.095 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 917544.315 ops/s
[info]                  ·gc.alloc.rate:                   2971.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5253.660 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 931419.084 ops/s
[info]                  ·gc.alloc.rate:                   3015.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5176.483 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 928003.159 ops/s
[info]                  ·gc.alloc.rate:                   3003.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5195.483 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   930267.197 ±(99.9%) 37149.309 ops/s [Average]
[info]   (min, avg, max) = (917544.315, 930267.197, 944542.463), stdev = 9647.558
[info]   CI (99.9%): [893117.887, 967416.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   3011.528 ±(99.9%) 119.550 MB/sec [Average]
[info]   (min, avg, max) = (2971.315, 3011.528, 3058.005), stdev = 31.047
[info]   CI (99.9%): [2891.978, 3131.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.000, 5096.000, 5096.000), stdev = 0.001
[info]   CI (99.9%): [5096.000, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.208), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.253 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (0.177, 0.253, 0.347), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2991.553 ±(99.9%) 601.652 MB/sec [Average]
[info]   (min, avg, max) = (2712.080, 2991.553, 3063.242), stdev = 156.247
[info]   CI (99.9%): [2389.901, 3593.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5062.591 ±(99.9%) 1035.803 B/op [Average]
[info]   (min, avg, max) = (4592.233, 5062.591, 5253.660), stdev = 268.995
[info]   CI (99.9%): [4026.788, 6098.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson
[info] # Run progress: 12.69% complete, ETA 00:30:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 789768.061 ops/s
[info] # Warmup Iteration   2: 1800392.542 ops/s
[info] # Warmup Iteration   3: 1798634.751 ops/s
[info] # Warmup Iteration   4: 1775493.566 ops/s
[info] # Warmup Iteration   5: 1787520.664 ops/s
[info] Iteration   1: 1807064.487 ops/s
[info]                  ·gc.alloc.rate:                   1698.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1462.637 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1803255.059 ops/s
[info]                  ·gc.alloc.rate:                   1695.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1767.642 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1797838.989 ops/s
[info]                  ·gc.alloc.rate:                   1690.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1482.329 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1800232.588 ops/s
[info]                  ·gc.alloc.rate:                   1692.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1185.677 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1771502.706 ops/s
[info]                  ·gc.alloc.rate:                   1665.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1207.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson":
[info]   1795978.766 ±(99.9%) 54336.072 ops/s [Average]
[info]   (min, avg, max) = (1771502.706, 1795978.766, 1807064.487), stdev = 14110.905
[info]   CI (99.9%): [1741642.693, 1850314.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate":
[info]   1688.492 ±(99.9%) 51.081 MB/sec [Average]
[info]   (min, avg, max) = (1665.367, 1688.492, 1698.623), stdev = 13.266
[info]   CI (99.9%): [1637.412, 1739.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.166), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.102 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (0.074, 0.102, 0.145), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1622.228 ±(99.9%) 1073.361 MB/sec [Average]
[info]   (min, avg, max) = (1355.877, 1622.228, 2024.721), stdev = 278.748
[info]   CI (99.9%): [548.867, 2695.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1421.099 ±(99.9%) 916.784 B/op [Average]
[info]   (min, avg, max) = (1185.677, 1421.099, 1767.642), stdev = 238.086
[info]   CI (99.9%): [504.315, 2337.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter
[info] # Run progress: 13.43% complete, ETA 00:30:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8372251.401 ops/s
[info] # Warmup Iteration   2: 9940770.729 ops/s
[info] # Warmup Iteration   3: 10163633.484 ops/s
[info] # Warmup Iteration   4: 10176078.677 ops/s
[info] # Warmup Iteration   5: 10193330.089 ops/s
[info] Iteration   1: 10168396.983 ops/s
[info]                  ·gc.alloc.rate:                   2531.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366.718 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10078790.941 ops/s
[info]                  ·gc.alloc.rate:                   2509.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 424.012 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9763739.041 ops/s
[info]                  ·gc.alloc.rate:                   2431.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383.314 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9784175.428 ops/s
[info]                  ·gc.alloc.rate:                   2436.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383.265 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9755585.484 ops/s
[info]                  ·gc.alloc.rate:                   2429.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 384.381 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter":
[info]   9910137.575 ±(99.9%) 761238.369 ops/s [Average]
[info]   (min, avg, max) = (9755585.484, 9910137.575, 10168396.983), stdev = 197691.187
[info]   CI (99.9%): [9148899.206, 10671375.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2467.940 ±(99.9%) 188.598 MB/sec [Average]
[info]   (min, avg, max) = (2429.632, 2467.940, 2531.831), stdev = 48.978
[info]   CI (99.9%): [2279.342, 2656.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.175 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.175, 0.250), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.028, 0.039), stdev = 0.007
[info]   CI (99.9%): [≈ 10⁻⁴, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2445.194 ±(99.9%) 580.800 MB/sec [Average]
[info]   (min, avg, max) = (2368.538, 2445.194, 2714.822), stdev = 150.832
[info]   CI (99.9%): [1864.394, 3025.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   388.338 ±(99.9%) 81.837 B/op [Average]
[info]   (min, avg, max) = (366.718, 388.338, 424.012), stdev = 21.253
[info]   CI (99.9%): [306.501, 470.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay
[info] # Run progress: 14.18% complete, ETA 00:29:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59955.106 ops/s
[info] # Warmup Iteration   2: 327314.555 ops/s
[info] # Warmup Iteration   3: 319505.115 ops/s
[info] # Warmup Iteration   4: 326637.344 ops/s
[info] # Warmup Iteration   5: 334360.244 ops/s
[info] Iteration   1: 337474.010 ops/s
[info]                  ·gc.alloc.rate:                   2052.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9420.254 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 337069.988 ops/s
[info]                  ·gc.alloc.rate:                   2050.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9473.417 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 337809.697 ops/s
[info]                  ·gc.alloc.rate:                   2054.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9479.216 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 336629.517 ops/s
[info]                  ·gc.alloc.rate:                   2047.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9529.735 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 337858.720 ops/s
[info]                  ·gc.alloc.rate:                   2055.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9498.095 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay":
[info]   337368.386 ±(99.9%) 2002.065 ops/s [Average]
[info]   (min, avg, max) = (336629.517, 337368.386, 337858.720), stdev = 519.930
[info]   CI (99.9%): [335366.321, 339370.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate":
[info]   2052.285 ±(99.9%) 11.893 MB/sec [Average]
[info]   (min, avg, max) = (2047.757, 2052.285, 2055.193), stdev = 3.089
[info]   CI (99.9%): [2040.392, 2064.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   9576.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9576.001, 9576.001, 9576.001), stdev = 0.001
[info]   CI (99.9%): [9576.001, 9576.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.447 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (0.388, 0.447, 0.583), stdev = 0.087
[info]   CI (99.9%): [0.112, 0.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2031.738 ±(99.9%) 30.514 MB/sec [Average]
[info]   (min, avg, max) = (2019.316, 2031.738, 2038.472), stdev = 7.924
[info]   CI (99.9%): [2001.224, 2062.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   9480.143 ±(99.9%) 154.199 B/op [Average]
[info]   (min, avg, max) = (9420.254, 9480.143, 9529.735), stdev = 40.045
[info]   CI (99.9%): [9325.944, 9634.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 14.93% complete, ETA 00:29:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617277.010 ops/s
[info] # Warmup Iteration   2: 1069335.854 ops/s
[info] # Warmup Iteration   3: 1077691.770 ops/s
[info] # Warmup Iteration   4: 1068036.826 ops/s
[info] # Warmup Iteration   5: 1075807.700 ops/s
[info] Iteration   1: 1072779.622 ops/s
[info]                  ·gc.alloc.rate:                   2360.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3462.932 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1059733.486 ops/s
[info]                  ·gc.alloc.rate:                   2331.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3520.305 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1066306.063 ops/s
[info]                  ·gc.alloc.rate:                   2346.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3506.983 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1066039.363 ops/s
[info]                  ·gc.alloc.rate:                   2345.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2379.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3512.920 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1072607.515 ops/s
[info]                  ·gc.alloc.rate:                   2360.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2041.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2996.903 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1067493.210 ±(99.9%) 20900.040 ops/s [Average]
[info]   (min, avg, max) = (1059733.486, 1067493.210, 1072779.622), stdev = 5427.674
[info]   CI (99.9%): [1046593.170, 1088393.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2348.944 ±(99.9%) 45.881 MB/sec [Average]
[info]   (min, avg, max) = (2331.762, 2348.944, 2360.332), stdev = 11.915
[info]   CI (99.9%): [2303.063, 2394.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.166), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.166 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.166, 0.247), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2305.175 ±(99.9%) 567.261 MB/sec [Average]
[info]   (min, avg, max) = (2041.978, 2305.175, 2379.005), stdev = 147.316
[info]   CI (99.9%): [1737.914, 2872.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3400.008 ±(99.9%) 871.975 B/op [Average]
[info]   (min, avg, max) = (2996.903, 3400.008, 3520.305), stdev = 226.449
[info]   CI (99.9%): [2528.034, 4271.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson
[info] # Run progress: 15.67% complete, ETA 00:29:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1606893.947 ops/s
[info] # Warmup Iteration   2: 3807718.808 ops/s
[info] # Warmup Iteration   3: 3839733.609 ops/s
[info] # Warmup Iteration   4: 3824577.108 ops/s
[info] # Warmup Iteration   5: 3839817.192 ops/s
[info] Iteration   1: 3868678.339 ops/s
[info]                  ·gc.alloc.rate:                   2201.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 824.344 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3865870.617 ops/s
[info]                  ·gc.alloc.rate:                   2200.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 965.745 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3851133.187 ops/s
[info]                  ·gc.alloc.rate:                   2192.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 832.707 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3856293.275 ops/s
[info]                  ·gc.alloc.rate:                   2194.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 971.069 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3804033.019 ops/s
[info]                  ·gc.alloc.rate:                   2165.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2042.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 845.008 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson":
[info]   3849201.687 ±(99.9%) 100990.856 ops/s [Average]
[info]   (min, avg, max) = (3804033.019, 3849201.687, 3868678.339), stdev = 26227.005
[info]   CI (99.9%): [3748210.831, 3950192.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate":
[info]   2190.902 ±(99.9%) 56.749 MB/sec [Average]
[info]   (min, avg, max) = (2165.500, 2190.902, 2201.799), stdev = 14.738
[info]   CI (99.9%): [2134.153, 2247.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.166), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.043 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.043, 0.068), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   2171.102 ±(99.9%) 717.800 MB/sec [Average]
[info]   (min, avg, max) = (2025.714, 2171.102, 2378.857), stdev = 186.410
[info]   CI (99.9%): [1453.301, 2888.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   887.775 ±(99.9%) 284.936 B/op [Average]
[info]   (min, avg, max) = (824.344, 887.775, 971.069), stdev = 73.997
[info]   CI (99.9%): [602.839, 1172.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter
[info] # Run progress: 16.42% complete, ETA 00:29:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9854904.161 ops/s
[info] # Warmup Iteration   2: 18373418.800 ops/s
[info] # Warmup Iteration   3: 19213314.880 ops/s
[info] # Warmup Iteration   4: 19325978.876 ops/s
[info] # Warmup Iteration   5: 19246235.105 ops/s
[info] Iteration   1: 19179076.584 ops/s
[info]                  ·gc.alloc.rate:                   877.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19234951.124 ops/s
[info]                  ·gc.alloc.rate:                   879.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19303493.384 ops/s
[info]                  ·gc.alloc.rate:                   883.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19203017.652 ops/s
[info]                  ·gc.alloc.rate:                   878.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19338475.988 ops/s
[info]                  ·gc.alloc.rate:                   884.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter":
[info]   19251802.946 ±(99.9%) 259291.837 ops/s [Average]
[info]   (min, avg, max) = (19179076.584, 19251802.946, 19338475.988), stdev = 67337.267
[info]   CI (99.9%): [18992511.109, 19511094.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   880.648 ±(99.9%) 12.174 MB/sec [Average]
[info]   (min, avg, max) = (877.094, 880.648, 884.612), stdev = 3.162
[info]   CI (99.9%): [868.474, 892.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.167), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.014), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   861.420 ±(99.9%) 694.532 MB/sec [Average]
[info]   (min, avg, max) = (660.388, 861.420, 998.228), stdev = 180.368
[info]   CI (99.9%): [166.888, 1555.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   70.447 ±(99.9%) 57.191 B/op [Average]
[info]   (min, avg, max) = (54.042, 70.447, 81.812), stdev = 14.852
[info]   CI (99.9%): [13.256, 127.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay
[info] # Run progress: 17.16% complete, ETA 00:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148331.686 ops/s
[info] # Warmup Iteration   2: 574883.790 ops/s
[info] # Warmup Iteration   3: 589762.000 ops/s
[info] # Warmup Iteration   4: 586699.652 ops/s
[info] # Warmup Iteration   5: 587410.072 ops/s
[info] Iteration   1: 566084.221 ops/s
[info]                  ·gc.alloc.rate:                   1973.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              5488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5620.688 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 589111.821 ops/s
[info]                  ·gc.alloc.rate:                   2053.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              5488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5422.350 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 584860.241 ops/s
[info]                  ·gc.alloc.rate:                   2038.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              5488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5476.346 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 587872.228 ops/s
[info]                  ·gc.alloc.rate:                   2049.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              5488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5457.098 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 590059.291 ops/s
[info]                  ·gc.alloc.rate:                   2056.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              5488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5438.670 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay":
[info]   583597.560 ±(99.9%) 38445.995 ops/s [Average]
[info]   (min, avg, max) = (566084.221, 583597.560, 590059.291), stdev = 9984.303
[info]   CI (99.9%): [545151.565, 622043.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate":
[info]   2034.532 ±(99.9%) 134.229 MB/sec [Average]
[info]   (min, avg, max) = (1973.375, 2034.532, 2056.986), stdev = 34.859
[info]   CI (99.9%): [1900.303, 2168.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5488.001, 5488.001, 5488.001), stdev = 0.001
[info]   CI (99.9%): [5488.001, 5488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.166), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.335 ±(99.9%) 0.418 B/op [Average]
[info]   (min, avg, max) = (0.174, 0.335, 0.445), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2032.289 ±(99.9%) 28.000 MB/sec [Average]
[info]   (min, avg, max) = (2021.087, 2032.289, 2038.496), stdev = 7.271
[info]   CI (99.9%): [2004.289, 2060.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5483.030 ±(99.9%) 306.343 B/op [Average]
[info]   (min, avg, max) = (5422.350, 5483.030, 5620.688), stdev = 79.556
[info]   CI (99.9%): [5176.687, 5789.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce
[info] # Run progress: 17.91% complete, ETA 00:28:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6516.587 ops/s
[info] # Warmup Iteration   2: 8262.653 ops/s
[info] # Warmup Iteration   3: 8340.508 ops/s
[info] # Warmup Iteration   4: 8207.671 ops/s
[info] # Warmup Iteration   5: 8422.549 ops/s
[info] Iteration   1: 8372.999 ops/s
[info]                  ·gc.alloc.rate:                   1237.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249028.975 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8406.866 ops/s
[info]                  ·gc.alloc.rate:                   1241.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186982.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8326.676 ops/s
[info]                  ·gc.alloc.rate:                   1230.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              232526.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252796.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8278.624 ops/s
[info]                  ·gc.alloc.rate:                   1222.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              232536.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255527.879 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8056.379 ops/s
[info]                  ·gc.alloc.rate:                   1190.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              232536.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197470.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce":
[info]   8288.309 ±(99.9%) 532.815 ops/s [Average]
[info]   (min, avg, max) = (8056.379, 8288.309, 8406.866), stdev = 138.370
[info]   CI (99.9%): [7755.494, 8821.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1224.438 ±(99.9%) 78.841 MB/sec [Average]
[info]   (min, avg, max) = (1190.146, 1224.438, 1241.886), stdev = 20.475
[info]   CI (99.9%): [1145.597, 1303.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   232527.779 ±(99.9%) 30.895 B/op [Average]
[info]   (min, avg, max) = (232520.049, 232527.779, 232536.051), stdev = 8.023
[info]   CI (99.9%): [232496.884, 232558.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15.065 ±(99.9%) 36.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.065, 24.399), stdev = 9.578
[info]   CI (99.9%): [≈ 0, 51.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1203.097 ±(99.9%) 698.161 MB/sec [Average]
[info]   (min, avg, max) = (998.673, 1203.097, 1343.782), stdev = 181.310
[info]   CI (99.9%): [504.936, 1901.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   228361.249 ±(99.9%) 128126.951 B/op [Average]
[info]   (min, avg, max) = (186982.960, 228361.249, 255527.879), stdev = 33274.162
[info]   CI (99.9%): [100234.298, 356488.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson
[info] # Run progress: 18.66% complete, ETA 00:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16926.157 ops/s
[info] # Warmup Iteration   2: 24846.426 ops/s
[info] # Warmup Iteration   3: 24498.524 ops/s
[info] # Warmup Iteration   4: 25160.422 ops/s
[info] # Warmup Iteration   5: 24702.943 ops/s
[info] Iteration   1: 25136.635 ops/s
[info]                  ·gc.alloc.rate:                   929.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61245.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25159.273 ops/s
[info]                  ·gc.alloc.rate:                   930.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41046.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 25294.176 ops/s
[info]                  ·gc.alloc.rate:                   935.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61572.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25188.744 ops/s
[info]                  ·gc.alloc.rate:                   931.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62120.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24961.388 ops/s
[info]                  ·gc.alloc.rate:                   923.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63000.240 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson":
[info]   25148.043 ±(99.9%) 464.109 ops/s [Average]
[info]   (min, avg, max) = (24961.388, 25148.043, 25294.176), stdev = 120.528
[info]   CI (99.9%): [24683.934, 25612.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   930.093 ±(99.9%) 17.332 MB/sec [Average]
[info]   (min, avg, max) = (923.146, 930.093, 935.533), stdev = 4.501
[info]   CI (99.9%): [912.761, 947.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   58216.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (58216.016, 58216.016, 58216.018), stdev = 0.001
[info]   CI (99.9%): [58216.014, 58216.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   2.608 ±(99.9%) 7.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.608, 5.203), stdev = 2.063
[info]   CI (99.9%): [≈ 0, 10.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   923.341 ±(99.9%) 576.164 MB/sec [Average]
[info]   (min, avg, max) = (656.045, 923.341, 999.011), stdev = 149.628
[info]   CI (99.9%): [347.177, 1499.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   57796.971 ±(99.9%) 36147.811 B/op [Average]
[info]   (min, avg, max) = (41046.273, 57796.971, 63000.240), stdev = 9387.472
[info]   CI (99.9%): [21649.160, 93944.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter
[info] # Run progress: 19.40% complete, ETA 00:28:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25438.691 ops/s
[info] # Warmup Iteration   2: 28012.676 ops/s
[info] # Warmup Iteration   3: 27824.709 ops/s
[info] # Warmup Iteration   4: 27843.799 ops/s
[info] # Warmup Iteration   5: 27762.203 ops/s
[info] Iteration   1: 27833.789 ops/s
[info]                  ·gc.alloc.rate:                   505.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18682.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 27263.638 ops/s
[info]                  ·gc.alloc.rate:                   494.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38148.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27558.872 ops/s
[info]                  ·gc.alloc.rate:                   500.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18867.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27550.267 ops/s
[info]                  ·gc.alloc.rate:                   500.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37769.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27930.611 ops/s
[info]                  ·gc.alloc.rate:                   507.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18638.765 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter":
[info]   27627.435 ±(99.9%) 1014.230 ops/s [Average]
[info]   (min, avg, max) = (27263.638, 27627.435, 27930.611), stdev = 263.392
[info]   CI (99.9%): [26613.205, 28641.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   501.445 ±(99.9%) 18.526 MB/sec [Average]
[info]   (min, avg, max) = (494.709, 501.445, 507.018), stdev = 4.811
[info]   CI (99.9%): [482.919, 519.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (28568.015, 28568.015, 28568.016), stdev = 0.001
[info]   CI (99.9%): [28568.013, 28568.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1.188 ±(99.9%) 3.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.188, 2.378), stdev = 0.841
[info]   CI (99.9%): [≈ 0, 4.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   462.681 ±(99.9%) 697.035 MB/sec [Average]
[info]   (min, avg, max) = (330.292, 462.681, 661.342), stdev = 181.018
[info]   CI (99.9%): [≈ 0, 1159.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   26421.395 ±(99.9%) 40561.126 B/op [Average]
[info]   (min, avg, max) = (18638.765, 26421.395, 38148.215), stdev = 10533.596
[info]   CI (99.9%): [≈ 0, 66982.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson
[info] # Run progress: 20.15% complete, ETA 00:27:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8722.511 ops/s
[info] # Warmup Iteration   2: 15281.585 ops/s
[info] # Warmup Iteration   3: 15265.095 ops/s
[info] # Warmup Iteration   4: 15191.038 ops/s
[info] # Warmup Iteration   5: 15298.664 ops/s
[info] Iteration   1: 15328.803 ops/s
[info]                  ·gc.alloc.rate:                   1529.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137876.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 15322.878 ops/s
[info]                  ·gc.alloc.rate:                   1529.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173177.544 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15097.542 ops/s
[info]                  ·gc.alloc.rate:                   1506.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141027.605 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15196.761 ops/s
[info]                  ·gc.alloc.rate:                   1517.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              157087.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175498.509 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 14921.691 ops/s
[info]                  ·gc.alloc.rate:                   1488.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143182.438 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson":
[info]   15173.535 ±(99.9%) 656.169 ops/s [Average]
[info]   (min, avg, max) = (14921.691, 15173.535, 15328.803), stdev = 170.405
[info]   CI (99.9%): [14517.367, 15829.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   1514.334 ±(99.9%) 65.679 MB/sec [Average]
[info]   (min, avg, max) = (1488.961, 1514.334, 1529.593), stdev = 17.057
[info]   CI (99.9%): [1448.656, 1580.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   157088.003 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (157087.916, 157088.003, 157088.044), stdev = 0.050
[info]   CI (99.9%): [157087.809, 157088.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   10.372 ±(99.9%) 10.918 B/op [Average]
[info]   (min, avg, max) = (6.412, 10.372, 13.020), stdev = 2.835
[info]   CI (99.9%): [≈ 0, 21.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1486.639 ±(99.9%) 716.633 MB/sec [Average]
[info]   (min, avg, max) = (1342.532, 1486.639, 1694.931), stdev = 186.107
[info]   CI (99.9%): [770.005, 2203.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   154152.607 ±(99.9%) 71395.535 B/op [Average]
[info]   (min, avg, max) = (137876.938, 154152.607, 175498.509), stdev = 18541.194
[info]   CI (99.9%): [82757.072, 225548.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter
[info] # Run progress: 20.90% complete, ETA 00:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16524.237 ops/s
[info] # Warmup Iteration   2: 17912.227 ops/s
[info] # Warmup Iteration   3: 18034.038 ops/s
[info] # Warmup Iteration   4: 18133.676 ops/s
[info] # Warmup Iteration   5: 17999.731 ops/s
[info] Iteration   1: 17938.654 ops/s
[info]                  ·gc.alloc.rate:                   1567.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146924.538 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18177.660 ops/s
[info]                  ·gc.alloc.rate:                   1588.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145685.220 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18193.359 ops/s
[info]                  ·gc.alloc.rate:                   1589.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146182.949 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17930.722 ops/s
[info]                  ·gc.alloc.rate:                   1566.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118911.886 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18068.117 ops/s
[info]                  ·gc.alloc.rate:                   1578.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147724.352 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter":
[info]   18061.702 ±(99.9%) 483.703 ops/s [Average]
[info]   (min, avg, max) = (17930.722, 18061.702, 18193.359), stdev = 125.616
[info]   CI (99.9%): [17578.000, 18545.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1577.995 ±(99.9%) 42.948 MB/sec [Average]
[info]   (min, avg, max) = (1566.432, 1577.995, 1589.852), stdev = 11.153
[info]   CI (99.9%): [1535.048, 1620.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   137528.024 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (137528.022, 137528.024, 137528.029), stdev = 0.002
[info]   CI (99.9%): [137528.015, 137528.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   8.701 ±(99.9%) 11.394 B/op [Average]
[info]   (min, avg, max) = (5.481, 8.701, 12.604), stdev = 2.959
[info]   CI (99.9%): [≈ 0, 20.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1619.258 ±(99.9%) 570.984 MB/sec [Average]
[info]   (min, avg, max) = (1354.396, 1619.258, 1695.574), stdev = 148.283
[info]   CI (99.9%): [1048.274, 2190.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   141085.789 ±(99.9%) 47823.203 B/op [Average]
[info]   (min, avg, max) = (118911.886, 141085.789, 147724.352), stdev = 12419.534
[info]   CI (99.9%): [93262.586, 188908.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 21.64% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16382.129 ops/s
[info] # Warmup Iteration   2: 17833.771 ops/s
[info] # Warmup Iteration   3: 17891.187 ops/s
[info] # Warmup Iteration   4: 17822.536 ops/s
[info] # Warmup Iteration   5: 17908.942 ops/s
[info] Iteration   1: 17778.701 ops/s
[info]                  ·gc.alloc.rate:                   1552.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148326.656 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17513.547 ops/s
[info]                  ·gc.alloc.rate:                   1529.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120948.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17874.064 ops/s
[info]                  ·gc.alloc.rate:                   1560.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148673.872 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17847.850 ops/s
[info]                  ·gc.alloc.rate:                   1558.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149301.529 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17694.400 ops/s
[info]                  ·gc.alloc.rate:                   1544.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120659.115 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc":
[info]   17741.712 ±(99.9%) 559.498 ops/s [Average]
[info]   (min, avg, max) = (17513.547, 17741.712, 17874.064), stdev = 145.300
[info]   CI (99.9%): [17182.214, 18301.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1548.953 ±(99.9%) 48.648 MB/sec [Average]
[info]   (min, avg, max) = (1529.140, 1548.953, 1560.499), stdev = 12.634
[info]   CI (99.9%): [1500.305, 1597.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   137440.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (137440.023, 137440.025, 137440.029), stdev = 0.002
[info]   CI (99.9%): [137440.015, 137440.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   8.501 ±(99.9%) 11.985 B/op [Average]
[info]   (min, avg, max) = (3.685, 8.501, 11.224), stdev = 3.112
[info]   CI (99.9%): [≈ 0, 20.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1551.526 ±(99.9%) 705.696 MB/sec [Average]
[info]   (min, avg, max) = (1345.653, 1551.526, 1692.700), stdev = 183.267
[info]   CI (99.9%): [845.830, 2257.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   137581.854 ±(99.9%) 58994.560 B/op [Average]
[info]   (min, avg, max) = (120659.115, 137581.854, 149301.529), stdev = 15320.700
[info]   CI (99.9%): [78587.294, 196576.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson
[info] # Run progress: 22.39% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1166608.883 ops/s
[info] # Warmup Iteration   2: 2133180.205 ops/s
[info] # Warmup Iteration   3: 2144727.029 ops/s
[info] # Warmup Iteration   4: 2123240.232 ops/s
[info] # Warmup Iteration   5: 2159495.766 ops/s
[info] Iteration   1: 2151253.639 ops/s
[info]                  ·gc.alloc.rate:                   1366.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.802 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2159055.707 ops/s
[info]                  ·gc.alloc.rate:                   1372.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 979.236 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2152410.506 ops/s
[info]                  ·gc.alloc.rate:                   1367.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 985.842 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2149075.891 ops/s
[info]                  ·gc.alloc.rate:                   1365.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 990.279 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2148899.244 ops/s
[info]                  ·gc.alloc.rate:                   1365.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 992.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson":
[info]   2152138.997 ±(99.9%) 15943.836 ops/s [Average]
[info]   (min, avg, max) = (2148899.244, 2152138.997, 2159055.707), stdev = 4140.564
[info]   CI (99.9%): [2136195.161, 2168082.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate":
[info]   1367.241 ±(99.9%) 10.876 MB/sec [Average]
[info]   (min, avg, max) = (1365.051, 1367.241, 1372.014), stdev = 2.825
[info]   CI (99.9%): [1356.365, 1378.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.082, 0.106), stdev = 0.017
[info]   CI (99.9%): [0.016, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1346.856 ±(99.9%) 28.139 MB/sec [Average]
[info]   (min, avg, max) = (1336.143, 1346.856, 1354.577), stdev = 7.308
[info]   CI (99.9%): [1318.717, 1374.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   985.097 ±(99.9%) 24.899 B/op [Average]
[info]   (min, avg, max) = (977.802, 985.097, 992.327), stdev = 6.466
[info]   CI (99.9%): [960.198, 1009.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter
[info] # Run progress: 23.13% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8456663.493 ops/s
[info] # Warmup Iteration   2: 5085821.797 ops/s
[info] # Warmup Iteration   3: 5079696.076 ops/s
[info] # Warmup Iteration   4: 5237271.438 ops/s
[info] # Warmup Iteration   5: 5251225.574 ops/s
[info] Iteration   1: 5244874.156 ops/s
[info]                  ·gc.alloc.rate:                   693.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5250753.203 ops/s
[info]                  ·gc.alloc.rate:                   693.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5179058.277 ops/s
[info]                  ·gc.alloc.rate:                   684.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5240930.034 ops/s
[info]                  ·gc.alloc.rate:                   692.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5075424.302 ops/s
[info]                  ·gc.alloc.rate:                   670.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter":
[info]   5198207.994 ±(99.9%) 286908.175 ops/s [Average]
[info]   (min, avg, max) = (5075424.302, 5198207.994, 5250753.203), stdev = 74509.142
[info]   CI (99.9%): [4911299.819, 5485116.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   686.926 ±(99.9%) 38.087 MB/sec [Average]
[info]   (min, avg, max) = (670.633, 686.926, 693.945), stdev = 9.891
[info]   CI (99.9%): [648.839, 725.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.019, 0.025), stdev = 0.004
[info]   CI (99.9%): [0.002, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   660.351 ±(99.9%) 10.234 MB/sec [Average]
[info]   (min, avg, max) = (657.070, 660.351, 663.673), stdev = 2.658
[info]   CI (99.9%): [650.117, 670.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   199.994 ±(99.9%) 13.721 B/op [Average]
[info]   (min, avg, max) = (197.185, 199.994, 205.841), stdev = 3.563
[info]   CI (99.9%): [186.273, 213.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay
[info] # Run progress: 23.88% complete, ETA 00:26:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131187.457 ops/s
[info] # Warmup Iteration   2: 422751.290 ops/s
[info] # Warmup Iteration   3: 429597.156 ops/s
[info] # Warmup Iteration   4: 426702.783 ops/s
[info] # Warmup Iteration   5: 428716.547 ops/s
[info] Iteration   1: 428667.063 ops/s
[info]                  ·gc.alloc.rate:                   2010.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7425.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 426548.195 ops/s
[info]                  ·gc.alloc.rate:                   2001.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7491.900 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 425747.178 ops/s
[info]                  ·gc.alloc.rate:                   1997.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7525.553 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 427316.329 ops/s
[info]                  ·gc.alloc.rate:                   2005.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7507.792 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 425441.433 ops/s
[info]                  ·gc.alloc.rate:                   1995.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6286.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay":
[info]   426744.039 ±(99.9%) 5003.765 ops/s [Average]
[info]   (min, avg, max) = (425441.433, 426744.039, 428667.063), stdev = 1299.462
[info]   CI (99.9%): [421740.274, 431747.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate":
[info]   2001.954 ±(99.9%) 23.808 MB/sec [Average]
[info]   (min, avg, max) = (1995.522, 2001.954, 2010.768), stdev = 6.183
[info]   CI (99.9%): [1978.146, 2025.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.353 ±(99.9%) 0.340 B/op [Average]
[info]   (min, avg, max) = (0.229, 0.353, 0.461), stdev = 0.088
[info]   CI (99.9%): [0.014, 0.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1965.087 ±(99.9%) 573.593 MB/sec [Average]
[info]   (min, avg, max) = (1698.863, 1965.087, 2038.820), stdev = 148.960
[info]   CI (99.9%): [1391.495, 2538.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   7247.318 ±(99.9%) 2073.885 B/op [Average]
[info]   (min, avg, max) = (6286.276, 7247.318, 7525.553), stdev = 538.581
[info]   CI (99.9%): [5173.434, 9321.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson
[info] # Run progress: 24.63% complete, ETA 00:26:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1535271.810 ops/s
[info] # Warmup Iteration   2: 2713801.178 ops/s
[info] # Warmup Iteration   3: 2716453.147 ops/s
[info] # Warmup Iteration   4: 2684182.617 ops/s
[info] # Warmup Iteration   5: 2726337.533 ops/s
[info] Iteration   1: 2721809.860 ops/s
[info]                  ·gc.alloc.rate:                   1438.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 773.473 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2701255.114 ops/s
[info]                  ·gc.alloc.rate:                   1427.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 783.225 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2704317.876 ops/s
[info]                  ·gc.alloc.rate:                   1429.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 785.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2714137.110 ops/s
[info]                  ·gc.alloc.rate:                   1434.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 980.554 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2629887.917 ops/s
[info]                  ·gc.alloc.rate:                   1389.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 811.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson":
[info]   2694281.575 ±(99.9%) 142108.451 ops/s [Average]
[info]   (min, avg, max) = (2629887.917, 2694281.575, 2721809.860), stdev = 36905.113
[info]   CI (99.9%): [2552173.125, 2836390.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1424.124 ±(99.9%) 75.468 MB/sec [Average]
[info]   (min, avg, max) = (1389.959, 1424.124, 1438.932), stdev = 19.599
[info]   CI (99.9%): [1348.656, 1499.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.049 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.049, 0.061), stdev = 0.009
[info]   CI (99.9%): [0.015, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1415.378 ±(99.9%) 593.121 MB/sec [Average]
[info]   (min, avg, max) = (1337.711, 1415.378, 1690.667), stdev = 154.032
[info]   CI (99.9%): [822.258, 2008.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   826.757 ±(99.9%) 335.472 B/op [Average]
[info]   (min, avg, max) = (773.473, 826.757, 980.554), stdev = 87.121
[info]   CI (99.9%): [491.285, 1162.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter
[info] # Run progress: 25.37% complete, ETA 00:26:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6278791.155 ops/s
[info] # Warmup Iteration   2: 6903222.332 ops/s
[info] # Warmup Iteration   3: 7101309.651 ops/s
[info] # Warmup Iteration   4: 7051385.273 ops/s
[info] # Warmup Iteration   5: 6978706.243 ops/s
[info] Iteration   1: 6750982.428 ops/s
[info]                  ·gc.alloc.rate:                   1029.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7068492.991 ops/s
[info]                  ·gc.alloc.rate:                   1077.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7034057.782 ops/s
[info]                  ·gc.alloc.rate:                   1072.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7028771.737 ops/s
[info]                  ·gc.alloc.rate:                   1071.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.506 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6915972.678 ops/s
[info]                  ·gc.alloc.rate:                   1054.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.361 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter":
[info]   6959655.523 ±(99.9%) 500624.411 ops/s [Average]
[info]   (min, avg, max) = (6750982.428, 6959655.523, 7068492.991), stdev = 130010.570
[info]   CI (99.9%): [6459031.112, 7460279.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1061.101 ±(99.9%) 76.381 MB/sec [Average]
[info]   (min, avg, max) = (1029.155, 1061.101, 1077.678), stdev = 19.836
[info]   CI (99.9%): [984.720, 1137.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.025, 0.032), stdev = 0.005
[info]   CI (99.9%): [0.005, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1065.804 ±(99.9%) 584.681 MB/sec [Average]
[info]   (min, avg, max) = (989.861, 1065.804, 1337.165), stdev = 151.840
[info]   CI (99.9%): [481.123, 1650.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   240.972 ±(99.9%) 126.872 B/op [Average]
[info]   (min, avg, max) = (221.584, 240.972, 299.506), stdev = 32.948
[info]   CI (99.9%): [114.099, 367.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay
[info] # Run progress: 26.12% complete, ETA 00:25:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261058.054 ops/s
[info] # Warmup Iteration   2: 711215.936 ops/s
[info] # Warmup Iteration   3: 716173.529 ops/s
[info] # Warmup Iteration   4: 719758.642 ops/s
[info] # Warmup Iteration   5: 718145.536 ops/s
[info] Iteration   1: 713260.407 ops/s
[info]                  ·gc.alloc.rate:                   2066.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4463.846 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 718466.740 ops/s
[info]                  ·gc.alloc.rate:                   2080.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4448.893 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 711240.743 ops/s
[info]                  ·gc.alloc.rate:                   2060.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4506.248 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 714755.378 ops/s
[info]                  ·gc.alloc.rate:                   2070.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4488.447 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 713227.111 ops/s
[info]                  ·gc.alloc.rate:                   2066.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2040.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4502.433 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay":
[info]   714190.076 ±(99.9%) 10385.960 ops/s [Average]
[info]   (min, avg, max) = (711240.743, 714190.076, 718466.740), stdev = 2697.201
[info]   CI (99.9%): [703804.116, 724576.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate":
[info]   2068.852 ±(99.9%) 29.662 MB/sec [Average]
[info]   (min, avg, max) = (2060.269, 2068.852, 2080.994), stdev = 7.703
[info]   CI (99.9%): [2039.190, 2098.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.016, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.266 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (0.184, 0.266, 0.322), stdev = 0.059
[info]   CI (99.9%): [0.037, 0.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2033.425 ±(99.9%) 27.578 MB/sec [Average]
[info]   (min, avg, max) = (2022.486, 2033.425, 2040.367), stdev = 7.162
[info]   CI (99.9%): [2005.847, 2061.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   4481.973 ±(99.9%) 95.738 B/op [Average]
[info]   (min, avg, max) = (4448.893, 4481.973, 4506.248), stdev = 24.863
[info]   CI (99.9%): [4386.235, 4577.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 26.87% complete, ETA 00:25:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 475047.103 ops/s
[info] # Warmup Iteration   2: 809004.902 ops/s
[info] # Warmup Iteration   3: 829458.761 ops/s
[info] # Warmup Iteration   4: 833189.507 ops/s
[info] # Warmup Iteration   5: 832324.143 ops/s
[info] Iteration   1: 830248.840 ops/s
[info]                  ·gc.alloc.rate:                   2692.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              5104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5129.098 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 831358.962 ops/s
[info]                  ·gc.alloc.rate:                   2695.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              5104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5139.967 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 822558.000 ops/s
[info]                  ·gc.alloc.rate:                   2667.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              5104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5202.630 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 806265.470 ops/s
[info]                  ·gc.alloc.rate:                   2613.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              5104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5315.724 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 825411.207 ops/s
[info]                  ·gc.alloc.rate:                   2676.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              5104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4543.133 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   823168.496 ±(99.9%) 38905.310 ops/s [Average]
[info]   (min, avg, max) = (806265.470, 823168.496, 831358.962), stdev = 10103.586
[info]   CI (99.9%): [784263.185, 862073.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2669.074 ±(99.9%) 127.184 MB/sec [Average]
[info]   (min, avg, max) = (2613.813, 2669.074, 2695.694), stdev = 33.029
[info]   CI (99.9%): [2541.890, 2796.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5104.000, 5104.001, 5104.001), stdev = 0.001
[info]   CI (99.9%): [5104.000, 5104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.154 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.154, 0.187), stdev = 0.035
[info]   CI (99.9%): [0.020, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.295 ±(99.9%) 0.262 B/op [Average]
[info]   (min, avg, max) = (0.198, 0.295, 0.366), stdev = 0.068
[info]   CI (99.9%): [0.033, 0.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2648.701 ±(99.9%) 574.536 MB/sec [Average]
[info]   (min, avg, max) = (2382.023, 2648.701, 2722.239), stdev = 149.205
[info]   CI (99.9%): [2074.165, 3223.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5066.111 ±(99.9%) 1161.389 B/op [Average]
[info]   (min, avg, max) = (4543.133, 5066.111, 5315.724), stdev = 301.609
[info]   CI (99.9%): [3904.722, 6227.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson
[info] # Run progress: 27.61% complete, ETA 00:25:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313463.843 ops/s
[info] # Warmup Iteration   2: 982365.720 ops/s
[info] # Warmup Iteration   3: 985556.713 ops/s
[info] # Warmup Iteration   4: 967485.786 ops/s
[info] # Warmup Iteration   5: 986027.721 ops/s
[info] Iteration   1: 987015.417 ops/s
[info]                  ·gc.alloc.rate:                   1223.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1591.635 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 986641.966 ops/s
[info]                  ·gc.alloc.rate:                   1223.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2133.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 983534.008 ops/s
[info]                  ·gc.alloc.rate:                   1219.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2151.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 983480.735 ops/s
[info]                  ·gc.alloc.rate:                   1219.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1617.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 980913.595 ops/s
[info]                  ·gc.alloc.rate:                   1216.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2169.715 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson":
[info]   984317.144 ±(99.9%) 9738.114 ops/s [Average]
[info]   (min, avg, max) = (980913.595, 984317.144, 987015.417), stdev = 2528.957
[info]   CI (99.9%): [974579.030, 994055.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate":
[info]   1220.573 ±(99.9%) 12.398 MB/sec [Average]
[info]   (min, avg, max) = (1216.234, 1220.573, 1223.916), stdev = 3.220
[info]   CI (99.9%): [1208.175, 1232.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.113 ±(99.9%) 0.250 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.113, 0.199), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1208.377 ±(99.9%) 717.875 MB/sec [Average]
[info]   (min, avg, max) = (997.965, 1208.377, 1351.885), stdev = 186.430
[info]   CI (99.9%): [490.502, 1926.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1932.733 ±(99.9%) 1154.928 B/op [Average]
[info]   (min, avg, max) = (1591.635, 1932.733, 2169.715), stdev = 299.931
[info]   CI (99.9%): [777.805, 3087.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter
[info] # Run progress: 28.36% complete, ETA 00:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7299971.440 ops/s
[info] # Warmup Iteration   2: 7834199.360 ops/s
[info] # Warmup Iteration   3: 7936766.185 ops/s
[info] # Warmup Iteration   4: 8042748.908 ops/s
[info] # Warmup Iteration   5: 8269547.540 ops/s
[info] Iteration   1: 8230444.475 ops/s
[info]                  ·gc.alloc.rate:                   376.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8308879.771 ops/s
[info]                  ·gc.alloc.rate:                   380.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.712 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8307524.525 ops/s
[info]                  ·gc.alloc.rate:                   379.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.720 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8257171.590 ops/s
[info]                  ·gc.alloc.rate:                   377.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8138092.819 ops/s
[info]                  ·gc.alloc.rate:                   372.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter":
[info]   8248422.636 ±(99.9%) 270372.555 ops/s [Average]
[info]   (min, avg, max) = (8138092.819, 8248422.636, 8308879.771), stdev = 70214.894
[info]   CI (99.9%): [7978050.081, 8518795.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   377.259 ±(99.9%) 12.259 MB/sec [Average]
[info]   (min, avg, max) = (372.266, 377.259, 380.046), stdev = 3.184
[info]   CI (99.9%): [365.000, 389.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.640 ±(99.9%) 5.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.640, 3.116), stdev = 1.384
[info]   CI (99.9%): [≈ 0, 5.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.122 ±(99.9%) 1.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.596), stdev = 0.265
[info]   CI (99.9%): [≈ 0, 1.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   397.448 ±(99.9%) 574.999 MB/sec [Average]
[info]   (min, avg, max) = (330.334, 397.448, 664.569), stdev = 149.325
[info]   CI (99.9%): [≈ 0, 972.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   75.885 ±(99.9%) 110.295 B/op [Average]
[info]   (min, avg, max) = (62.712, 75.885, 127.116), stdev = 28.643
[info]   CI (99.9%): [≈ 0, 186.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay
[info] # Run progress: 29.10% complete, ETA 00:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33940.859 ops/s
[info] # Warmup Iteration   2: 303501.690 ops/s
[info] # Warmup Iteration   3: 309624.511 ops/s
[info] # Warmup Iteration   4: 312355.323 ops/s
[info] # Warmup Iteration   5: 313390.149 ops/s
[info] Iteration   1: 313360.163 ops/s
[info]                  ·gc.alloc.rate:                   1630.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8407.987 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 295969.745 ops/s
[info]                  ·gc.alloc.rate:                   1540.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7155.363 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 313290.673 ops/s
[info]                  ·gc.alloc.rate:                   1630.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8483.408 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 311748.307 ops/s
[info]                  ·gc.alloc.rate:                   1622.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8548.686 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 312468.229 ops/s
[info]                  ·gc.alloc.rate:                   1625.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8542.138 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay":
[info]   309367.423 ±(99.9%) 28951.315 ops/s [Average]
[info]   (min, avg, max) = (295969.745, 309367.423, 313360.163), stdev = 7518.565
[info]   CI (99.9%): [280416.108, 338318.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate":
[info]   1609.981 ±(99.9%) 150.664 MB/sec [Average]
[info]   (min, avg, max) = (1540.274, 1609.981, 1630.693), stdev = 39.127
[info]   CI (99.9%): [1459.317, 1760.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8192.001, 8192.001, 8192.001), stdev = 0.001
[info]   CI (99.9%): [8192.001, 8192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.530 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (0.420, 0.530, 0.627), stdev = 0.074
[info]   CI (99.9%): [0.243, 0.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1619.225 ±(99.9%) 590.404 MB/sec [Average]
[info]   (min, avg, max) = (1345.363, 1619.225, 1695.446), stdev = 153.326
[info]   CI (99.9%): [1028.821, 2209.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8227.516 ±(99.9%) 2318.154 B/op [Average]
[info]   (min, avg, max) = (7155.363, 8227.516, 8548.686), stdev = 602.017
[info]   CI (99.9%): [5909.363, 10545.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce
[info] # Run progress: 29.85% complete, ETA 00:24:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5880.160 ops/s
[info] # Warmup Iteration   2: 7412.957 ops/s
[info] # Warmup Iteration   3: 7478.496 ops/s
[info] # Warmup Iteration   4: 7449.617 ops/s
[info] # Warmup Iteration   5: 7417.565 ops/s
[info] Iteration   1: 7475.761 ops/s
[info]                  ·gc.alloc.rate:                   1414.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              297936.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279498.725 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7422.807 ops/s
[info]                  ·gc.alloc.rate:                   1404.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              297936.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 283150.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7391.458 ops/s
[info]                  ·gc.alloc.rate:                   1399.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              297936.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 285652.924 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7441.394 ops/s
[info]                  ·gc.alloc.rate:                   1408.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              297944.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284861.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7434.247 ops/s
[info]                  ·gc.alloc.rate:                   1407.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              297952.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 357610.104 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce":
[info]   7433.133 ±(99.9%) 117.587 ops/s [Average]
[info]   (min, avg, max) = (7391.458, 7433.133, 7475.761), stdev = 30.537
[info]   CI (99.9%): [7315.546, 7550.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1406.960 ±(99.9%) 21.477 MB/sec [Average]
[info]   (min, avg, max) = (1399.380, 1406.960, 1414.764), stdev = 5.577
[info]   CI (99.9%): [1385.484, 1428.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   297940.968 ±(99.9%) 27.807 B/op [Average]
[info]   (min, avg, max) = (297936.055, 297940.968, 297952.055), stdev = 7.221
[info]   CI (99.9%): [297913.161, 297968.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13.209 ±(99.9%) 44.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.209, 30.678), stdev = 11.604
[info]   CI (99.9%): [≈ 0, 57.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1407.952 ±(99.9%) 605.680 MB/sec [Average]
[info]   (min, avg, max) = (1327.214, 1407.952, 1689.027), stdev = 157.293
[info]   CI (99.9%): [802.271, 2013.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   298154.722 ±(99.9%) 128306.823 B/op [Average]
[info]   (min, avg, max) = (279498.725, 298154.722, 357610.104), stdev = 33320.875
[info]   CI (99.9%): [169847.899, 426461.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson
[info] # Run progress: 30.60% complete, ETA 00:24:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13481.176 ops/s
[info] # Warmup Iteration   2: 18967.086 ops/s
[info] # Warmup Iteration   3: 19585.967 ops/s
[info] # Warmup Iteration   4: 19054.080 ops/s
[info] # Warmup Iteration   5: 19326.630 ops/s
[info] Iteration   1: 19556.351 ops/s
[info]                  ·gc.alloc.rate:                   850.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              68471.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52477.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19475.146 ops/s
[info]                  ·gc.alloc.rate:                   846.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              68441.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79639.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19680.738 ops/s
[info]                  ·gc.alloc.rate:                   855.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52782.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19562.700 ops/s
[info]                  ·gc.alloc.rate:                   850.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80026.995 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19429.112 ops/s
[info]                  ·gc.alloc.rate:                   844.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53944.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson":
[info]   19540.810 ±(99.9%) 370.788 ops/s [Average]
[info]   (min, avg, max) = (19429.112, 19540.810, 19680.738), stdev = 96.292
[info]   CI (99.9%): [19170.022, 19911.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   849.563 ±(99.9%) 15.868 MB/sec [Average]
[info]   (min, avg, max) = (844.707, 849.563, 855.431), stdev = 4.121
[info]   CI (99.9%): [833.695, 865.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   68446.620 ±(99.9%) 53.246 B/op [Average]
[info]   (min, avg, max) = (68440.021, 68446.620, 68471.321), stdev = 13.828
[info]   CI (99.9%): [68393.374, 68499.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   5.357 ±(99.9%) 11.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.357, 6.729), stdev = 2.995
[info]   CI (99.9%): [≈ 0, 16.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   791.419 ±(99.9%) 698.077 MB/sec [Average]
[info]   (min, avg, max) = (651.755, 791.419, 994.579), stdev = 181.288
[info]   CI (99.9%): [93.342, 1489.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   63774.140 ±(99.9%) 56491.010 B/op [Average]
[info]   (min, avg, max) = (52477.042, 63774.140, 80026.995), stdev = 14670.536
[info]   CI (99.9%): [7283.130, 120265.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter
[info] # Run progress: 31.34% complete, ETA 00:24:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35813.042 ops/s
[info] # Warmup Iteration   2: 36939.426 ops/s
[info] # Warmup Iteration   3: 36031.140 ops/s
[info] # Warmup Iteration   4: 37053.361 ops/s
[info] # Warmup Iteration   5: 37136.407 ops/s
[info] Iteration   1: 37174.403 ops/s
[info]                  ·gc.alloc.rate:      97.484 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37110.833 ops/s
[info]                  ·gc.alloc.rate:      97.318 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37074.788 ops/s
[info]                  ·gc.alloc.rate:                   97.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10858.454 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 36979.128 ops/s
[info]                  ·gc.alloc.rate:      96.952 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37106.229 ops/s
[info]                  ·gc.alloc.rate:      97.297 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter":
[info]   37089.076 ±(99.9%) 274.593 ops/s [Average]
[info]   (min, avg, max) = (36979.128, 37089.076, 37174.403), stdev = 71.311
[info]   CI (99.9%): [36814.483, 37363.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   97.253 ±(99.9%) 0.749 MB/sec [Average]
[info]   (min, avg, max) = (96.952, 97.253, 97.484), stdev = 0.194
[info]   CI (99.9%): [96.504, 98.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   4128.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (4128.011, 4128.011, 4128.012), stdev = 0.001
[info]   CI (99.9%): [4128.010, 4128.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   51.144 ±(99.9%) 440.362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 51.144, 255.718), stdev = 114.361
[info]   CI (99.9%): [≈ 0, 491.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   2171.691 ±(99.9%) 18698.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2171.691, 10858.454), stdev = 4856.048
[info]   CI (99.9%): [≈ 0, 20870.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay
[info] # Run progress: 32.09% complete, ETA 00:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3419.119 ops/s
[info] # Warmup Iteration   2: 6390.010 ops/s
[info] # Warmup Iteration   3: 6515.179 ops/s
[info] # Warmup Iteration   4: 6558.919 ops/s
[info] # Warmup Iteration   5: 6577.721 ops/s
[info] Iteration   1: 6584.442 ops/s
[info]                  ·gc.alloc.rate:                   1521.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319619.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6575.062 ops/s
[info]                  ·gc.alloc.rate:                   1519.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 402304.934 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6541.234 ops/s
[info]                  ·gc.alloc.rate:                   1511.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324635.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6545.952 ops/s
[info]                  ·gc.alloc.rate:                   1512.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406667.494 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6544.920 ops/s
[info]                  ·gc.alloc.rate:                   1512.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              363716.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326008.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay":
[info]   6558.322 ±(99.9%) 76.702 ops/s [Average]
[info]   (min, avg, max) = (6541.234, 6558.322, 6584.442), stdev = 19.919
[info]   CI (99.9%): [6481.620, 6635.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   1515.357 ±(99.9%) 17.846 MB/sec [Average]
[info]   (min, avg, max) = (1511.401, 1515.357, 1521.077), stdev = 4.634
[info]   CI (99.9%): [1497.512, 1533.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   363712.869 ±(99.9%) 6.934 B/op [Average]
[info]   (min, avg, max) = (363712.062, 363712.869, 363716.090), stdev = 1.801
[info]   CI (99.9%): [363705.935, 363719.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   14.972 ±(99.9%) 44.967 B/op [Average]
[info]   (min, avg, max) = (5.007, 14.972, 34.881), stdev = 11.678
[info]   CI (99.9%): [≈ 0, 59.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1482.624 ±(99.9%) 715.618 MB/sec [Average]
[info]   (min, avg, max) = (1336.679, 1482.624, 1691.118), stdev = 185.844
[info]   CI (99.9%): [767.007, 2198.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   355847.227 ±(99.9%) 171320.890 B/op [Average]
[info]   (min, avg, max) = (319619.848, 355847.227, 406667.494), stdev = 44491.491
[info]   CI (99.9%): [184526.337, 527168.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce
[info] # Run progress: 32.84% complete, ETA 00:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14102.937 ops/s
[info] # Warmup Iteration   2: 17245.101 ops/s
[info] # Warmup Iteration   3: 17238.535 ops/s
[info] # Warmup Iteration   4: 17757.578 ops/s
[info] # Warmup Iteration   5: 18902.050 ops/s
[info] Iteration   1: 18494.779 ops/s
[info]                  ·gc.alloc.rate:                   480.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              40872.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27773.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 17724.765 ops/s
[info]                  ·gc.alloc.rate:                   522.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              46367.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57843.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17389.738 ops/s
[info]                  ·gc.alloc.rate:                   541.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29540.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 17377.719 ops/s
[info]                  ·gc.alloc.rate:                   541.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59175.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17396.731 ops/s
[info]                  ·gc.alloc.rate:                   541.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59261.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce":
[info]   17676.746 ±(99.9%) 1848.392 ops/s [Average]
[info]   (min, avg, max) = (17377.719, 17676.746, 18494.779), stdev = 480.022
[info]   CI (99.9%): [15828.354, 19525.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   525.485 ±(99.9%) 102.919 MB/sec [Average]
[info]   (min, avg, max) = (480.168, 525.485, 541.950), stdev = 26.728
[info]   CI (99.9%): [422.566, 628.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   46871.904 ±(99.9%) 13662.360 B/op [Average]
[info]   (min, avg, max) = (40872.028, 46871.904, 49040.023), stdev = 3548.071
[info]   CI (99.9%): [33209.545, 60534.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.725 ±(99.9%) 18.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.725, 11.310), stdev = 4.807
[info]   CI (99.9%): [≈ 0, 22.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   522.431 ±(99.9%) 689.296 MB/sec [Average]
[info]   (min, avg, max) = (326.281, 522.431, 654.913), stdev = 179.008
[info]   CI (99.9%): [≈ 0, 1211.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46718.997 ±(99.9%) 63573.213 B/op [Average]
[info]   (min, avg, max) = (27773.094, 46718.997, 59261.837), stdev = 16509.761
[info]   CI (99.9%): [≈ 0, 110292.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson
[info] # Run progress: 33.58% complete, ETA 00:23:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14593.331 ops/s
[info] # Warmup Iteration   2: 20070.076 ops/s
[info] # Warmup Iteration   3: 20179.793 ops/s
[info] # Warmup Iteration   4: 20207.450 ops/s
[info] # Warmup Iteration   5: 20240.198 ops/s
[info] Iteration   1: 20184.705 ops/s
[info]                  ·gc.alloc.rate:                   331.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25214.643 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20400.119 ops/s
[info]                  ·gc.alloc.rate:                   335.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              25871.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24950.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20340.088 ops/s
[info]                  ·gc.alloc.rate:                   334.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24945.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20333.313 ops/s
[info]                  ·gc.alloc.rate:                   334.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24952.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19682.075 ops/s
[info]                  ·gc.alloc.rate:                   323.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25778.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson":
[info]   20188.060 ±(99.9%) 1131.218 ops/s [Average]
[info]   (min, avg, max) = (19682.075, 20188.060, 20400.119), stdev = 293.774
[info]   CI (99.9%): [19056.842, 21319.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   331.781 ±(99.9%) 18.570 MB/sec [Average]
[info]   (min, avg, max) = (323.485, 331.781, 335.302), stdev = 4.823
[info]   CI (99.9%): [313.211, 350.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   25872.022 ±(99.9%) 0.263 B/op [Average]
[info]   (min, avg, max) = (25871.924, 25872.022, 25872.116), stdev = 0.068
[info]   CI (99.9%): [25871.759, 25872.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.933), stdev = 1.750
[info]   CI (99.9%): [≈ 0, 7.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   62.667 ±(99.9%) 525.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 62.667, 306.731), stdev = 136.451
[info]   CI (99.9%): [≈ 0, 588.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   322.703 ±(99.9%) 2.147 MB/sec [Average]
[info]   (min, avg, max) = (322.268, 322.703, 323.356), stdev = 0.558
[info]   CI (99.9%): [320.556, 324.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   25168.328 ±(99.9%) 1386.952 B/op [Average]
[info]   (min, avg, max) = (24945.234, 25168.328, 25778.980), stdev = 360.187
[info]   CI (99.9%): [23781.376, 26555.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter
[info] # Run progress: 34.33% complete, ETA 00:23:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20533.199 ops/s
[info] # Warmup Iteration   2: 22675.665 ops/s
[info] # Warmup Iteration   3: 22975.358 ops/s
[info] # Warmup Iteration   4: 22137.960 ops/s
[info] # Warmup Iteration   5: 22448.766 ops/s
[info] Iteration   1: 22941.416 ops/s
[info]                  ·gc.alloc.rate:                   295.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17547.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22961.371 ops/s
[info]                  ·gc.alloc.rate:                   295.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22623.418 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22916.010 ops/s
[info]                  ·gc.alloc.rate:                   295.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22666.844 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22897.876 ops/s
[info]                  ·gc.alloc.rate:                   294.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22570.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22886.649 ops/s
[info]                  ·gc.alloc.rate:                   294.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22583.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter":
[info]   22920.664 ±(99.9%) 118.461 ops/s [Average]
[info]   (min, avg, max) = (22886.649, 22920.664, 22961.371), stdev = 30.764
[info]   CI (99.9%): [22802.203, 23039.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   295.255 ±(99.9%) 1.569 MB/sec [Average]
[info]   (min, avg, max) = (294.831, 295.255, 295.797), stdev = 0.408
[info]   CI (99.9%): [293.685, 296.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   20280.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (20280.018, 20280.018, 20280.019), stdev = 0.001
[info]   CI (99.9%): [20280.016, 20280.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.666 ±(99.9%) 5.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.265), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   45.634 ±(99.9%) 383.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.634, 223.879), stdev = 99.649
[info]   CI (99.9%): [≈ 0, 429.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   314.432 ±(99.9%) 126.472 MB/sec [Average]
[info]   (min, avg, max) = (255.698, 314.432, 329.977), stdev = 32.844
[info]   CI (99.9%): [187.960, 440.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   21598.117 ±(99.9%) 8721.346 B/op [Average]
[info]   (min, avg, max) = (17547.095, 21598.117, 22666.844), stdev = 2264.906
[info]   CI (99.9%): [12876.771, 30319.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 35.07% complete, ETA 00:22:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22956.788 ops/s
[info] # Warmup Iteration   2: 23329.283 ops/s
[info] # Warmup Iteration   3: 23794.724 ops/s
[info] # Warmup Iteration   4: 23734.408 ops/s
[info] # Warmup Iteration   5: 23531.645 ops/s
[info] Iteration   1: 23916.960 ops/s
[info]                  ·gc.alloc.rate:                   225.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16830.513 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23944.924 ops/s
[info]                  ·gc.alloc.rate:                   225.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16812.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24008.273 ops/s
[info]                  ·gc.alloc.rate:      226.312 MB/sec
[info]                  ·gc.alloc.rate.norm: 14840.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 24054.264 ops/s
[info]                  ·gc.alloc.rate:                   226.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21593.841 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23850.869 ops/s
[info]                  ·gc.alloc.rate:                   224.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21779.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc":
[info]   23955.058 ±(99.9%) 304.926 ops/s [Average]
[info]   (min, avg, max) = (23850.869, 23955.058, 24054.264), stdev = 79.188
[info]   CI (99.9%): [23650.132, 24259.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   225.823 ±(99.9%) 2.928 MB/sec [Average]
[info]   (min, avg, max) = (224.842, 225.823, 226.801), stdev = 0.760
[info]   CI (99.9%): [222.895, 228.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   14840.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14840.017, 14840.017, 14840.018), stdev = 0.001
[info]   CI (99.9%): [14840.015, 14840.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.658 ±(99.9%) 5.584 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.252), stdev = 1.450
[info]   CI (99.9%): [≈ 0, 6.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   43.044 ±(99.9%) 365.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.044, 212.785), stdev = 94.890
[info]   CI (99.9%): [≈ 0, 408.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   234.281 ±(99.9%) 524.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 234.281, 330.021), stdev = 136.134
[info]   CI (99.9%): [≈ 0, 758.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   15403.340 ±(99.9%) 34455.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15403.340, 21779.402), stdev = 8947.949
[info]   CI (99.9%): [≈ 0, 49858.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 35.82% complete, ETA 00:22:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5628.599 ops/s
[info] # Warmup Iteration   2: 7696.210 ops/s
[info] # Warmup Iteration   3: 7845.829 ops/s
[info] # Warmup Iteration   4: 7949.569 ops/s
[info] # Warmup Iteration   5: 8008.910 ops/s
[info] Iteration   1: 7988.621 ops/s
[info]                  ·gc.alloc.rate:                   1922.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 395495.941 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7869.943 ops/s
[info]                  ·gc.alloc.rate:                   1893.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 404005.463 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7904.253 ops/s
[info]                  ·gc.alloc.rate:                   1902.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336440.788 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7883.925 ops/s
[info]                  ·gc.alloc.rate:                   1897.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              378829.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 405947.569 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 7950.322 ops/s
[info]                  ·gc.alloc.rate:                   1913.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              378832.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403318.746 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7919.413 ±(99.9%) 189.442 ops/s [Average]
[info]   (min, avg, max) = (7869.943, 7919.413, 7988.621), stdev = 49.198
[info]   CI (99.9%): [7729.971, 8108.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1905.867 ±(99.9%) 46.093 MB/sec [Average]
[info]   (min, avg, max) = (1893.836, 1905.867, 1922.731), stdev = 11.970
[info]   CI (99.9%): [1859.774, 1951.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378807.521 ±(99.9%) 81.637 B/op [Average]
[info]   (min, avg, max) = (378792.051, 378807.521, 378832.051), stdev = 21.201
[info]   CI (99.9%): [378725.884, 378889.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.307 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.137, 0.266), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27.073 ±(99.9%) 60.207 B/op [Average]
[info]   (min, avg, max) = (12.433, 27.073, 52.476), stdev = 15.635
[info]   CI (99.9%): [≈ 0, 87.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1957.404 ±(99.9%) 578.662 MB/sec [Average]
[info]   (min, avg, max) = (1689.388, 1957.404, 2037.065), stdev = 150.277
[info]   CI (99.9%): [1378.741, 2536.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   389041.701 ±(99.9%) 114262.138 B/op [Average]
[info]   (min, avg, max) = (336440.788, 389041.701, 405947.569), stdev = 29673.514
[info]   CI (99.9%): [274779.564, 503303.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson
[info] # Run progress: 36.57% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7520.638 ops/s
[info] # Warmup Iteration   2: 14244.097 ops/s
[info] # Warmup Iteration   3: 14172.378 ops/s
[info] # Warmup Iteration   4: 14614.839 ops/s
[info] # Warmup Iteration   5: 14635.184 ops/s
[info] Iteration   1: 14639.877 ops/s
[info]                  ·gc.alloc.rate:                   371.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34658.935 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 14602.430 ops/s
[info]                  ·gc.alloc.rate:                   370.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34998.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14484.340 ops/s
[info]                  ·gc.alloc.rate:                   367.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35278.178 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14378.279 ops/s
[info]                  ·gc.alloc.rate:                   364.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35688.913 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14541.799 ops/s
[info]                  ·gc.alloc.rate:                   368.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35286.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson":
[info]   14529.345 ±(99.9%) 397.196 ops/s [Average]
[info]   (min, avg, max) = (14378.279, 14529.345, 14639.877), stdev = 103.151
[info]   CI (99.9%): [14132.149, 14926.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   368.185 ±(99.9%) 10.095 MB/sec [Average]
[info]   (min, avg, max) = (364.388, 368.185, 371.074), stdev = 2.622
[info]   CI (99.9%): [358.089, 378.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   39888.030 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (39888.028, 39888.030, 39888.038), stdev = 0.004
[info]   CI (99.9%): [39888.014, 39888.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.908 ±(99.9%) 4.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 2.278), stdev = 1.243
[info]   CI (99.9%): [≈ 0, 5.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   324.728 ±(99.9%) 5.586 MB/sec [Average]
[info]   (min, avg, max) = (322.428, 324.728, 326.028), stdev = 1.451
[info]   CI (99.9%): [319.142, 330.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   35182.113 ±(99.9%) 1472.074 B/op [Average]
[info]   (min, avg, max) = (34658.935, 35182.113, 35688.913), stdev = 382.293
[info]   CI (99.9%): [33710.038, 36654.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter
[info] # Run progress: 37.31% complete, ETA 00:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19529.945 ops/s
[info] # Warmup Iteration   2: 23592.541 ops/s
[info] # Warmup Iteration   3: 23630.388 ops/s
[info] # Warmup Iteration   4: 23576.736 ops/s
[info] # Warmup Iteration   5: 23685.258 ops/s
[info] Iteration   1: 23412.359 ops/s
[info]                  ·gc.alloc.rate:                   399.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22164.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 23754.766 ops/s
[info]                  ·gc.alloc.rate:                   405.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21757.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 23438.151 ops/s
[info]                  ·gc.alloc.rate:                   400.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44057.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22730.617 ops/s
[info]                  ·gc.alloc.rate:                   388.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22689.862 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 23149.364 ops/s
[info]                  ·gc.alloc.rate:                   395.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22278.334 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter":
[info]   23297.051 ±(99.9%) 1473.050 ops/s [Average]
[info]   (min, avg, max) = (22730.617, 23297.051, 23754.766), stdev = 382.546
[info]   CI (99.9%): [21824.001, 24770.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   398.054 ±(99.9%) 25.273 MB/sec [Average]
[info]   (min, avg, max) = (388.336, 398.054, 405.883), stdev = 6.563
[info]   CI (99.9%): [372.781, 423.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   26896.018 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26896.017, 26896.018, 26896.018), stdev = 0.001
[info]   CI (99.9%): [26896.016, 26896.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.839 ±(99.9%) 7.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.839, 4.193), stdev = 1.875
[info]   CI (99.9%): [≈ 0, 8.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   393.868 ±(99.9%) 564.662 MB/sec [Average]
[info]   (min, avg, max) = (327.599, 393.868, 656.183), stdev = 146.641
[info]   CI (99.9%): [≈ 0, 958.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   26589.673 ±(99.9%) 37623.210 B/op [Average]
[info]   (min, avg, max) = (21757.985, 26589.673, 44057.815), stdev = 9770.628
[info]   CI (99.9%): [≈ 0, 64212.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay
[info] # Run progress: 38.06% complete, ETA 00:21:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 938.380 ops/s
[info] # Warmup Iteration   2: 2548.326 ops/s
[info] # Warmup Iteration   3: 2556.518 ops/s
[info] # Warmup Iteration   4: 2542.886 ops/s
[info] # Warmup Iteration   5: 2577.903 ops/s
[info] Iteration   1: 2556.391 ops/s
[info]                  ·gc.alloc.rate:                   1596.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1030532.455 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2588.466 ops/s
[info]                  ·gc.alloc.rate:                   1616.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1023262.752 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2556.905 ops/s
[info]                  ·gc.alloc.rate:                   1597.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 831523.228 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2586.359 ops/s
[info]                  ·gc.alloc.rate:                   1615.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1029938.250 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2571.729 ops/s
[info]                  ·gc.alloc.rate:                   1606.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1037572.676 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay":
[info]   2571.970 ±(99.9%) 59.307 ops/s [Average]
[info]   (min, avg, max) = (2556.391, 2571.970, 2588.466), stdev = 15.402
[info]   CI (99.9%): [2512.663, 2631.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1606.229 ±(99.9%) 36.508 MB/sec [Average]
[info]   (min, avg, max) = (1596.343, 1606.229, 1616.217), stdev = 9.481
[info]   CI (99.9%): [1569.720, 1642.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   982976.164 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (982976.158, 982976.164, 982976.171), stdev = 0.006
[info]   CI (99.9%): [982976.139, 982976.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   7.625 ±(99.9%) 43.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.625, 25.313), stdev = 11.338
[info]   CI (99.9%): [≈ 0, 51.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1618.977 ±(99.9%) 577.416 MB/sec [Average]
[info]   (min, avg, max) = (1351.171, 1618.977, 1695.240), stdev = 149.953
[info]   CI (99.9%): [1041.561, 2196.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   990565.872 ±(99.9%) 342906.276 B/op [Average]
[info]   (min, avg, max) = (831523.228, 990565.872, 1037572.676), stdev = 89051.671
[info]   CI (99.9%): [647659.597, 1333472.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 38.81% complete, ETA 00:21:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5688.392 ops/s
[info] # Warmup Iteration   2: 7646.684 ops/s
[info] # Warmup Iteration   3: 7739.329 ops/s
[info] # Warmup Iteration   4: 7745.462 ops/s
[info] # Warmup Iteration   5: 7649.427 ops/s
[info] Iteration   1: 7751.387 ops/s
[info]                  ·gc.alloc.rate:                   1667.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338143.447 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7672.655 ops/s
[info]                  ·gc.alloc.rate:                   1649.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 344059.730 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7744.464 ops/s
[info]                  ·gc.alloc.rate:                   1665.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 342350.723 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7744.814 ops/s
[info]                  ·gc.alloc.rate:                   1665.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              338586.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343524.705 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7685.340 ops/s
[info]                  ·gc.alloc.rate:                   1653.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              338592.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347024.502 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7719.732 ±(99.9%) 144.615 ops/s [Average]
[info]   (min, avg, max) = (7672.655, 7719.732, 7751.387), stdev = 37.556
[info]   CI (99.9%): [7575.117, 7864.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1660.393 ±(99.9%) 31.123 MB/sec [Average]
[info]   (min, avg, max) = (1649.929, 1660.393, 1667.226), stdev = 8.083
[info]   CI (99.9%): [1629.270, 1691.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338576.543 ±(99.9%) 45.395 B/op [Average]
[info]   (min, avg, max) = (338568.053, 338576.543, 338592.053), stdev = 11.789
[info]   CI (99.9%): [338531.149, 338621.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15.278 ±(99.9%) 18.590 B/op [Average]
[info]   (min, avg, max) = (8.452, 15.278, 21.152), stdev = 4.828
[info]   CI (99.9%): [≈ 0, 33.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1682.144 ±(99.9%) 44.871 MB/sec [Average]
[info]   (min, avg, max) = (1665.135, 1682.144, 1694.591), stdev = 11.653
[info]   CI (99.9%): [1637.273, 1727.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   343020.621 ±(99.9%) 12418.028 B/op [Average]
[info]   (min, avg, max) = (338143.447, 343020.621, 347024.502), stdev = 3224.922
[info]   CI (99.9%): [330602.594, 355438.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson
[info] # Run progress: 39.55% complete, ETA 00:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 23674.709 ops/s
[info] # Warmup Iteration   2: 40921.742 ops/s
[info] # Warmup Iteration   3: 40342.902 ops/s
[info] # Warmup Iteration   4: 37844.864 ops/s
[info] # Warmup Iteration   5: 41172.305 ops/s
[info] Iteration   1: 40781.716 ops/s
[info]                  ·gc.alloc.rate:                   590.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25165.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41004.047 ops/s
[info]                  ·gc.alloc.rate:                   594.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25132.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41203.033 ops/s
[info]                  ·gc.alloc.rate:                   596.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12556.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41258.658 ops/s
[info]                  ·gc.alloc.rate:                   597.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              22808.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25129.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 40859.944 ops/s
[info]                  ·gc.alloc.rate:                   591.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25476.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson":
[info]   41021.480 ±(99.9%) 801.034 ops/s [Average]
[info]   (min, avg, max) = (40781.716, 41021.480, 41258.658), stdev = 208.026
[info]   CI (99.9%): [40220.445, 41822.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   594.317 ±(99.9%) 11.691 MB/sec [Average]
[info]   (min, avg, max) = (590.821, 594.317, 597.766), stdev = 3.036
[info]   CI (99.9%): [582.627, 606.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   22807.837 ±(99.9%) 0.529 B/op [Average]
[info]   (min, avg, max) = (22807.691, 22807.837, 22808.033), stdev = 0.137
[info]   CI (99.9%): [22807.309, 22808.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   2.238 ±(99.9%) 5.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.238, 3.995), stdev = 1.429
[info]   CI (99.9%): [≈ 0, 7.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   590.996 ±(99.9%) 564.882 MB/sec [Average]
[info]   (min, avg, max) = (328.654, 590.996, 661.238), stdev = 146.698
[info]   CI (99.9%): [26.114, 1155.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   22692.031 ±(99.9%) 21825.662 B/op [Average]
[info]   (min, avg, max) = (12556.044, 22692.031, 25476.779), stdev = 5668.055
[info]   CI (99.9%): [866.369, 44517.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter
[info] # Run progress: 40.30% complete, ETA 00:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56014.794 ops/s
[info] # Warmup Iteration   2: 62583.268 ops/s
[info] # Warmup Iteration   3: 59837.473 ops/s
[info] # Warmup Iteration   4: 63594.048 ops/s
[info] # Warmup Iteration   5: 63964.370 ops/s
[info] Iteration   1: 64183.622 ops/s
[info]                  ·gc.alloc.rate:                   484.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16073.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 64121.120 ops/s
[info]                  ·gc.alloc.rate:                   484.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8044.713 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 62900.154 ops/s
[info]                  ·gc.alloc.rate:                   475.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8199.812 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 63992.171 ops/s
[info]                  ·gc.alloc.rate:                   483.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16120.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 63926.322 ops/s
[info]                  ·gc.alloc.rate:                   482.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8084.512 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter":
[info]   63824.678 ±(99.9%) 2028.315 ops/s [Average]
[info]   (min, avg, max) = (62900.154, 63824.678, 64183.622), stdev = 526.747
[info]   CI (99.9%): [61796.363, 65852.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   482.020 ±(99.9%) 15.190 MB/sec [Average]
[info]   (min, avg, max) = (475.084, 482.020, 484.653), stdev = 3.945
[info]   CI (99.9%): [466.830, 497.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   11888.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.006, 11888.006, 11888.007), stdev = 0.001
[info]   CI (99.9%): [11888.006, 11888.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.616 ±(99.9%) 3.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.048), stdev = 0.841
[info]   CI (99.9%): [≈ 0, 3.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   458.864 ±(99.9%) 690.394 MB/sec [Average]
[info]   (min, avg, max) = (327.692, 458.864, 655.273), stdev = 179.293
[info]   CI (99.9%): [≈ 0, 1149.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   11304.554 ±(99.9%) 16847.203 B/op [Average]
[info]   (min, avg, max) = (8044.713, 11304.554, 16120.597), stdev = 4375.165
[info]   CI (99.9%): [≈ 0, 28151.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 41.04% complete, ETA 00:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67675.661 ops/s
[info] # Warmup Iteration   2: 74745.800 ops/s
[info] # Warmup Iteration   3: 74385.249 ops/s
[info] # Warmup Iteration   4: 74728.328 ops/s
[info] # Warmup Iteration   5: 74727.187 ops/s
[info] Iteration   1: 74668.817 ops/s
[info]                  ·gc.alloc.rate:      1.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 74619.563 ops/s
[info]                  ·gc.alloc.rate:      1.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74370.935 ops/s
[info]                  ·gc.alloc.rate:      1.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74357.085 ops/s
[info]                  ·gc.alloc.rate:      1.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74541.740 ops/s
[info]                  ·gc.alloc.rate:      1.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc":
[info]   74511.628 ±(99.9%) 547.764 ops/s [Average]
[info]   (min, avg, max) = (74357.085, 74511.628, 74668.817), stdev = 142.253
[info]   CI (99.9%): [73963.864, 75059.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1.136 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (1.134, 1.136, 1.138), stdev = 0.002
[info]   CI (99.9%): [1.128, 1.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay
[info] # Run progress: 41.79% complete, ETA 00:20:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2404.533 ops/s
[info] # Warmup Iteration   2: 5471.333 ops/s
[info] # Warmup Iteration   3: 5650.536 ops/s
[info] # Warmup Iteration   4: 5633.532 ops/s
[info] # Warmup Iteration   5: 5474.965 ops/s
[info] Iteration   1: 5570.425 ops/s
[info]                  ·gc.alloc.rate:                   1649.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473571.698 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5516.144 ops/s
[info]                  ·gc.alloc.rate:                   1633.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              466048.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480573.575 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5588.199 ops/s
[info]                  ·gc.alloc.rate:                   1654.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              466048.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476079.765 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5598.506 ops/s
[info]                  ·gc.alloc.rate:                   1657.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476353.097 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5599.386 ops/s
[info]                  ·gc.alloc.rate:                   1657.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              466048.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 381538.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay":
[info]   5574.532 ±(99.9%) 133.463 ops/s [Average]
[info]   (min, avg, max) = (5516.144, 5574.532, 5599.386), stdev = 34.660
[info]   CI (99.9%): [5441.069, 5707.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate":
[info]   1650.432 ±(99.9%) 39.623 MB/sec [Average]
[info]   (min, avg, max) = (1633.066, 1650.432, 1657.715), stdev = 10.290
[info]   CI (99.9%): [1610.810, 1690.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   466047.949 ±(99.9%) 1.495 B/op [Average]
[info]   (min, avg, max) = (466047.401, 466047.949, 466048.281), stdev = 0.388
[info]   CI (99.9%): [466046.454, 466049.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   9.457 ±(99.9%) 52.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.457, 29.697), stdev = 13.639
[info]   CI (99.9%): [≈ 0, 61.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1620.271 ±(99.9%) 567.081 MB/sec [Average]
[info]   (min, avg, max) = (1357.118, 1620.271, 1694.126), stdev = 147.269
[info]   CI (99.9%): [1053.190, 2187.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   457623.354 ±(99.9%) 164063.975 B/op [Average]
[info]   (min, avg, max) = (381538.634, 457623.354, 480573.575), stdev = 42606.893
[info]   CI (99.9%): [293559.379, 621687.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter
[info] # Run progress: 42.54% complete, ETA 00:20:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4877149.164 ops/s
[info] # Warmup Iteration   2: 5305835.788 ops/s
[info] # Warmup Iteration   3: 5463402.249 ops/s
[info] # Warmup Iteration   4: 5256383.316 ops/s
[info] # Warmup Iteration   5: 5403799.265 ops/s
[info] Iteration   1: 5466053.373 ops/s
[info]                  ·gc.alloc.rate:                   1639.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 481.323 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5450215.194 ops/s
[info]                  ·gc.alloc.rate:                   1634.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.508 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5410751.507 ops/s
[info]                  ·gc.alloc.rate:                   1622.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 490.808 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5424089.253 ops/s
[info]                  ·gc.alloc.rate:                   1626.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392.739 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5424000.074 ops/s
[info]                  ·gc.alloc.rate:                   1626.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.979 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter":
[info]   5435021.880 ±(99.9%) 86614.754 ops/s [Average]
[info]   (min, avg, max) = (5410751.507, 5435021.880, 5466053.373), stdev = 22493.576
[info]   CI (99.9%): [5348407.126, 5521636.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1629.658 ±(99.9%) 26.276 MB/sec [Average]
[info]   (min, avg, max) = (1622.294, 1629.658, 1639.049), stdev = 6.824
[info]   CI (99.9%): [1603.383, 1655.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.025, 0.042), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1617.568 ±(99.9%) 570.205 MB/sec [Average]
[info]   (min, avg, max) = (1353.130, 1617.568, 1695.274), stdev = 148.081
[info]   CI (99.9%): [1047.363, 2187.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   468.471 ±(99.9%) 163.850 B/op [Average]
[info]   (min, avg, max) = (392.739, 468.471, 491.979), stdev = 42.551
[info]   CI (99.9%): [304.622, 632.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay
[info] # Run progress: 43.28% complete, ETA 00:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125404.348 ops/s
[info] # Warmup Iteration   2: 361856.317 ops/s
[info] # Warmup Iteration   3: 370531.552 ops/s
[info] # Warmup Iteration   4: 369948.734 ops/s
[info] # Warmup Iteration   5: 371054.366 ops/s
[info] Iteration   1: 371280.073 ops/s
[info]                  ·gc.alloc.rate:                   1994.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8572.782 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 368546.995 ops/s
[info]                  ·gc.alloc.rate:                   1979.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8670.760 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 369246.620 ops/s
[info]                  ·gc.alloc.rate:                   1984.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7228.113 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 366266.883 ops/s
[info]                  ·gc.alloc.rate:                   1967.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8758.742 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 370247.057 ops/s
[info]                  ·gc.alloc.rate:                   1988.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8670.223 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay":
[info]   369117.526 ±(99.9%) 7311.355 ops/s [Average]
[info]   (min, avg, max) = (366266.883, 369117.526, 371280.073), stdev = 1898.736
[info]   CI (99.9%): [361806.171, 376428.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1982.801 ±(99.9%) 39.071 MB/sec [Average]
[info]   (min, avg, max) = (1967.540, 1982.801, 1994.249), stdev = 10.147
[info]   CI (99.9%): [1943.731, 2021.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8456.001, 8456.001, 8456.001), stdev = 0.001
[info]   CI (99.9%): [8456.001, 8456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.443 ±(99.9%) 0.412 B/op [Average]
[info]   (min, avg, max) = (0.268, 0.443, 0.531), stdev = 0.107
[info]   CI (99.9%): [0.032, 0.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1964.910 ±(99.9%) 579.666 MB/sec [Average]
[info]   (min, avg, max) = (1695.911, 1964.910, 2039.124), stdev = 150.537
[info]   CI (99.9%): [1385.244, 2544.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8380.124 ±(99.9%) 2492.698 B/op [Average]
[info]   (min, avg, max) = (7228.113, 8380.124, 8758.742), stdev = 647.346
[info]   CI (99.9%): [5887.426, 10872.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter
[info] # Run progress: 44.03% complete, ETA 00:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2914563.115 ops/s
[info] # Warmup Iteration   2: 3222439.918 ops/s
[info] # Warmup Iteration   3: 3331732.899 ops/s
[info] # Warmup Iteration   4: 3295566.606 ops/s
[info] # Warmup Iteration   5: 3325603.829 ops/s
[info] Iteration   1: 3334687.951 ops/s
[info]                  ·gc.alloc.rate:                   542.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 309.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3328810.385 ops/s
[info]                  ·gc.alloc.rate:                   541.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.950 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3312081.037 ops/s
[info]                  ·gc.alloc.rate:                   538.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3271388.151 ops/s
[info]                  ·gc.alloc.rate:                   532.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3334652.958 ops/s
[info]                  ·gc.alloc.rate:                   542.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter":
[info]   3316324.096 ±(99.9%) 103078.085 ops/s [Average]
[info]   (min, avg, max) = (3271388.151, 3316324.096, 3334687.951), stdev = 26769.051
[info]   CI (99.9%): [3213246.011, 3419402.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   539.320 ±(99.9%) 16.427 MB/sec [Average]
[info]   (min, avg, max) = (532.177, 539.320, 542.281), stdev = 4.266
[info]   CI (99.9%): [522.893, 555.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.166), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.079), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   525.259 ±(99.9%) 691.666 MB/sec [Average]
[info]   (min, avg, max) = (327.664, 525.259, 657.518), stdev = 179.623
[info]   CI (99.9%): [≈ 0, 1216.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   249.630 ±(99.9%) 332.033 B/op [Average]
[info]   (min, avg, max) = (154.950, 249.630, 316.294), stdev = 86.228
[info]   CI (99.9%): [≈ 0, 581.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay
[info] # Run progress: 44.78% complete, ETA 00:19:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85653.006 ops/s
[info] # Warmup Iteration   2: 345545.411 ops/s
[info] # Warmup Iteration   3: 354238.693 ops/s
[info] # Warmup Iteration   4: 350626.858 ops/s
[info] # Warmup Iteration   5: 349795.767 ops/s
[info] Iteration   1: 347174.720 ops/s
[info]                  ·gc.alloc.rate:                   1349.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6039.280 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 353078.914 ops/s
[info]                  ·gc.alloc.rate:                   1372.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7466.371 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 351758.061 ops/s
[info]                  ·gc.alloc.rate:                   1367.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6026.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 352806.033 ops/s
[info]                  ·gc.alloc.rate:                   1371.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6023.242 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 351046.356 ops/s
[info]                  ·gc.alloc.rate:                   1364.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6068.642 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay":
[info]   351172.817 ±(99.9%) 9161.758 ops/s [Average]
[info]   (min, avg, max) = (347174.720, 351172.817, 353078.914), stdev = 2379.279
[info]   CI (99.9%): [342011.059, 360334.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1365.097 ±(99.9%) 35.466 MB/sec [Average]
[info]   (min, avg, max) = (1349.607, 1365.097, 1372.279), stdev = 9.210
[info]   CI (99.9%): [1329.631, 1400.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6120.001, 6120.001, 6120.001), stdev = 0.001
[info]   CI (99.9%): [6120.001, 6120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.336 ±(99.9%) 0.409 B/op [Average]
[info]   (min, avg, max) = (0.186, 0.336, 0.467), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1411.091 ±(99.9%) 567.173 MB/sec [Average]
[info]   (min, avg, max) = (1331.806, 1411.091, 1674.173), stdev = 147.293
[info]   CI (99.9%): [843.917, 1978.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   6324.722 ±(99.9%) 2458.460 B/op [Average]
[info]   (min, avg, max) = (6023.242, 6324.722, 7466.371), stdev = 638.454
[info]   CI (99.9%): [3866.262, 8783.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce
[info] # Run progress: 45.52% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13631.504 ops/s
[info] # Warmup Iteration   2: 16722.550 ops/s
[info] # Warmup Iteration   3: 17108.519 ops/s
[info] # Warmup Iteration   4: 16889.709 ops/s
[info] # Warmup Iteration   5: 17036.407 ops/s
[info] Iteration   1: 17080.844 ops/s
[info]                  ·gc.alloc.rate:                   2123.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186024.809 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17028.605 ops/s
[info]                  ·gc.alloc.rate:                   2117.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              195751.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187443.579 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17035.676 ops/s
[info]                  ·gc.alloc.rate:                   2118.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2372.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219222.535 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 17003.101 ops/s
[info]                  ·gc.alloc.rate:                   2114.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188624.075 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16981.703 ops/s
[info]                  ·gc.alloc.rate:                   2111.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188907.867 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce":
[info]   17025.986 ±(99.9%) 144.012 ops/s [Average]
[info]   (min, avg, max) = (16981.703, 17025.986, 17080.844), stdev = 37.399
[info]   CI (99.9%): [16881.974, 17169.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   2117.122 ±(99.9%) 17.947 MB/sec [Average]
[info]   (min, avg, max) = (2111.480, 2117.122, 2123.752), stdev = 4.661
[info]   CI (99.9%): [2099.175, 2135.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   195751.838 ±(99.9%) 1.611 B/op [Average]
[info]   (min, avg, max) = (195751.089, 195751.838, 195752.026), stdev = 0.418
[info]   CI (99.9%): [195750.227, 195753.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.311 ±(99.9%) 9.661 B/op [Average]
[info]   (min, avg, max) = (3.853, 7.311, 9.618), stdev = 2.509
[info]   CI (99.9%): [≈ 0, 16.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2098.676 ±(99.9%) 589.964 MB/sec [Average]
[info]   (min, avg, max) = (2018.220, 2098.676, 2372.382), stdev = 153.212
[info]   CI (99.9%): [1508.712, 2688.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   194044.573 ±(99.9%) 54374.142 B/op [Average]
[info]   (min, avg, max) = (186024.809, 194044.573, 219222.535), stdev = 14120.792
[info]   CI (99.9%): [139670.431, 248418.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson
[info] # Run progress: 46.27% complete, ETA 00:18:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27612.703 ops/s
[info] # Warmup Iteration   2: 38223.369 ops/s
[info] # Warmup Iteration   3: 39153.347 ops/s
[info] # Warmup Iteration   4: 39531.996 ops/s
[info] # Warmup Iteration   5: 39206.181 ops/s
[info] Iteration   1: 39495.778 ops/s
[info]                  ·gc.alloc.rate:                   283.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10192.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 39894.225 ops/s
[info]                  ·gc.alloc.rate:                                  280.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11304.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         3.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    159.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     137.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                5565.401 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        33.000 ms
[info] Iteration   3: 39580.563 ops/s
[info]                  ·gc.alloc.rate:                   284.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12858.895 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39671.189 ops/s
[info]                  ·gc.alloc.rate:                   284.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12787.512 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39718.163 ops/s
[info]                  ·gc.alloc.rate:                   285.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12774.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson":
[info]   39671.984 ±(99.9%) 580.575 ops/s [Average]
[info]   (min, avg, max) = (39495.778, 39671.984, 39894.225), stdev = 150.773
[info]   CI (99.9%): [39091.409, 40252.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   283.616 ±(99.9%) 7.661 MB/sec [Average]
[info]   (min, avg, max) = (280.230, 283.616, 285.179), stdev = 1.989
[info]   CI (99.9%): [275.955, 291.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   11304.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11304.010, 11304.010, 11304.011), stdev = 0.001
[info]   CI (99.9%): [11304.009, 11304.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.503 ±(99.9%) 4.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.503, 2.517), stdev = 1.126
[info]   CI (99.9%): [≈ 0, 4.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.801 ±(99.9%) 6.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.801, 3.957), stdev = 1.764
[info]   CI (99.9%): [≈ 0, 7.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   32.318 ±(99.9%) 274.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.318, 159.604), stdev = 71.159
[info]   CI (99.9%): [≈ 0, 306.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   272.303 ±(99.9%) 309.960 MB/sec [Average]
[info]   (min, avg, max) = (137.968, 272.303, 323.331), stdev = 80.496
[info]   CI (99.9%): [≈ 0, 582.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   10835.794 ±(99.9%) 12154.524 B/op [Average]
[info]   (min, avg, max) = (5565.401, 10835.794, 12858.895), stdev = 3156.491
[info]   CI (99.9%): [≈ 0, 22990.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.000, 33.000), stdev = 14.036
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter
[info] # Run progress: 47.01% complete, ETA 00:18:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86737.726 ops/s
[info] # Warmup Iteration   2: 89932.595 ops/s
[info] # Warmup Iteration   3: 91247.840 ops/s
[info] # Warmup Iteration   4: 91688.694 ops/s
[info] # Warmup Iteration   5: 91898.169 ops/s
[info] Iteration   1: 91507.990 ops/s
[info]                  ·gc.alloc.rate:                   479.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11295.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 91593.126 ops/s
[info]                  ·gc.alloc.rate:                   479.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5642.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 91398.941 ops/s
[info]                  ·gc.alloc.rate:                   478.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11310.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 91147.198 ops/s
[info]                  ·gc.alloc.rate:                   477.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5669.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 91919.531 ops/s
[info]                  ·gc.alloc.rate:                   481.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5628.247 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter":
[info]   91513.357 ±(99.9%) 1086.626 ops/s [Average]
[info]   (min, avg, max) = (91147.198, 91513.357, 91919.531), stdev = 282.193
[info]   CI (99.9%): [90426.731, 92599.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   479.012 ±(99.9%) 5.698 MB/sec [Average]
[info]   (min, avg, max) = (477.106, 479.012, 481.138), stdev = 1.480
[info]   CI (99.9%): [473.314, 484.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   8240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8240.004, 8240.005, 8240.005), stdev = 0.001
[info]   CI (99.9%): [8240.004, 8240.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.644 ±(99.9%) 2.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 1.792), stdev = 0.734
[info]   CI (99.9%): [≈ 0, 3.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   459.688 ±(99.9%) 692.231 MB/sec [Average]
[info]   (min, avg, max) = (328.276, 459.688, 656.657), stdev = 179.770
[info]   CI (99.9%): [≈ 0, 1151.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   7909.117 ±(99.9%) 11928.818 B/op [Average]
[info]   (min, avg, max) = (5628.247, 7909.117, 11310.039), stdev = 3097.876
[info]   CI (99.9%): [≈ 0, 19837.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay
[info] # Run progress: 47.76% complete, ETA 00:18:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5072.437 ops/s
[info] # Warmup Iteration   2: 8449.263 ops/s
[info] # Warmup Iteration   3: 8606.606 ops/s
[info] # Warmup Iteration   4: 8612.152 ops/s
[info] # Warmup Iteration   5: 8672.421 ops/s
[info] Iteration   1: 8681.444 ops/s
[info]                  ·gc.alloc.rate:                   3068.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553871.270 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8706.694 ops/s
[info]                  ·gc.alloc.rate:                   3077.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553003.740 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8552.262 ops/s
[info]                  ·gc.alloc.rate:                   3022.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              556459.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563693.866 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 8567.518 ops/s
[info]                  ·gc.alloc.rate:                   3028.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 562707.237 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 8678.358 ops/s
[info]                  ·gc.alloc.rate:                   3074.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              557690.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555512.156 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay":
[info]   8637.255 ±(99.9%) 276.006 ops/s [Average]
[info]   (min, avg, max) = (8552.262, 8637.255, 8706.694), stdev = 71.678
[info]   CI (99.9%): [8361.249, 8913.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   3054.395 ±(99.9%) 101.955 MB/sec [Average]
[info]   (min, avg, max) = (3022.987, 3054.395, 3077.600), stdev = 26.477
[info]   CI (99.9%): [2952.440, 3156.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   556703.538 ±(99.9%) 2124.027 B/op [Average]
[info]   (min, avg, max) = (556456.047, 556703.538, 557690.273), stdev = 551.603
[info]   CI (99.9%): [554579.512, 558827.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   18.952 ±(99.9%) 17.773 B/op [Average]
[info]   (min, avg, max) = (11.491, 18.952, 22.941), stdev = 4.616
[info]   CI (99.9%): [1.179, 36.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   3059.989 ±(99.9%) 14.040 MB/sec [Average]
[info]   (min, avg, max) = (3054.211, 3059.989, 3062.520), stdev = 3.646
[info]   CI (99.9%): [3045.949, 3074.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   557757.654 ±(99.9%) 19490.776 B/op [Average]
[info]   (min, avg, max) = (553003.740, 557757.654, 563693.866), stdev = 5061.693
[info]   CI (99.9%): [538266.878, 577248.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 16.000), stdev = 3.050
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce
[info] # Run progress: 48.51% complete, ETA 00:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19513.698 ops/s
[info] # Warmup Iteration   2: 22577.145 ops/s
[info] # Warmup Iteration   3: 23552.748 ops/s
[info] # Warmup Iteration   4: 28172.168 ops/s
[info] # Warmup Iteration   5: 26431.932 ops/s
[info] Iteration   1: 24434.536 ops/s
[info]                  ·gc.alloc.rate:                   1317.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85357.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24408.873 ops/s
[info]                  ·gc.alloc.rate:                   1316.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85967.512 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 24227.968 ops/s
[info]                  ·gc.alloc.rate:                   1305.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87038.775 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24254.917 ops/s
[info]                  ·gc.alloc.rate:                   1307.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87309.296 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24172.578 ops/s
[info]                  ·gc.alloc.rate:                   1302.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1012.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65920.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce":
[info]   24299.774 ±(99.9%) 444.955 ops/s [Average]
[info]   (min, avg, max) = (24172.578, 24299.774, 24434.536), stdev = 115.553
[info]   CI (99.9%): [23854.819, 24744.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   1309.876 ±(99.9%) 24.681 MB/sec [Average]
[info]   (min, avg, max) = (1302.863, 1309.876, 1317.146), stdev = 6.410
[info]   CI (99.9%): [1285.194, 1334.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84856.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (84856.017, 84856.017, 84856.018), stdev = 0.001
[info]   CI (99.9%): [84856.015, 84856.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.129, 0.208), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.354 ±(99.9%) 17.339 B/op [Average]
[info]   (min, avg, max) = (2.711, 8.354, 13.422), stdev = 4.503
[info]   CI (99.9%): [≈ 0, 25.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1271.013 ±(99.9%) 557.992 MB/sec [Average]
[info]   (min, avg, max) = (1012.136, 1271.013, 1345.024), stdev = 144.909
[info]   CI (99.9%): [713.021, 1829.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   82318.835 ±(99.9%) 35429.183 B/op [Average]
[info]   (min, avg, max) = (65920.900, 82318.835, 87309.296), stdev = 9200.846
[info]   CI (99.9%): [46889.652, 117748.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson
[info] # Run progress: 49.25% complete, ETA 00:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73132.764 ops/s
[info] # Warmup Iteration   2: 100359.551 ops/s
[info] # Warmup Iteration   3: 100911.871 ops/s
[info] # Warmup Iteration   4: 101629.860 ops/s
[info] # Warmup Iteration   5: 101484.315 ops/s
[info] Iteration   1: 101946.918 ops/s
[info]                  ·gc.alloc.rate:                   821.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9989.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 101553.219 ops/s
[info]                  ·gc.alloc.rate:                   818.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15107.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 101404.072 ops/s
[info]                  ·gc.alloc.rate:                   817.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10142.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101125.572 ops/s
[info]                  ·gc.alloc.rate:                   815.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15336.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 101447.316 ops/s
[info]                  ·gc.alloc.rate:                   817.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10240.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson":
[info]   101495.419 ±(99.9%) 1146.557 ops/s [Average]
[info]   (min, avg, max) = (101125.572, 101495.419, 101946.918), stdev = 297.757
[info]   CI (99.9%): [100348.862, 102641.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   818.295 ±(99.9%) 9.084 MB/sec [Average]
[info]   (min, avg, max) = (815.382, 818.295, 821.873), stdev = 2.359
[info]   CI (99.9%): [809.211, 827.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   12692.325 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (12692.308, 12692.325, 12692.342), stdev = 0.012
[info]   CI (99.9%): [12692.278, 12692.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1.162 ±(99.9%) 1.885 B/op [Average]
[info]   (min, avg, max) = (0.643, 1.162, 1.936), stdev = 0.489
[info]   CI (99.9%): [≈ 0, 3.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   783.974 ±(99.9%) 689.181 MB/sec [Average]
[info]   (min, avg, max) = (646.857, 783.974, 985.243), stdev = 178.978
[info]   CI (99.9%): [94.794, 1473.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   12163.216 ±(99.9%) 10761.917 B/op [Average]
[info]   (min, avg, max) = (9989.523, 12163.216, 15336.393), stdev = 2794.836
[info]   CI (99.9%): [1401.299, 22925.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter
[info] # Run progress: 50.00% complete, ETA 00:17:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112344.449 ops/s
[info] # Warmup Iteration   2: 119183.862 ops/s
[info] # Warmup Iteration   3: 118500.737 ops/s
[info] # Warmup Iteration   4: 119076.931 ops/s
[info] # Warmup Iteration   5: 119802.986 ops/s
[info] Iteration   1: 117533.489 ops/s
[info]                  ·gc.alloc.rate:                   500.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4397.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 119851.023 ops/s
[info]                  ·gc.alloc.rate:                   510.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8624.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 119945.618 ops/s
[info]                  ·gc.alloc.rate:                   510.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4308.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 119943.878 ops/s
[info]                  ·gc.alloc.rate:                   510.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8622.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 117278.780 ops/s
[info]                  ·gc.alloc.rate:                   499.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4411.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter":
[info]   118910.558 ±(99.9%) 5301.664 ops/s [Average]
[info]   (min, avg, max) = (117278.780, 118910.558, 119945.618), stdev = 1376.825
[info]   CI (99.9%): [113608.894, 124212.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   506.385 ±(99.9%) 22.659 MB/sec [Average]
[info]   (min, avg, max) = (499.427, 506.385, 510.817), stdev = 5.885
[info]   CI (99.9%): [483.726, 529.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   6704.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6704.003, 6704.003, 6704.004), stdev = 0.001
[info]   CI (99.9%): [6704.003, 6704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.383 ±(99.9%) 2.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.093), stdev = 0.533
[info]   CI (99.9%): [≈ 0, 2.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   459.780 ±(99.9%) 692.669 MB/sec [Average]
[info]   (min, avg, max) = (328.297, 459.780, 657.007), stdev = 179.884
[info]   CI (99.9%): [≈ 0, 1152.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   6073.057 ±(99.9%) 8967.137 B/op [Average]
[info]   (min, avg, max) = (4308.977, 6073.057, 8624.784), stdev = 2328.737
[info]   CI (99.9%): [≈ 0, 15040.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 50.75% complete, ETA 00:17:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146877.044 ops/s
[info] # Warmup Iteration   2: 154205.126 ops/s
[info] # Warmup Iteration   3: 153525.105 ops/s
[info] # Warmup Iteration   4: 154302.763 ops/s
[info] # Warmup Iteration   5: 154152.390 ops/s
[info] Iteration   1: 153706.475 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 154399.719 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 153891.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 153558.073 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 153480.869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc":
[info]   153807.229 ±(99.9%) 1410.626 ops/s [Average]
[info]   (min, avg, max) = (153480.869, 153807.229, 154399.719), stdev = 366.335
[info]   CI (99.9%): [152396.603, 155217.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay
[info] # Run progress: 51.49% complete, ETA 00:17:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2887.630 ops/s
[info] # Warmup Iteration   2: 4097.074 ops/s
[info] # Warmup Iteration   3: 4191.413 ops/s
[info] # Warmup Iteration   4: 4242.584 ops/s
[info] # Warmup Iteration   5: 4239.784 ops/s
[info] Iteration   1: 4240.423 ops/s
[info]                  ·gc.alloc.rate:                   1829.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              679083.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 742555.942 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4255.023 ops/s
[info]                  ·gc.alloc.rate:                   1835.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 620990.556 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4168.019 ops/s
[info]                  ·gc.alloc.rate:                   1798.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 636689.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4229.332 ops/s
[info]                  ·gc.alloc.rate:                   1824.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 755391.077 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4206.497 ops/s
[info]                  ·gc.alloc.rate:                   1814.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 634179.163 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay":
[info]   4219.859 ±(99.9%) 130.795 ops/s [Average]
[info]   (min, avg, max) = (4168.019, 4219.859, 4255.023), stdev = 33.967
[info]   CI (99.9%): [4089.064, 4350.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate":
[info]   1820.436 ±(99.9%) 56.654 MB/sec [Average]
[info]   (min, avg, max) = (1798.036, 1820.436, 1835.904), stdev = 14.713
[info]   CI (99.9%): [1763.782, 1877.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   679084.401 ±(99.9%) 1.577 B/op [Average]
[info]   (min, avg, max) = (679083.693, 679084.401, 679084.727), stdev = 0.410
[info]   CI (99.9%): [679082.824, 679085.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   12.356 ±(99.9%) 74.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.356, 46.195), stdev = 19.314
[info]   CI (99.9%): [≈ 0, 86.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1817.769 ±(99.9%) 694.019 MB/sec [Average]
[info]   (min, avg, max) = (1678.846, 1817.769, 2029.512), stdev = 180.234
[info]   CI (99.9%): [1123.751, 2511.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   677961.210 ±(99.9%) 251280.379 B/op [Average]
[info]   (min, avg, max) = (620990.556, 677961.210, 755391.077), stdev = 65256.717
[info]   CI (99.9%): [426680.831, 929241.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 52.24% complete, ETA 00:16:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 489532.718 ops/s
[info] # Warmup Iteration   2: 690963.777 ops/s
[info] # Warmup Iteration   3: 696303.519 ops/s
[info] # Warmup Iteration   4: 707902.772 ops/s
[info] # Warmup Iteration   5: 707374.705 ops/s
[info] Iteration   1: 694253.134 ops/s
[info]                  ·gc.alloc.rate:                   2501.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2364.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5362.127 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 704927.967 ops/s
[info]                  ·gc.alloc.rate:                   2539.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6055.142 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 686879.575 ops/s
[info]                  ·gc.alloc.rate:                   2474.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5449.019 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 695729.988 ops/s
[info]                  ·gc.alloc.rate:                   2506.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6155.463 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 695141.318 ops/s
[info]                  ·gc.alloc.rate:                   2504.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5394.761 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   695386.396 ±(99.9%) 24721.463 ops/s [Average]
[info]   (min, avg, max) = (686879.575, 695386.396, 704927.967), stdev = 6420.086
[info]   CI (99.9%): [670664.933, 720107.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2505.450 ±(99.9%) 89.029 MB/sec [Average]
[info]   (min, avg, max) = (2474.889, 2505.450, 2539.851), stdev = 23.121
[info]   CI (99.9%): [2416.421, 2594.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5672.001, 5672.001, 5672.001), stdev = 0.001
[info]   CI (99.9%): [5672.000, 5672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.208), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.301 ±(99.9%) 0.520 B/op [Average]
[info]   (min, avg, max) = (0.188, 0.301, 0.465), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2511.225 ±(99.9%) 720.058 MB/sec [Average]
[info]   (min, avg, max) = (2364.515, 2511.225, 2720.416), stdev = 186.997
[info]   CI (99.9%): [1791.166, 3231.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5683.303 ±(99.9%) 1494.450 B/op [Average]
[info]   (min, avg, max) = (5362.127, 5683.303, 6155.463), stdev = 388.104
[info]   CI (99.9%): [4188.853, 7177.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson
[info] # Run progress: 52.99% complete, ETA 00:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268487.238 ops/s
[info] # Warmup Iteration   2: 638824.246 ops/s
[info] # Warmup Iteration   3: 647326.300 ops/s
[info] # Warmup Iteration   4: 645473.460 ops/s
[info] # Warmup Iteration   5: 640191.815 ops/s
[info] Iteration   1: 639416.283 ops/s
[info]                  ·gc.alloc.rate:                   783.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2422.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 646109.346 ops/s
[info]                  ·gc.alloc.rate:                   791.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1606.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 640033.148 ops/s
[info]                  ·gc.alloc.rate:                   783.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2441.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 645124.020 ops/s
[info]                  ·gc.alloc.rate:                   790.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1623.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 641116.229 ops/s
[info]                  ·gc.alloc.rate:                   785.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1638.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson":
[info]   642359.805 ±(99.9%) 11762.454 ops/s [Average]
[info]   (min, avg, max) = (639416.283, 642359.805, 646109.346), stdev = 3054.672
[info]   CI (99.9%): [630597.351, 654122.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate":
[info]   786.724 ±(99.9%) 14.451 MB/sec [Average]
[info]   (min, avg, max) = (783.055, 786.724, 791.345), stdev = 3.753
[info]   CI (99.9%): [772.273, 801.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1928.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1928.001, 1928.001, 1928.001), stdev = 0.001
[info]   CI (99.9%): [1928.001, 1928.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.163 ±(99.9%) 0.324 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.163, 0.256), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   793.691 ±(99.9%) 684.220 MB/sec [Average]
[info]   (min, avg, max) = (659.362, 793.691, 992.716), stdev = 177.690
[info]   CI (99.9%): [109.471, 1477.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1946.420 ±(99.9%) 1707.218 B/op [Average]
[info]   (min, avg, max) = (1606.441, 1946.420, 2441.368), stdev = 443.359
[info]   CI (99.9%): [239.201, 3653.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter
[info] # Run progress: 53.73% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4140626.361 ops/s
[info] # Warmup Iteration   2: 4713688.167 ops/s
[info] # Warmup Iteration   3: 4773163.126 ops/s
[info] # Warmup Iteration   4: 4759604.845 ops/s
[info] # Warmup Iteration   5: 4760044.341 ops/s
[info] Iteration   1: 4764161.862 ops/s
[info]                  ·gc.alloc.rate:                   1888.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 554.708 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4773440.622 ops/s
[info]                  ·gc.alloc.rate:                   1892.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 667.469 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4714746.776 ops/s
[info]                  ·gc.alloc.rate:                   1868.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 678.172 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4743359.442 ops/s
[info]                  ·gc.alloc.rate:                   1880.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 562.936 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4740984.360 ops/s
[info]                  ·gc.alloc.rate:                   1879.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 676.673 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter":
[info]   4747338.612 ±(99.9%) 87866.741 ops/s [Average]
[info]   (min, avg, max) = (4714746.776, 4747338.612, 4773440.622), stdev = 22818.714
[info]   CI (99.9%): [4659471.872, 4835205.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1881.723 ±(99.9%) 34.734 MB/sec [Average]
[info]   (min, avg, max) = (1868.832, 1881.723, 1892.101), stdev = 9.020
[info]   CI (99.9%): [1846.990, 1916.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.032, 0.048), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1893.522 ±(99.9%) 725.156 MB/sec [Average]
[info]   (min, avg, max) = (1678.588, 1893.522, 2037.808), stdev = 188.321
[info]   CI (99.9%): [1168.367, 2618.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   627.992 ±(99.9%) 243.910 B/op [Average]
[info]   (min, avg, max) = (554.708, 627.992, 678.172), stdev = 63.343
[info]   CI (99.9%): [384.082, 871.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay
[info] # Run progress: 54.48% complete, ETA 00:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63675.735 ops/s
[info] # Warmup Iteration   2: 252210.165 ops/s
[info] # Warmup Iteration   3: 256009.474 ops/s
[info] # Warmup Iteration   4: 257456.028 ops/s
[info] # Warmup Iteration   5: 258601.213 ops/s
[info] Iteration   1: 255531.182 ops/s
[info]                  ·gc.alloc.rate:                   1778.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10343.228 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 258376.899 ops/s
[info]                  ·gc.alloc.rate:                   1797.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10280.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 252481.486 ops/s
[info]                  ·gc.alloc.rate:                   1756.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12661.885 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 257054.588 ops/s
[info]                  ·gc.alloc.rate:                   1788.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10383.758 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 255029.480 ops/s
[info]                  ·gc.alloc.rate:                   1774.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10482.923 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay":
[info]   255694.727 ±(99.9%) 8575.248 ops/s [Average]
[info]   (min, avg, max) = (252481.486, 255694.727, 258376.899), stdev = 2226.965
[info]   CI (99.9%): [247119.479, 264269.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1779.100 ±(99.9%) 59.253 MB/sec [Average]
[info]   (min, avg, max) = (1756.854, 1779.100, 1797.616), stdev = 15.388
[info]   CI (99.9%): [1719.847, 1838.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.001, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.615 ±(99.9%) 0.407 B/op [Average]
[info]   (min, avg, max) = (0.510, 0.615, 0.761), stdev = 0.106
[info]   CI (99.9%): [0.208, 1.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1758.373 ±(99.9%) 587.849 MB/sec [Average]
[info]   (min, avg, max) = (1679.464, 1758.373, 2031.143), stdev = 152.663
[info]   CI (99.9%): [1170.523, 2346.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   10830.366 ±(99.9%) 3952.683 B/op [Average]
[info]   (min, avg, max) = (10280.038, 10830.366, 12661.885), stdev = 1026.499
[info]   CI (99.9%): [6877.683, 14783.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 55.22% complete, ETA 00:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 609992.442 ops/s
[info] # Warmup Iteration   2: 869649.210 ops/s
[info] # Warmup Iteration   3: 876284.826 ops/s
[info] # Warmup Iteration   4: 874462.655 ops/s
[info] # Warmup Iteration   5: 879848.171 ops/s
[info] Iteration   1: 879767.277 ops/s
[info]                  ·gc.alloc.rate:                   2020.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3603.653 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 865571.936 ops/s
[info]                  ·gc.alloc.rate:                   1989.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3682.851 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 870738.446 ops/s
[info]                  ·gc.alloc.rate:                   2000.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3673.667 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 873933.778 ops/s
[info]                  ·gc.alloc.rate:                   2008.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3056.587 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 871964.572 ops/s
[info]                  ·gc.alloc.rate:                   2003.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3679.210 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   872395.202 ±(99.9%) 19841.277 ops/s [Average]
[info]   (min, avg, max) = (865571.936, 872395.202, 879767.277), stdev = 5152.717
[info]   CI (99.9%): [852553.925, 892236.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2004.354 ±(99.9%) 44.206 MB/sec [Average]
[info]   (min, avg, max) = (1989.150, 2004.354, 2020.619), stdev = 11.480
[info]   CI (99.9%): [1960.148, 2048.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.125, 0.167), stdev = 0.029
[info]   CI (99.9%): [0.011, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.226 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (0.186, 0.226, 0.303), stdev = 0.054
[info]   CI (99.9%): [0.017, 0.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1961.581 ±(99.9%) 569.657 MB/sec [Average]
[info]   (min, avg, max) = (1697.453, 1961.581, 2038.644), stdev = 147.938
[info]   CI (99.9%): [1391.924, 2531.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3539.194 ±(99.9%) 1046.408 B/op [Average]
[info]   (min, avg, max) = (3056.587, 3539.194, 3682.851), stdev = 271.749
[info]   CI (99.9%): [2492.786, 4585.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson
[info] # Run progress: 55.97% complete, ETA 00:15:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 928062.787 ops/s
[info] # Warmup Iteration   2: 1875077.238 ops/s
[info] # Warmup Iteration   3: 1947894.673 ops/s
[info] # Warmup Iteration   4: 1942137.151 ops/s
[info] # Warmup Iteration   5: 1949839.670 ops/s
[info] Iteration   1: 1949916.801 ops/s
[info]                  ·gc.alloc.rate:                   1317.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1075.277 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1951421.431 ops/s
[info]                  ·gc.alloc.rate:                   1318.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 809.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1929384.191 ops/s
[info]                  ·gc.alloc.rate:                   1304.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1096.517 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1935941.881 ops/s
[info]                  ·gc.alloc.rate:                   1308.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1096.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1926479.420 ops/s
[info]                  ·gc.alloc.rate:                   1302.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1104.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson":
[info]   1938628.745 ±(99.9%) 44381.078 ops/s [Average]
[info]   (min, avg, max) = (1926479.420, 1938628.745, 1951421.431), stdev = 11525.625
[info]   CI (99.9%): [1894247.667, 1983009.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1310.265 ±(99.9%) 29.683 MB/sec [Average]
[info]   (min, avg, max) = (1302.125, 1310.265, 1318.827), stdev = 7.709
[info]   CI (99.9%): [1280.582, 1339.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.081 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.081, 0.118), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1275.961 ±(99.9%) 586.396 MB/sec [Average]
[info]   (min, avg, max) = (1003.883, 1275.961, 1351.937), stdev = 152.285
[info]   CI (99.9%): [689.564, 1862.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1036.552 ±(99.9%) 489.663 B/op [Average]
[info]   (min, avg, max) = (809.911, 1036.552, 1104.703), stdev = 127.164
[info]   CI (99.9%): [546.890, 1526.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter
[info] # Run progress: 56.72% complete, ETA 00:15:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5809492.823 ops/s
[info] # Warmup Iteration   2: 6688688.201 ops/s
[info] # Warmup Iteration   3: 6814205.128 ops/s
[info] # Warmup Iteration   4: 7024375.520 ops/s
[info] # Warmup Iteration   5: 7017146.576 ops/s
[info] Iteration   1: 7004641.871 ops/s
[info]                  ·gc.alloc.rate:                   783.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7026815.858 ops/s
[info]                  ·gc.alloc.rate:                   785.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7006870.461 ops/s
[info]                  ·gc.alloc.rate:                   783.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7016893.807 ops/s
[info]                  ·gc.alloc.rate:                   784.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7021433.575 ops/s
[info]                  ·gc.alloc.rate:                   785.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter":
[info]   7015331.114 ±(99.9%) 36399.481 ops/s [Average]
[info]   (min, avg, max) = (7004641.871, 7015331.114, 7026815.858), stdev = 9452.830
[info]   CI (99.9%): [6978931.633, 7051730.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   784.348 ±(99.9%) 4.433 MB/sec [Average]
[info]   (min, avg, max) = (783.039, 784.348, 785.819), stdev = 1.151
[info]   CI (99.9%): [779.915, 788.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.033), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   791.844 ±(99.9%) 686.837 MB/sec [Average]
[info]   (min, avg, max) = (658.218, 791.844, 989.942), stdev = 178.369
[info]   CI (99.9%): [105.007, 1478.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   177.725 ±(99.9%) 155.105 B/op [Average]
[info]   (min, avg, max) = (147.421, 177.725, 222.409), stdev = 40.280
[info]   CI (99.9%): [22.620, 332.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay
[info] # Run progress: 57.46% complete, ETA 00:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191084.237 ops/s
[info] # Warmup Iteration   2: 589787.184 ops/s
[info] # Warmup Iteration   3: 580410.153 ops/s
[info] # Warmup Iteration   4: 588767.901 ops/s
[info] # Warmup Iteration   5: 589933.128 ops/s
[info] Iteration   1: 584036.541 ops/s
[info]                  ·gc.alloc.rate:                   1991.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5447.973 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 586937.449 ops/s
[info]                  ·gc.alloc.rate:                   2001.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5440.542 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 583134.805 ops/s
[info]                  ·gc.alloc.rate:                   1988.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5492.402 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 567110.736 ops/s
[info]                  ·gc.alloc.rate:                   1933.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4714.313 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 590605.468 ops/s
[info]                  ·gc.alloc.rate:                   2013.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5432.765 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay":
[info]   582365.000 ±(99.9%) 34703.459 ops/s [Average]
[info]   (min, avg, max) = (567110.736, 582365.000, 590605.468), stdev = 9012.378
[info]   CI (99.9%): [547661.541, 617068.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1985.865 ±(99.9%) 118.283 MB/sec [Average]
[info]   (min, avg, max) = (1933.856, 1985.865, 2013.939), stdev = 30.718
[info]   CI (99.9%): [1867.582, 2104.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.304 ±(99.9%) 0.391 B/op [Average]
[info]   (min, avg, max) = (0.168, 0.304, 0.449), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1964.185 ±(99.9%) 572.761 MB/sec [Average]
[info]   (min, avg, max) = (1698.361, 1964.185, 2038.237), stdev = 148.744
[info]   CI (99.9%): [1391.425, 2536.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5305.599 ±(99.9%) 1275.903 B/op [Average]
[info]   (min, avg, max) = (4714.313, 5305.599, 5492.402), stdev = 331.348
[info]   CI (99.9%): [4029.696, 6581.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 58.21% complete, ETA 00:14:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437864.173 ops/s
[info] # Warmup Iteration   2: 676803.043 ops/s
[info] # Warmup Iteration   3: 697120.171 ops/s
[info] # Warmup Iteration   4: 690501.089 ops/s
[info] # Warmup Iteration   5: 695037.438 ops/s
[info] Iteration   1: 697329.854 ops/s
[info]                  ·gc.alloc.rate:                   2424.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5331.001 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 691004.358 ops/s
[info]                  ·gc.alloc.rate:                   2401.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5401.113 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 694772.379 ops/s
[info]                  ·gc.alloc.rate:                   2414.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5384.231 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 695560.717 ops/s
[info]                  ·gc.alloc.rate:                   2418.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5382.229 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 686168.136 ops/s
[info]                  ·gc.alloc.rate:                   2385.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5465.272 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   692967.089 ±(99.9%) 17123.223 ops/s [Average]
[info]   (min, avg, max) = (686168.136, 692967.089, 697329.854), stdev = 4446.847
[info]   CI (99.9%): [675843.866, 710090.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2408.943 ±(99.9%) 60.362 MB/sec [Average]
[info]   (min, avg, max) = (2385.149, 2408.943, 2424.531), stdev = 15.676
[info]   CI (99.9%): [2348.581, 2469.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.000, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.142, 0.208), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.321 ±(99.9%) 0.469 B/op [Average]
[info]   (min, avg, max) = (0.143, 0.321, 0.472), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2373.957 ±(99.9%) 30.260 MB/sec [Average]
[info]   (min, avg, max) = (2362.057, 2373.957, 2382.216), stdev = 7.858
[info]   CI (99.9%): [2343.697, 2404.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5392.769 ±(99.9%) 185.927 B/op [Average]
[info]   (min, avg, max) = (5331.001, 5392.769, 5465.272), stdev = 48.285
[info]   CI (99.9%): [5206.842, 5578.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter
[info] # Run progress: 58.96% complete, ETA 00:14:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4728130.032 ops/s
[info] # Warmup Iteration   2: 5373550.773 ops/s
[info] # Warmup Iteration   3: 5548087.503 ops/s
[info] # Warmup Iteration   4: 5520495.577 ops/s
[info] # Warmup Iteration   5: 5558828.024 ops/s
[info] Iteration   1: 5536415.174 ops/s
[info]                  ·gc.alloc.rate:                   1378.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 377.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5541699.468 ops/s
[info]                  ·gc.alloc.rate:                   1380.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474.758 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5530078.628 ops/s
[info]                  ·gc.alloc.rate:                   1377.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 382.535 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5426465.561 ops/s
[info]                  ·gc.alloc.rate:                   1351.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 391.217 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5546401.413 ops/s
[info]                  ·gc.alloc.rate:                   1381.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383.693 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter":
[info]   5516212.049 ±(99.9%) 194599.355 ops/s [Average]
[info]   (min, avg, max) = (5426465.561, 5516212.049, 5546401.413), stdev = 50536.835
[info]   CI (99.9%): [5321612.694, 5710811.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1373.669 ±(99.9%) 48.155 MB/sec [Average]
[info]   (min, avg, max) = (1351.474, 1373.669, 1381.207), stdev = 12.506
[info]   CI (99.9%): [1325.515, 1421.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.027, 0.041), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1409.041 ±(99.9%) 565.878 MB/sec [Average]
[info]   (min, avg, max) = (1329.175, 1409.041, 1671.462), stdev = 146.957
[info]   CI (99.9%): [843.163, 1974.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   402.038 ±(99.9%) 157.603 B/op [Average]
[info]   (min, avg, max) = (377.985, 402.038, 474.758), stdev = 40.929
[info]   CI (99.9%): [244.435, 559.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay
[info] # Run progress: 59.70% complete, ETA 00:14:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134953.900 ops/s
[info] # Warmup Iteration   2: 372564.409 ops/s
[info] # Warmup Iteration   3: 376521.453 ops/s
[info] # Warmup Iteration   4: 375652.002 ops/s
[info] # Warmup Iteration   5: 369073.086 ops/s
[info] Iteration   1: 369701.556 ops/s
[info]                  ·gc.alloc.rate:                   1929.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7171.462 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 374942.698 ops/s
[info]                  ·gc.alloc.rate:                   1956.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8518.109 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 373299.806 ops/s
[info]                  ·gc.alloc.rate:                   1948.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8576.654 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 372135.724 ops/s
[info]                  ·gc.alloc.rate:                   1942.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8619.247 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 373427.505 ops/s
[info]                  ·gc.alloc.rate:                   1948.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7159.125 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay":
[info]   372701.458 ±(99.9%) 7513.146 ops/s [Average]
[info]   (min, avg, max) = (369701.556, 372701.458, 374942.698), stdev = 1951.140
[info]   CI (99.9%): [365188.312, 380214.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1945.171 ±(99.9%) 38.962 MB/sec [Average]
[info]   (min, avg, max) = (1929.570, 1945.171, 1956.709), stdev = 10.118
[info]   CI (99.9%): [1906.209, 1984.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8216.001, 8216.001, 8216.001), stdev = 0.001
[info]   CI (99.9%): [8216.001, 8216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.208), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.509 ±(99.9%) 0.833 B/op [Average]
[info]   (min, avg, max) = (0.351, 0.509, 0.874), stdev = 0.216
[info]   CI (99.9%): [≈ 0, 1.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1896.525 ±(99.9%) 721.857 MB/sec [Average]
[info]   (min, avg, max) = (1684.255, 1896.525, 2037.588), stdev = 187.464
[info]   CI (99.9%): [1174.668, 2618.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8008.919 ±(99.9%) 2968.733 B/op [Average]
[info]   (min, avg, max) = (7159.125, 8008.919, 8619.247), stdev = 770.971
[info]   CI (99.9%): [5040.186, 10977.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 60.45% complete, ETA 00:13:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279727.380 ops/s
[info] # Warmup Iteration   2: 521807.164 ops/s
[info] # Warmup Iteration   3: 530375.194 ops/s
[info] # Warmup Iteration   4: 532423.173 ops/s
[info] # Warmup Iteration   5: 526443.471 ops/s
[info] Iteration   1: 530624.725 ops/s
[info]                  ·gc.alloc.rate:                   1388.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3923.751 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 531504.380 ops/s
[info]                  ·gc.alloc.rate:                   1391.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4930.648 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 522234.425 ops/s
[info]                  ·gc.alloc.rate:                   1366.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4038.158 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 512785.347 ops/s
[info]                  ·gc.alloc.rate:                   1341.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4129.789 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 532240.717 ops/s
[info]                  ·gc.alloc.rate:                   1392.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3990.666 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   525877.919 ±(99.9%) 32180.242 ops/s [Average]
[info]   (min, avg, max) = (512785.347, 525877.919, 532240.717), stdev = 8357.107
[info]   CI (99.9%): [493697.677, 558058.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1376.263 ±(99.9%) 84.339 MB/sec [Average]
[info]   (min, avg, max) = (1341.936, 1376.263, 1392.903), stdev = 21.903
[info]   CI (99.9%): [1291.923, 1460.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4120.001, 4120.001, 4120.001), stdev = 0.001
[info]   CI (99.9%): [4120.001, 4120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.104, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.312 ±(99.9%) 0.563 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.312, 0.432), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1404.243 ±(99.9%) 562.509 MB/sec [Average]
[info]   (min, avg, max) = (1322.387, 1404.243, 1664.922), stdev = 146.082
[info]   CI (99.9%): [841.734, 1966.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4202.602 ±(99.9%) 1593.569 B/op [Average]
[info]   (min, avg, max) = (3923.751, 4202.602, 4930.648), stdev = 413.845
[info]   CI (99.9%): [2609.034, 5796.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter
[info] # Run progress: 61.19% complete, ETA 00:13:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2776209.406 ops/s
[info] # Warmup Iteration   2: 3111552.190 ops/s
[info] # Warmup Iteration   3: 3220027.036 ops/s
[info] # Warmup Iteration   4: 3227180.455 ops/s
[info] # Warmup Iteration   5: 3214814.110 ops/s
[info] Iteration   1: 3199045.810 ops/s
[info]                  ·gc.alloc.rate:                   536.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 322.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3199578.455 ops/s
[info]                  ·gc.alloc.rate:                   536.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3223482.924 ops/s
[info]                  ·gc.alloc.rate:                   540.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 320.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3229133.062 ops/s
[info]                  ·gc.alloc.rate:                   541.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 320.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3237801.716 ops/s
[info]                  ·gc.alloc.rate:                   543.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter":
[info]   3217808.393 ±(99.9%) 67921.762 ops/s [Average]
[info]   (min, avg, max) = (3199045.810, 3217808.393, 3237801.716), stdev = 17639.066
[info]   CI (99.9%): [3149886.631, 3285730.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   539.632 ±(99.9%) 11.565 MB/sec [Average]
[info]   (min, avg, max) = (536.421, 539.632, 543.117), stdev = 3.003
[info]   CI (99.9%): [528.067, 551.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   525.236 ±(99.9%) 691.414 MB/sec [Average]
[info]   (min, avg, max) = (327.677, 525.236, 657.243), stdev = 179.558
[info]   CI (99.9%): [≈ 0, 1216.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   256.987 ±(99.9%) 338.591 B/op [Average]
[info]   (min, avg, max) = (160.120, 256.987, 322.786), stdev = 87.931
[info]   CI (99.9%): [≈ 0, 595.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay
[info] # Run progress: 61.94% complete, ETA 00:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100389.307 ops/s
[info] # Warmup Iteration   2: 363135.599 ops/s
[info] # Warmup Iteration   3: 367955.269 ops/s
[info] # Warmup Iteration   4: 358248.557 ops/s
[info] # Warmup Iteration   5: 369613.885 ops/s
[info] Iteration   1: 369136.510 ops/s
[info]                  ·gc.alloc.rate:                   1348.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5679.937 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 369179.591 ops/s
[info]                  ·gc.alloc.rate:                   1348.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5709.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 364537.607 ops/s
[info]                  ·gc.alloc.rate:                   1331.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5809.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 367968.934 ops/s
[info]                  ·gc.alloc.rate:                   1344.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5772.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 368754.878 ops/s
[info]                  ·gc.alloc.rate:                   1347.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5775.669 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay":
[info]   367915.504 ±(99.9%) 7507.857 ops/s [Average]
[info]   (min, avg, max) = (364537.607, 367915.504, 369179.591), stdev = 1949.767
[info]   CI (99.9%): [360407.647, 375423.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1344.302 ±(99.9%) 27.375 MB/sec [Average]
[info]   (min, avg, max) = (1331.960, 1344.302, 1348.955), stdev = 7.109
[info]   CI (99.9%): [1316.927, 1371.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5752.001, 5752.001, 5752.001), stdev = 0.001
[info]   CI (99.9%): [5752.001, 5752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.392 ±(99.9%) 0.713 B/op [Average]
[info]   (min, avg, max) = (0.177, 0.392, 0.621), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 1.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1343.643 ±(99.9%) 32.437 MB/sec [Average]
[info]   (min, avg, max) = (1331.734, 1343.643, 1352.906), stdev = 8.424
[info]   CI (99.9%): [1311.206, 1376.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5749.351 ±(99.9%) 204.071 B/op [Average]
[info]   (min, avg, max) = (5679.937, 5749.351, 5809.540), stdev = 52.997
[info]   CI (99.9%): [5545.279, 5953.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 62.69% complete, ETA 00:13:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1134827.321 ops/s
[info] # Warmup Iteration   2: 2106893.339 ops/s
[info] # Warmup Iteration   3: 2164017.882 ops/s
[info] # Warmup Iteration   4: 2148206.015 ops/s
[info] # Warmup Iteration   5: 2163312.905 ops/s
[info] Iteration   1: 2145386.725 ops/s
[info]                  ·gc.alloc.rate:                   3106.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3051.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2239.598 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2160472.856 ops/s
[info]                  ·gc.alloc.rate:                   3129.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2227.888 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2172476.683 ops/s
[info]                  ·gc.alloc.rate:                   3146.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2219.418 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2169911.080 ops/s
[info]                  ·gc.alloc.rate:                   3142.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2221.793 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2166257.338 ops/s
[info]                  ·gc.alloc.rate:                   3137.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2472.981 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2162900.936 ±(99.9%) 41506.014 ops/s [Average]
[info]   (min, avg, max) = (2145386.725, 2162900.936, 2172476.683), stdev = 10778.980
[info]   CI (99.9%): [2121394.922, 2204406.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3132.524 ±(99.9%) 60.988 MB/sec [Average]
[info]   (min, avg, max) = (3106.703, 3132.524, 3146.780), stdev = 15.838
[info]   CI (99.9%): [3071.536, 3193.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2280.000, 2280.000, 2280.000), stdev = 0.001
[info]   CI (99.9%): [2280.000, 2280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.208), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.103 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.103, 0.152), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3127.544 ±(99.9%) 592.273 MB/sec [Average]
[info]   (min, avg, max) = (3051.651, 3127.544, 3402.568), stdev = 153.811
[info]   CI (99.9%): [2535.271, 3719.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2276.336 ±(99.9%) 424.361 B/op [Average]
[info]   (min, avg, max) = (2219.418, 2276.336, 2472.981), stdev = 110.205
[info]   CI (99.9%): [1851.974, 2700.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson
[info] # Run progress: 63.43% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40476.758 ops/s
[info] # Warmup Iteration   2: 290472.321 ops/s
[info] # Warmup Iteration   3: 306059.744 ops/s
[info] # Warmup Iteration   4: 311951.473 ops/s
[info] # Warmup Iteration   5: 313636.733 ops/s
[info] Iteration   1: 309014.922 ops/s
[info]                  ·gc.alloc.rate:                   554.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              2824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1657.405 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 301350.756 ops/s
[info]                  ·gc.alloc.rate:                   540.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              2824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3419.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 308144.632 ops/s
[info]                  ·gc.alloc.rate:                   552.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              2824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3358.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 308123.942 ops/s
[info]                  ·gc.alloc.rate:                   552.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              2824.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1685.934 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 305919.155 ops/s
[info]                  ·gc.alloc.rate:                   548.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              2824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3403.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson":
[info]   306510.681 ±(99.9%) 11949.157 ops/s [Average]
[info]   (min, avg, max) = (301350.756, 306510.681, 309014.922), stdev = 3103.158
[info]   CI (99.9%): [294561.524, 318459.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate":
[info]   549.902 ±(99.9%) 21.117 MB/sec [Average]
[info]   (min, avg, max) = (540.775, 549.902, 554.319), stdev = 5.484
[info]   CI (99.9%): [528.785, 571.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   2824.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2824.001, 2824.001, 2824.001), stdev = 0.001
[info]   CI (99.9%): [2824.001, 2824.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.257 ±(99.9%) 0.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.257, 0.638), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   525.792 ±(99.9%) 696.541 MB/sec [Average]
[info]   (min, avg, max) = (325.329, 525.792, 661.437), stdev = 180.889
[info]   CI (99.9%): [≈ 0, 1222.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2704.875 ±(99.9%) 3633.110 B/op [Average]
[info]   (min, avg, max) = (1657.405, 2704.875, 3419.829), stdev = 943.507
[info]   CI (99.9%): [≈ 0, 6337.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter
[info] # Run progress: 64.18% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571995.389 ops/s
[info] # Warmup Iteration   2: 626663.346 ops/s
[info] # Warmup Iteration   3: 638670.478 ops/s
[info] # Warmup Iteration   4: 646676.551 ops/s
[info] # Warmup Iteration   5: 629468.273 ops/s
[info] Iteration   1: 640390.336 ops/s
[info]                  ·gc.alloc.rate:                   406.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 816.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 648210.282 ops/s
[info]                  ·gc.alloc.rate:                   411.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 802.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 622068.730 ops/s
[info]                  ·gc.alloc.rate:                   395.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1670.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 619554.812 ops/s
[info]                  ·gc.alloc.rate:                   393.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 613890.907 ops/s
[info]                  ·gc.alloc.rate:                   389.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 845.353 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter":
[info]   628823.014 ±(99.9%) 56597.814 ops/s [Average]
[info]   (min, avg, max) = (613890.907, 628823.014, 648210.282), stdev = 14698.273
[info]   CI (99.9%): [572225.200, 685420.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate":
[info]   399.453 ±(99.9%) 36.061 MB/sec [Average]
[info]   (min, avg, max) = (389.960, 399.453, 411.871), stdev = 9.365
[info]   CI (99.9%): [363.392, 435.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.094 ±(99.9%) 0.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.369), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   396.366 ±(99.9%) 567.305 MB/sec [Average]
[info]   (min, avg, max) = (329.635, 396.366, 659.906), stdev = 147.327
[info]   CI (99.9%): [≈ 0, 963.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   994.402 ±(99.9%) 1455.853 B/op [Average]
[info]   (min, avg, max) = (802.100, 994.402, 1670.045), stdev = 378.080
[info]   CI (99.9%): [≈ 0, 2450.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 64.93% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3432604.455 ops/s
[info] # Warmup Iteration   2: 3624234.552 ops/s
[info] # Warmup Iteration   3: 3826150.560 ops/s
[info] # Warmup Iteration   4: 3816757.890 ops/s
[info] # Warmup Iteration   5: 3801883.051 ops/s
[info] Iteration   1: 3821348.839 ops/s
[info]                  ·gc.alloc.rate:                   1243.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 547.492 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3839951.624 ops/s
[info]                  ·gc.alloc.rate:                   1249.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 547.566 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3780754.042 ops/s
[info]                  ·gc.alloc.rate:                   1230.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.587 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3706520.135 ops/s
[info]                  ·gc.alloc.rate:                   1205.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 571.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3818121.252 ops/s
[info]                  ·gc.alloc.rate:                   1241.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.299 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3793339.178 ±(99.9%) 204368.589 ops/s [Average]
[info]   (min, avg, max) = (3706520.135, 3793339.178, 3839951.624), stdev = 53073.874
[info]   CI (99.9%): [3588970.589, 3997707.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1233.989 ±(99.9%) 66.750 MB/sec [Average]
[info]   (min, avg, max) = (1205.576, 1233.989, 1249.291), stdev = 17.335
[info]   CI (99.9%): [1167.239, 1300.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.038, 0.052), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1273.149 ±(99.9%) 576.572 MB/sec [Average]
[info]   (min, avg, max) = (1005.666, 1273.149, 1349.329), stdev = 149.734
[info]   CI (99.9%): [696.577, 1849.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   528.265 ±(99.9%) 239.055 B/op [Average]
[info]   (min, avg, max) = (418.587, 528.265, 571.384), stdev = 62.082
[info]   CI (99.9%): [289.210, 767.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 65.67% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3766393.690 ops/s
[info] # Warmup Iteration   2: 3911831.834 ops/s
[info] # Warmup Iteration   3: 3845486.106 ops/s
[info] # Warmup Iteration   4: 3968231.827 ops/s
[info] # Warmup Iteration   5: 4023599.144 ops/s
[info] Iteration   1: 4052953.349 ops/s
[info]                  ·gc.alloc.rate:                   350.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4012611.844 ops/s
[info]                  ·gc.alloc.rate:                   346.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4016578.565 ops/s
[info]                  ·gc.alloc.rate:                   346.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.453 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4073865.948 ops/s
[info]                  ·gc.alloc.rate:                   352.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.636 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4047306.659 ops/s
[info]                  ·gc.alloc.rate:                   349.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   4040663.273 ±(99.9%) 99383.807 ops/s [Average]
[info]   (min, avg, max) = (4012611.844, 4040663.273, 4073865.948), stdev = 25809.659
[info]   CI (99.9%): [3941279.466, 4140047.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   349.073 ±(99.9%) 8.740 MB/sec [Average]
[info]   (min, avg, max) = (346.610, 349.073, 352.028), stdev = 2.270
[info]   CI (99.9%): [340.333, 357.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.644 ±(99.9%) 5.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.114), stdev = 1.382
[info]   CI (99.9%): [≈ 0, 5.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.250 ±(99.9%) 2.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.210), stdev = 0.537
[info]   CI (99.9%): [≈ 0, 2.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   330.969 ±(99.9%) 4.739 MB/sec [Average]
[info]   (min, avg, max) = (329.636, 330.969, 332.286), stdev = 1.231
[info]   CI (99.9%): [326.230, 335.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   128.952 ±(99.9%) 4.119 B/op [Average]
[info]   (min, avg, max) = (127.636, 128.952, 130.380), stdev = 1.070
[info]   CI (99.9%): [124.833, 133.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay
[info] # Run progress: 66.42% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19314.418 ops/s
[info] # Warmup Iteration   2: 190601.621 ops/s
[info] # Warmup Iteration   3: 197126.763 ops/s
[info] # Warmup Iteration   4: 200169.342 ops/s
[info] # Warmup Iteration   5: 200839.273 ops/s
[info] Iteration   1: 199579.908 ops/s
[info]                  ·gc.alloc.rate:                   1272.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7863.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 201062.622 ops/s
[info]                  ·gc.alloc.rate:                   1281.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10459.377 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 199347.127 ops/s
[info]                  ·gc.alloc.rate:                   1270.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10601.823 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 201016.058 ops/s
[info]                  ·gc.alloc.rate:                   1281.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10553.089 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 197272.027 ops/s
[info]                  ·gc.alloc.rate:                   1257.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10783.850 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay":
[info]   199655.549 ±(99.9%) 5969.387 ops/s [Average]
[info]   (min, avg, max) = (197272.027, 199655.549, 201062.622), stdev = 1550.231
[info]   CI (99.9%): [193686.162, 205624.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate":
[info]   1272.394 ±(99.9%) 37.800 MB/sec [Average]
[info]   (min, avg, max) = (1257.180, 1272.394, 1281.079), stdev = 9.816
[info]   CI (99.9%): [1234.595, 1310.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10032.002, 10032.002, 10032.002), stdev = 0.001
[info]   CI (99.9%): [10032.002, 10032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.688 ±(99.9%) 0.811 B/op [Average]
[info]   (min, avg, max) = (0.492, 0.688, 0.978), stdev = 0.211
[info]   CI (99.9%): [≈ 0, 1.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1274.910 ±(99.9%) 598.401 MB/sec [Average]
[info]   (min, avg, max) = (997.116, 1274.910, 1351.399), stdev = 155.403
[info]   CI (99.9%): [676.509, 1873.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   10052.381 ±(99.9%) 4733.048 B/op [Average]
[info]   (min, avg, max) = (7863.768, 10052.381, 10783.850), stdev = 1229.157
[info]   CI (99.9%): [5319.334, 14785.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 67.16% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499646.717 ops/s
[info] # Warmup Iteration   2: 719936.110 ops/s
[info] # Warmup Iteration   3: 717497.661 ops/s
[info] # Warmup Iteration   4: 730477.070 ops/s
[info] # Warmup Iteration   5: 738266.239 ops/s
[info] Iteration   1: 731818.948 ops/s
[info]                  ·gc.alloc.rate:                   2796.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3046.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6553.743 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 734932.388 ops/s
[info]                  ·gc.alloc.rate:                   2808.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5817.331 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 726677.656 ops/s
[info]                  ·gc.alloc.rate:                   2777.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5890.301 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 729189.020 ops/s
[info]                  ·gc.alloc.rate:                   2786.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5877.283 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 723848.721 ops/s
[info]                  ·gc.alloc.rate:                   2766.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5920.550 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   729293.347 ±(99.9%) 16637.514 ops/s [Average]
[info]   (min, avg, max) = (723848.721, 729293.347, 734932.388), stdev = 4320.710
[info]   CI (99.9%): [712655.833, 745930.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2786.934 ±(99.9%) 63.531 MB/sec [Average]
[info]   (min, avg, max) = (2766.074, 2786.934, 2808.558), stdev = 16.499
[info]   CI (99.9%): [2723.403, 2850.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.000, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.208), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.269 ±(99.9%) 0.468 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.269, 0.446), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2785.142 ±(99.9%) 562.340 MB/sec [Average]
[info]   (min, avg, max) = (2715.809, 2785.142, 3046.339), stdev = 146.038
[info]   CI (99.9%): [2222.802, 3347.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6011.842 ±(99.9%) 1175.400 B/op [Average]
[info]   (min, avg, max) = (5817.331, 6011.842, 6553.743), stdev = 305.248
[info]   CI (99.9%): [4836.442, 7187.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter
[info] # Run progress: 67.91% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3259626.144 ops/s
[info] # Warmup Iteration   2: 3829885.608 ops/s
[info] # Warmup Iteration   3: 3891772.609 ops/s
[info] # Warmup Iteration   4: 3907132.536 ops/s
[info] # Warmup Iteration   5: 3886736.096 ops/s
[info] Iteration   1: 3828055.360 ops/s
[info]                  ·gc.alloc.rate:                   2470.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 973.643 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3896903.761 ops/s
[info]                  ·gc.alloc.rate:                   2515.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 959.378 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3890873.631 ops/s
[info]                  ·gc.alloc.rate:                   2511.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1099.566 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3901339.909 ops/s
[info]                  ·gc.alloc.rate:                   2518.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.202 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3869260.140 ops/s
[info]                  ·gc.alloc.rate:                   2497.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.241 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter":
[info]   3877286.560 ±(99.9%) 116097.731 ops/s [Average]
[info]   (min, avg, max) = (3828055.360, 3877286.560, 3901339.909), stdev = 30150.212
[info]   CI (99.9%): [3761188.829, 3993384.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2502.650 ±(99.9%) 75.490 MB/sec [Average]
[info]   (min, avg, max) = (2470.505, 2502.650, 2518.125), stdev = 19.605
[info]   CI (99.9%): [2427.159, 2578.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.187), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.052, 0.076), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2445.167 ±(99.9%) 587.371 MB/sec [Average]
[info]   (min, avg, max) = (2367.509, 2445.167, 2717.809), stdev = 152.538
[info]   CI (99.9%): [1857.796, 3032.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   992.606 ±(99.9%) 231.330 B/op [Average]
[info]   (min, avg, max) = (959.378, 992.606, 1099.566), stdev = 60.076
[info]   CI (99.9%): [761.276, 1223.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay
[info] # Run progress: 68.66% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75007.156 ops/s
[info] # Warmup Iteration   2: 277670.461 ops/s
[info] # Warmup Iteration   3: 276045.316 ops/s
[info] # Warmup Iteration   4: 279274.996 ops/s
[info] # Warmup Iteration   5: 280283.138 ops/s
[info] Iteration   1: 268396.541 ops/s
[info]                  ·gc.alloc.rate:                   1916.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11847.676 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 275771.926 ops/s
[info]                  ·gc.alloc.rate:                   1968.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11581.907 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 278842.401 ops/s
[info]                  ·gc.alloc.rate:                   1991.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11483.750 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 277970.609 ops/s
[info]                  ·gc.alloc.rate:                   1984.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11540.800 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 279250.907 ops/s
[info]                  ·gc.alloc.rate:                   1994.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11491.707 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay":
[info]   276046.477 ±(99.9%) 17261.964 ops/s [Average]
[info]   (min, avg, max) = (268396.541, 276046.477, 279250.907), stdev = 4482.877
[info]   CI (99.9%): [258784.513, 293308.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1971.059 ±(99.9%) 123.580 MB/sec [Average]
[info]   (min, avg, max) = (1916.382, 1971.059, 1994.291), stdev = 32.093
[info]   CI (99.9%): [1847.480, 2094.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   11240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11240.001, 11240.002, 11240.002), stdev = 0.001
[info]   CI (99.9%): [11240.001, 11240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.166), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.592 ±(99.9%) 0.952 B/op [Average]
[info]   (min, avg, max) = (0.352, 0.592, 0.940), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2031.949 ±(99.9%) 29.969 MB/sec [Average]
[info]   (min, avg, max) = (2019.989, 2031.949, 2038.951), stdev = 7.783
[info]   CI (99.9%): [2001.980, 2061.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11589.168 ±(99.9%) 577.052 B/op [Average]
[info]   (min, avg, max) = (11483.750, 11589.168, 11847.676), stdev = 149.859
[info]   CI (99.9%): [11012.116, 12166.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 69.40% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587326.700 ops/s
[info] # Warmup Iteration   2: 856073.366 ops/s
[info] # Warmup Iteration   3: 855124.215 ops/s
[info] # Warmup Iteration   4: 855443.979 ops/s
[info] # Warmup Iteration   5: 849229.155 ops/s
[info] Iteration   1: 856676.698 ops/s
[info]                  ·gc.alloc.rate:                   1880.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3075.240 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 867169.771 ops/s
[info]                  ·gc.alloc.rate:                   1904.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3666.717 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 861442.640 ops/s
[info]                  ·gc.alloc.rate:                   1891.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3707.493 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 856231.076 ops/s
[info]                  ·gc.alloc.rate:                   1879.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3115.471 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 862591.603 ops/s
[info]                  ·gc.alloc.rate:                   1893.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3719.130 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   860822.358 ±(99.9%) 17442.078 ops/s [Average]
[info]   (min, avg, max) = (856231.076, 860822.358, 867169.771), stdev = 4529.652
[info]   CI (99.9%): [843380.280, 878264.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1889.935 ±(99.9%) 39.361 MB/sec [Average]
[info]   (min, avg, max) = (1879.747, 1889.935, 1904.393), stdev = 10.222
[info]   CI (99.9%): [1850.574, 1929.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.000, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.198 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (0.153, 0.198, 0.228), stdev = 0.041
[info]   CI (99.9%): [0.040, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1891.041 ±(99.9%) 729.013 MB/sec [Average]
[info]   (min, avg, max) = (1673.310, 1891.041, 2037.824), stdev = 189.322
[info]   CI (99.9%): [1162.028, 2620.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3456.810 ±(99.9%) 1273.951 B/op [Average]
[info]   (min, avg, max) = (3075.240, 3456.810, 3719.130), stdev = 330.841
[info]   CI (99.9%): [2182.859, 4730.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson
[info] # Run progress: 70.15% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 674687.250 ops/s
[info] # Warmup Iteration   2: 1835231.412 ops/s
[info] # Warmup Iteration   3: 1828788.421 ops/s
[info] # Warmup Iteration   4: 1795847.674 ops/s
[info] # Warmup Iteration   5: 1831592.108 ops/s
[info] Iteration   1: 1815602.556 ops/s
[info]                  ·gc.alloc.rate:                   1042.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 859.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1793105.369 ops/s
[info]                  ·gc.alloc.rate:                   1029.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873.766 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1835310.946 ops/s
[info]                  ·gc.alloc.rate:                   1053.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 858.539 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1834040.063 ops/s
[info]                  ·gc.alloc.rate:                   1053.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1829362.465 ops/s
[info]                  ·gc.alloc.rate:                   1050.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1008.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867.660 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson":
[info]   1821484.280 ±(99.9%) 68093.482 ops/s [Average]
[info]   (min, avg, max) = (1793105.369, 1821484.280, 1835310.946), stdev = 17683.661
[info]   CI (99.9%): [1753390.798, 1889577.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1046.013 ±(99.9%) 38.920 MB/sec [Average]
[info]   (min, avg, max) = (1029.837, 1046.013, 1053.939), stdev = 10.107
[info]   CI (99.9%): [1007.093, 1084.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.079 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.079, 0.108), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1000.024 ±(99.9%) 26.224 MB/sec [Average]
[info]   (min, avg, max) = (991.223, 1000.024, 1008.212), stdev = 6.810
[info]   CI (99.9%): [973.800, 1026.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   864.290 ±(99.9%) 24.550 B/op [Average]
[info]   (min, avg, max) = (858.539, 864.290, 873.766), stdev = 6.376
[info]   CI (99.9%): [839.740, 888.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter
[info] # Run progress: 70.90% complete, ETA 00:10:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4405434.751 ops/s
[info] # Warmup Iteration   2: 4894437.058 ops/s
[info] # Warmup Iteration   3: 4936278.057 ops/s
[info] # Warmup Iteration   4: 5015011.629 ops/s
[info] # Warmup Iteration   5: 4987545.575 ops/s
[info] Iteration   1: 4991692.332 ops/s
[info]                  ·gc.alloc.rate:                   380.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5012921.651 ops/s
[info]                  ·gc.alloc.rate:                   382.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5051172.233 ops/s
[info]                  ·gc.alloc.rate:                   385.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4990818.444 ops/s
[info]                  ·gc.alloc.rate:                   380.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5017914.761 ops/s
[info]                  ·gc.alloc.rate:                   382.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.790 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter":
[info]   5012903.884 ±(99.9%) 94855.522 ops/s [Average]
[info]   (min, avg, max) = (4990818.444, 5012903.884, 5051172.233), stdev = 24633.678
[info]   CI (99.9%): [4918048.362, 5107759.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   382.131 ±(99.9%) 7.259 MB/sec [Average]
[info]   (min, avg, max) = (380.454, 382.131, 385.055), stdev = 1.885
[info]   CI (99.9%): [374.872, 389.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   328.391 ±(99.9%) 3.559 MB/sec [Average]
[info]   (min, avg, max) = (327.655, 328.391, 329.931), stdev = 0.924
[info]   CI (99.9%): [324.832, 331.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   103.126 ±(99.9%) 2.505 B/op [Average]
[info]   (min, avg, max) = (102.320, 103.126, 104.065), stdev = 0.651
[info]   CI (99.9%): [100.621, 105.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay
[info] # Run progress: 71.64% complete, ETA 00:09:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193885.904 ops/s
[info] # Warmup Iteration   2: 526737.715 ops/s
[info] # Warmup Iteration   3: 525115.897 ops/s
[info] # Warmup Iteration   4: 525923.534 ops/s
[info] # Warmup Iteration   5: 515615.222 ops/s
[info] Iteration   1: 529283.562 ops/s
[info]                  ·gc.alloc.rate:                   1804.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4999.614 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 528234.606 ops/s
[info]                  ·gc.alloc.rate:                   1801.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5027.433 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 515196.807 ops/s
[info]                  ·gc.alloc.rate:                   1756.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5172.847 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 527149.783 ops/s
[info]                  ·gc.alloc.rate:                   1797.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6077.445 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 519273.112 ops/s
[info]                  ·gc.alloc.rate:                   1770.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5148.352 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay":
[info]   523827.574 ±(99.9%) 24005.613 ops/s [Average]
[info]   (min, avg, max) = (515196.807, 523827.574, 529283.562), stdev = 6234.181
[info]   CI (99.9%): [499821.961, 547833.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1786.248 ±(99.9%) 81.798 MB/sec [Average]
[info]   (min, avg, max) = (1756.870, 1786.248, 1804.829), stdev = 21.243
[info]   CI (99.9%): [1704.450, 1868.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.208), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.376 ±(99.9%) 0.658 B/op [Average]
[info]   (min, avg, max) = (0.186, 0.376, 0.620), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 1.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1758.869 ±(99.9%) 595.185 MB/sec [Average]
[info]   (min, avg, max) = (1680.970, 1758.869, 2035.126), stdev = 154.568
[info]   CI (99.9%): [1163.683, 2354.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5285.138 ±(99.9%) 1729.584 B/op [Average]
[info]   (min, avg, max) = (4999.614, 5285.138, 6077.445), stdev = 449.167
[info]   CI (99.9%): [3555.554, 7014.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter
[info] # Run progress: 72.39% complete, ETA 00:09:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3021487.094 ops/s
[info] # Warmup Iteration   2: 3480231.281 ops/s
[info] # Warmup Iteration   3: 3546947.739 ops/s
[info] # Warmup Iteration   4: 3512262.256 ops/s
[info] # Warmup Iteration   5: 3541201.079 ops/s
[info] Iteration   1: 3549550.404 ops/s
[info]                  ·gc.alloc.rate:                   1677.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 742.206 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3494360.011 ops/s
[info]                  ·gc.alloc.rate:                   1651.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 606.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3520544.877 ops/s
[info]                  ·gc.alloc.rate:                   1663.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3498169.516 ops/s
[info]                  ·gc.alloc.rate:                   1653.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 761.518 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3544784.001 ops/s
[info]                  ·gc.alloc.rate:                   1675.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752.946 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter":
[info]   3521481.762 ±(99.9%) 98375.681 ops/s [Average]
[info]   (min, avg, max) = (3494360.011, 3521481.762, 3549550.404), stdev = 25547.852
[info]   CI (99.9%): [3423106.081, 3619857.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1664.355 ±(99.9%) 46.046 MB/sec [Average]
[info]   (min, avg, max) = (1651.532, 1664.355, 1677.433), stdev = 11.958
[info]   CI (99.9%): [1618.309, 1710.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.041 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.041, 0.065), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1618.711 ±(99.9%) 589.583 MB/sec [Average]
[info]   (min, avg, max) = (1345.233, 1618.711, 1695.448), stdev = 153.113
[info]   CI (99.9%): [1029.128, 2208.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   723.398 ±(99.9%) 254.068 B/op [Average]
[info]   (min, avg, max) = (606.015, 723.398, 761.518), stdev = 65.981
[info]   CI (99.9%): [469.330, 977.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay
[info] # Run progress: 73.13% complete, ETA 00:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104342.039 ops/s
[info] # Warmup Iteration   2: 309349.149 ops/s
[info] # Warmup Iteration   3: 314288.859 ops/s
[info] # Warmup Iteration   4: 316061.287 ops/s
[info] # Warmup Iteration   5: 314831.498 ops/s
[info] Iteration   1: 316112.735 ops/s
[info]                  ·gc.alloc.rate:                   1661.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6679.525 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 307497.405 ops/s
[info]                  ·gc.alloc.rate:                   1615.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8622.524 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 315275.094 ops/s
[info]                  ·gc.alloc.rate:                   1656.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8439.899 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 305959.703 ops/s
[info]                  ·gc.alloc.rate:                   1607.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8716.747 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 313262.426 ops/s
[info]                  ·gc.alloc.rate:                   1646.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8527.348 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay":
[info]   311621.472 ±(99.9%) 17779.458 ops/s [Average]
[info]   (min, avg, max) = (305959.703, 311621.472, 316112.735), stdev = 4617.269
[info]   CI (99.9%): [293842.014, 329400.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1637.538 ±(99.9%) 93.323 MB/sec [Average]
[info]   (min, avg, max) = (1607.801, 1637.538, 1661.256), stdev = 24.236
[info]   CI (99.9%): [1544.215, 1730.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8272.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8272.001, 8272.001, 8272.001), stdev = 0.001
[info]   CI (99.9%): [8272.001, 8272.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.043, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.400 ±(99.9%) 0.186 B/op [Average]
[info]   (min, avg, max) = (0.314, 0.400, 0.428), stdev = 0.048
[info]   CI (99.9%): [0.213, 0.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1621.447 ±(99.9%) 603.002 MB/sec [Average]
[info]   (min, avg, max) = (1341.441, 1621.447, 1696.817), stdev = 156.598
[info]   CI (99.9%): [1018.445, 2224.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8197.209 ±(99.9%) 3291.156 B/op [Average]
[info]   (min, avg, max) = (6679.525, 8197.209, 8716.747), stdev = 854.703
[info]   CI (99.9%): [4906.053, 11488.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 73.88% complete, ETA 00:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277934.253 ops/s
[info] # Warmup Iteration   2: 503290.898 ops/s
[info] # Warmup Iteration   3: 508770.813 ops/s
[info] # Warmup Iteration   4: 506406.398 ops/s
[info] # Warmup Iteration   5: 508857.632 ops/s
[info] Iteration   1: 486104.786 ops/s
[info]                  ·gc.alloc.rate:                   1247.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4274.875 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 509744.043 ops/s
[info]                  ·gc.alloc.rate:                   1308.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4103.182 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 508636.219 ops/s
[info]                  ·gc.alloc.rate:                   1305.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4135.620 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 508292.480 ops/s
[info]                  ·gc.alloc.rate:                   1304.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4158.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 504534.001 ops/s
[info]                  ·gc.alloc.rate:                   1294.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3152.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   503462.306 ±(99.9%) 38119.051 ops/s [Average]
[info]   (min, avg, max) = (486104.786, 503462.306, 509744.043), stdev = 9899.397
[info]   CI (99.9%): [465343.254, 541581.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1292.165 ±(99.9%) 98.123 MB/sec [Average]
[info]   (min, avg, max) = (1247.494, 1292.165, 1308.248), stdev = 25.482
[info]   CI (99.9%): [1194.042, 1390.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4040.001, 4040.001, 4040.001), stdev = 0.001
[info]   CI (99.9%): [4040.001, 4040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.234 ±(99.9%) 0.379 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.234, 0.386), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1267.655 ±(99.9%) 554.894 MB/sec [Average]
[info]   (min, avg, max) = (1010.321, 1267.655, 1342.565), stdev = 144.104
[info]   CI (99.9%): [712.762, 1822.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3964.782 ±(99.9%) 1766.781 B/op [Average]
[info]   (min, avg, max) = (3152.222, 3964.782, 4274.875), stdev = 458.827
[info]   CI (99.9%): [2198.001, 5731.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter
[info] # Run progress: 74.63% complete, ETA 00:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2513384.459 ops/s
[info] # Warmup Iteration   2: 2874385.316 ops/s
[info] # Warmup Iteration   3: 2880058.348 ops/s
[info] # Warmup Iteration   4: 2854869.317 ops/s
[info] # Warmup Iteration   5: 2900774.966 ops/s
[info] Iteration   1: 2911108.227 ops/s
[info]                  ·gc.alloc.rate:                   591.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2760975.296 ops/s
[info]                  ·gc.alloc.rate:                   561.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 373.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2884726.919 ops/s
[info]                  ·gc.alloc.rate:                   586.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2889404.139 ops/s
[info]                  ·gc.alloc.rate:                   587.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2820064.825 ops/s
[info]                  ·gc.alloc.rate:                   573.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter":
[info]   2853255.881 ±(99.9%) 237848.335 ops/s [Average]
[info]   (min, avg, max) = (2760975.296, 2853255.881, 2911108.227), stdev = 61768.457
[info]   CI (99.9%): [2615407.546, 3091104.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   580.035 ±(99.9%) 48.336 MB/sec [Average]
[info]   (min, avg, max) = (561.287, 580.035, 591.731), stdev = 12.553
[info]   CI (99.9%): [531.699, 628.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.045), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   591.574 ±(99.9%) 568.130 MB/sec [Average]
[info]   (min, avg, max) = (327.657, 591.574, 659.666), stdev = 147.542
[info]   CI (99.9%): [23.444, 1159.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   327.220 ±(99.9%) 323.948 B/op [Average]
[info]   (min, avg, max) = (177.192, 327.220, 373.842), stdev = 84.128
[info]   CI (99.9%): [3.271, 651.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay
[info] # Run progress: 75.37% complete, ETA 00:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92991.884 ops/s
[info] # Warmup Iteration   2: 354251.199 ops/s
[info] # Warmup Iteration   3: 358128.245 ops/s
[info] # Warmup Iteration   4: 357231.136 ops/s
[info] # Warmup Iteration   5: 358956.996 ops/s
[info] Iteration   1: 357294.542 ops/s
[info]                  ·gc.alloc.rate:                   1363.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5877.326 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 357744.093 ops/s
[info]                  ·gc.alloc.rate:                   1365.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5899.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 354762.591 ops/s
[info]                  ·gc.alloc.rate:                   1353.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5975.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 354039.685 ops/s
[info]                  ·gc.alloc.rate:                   1351.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6002.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 357527.565 ops/s
[info]                  ·gc.alloc.rate:                   1364.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5958.601 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay":
[info]   356273.695 ±(99.9%) 6683.566 ops/s [Average]
[info]   (min, avg, max) = (354039.685, 356273.695, 357744.093), stdev = 1735.701
[info]   CI (99.9%): [349590.129, 362957.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1359.830 ±(99.9%) 25.299 MB/sec [Average]
[info]   (min, avg, max) = (1351.521, 1359.830, 1365.709), stdev = 6.570
[info]   CI (99.9%): [1334.531, 1385.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6008.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6008.001, 6008.001, 6008.001), stdev = 0.001
[info]   CI (99.9%): [6008.001, 6008.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.423 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (0.367, 0.423, 0.463), stdev = 0.050
[info]   CI (99.9%): [0.229, 0.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1344.954 ±(99.9%) 29.676 MB/sec [Average]
[info]   (min, avg, max) = (1333.856, 1344.954, 1353.216), stdev = 7.707
[info]   CI (99.9%): [1315.279, 1374.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5942.440 ±(99.9%) 202.056 B/op [Average]
[info]   (min, avg, max) = (5877.326, 5942.440, 6002.083), stdev = 52.473
[info]   CI (99.9%): [5740.383, 6144.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 76.12% complete, ETA 00:08:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298350.562 ops/s
[info] # Warmup Iteration   2: 667584.734 ops/s
[info] # Warmup Iteration   3: 669839.344 ops/s
[info] # Warmup Iteration   4: 685742.597 ops/s
[info] # Warmup Iteration   5: 672679.806 ops/s
[info] Iteration   1: 677050.442 ops/s
[info]                  ·gc.alloc.rate:                   2084.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4677.866 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 681179.684 ops/s
[info]                  ·gc.alloc.rate:                   2097.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5457.654 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 678282.832 ops/s
[info]                  ·gc.alloc.rate:                   2088.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4715.532 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 676148.523 ops/s
[info]                  ·gc.alloc.rate:                   2082.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4741.418 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 683852.153 ops/s
[info]                  ·gc.alloc.rate:                   2105.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4690.868 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   679302.727 ±(99.9%) 12219.687 ops/s [Average]
[info]   (min, avg, max) = (676148.523, 679302.727, 683852.153), stdev = 3173.414
[info]   CI (99.9%): [667083.040, 691522.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2091.922 ±(99.9%) 37.799 MB/sec [Average]
[info]   (min, avg, max) = (2082.230, 2091.922, 2105.978), stdev = 9.816
[info]   CI (99.9%): [2054.123, 2129.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.117, 0.146), stdev = 0.019
[info]   CI (99.9%): [0.045, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.270 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (0.240, 0.270, 0.338), stdev = 0.044
[info]   CI (99.9%): [0.102, 0.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2095.828 ±(99.9%) 573.525 MB/sec [Average]
[info]   (min, avg, max) = (2011.786, 2095.828, 2361.612), stdev = 148.943
[info]   CI (99.9%): [1522.303, 2669.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4856.668 ±(99.9%) 1297.052 B/op [Average]
[info]   (min, avg, max) = (4677.866, 4856.668, 5457.654), stdev = 336.840
[info]   CI (99.9%): [3559.615, 6153.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson
[info] # Run progress: 76.87% complete, ETA 00:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 474916.765 ops/s
[info] # Warmup Iteration   2: 1562961.354 ops/s
[info] # Warmup Iteration   3: 1580084.658 ops/s
[info] # Warmup Iteration   4: 1539764.897 ops/s
[info] # Warmup Iteration   5: 1570036.346 ops/s
[info] Iteration   1: 1574967.771 ops/s
[info]                  ·gc.alloc.rate:                   1192.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1329.258 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1582223.923 ops/s
[info]                  ·gc.alloc.rate:                   1198.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 996.859 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1573650.652 ops/s
[info]                  ·gc.alloc.rate:                   1191.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1343.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1576231.256 ops/s
[info]                  ·gc.alloc.rate:                   1193.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1346.141 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1557184.438 ops/s
[info]                  ·gc.alloc.rate:                   1179.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1013.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1024.682 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson":
[info]   1572851.608 ±(99.9%) 36011.197 ops/s [Average]
[info]   (min, avg, max) = (1557184.438, 1572851.608, 1582223.923), stdev = 9351.993
[info]   CI (99.9%): [1536840.411, 1608862.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate":
[info]   1191.037 ±(99.9%) 26.683 MB/sec [Average]
[info]   (min, avg, max) = (1179.450, 1191.037, 1198.019), stdev = 6.929
[info]   CI (99.9%): [1164.354, 1217.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.087 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1207.230 ±(99.9%) 701.339 MB/sec [Average]
[info]   (min, avg, max) = (1001.893, 1207.230, 1347.910), stdev = 182.135
[info]   CI (99.9%): [505.891, 1908.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1207.995 ±(99.9%) 694.735 B/op [Average]
[info]   (min, avg, max) = (996.859, 1207.995, 1346.141), stdev = 180.421
[info]   CI (99.9%): [513.259, 1902.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter
[info] # Run progress: 77.61% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5892585.880 ops/s
[info] # Warmup Iteration   2: 6460908.961 ops/s
[info] # Warmup Iteration   3: 6647728.631 ops/s
[info] # Warmup Iteration   4: 6677570.295 ops/s
[info] # Warmup Iteration   5: 6378834.714 ops/s
[info] Iteration   1: 5982783.404 ops/s
[info]                  ·gc.alloc.rate:                   182.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.292 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6220378.242 ops/s
[info]                  ·gc.alloc.rate:                   189.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6522570.563 ops/s
[info]                  ·gc.alloc.rate:                   198.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6658517.987 ops/s
[info]                  ·gc.alloc.rate:      203.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6524306.009 ops/s
[info]                  ·gc.alloc.rate:                   198.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter":
[info]   6381711.241 ±(99.9%) 1057996.122 ops/s [Average]
[info]   (min, avg, max) = (5982783.404, 6381711.241, 6658517.987), stdev = 274758.233
[info]   CI (99.9%): [5323715.119, 7439707.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   194.596 ±(99.9%) 32.290 MB/sec [Average]
[info]   (min, avg, max) = (182.406, 194.596, 203.026), stdev = 8.386
[info]   CI (99.9%): [162.306, 226.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.623 ±(99.9%) 5.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.623, 3.057), stdev = 1.361
[info]   CI (99.9%): [≈ 0, 5.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.150 ±(99.9%) 1.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.738), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   219.917 ±(99.9%) 490.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.917, 332.324), stdev = 127.330
[info]   CI (99.9%): [≈ 0, 710.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   54.783 ±(99.9%) 120.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.783, 80.182), stdev = 31.423
[info]   CI (99.9%): [≈ 0, 175.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay
[info] # Run progress: 78.36% complete, ETA 00:07:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46143.392 ops/s
[info] # Warmup Iteration   2: 255952.452 ops/s
[info] # Warmup Iteration   3: 254743.910 ops/s
[info] # Warmup Iteration   4: 257753.587 ops/s
[info] # Warmup Iteration   5: 259037.284 ops/s
[info] Iteration   1: 257064.851 ops/s
[info]                  ·gc.alloc.rate:                   1789.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12332.734 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 258281.876 ops/s
[info]                  ·gc.alloc.rate:                   1798.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10283.539 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 257901.318 ops/s
[info]                  ·gc.alloc.rate:                   1795.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10327.344 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 257072.541 ops/s
[info]                  ·gc.alloc.rate:                   1789.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12458.870 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 256991.829 ops/s
[info]                  ·gc.alloc.rate:                   1789.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10402.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay":
[info]   257462.483 ±(99.9%) 2274.540 ops/s [Average]
[info]   (min, avg, max) = (256991.829, 257462.483, 258281.876), stdev = 590.691
[info]   CI (99.9%): [255187.943, 259737.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate":
[info]   1792.442 ±(99.9%) 15.666 MB/sec [Average]
[info]   (min, avg, max) = (1789.147, 1792.442, 1798.108), stdev = 4.068
[info]   CI (99.9%): [1776.776, 1808.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.001, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.560 ±(99.9%) 0.559 B/op [Average]
[info]   (min, avg, max) = (0.382, 0.560, 0.765), stdev = 0.145
[info]   CI (99.9%): [0.001, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1825.110 ±(99.9%) 700.687 MB/sec [Average]
[info]   (min, avg, max) = (1687.127, 1825.110, 2034.686), stdev = 181.966
[info]   CI (99.9%): [1124.423, 2525.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11161.038 ±(99.9%) 4346.865 B/op [Average]
[info]   (min, avg, max) = (10283.539, 11161.038, 12458.870), stdev = 1128.867
[info]   CI (99.9%): [6814.173, 15507.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 79.10% complete, ETA 00:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480131.403 ops/s
[info] # Warmup Iteration   2: 915749.017 ops/s
[info] # Warmup Iteration   3: 961427.777 ops/s
[info] # Warmup Iteration   4: 954351.935 ops/s
[info] # Warmup Iteration   5: 960893.598 ops/s
[info] Iteration   1: 959827.298 ops/s
[info]                  ·gc.alloc.rate:                   1521.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2176.760 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 961086.291 ops/s
[info]                  ·gc.alloc.rate:                   1524.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2735.956 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 962382.619 ops/s
[info]                  ·gc.alloc.rate:                   1525.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2196.169 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 951563.925 ops/s
[info]                  ·gc.alloc.rate:                   1508.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2788.599 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 945611.562 ops/s
[info]                  ·gc.alloc.rate:                   1499.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2251.650 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   956094.339 ±(99.9%) 27821.421 ops/s [Average]
[info]   (min, avg, max) = (945611.562, 956094.339, 962382.619), stdev = 7225.135
[info]   CI (99.9%): [928272.918, 983915.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1515.945 ±(99.9%) 44.068 MB/sec [Average]
[info]   (min, avg, max) = (1499.408, 1515.945, 1525.990), stdev = 11.444
[info]   CI (99.9%): [1471.877, 1560.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.000, 2496.000, 2496.000), stdev = 0.001
[info]   CI (99.9%): [2496.000, 2496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.157 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.157, 0.239), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1475.678 ±(99.9%) 712.505 MB/sec [Average]
[info]   (min, avg, max) = (1327.001, 1475.678, 1685.568), stdev = 185.035
[info]   CI (99.9%): [763.173, 2188.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2429.827 ±(99.9%) 1175.579 B/op [Average]
[info]   (min, avg, max) = (2176.760, 2429.827, 2788.599), stdev = 305.294
[info]   CI (99.9%): [1254.248, 3605.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson
[info] # Run progress: 79.85% complete, ETA 00:07:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 834438.512 ops/s
[info] # Warmup Iteration   2: 2529066.264 ops/s
[info] # Warmup Iteration   3: 2590168.223 ops/s
[info] # Warmup Iteration   4: 2584074.451 ops/s
[info] # Warmup Iteration   5: 2583555.209 ops/s
[info] Iteration   1: 2593344.913 ops/s
[info]                  ·gc.alloc.rate:                   1067.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 602.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2570530.631 ops/s
[info]                  ·gc.alloc.rate:                   1058.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 611.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2585323.211 ops/s
[info]                  ·gc.alloc.rate:                   1064.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 610.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2543336.534 ops/s
[info]                  ·gc.alloc.rate:                   1046.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 622.856 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2535038.727 ops/s
[info]                  ·gc.alloc.rate:                   1043.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 836.170 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson":
[info]   2565514.803 ±(99.9%) 98412.270 ops/s [Average]
[info]   (min, avg, max) = (2535038.727, 2565514.803, 2593344.913), stdev = 25557.354
[info]   CI (99.9%): [2467102.533, 2663927.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1056.030 ±(99.9%) 40.756 MB/sec [Average]
[info]   (min, avg, max) = (1043.373, 1056.030, 1067.480), stdev = 10.584
[info]   CI (99.9%): [1015.274, 1096.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.066 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.066, 0.089), stdev = 0.014
[info]   CI (99.9%): [0.012, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1069.521 ±(99.9%) 596.193 MB/sec [Average]
[info]   (min, avg, max) = (993.312, 1069.521, 1346.354), stdev = 154.829
[info]   CI (99.9%): [473.327, 1665.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   656.856 ±(99.9%) 386.952 B/op [Average]
[info]   (min, avg, max) = (602.977, 656.856, 836.170), stdev = 100.490
[info]   CI (99.9%): [269.904, 1043.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter
[info] # Run progress: 80.60% complete, ETA 00:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4373873.205 ops/s
[info] # Warmup Iteration   2: 5882626.105 ops/s
[info] # Warmup Iteration   3: 6048841.276 ops/s
[info] # Warmup Iteration   4: 6076097.163 ops/s
[info] # Warmup Iteration   5: 6070849.498 ops/s
[info] Iteration   1: 6017799.473 ops/s
[info]                  ·gc.alloc.rate:                   672.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6053471.759 ops/s
[info]                  ·gc.alloc.rate:                   676.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6030340.822 ops/s
[info]                  ·gc.alloc.rate:                   674.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6023239.270 ops/s
[info]                  ·gc.alloc.rate:                   673.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5932749.351 ops/s
[info]                  ·gc.alloc.rate:                   663.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter":
[info]   6011520.135 ±(99.9%) 177461.655 ops/s [Average]
[info]   (min, avg, max) = (5932749.351, 6011520.135, 6053471.759), stdev = 46086.228
[info]   CI (99.9%): [5834058.480, 6188981.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   672.165 ±(99.9%) 19.598 MB/sec [Average]
[info]   (min, avg, max) = (663.463, 672.165, 676.818), stdev = 5.090
[info]   CI (99.9%): [652.567, 691.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.038), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   658.905 ±(99.9%) 8.898 MB/sec [Average]
[info]   (min, avg, max) = (656.758, 658.905, 662.169), stdev = 2.311
[info]   CI (99.9%): [650.006, 667.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   172.539 ±(99.9%) 7.119 B/op [Average]
[info]   (min, avg, max) = (170.845, 172.539, 175.657), stdev = 1.849
[info]   CI (99.9%): [165.420, 179.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc
[info] # Run progress: 81.34% complete, ETA 00:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4062996.733 ops/s
[info] # Warmup Iteration   2: 5639237.633 ops/s
[info] # Warmup Iteration   3: 5636059.976 ops/s
[info] # Warmup Iteration   4: 5548479.702 ops/s
[info] # Warmup Iteration   5: 5623883.957 ops/s
[info] Iteration   1: 5614456.986 ops/s
[info]                  ·gc.alloc.rate:                   342.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5652640.953 ops/s
[info]                  ·gc.alloc.rate:                   344.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5620765.448 ops/s
[info]                  ·gc.alloc.rate:                   342.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5632218.097 ops/s
[info]                  ·gc.alloc.rate:                   343.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.950 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5520301.151 ops/s
[info]                  ·gc.alloc.rate:                   336.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc":
[info]   5608076.527 ±(99.9%) 197052.156 ops/s [Average]
[info]   (min, avg, max) = (5520301.151, 5608076.527, 5652640.953), stdev = 51173.819
[info]   CI (99.9%): [5411024.371, 5805128.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   342.020 ±(99.9%) 11.949 MB/sec [Average]
[info]   (min, avg, max) = (336.729, 342.020, 344.812), stdev = 3.103
[info]   CI (99.9%): [330.071, 353.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.653 ±(99.9%) 5.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.653, 3.204), stdev = 1.426
[info]   CI (99.9%): [≈ 0, 6.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.183 ±(99.9%) 1.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.899), stdev = 0.400
[info]   CI (99.9%): [≈ 0, 1.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   329.413 ±(99.9%) 3.406 MB/sec [Average]
[info]   (min, avg, max) = (328.423, 329.413, 330.428), stdev = 0.885
[info]   CI (99.9%): [326.006, 332.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   92.466 ±(99.9%) 2.707 B/op [Average]
[info]   (min, avg, max) = (91.950, 92.466, 93.632), stdev = 0.703
[info]   CI (99.9%): [89.759, 95.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay
[info] # Run progress: 82.09% complete, ETA 00:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55482.585 ops/s
[info] # Warmup Iteration   2: 343776.542 ops/s
[info] # Warmup Iteration   3: 343047.958 ops/s
[info] # Warmup Iteration   4: 345957.194 ops/s
[info] # Warmup Iteration   5: 347232.257 ops/s
[info] Iteration   1: 348411.838 ops/s
[info]                  ·gc.alloc.rate:                   1959.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9116.901 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 345752.194 ops/s
[info]                  ·gc.alloc.rate:                   1945.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9229.419 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 347521.559 ops/s
[info]                  ·gc.alloc.rate:                   1955.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9209.678 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 348579.650 ops/s
[info]                  ·gc.alloc.rate:                   1961.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7666.133 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 344777.374 ops/s
[info]                  ·gc.alloc.rate:                   1939.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9304.432 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay":
[info]   347008.523 ±(99.9%) 6459.830 ops/s [Average]
[info]   (min, avg, max) = (344777.374, 347008.523, 348579.650), stdev = 1677.597
[info]   CI (99.9%): [340548.693, 353468.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate":
[info]   1952.176 ±(99.9%) 36.213 MB/sec [Average]
[info]   (min, avg, max) = (1939.588, 1952.176, 1961.039), stdev = 9.404
[info]   CI (99.9%): [1915.963, 1988.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   8856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8856.001, 8856.001, 8856.001), stdev = 0.001
[info]   CI (99.9%): [8856.001, 8856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.166), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.491 ±(99.9%) 0.602 B/op [Average]
[info]   (min, avg, max) = (0.376, 0.491, 0.758), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 1.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1962.691 ±(99.9%) 571.445 MB/sec [Average]
[info]   (min, avg, max) = (1697.560, 1962.691, 2037.801), stdev = 148.402
[info]   CI (99.9%): [1391.246, 2534.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8905.313 ±(99.9%) 2679.807 B/op [Average]
[info]   (min, avg, max) = (7666.133, 8905.313, 9304.432), stdev = 695.937
[info]   CI (99.9%): [6225.505, 11585.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce
[info] # Run progress: 82.84% complete, ETA 00:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 523096.808 ops/s
[info] # Warmup Iteration   2: 708239.153 ops/s
[info] # Warmup Iteration   3: 716390.628 ops/s
[info] # Warmup Iteration   4: 712258.984 ops/s
[info] # Warmup Iteration   5: 713643.552 ops/s
[info] Iteration   1: 723279.378 ops/s
[info]                  ·gc.alloc.rate:                   1613.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3628.539 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 723601.793 ops/s
[info]                  ·gc.alloc.rate:                   1614.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3649.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 723945.670 ops/s
[info]                  ·gc.alloc.rate:                   1615.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2930.990 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 718522.405 ops/s
[info]                  ·gc.alloc.rate:                   1603.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3703.220 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 720633.461 ops/s
[info]                  ·gc.alloc.rate:                   1607.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3701.144 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce":
[info]   721996.542 ±(99.9%) 9020.132 ops/s [Average]
[info]   (min, avg, max) = (718522.405, 721996.542, 723945.670), stdev = 2342.500
[info]   CI (99.9%): [712976.410, 731016.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate":
[info]   1611.019 ±(99.9%) 19.456 MB/sec [Average]
[info]   (min, avg, max) = (1603.691, 1611.019, 1615.296), stdev = 5.053
[info]   CI (99.9%): [1591.563, 1630.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm":
[info]   3512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3512.001, 3512.001, 3512.001), stdev = 0.001
[info]   CI (99.9%): [3512.000, 3512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.245 ±(99.9%) 0.362 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.245, 0.364), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1615.663 ±(99.9%) 577.512 MB/sec [Average]
[info]   (min, avg, max) = (1348.068, 1615.663, 1694.386), stdev = 149.978
[info]   CI (99.9%): [1038.151, 2193.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3522.583 ±(99.9%) 1279.594 B/op [Average]
[info]   (min, avg, max) = (2930.990, 3522.583, 3703.220), stdev = 332.307
[info]   CI (99.9%): [2242.989, 4802.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson
[info] # Run progress: 83.58% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525855.287 ops/s
[info] # Warmup Iteration   2: 1018179.206 ops/s
[info] # Warmup Iteration   3: 1048731.047 ops/s
[info] # Warmup Iteration   4: 1051080.219 ops/s
[info] # Warmup Iteration   5: 1053897.225 ops/s
[info] Iteration   1: 1055236.220 ops/s
[info]                  ·gc.alloc.rate:                   1335.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1957.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1040691.670 ops/s
[info]                  ·gc.alloc.rate:                   1317.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2000.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1047852.536 ops/s
[info]                  ·gc.alloc.rate:                   1326.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1999.935 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1050846.038 ops/s
[info]                  ·gc.alloc.rate:                   1329.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2005.834 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1053580.800 ops/s
[info]                  ·gc.alloc.rate:                   1333.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2009.923 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson":
[info]   1049641.453 ±(99.9%) 22084.184 ops/s [Average]
[info]   (min, avg, max) = (1040691.670, 1049641.453, 1055236.220), stdev = 5735.192
[info]   CI (99.9%): [1027557.269, 1071725.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate":
[info]   1328.229 ±(99.9%) 27.653 MB/sec [Average]
[info]   (min, avg, max) = (1317.023, 1328.229, 1335.212), stdev = 7.181
[info]   CI (99.9%): [1300.577, 1355.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm":
[info]   1992.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1992.000, 1992.000, 1992.000), stdev = 0.001
[info]   CI (99.9%): [1992.000, 1992.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.187), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.169 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.169, 0.283), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   1330.011 ±(99.9%) 50.749 MB/sec [Average]
[info]   (min, avg, max) = (1311.826, 1330.011, 1345.208), stdev = 13.179
[info]   CI (99.9%): [1279.262, 1380.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1994.710 ±(99.9%) 82.418 B/op [Average]
[info]   (min, avg, max) = (1957.112, 1994.710, 2009.923), stdev = 21.404
[info]   CI (99.9%): [1912.291, 2077.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter
[info] # Run progress: 84.33% complete, ETA 00:05:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 720091.019 ops/s
[info] # Warmup Iteration   2: 736878.865 ops/s
[info] # Warmup Iteration   3: 761859.470 ops/s
[info] # Warmup Iteration   4: 763693.620 ops/s
[info] # Warmup Iteration   5: 751177.539 ops/s
[info] Iteration   1: 762244.346 ops/s
[info]                  ·gc.alloc.rate:                   650.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1364.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 763691.500 ops/s
[info]                  ·gc.alloc.rate:                   652.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1361.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 735422.009 ops/s
[info]                  ·gc.alloc.rate:                   627.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1415.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 747230.979 ops/s
[info]                  ·gc.alloc.rate:                   637.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 697.294 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 762816.358 ops/s
[info]                  ·gc.alloc.rate:                   651.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1368.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter":
[info]   754281.038 ±(99.9%) 48332.448 ops/s [Average]
[info]   (min, avg, max) = (735422.009, 754281.038, 763691.500), stdev = 12551.783
[info]   CI (99.9%): [705948.590, 802613.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate":
[info]   643.966 ±(99.9%) 41.326 MB/sec [Average]
[info]   (min, avg, max) = (627.836, 643.966, 652.012), stdev = 10.732
[info]   CI (99.9%): [602.640, 685.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.001, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.000, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.172), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   595.384 ±(99.9%) 569.166 MB/sec [Average]
[info]   (min, avg, max) = (330.980, 595.384, 663.352), stdev = 147.811
[info]   CI (99.9%): [26.218, 1164.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1241.612 ±(99.9%) 1174.751 B/op [Average]
[info]   (min, avg, max) = (697.294, 1241.612, 1415.594), stdev = 305.079
[info]   CI (99.9%): [66.860, 2416.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce
[info] # Run progress: 85.07% complete, ETA 00:05:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 669219.081 ops/s
[info] # Warmup Iteration   2: 912753.399 ops/s
[info] # Warmup Iteration   3: 926483.078 ops/s
[info] # Warmup Iteration   4: 936447.420 ops/s
[info] # Warmup Iteration   5: 942655.651 ops/s
[info] Iteration   1: 938920.709 ops/s
[info]                  ·gc.alloc.rate:                   1403.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2224.178 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 938190.306 ops/s
[info]                  ·gc.alloc.rate:                   1401.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2239.408 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 935313.537 ops/s
[info]                  ·gc.alloc.rate:                   1397.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2823.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 929432.171 ops/s
[info]                  ·gc.alloc.rate:                   1388.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2281.901 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 937832.942 ops/s
[info]                  ·gc.alloc.rate:                   1401.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2268.239 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce":
[info]   935937.933 ±(99.9%) 14947.742 ops/s [Average]
[info]   (min, avg, max) = (929432.171, 935937.933, 938920.709), stdev = 3881.881
[info]   CI (99.9%): [920990.191, 950885.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate":
[info]   1398.490 ±(99.9%) 22.528 MB/sec [Average]
[info]   (min, avg, max) = (1388.759, 1398.490, 1403.223), stdev = 5.850
[info]   CI (99.9%): [1375.962, 1421.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.133 ±(99.9%) 0.291 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.133, 0.244), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1407.531 ±(99.9%) 581.854 MB/sec [Average]
[info]   (min, avg, max) = (1326.963, 1407.531, 1677.273), stdev = 151.106
[info]   CI (99.9%): [825.677, 1989.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2367.355 ±(99.9%) 984.838 B/op [Average]
[info]   (min, avg, max) = (2224.178, 2367.355, 2823.047), stdev = 255.759
[info]   CI (99.9%): [1382.517, 3352.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson
[info] # Run progress: 85.82% complete, ETA 00:04:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 602962.849 ops/s
[info] # Warmup Iteration   2: 1267244.775 ops/s
[info] # Warmup Iteration   3: 1277628.991 ops/s
[info] # Warmup Iteration   4: 1295317.495 ops/s
[info] # Warmup Iteration   5: 1297095.604 ops/s
[info] Iteration   1: 1290072.833 ops/s
[info]                  ·gc.alloc.rate:                   904.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1184.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1290780.829 ops/s
[info]                  ·gc.alloc.rate:                   905.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1191.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1267937.864 ops/s
[info]                  ·gc.alloc.rate:                   889.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1219.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1290114.302 ops/s
[info]                  ·gc.alloc.rate:                   904.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 803.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1253517.976 ops/s
[info]                  ·gc.alloc.rate:                   879.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1247.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson":
[info]   1278484.761 ±(99.9%) 65441.133 ops/s [Average]
[info]   (min, avg, max) = (1253517.976, 1278484.761, 1290780.829), stdev = 16994.854
[info]   CI (99.9%): [1213043.628, 1343925.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate":
[info]   896.542 ±(99.9%) 45.792 MB/sec [Average]
[info]   (min, avg, max) = (879.054, 896.542, 905.057), stdev = 11.892
[info]   CI (99.9%): [850.751, 942.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.118 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.118, 0.155), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   916.503 ±(99.9%) 555.956 MB/sec [Average]
[info]   (min, avg, max) = (658.647, 916.503, 993.271), stdev = 144.380
[info]   CI (99.9%): [360.547, 1472.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1129.563 ±(99.9%) 707.866 B/op [Average]
[info]   (min, avg, max) = (803.723, 1129.563, 1247.445), stdev = 183.831
[info]   CI (99.9%): [421.697, 1837.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter
[info] # Run progress: 86.57% complete, ETA 00:04:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2126866.154 ops/s
[info] # Warmup Iteration   2: 2313732.834 ops/s
[info] # Warmup Iteration   3: 2325788.403 ops/s
[info] # Warmup Iteration   4: 2318485.472 ops/s
[info] # Warmup Iteration   5: 2223653.301 ops/s
[info] Iteration   1: 2287237.802 ops/s
[info]                  ·gc.alloc.rate:                   557.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2299970.393 ops/s
[info]                  ·gc.alloc.rate:                   561.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 452.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2297510.348 ops/s
[info]                  ·gc.alloc.rate:                   560.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226.338 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2297122.090 ops/s
[info]                  ·gc.alloc.rate:                   560.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 452.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2324140.695 ops/s
[info]                  ·gc.alloc.rate:                   567.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 448.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter":
[info]   2301196.266 ±(99.9%) 52831.522 ops/s [Average]
[info]   (min, avg, max) = (2287237.802, 2301196.266, 2324140.695), stdev = 13720.179
[info]   CI (99.9%): [2248364.743, 2354027.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate":
[info]   561.441 ±(99.9%) 12.981 MB/sec [Average]
[info]   (min, avg, max) = (557.869, 561.441, 567.014), stdev = 3.371
[info]   CI (99.9%): [548.460, 574.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.046 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.070), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   594.943 ±(99.9%) 569.236 MB/sec [Average]
[info]   (min, avg, max) = (330.501, 594.943, 662.020), stdev = 147.829
[info]   CI (99.9%): [25.707, 1164.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   406.868 ±(99.9%) 388.706 B/op [Average]
[info]   (min, avg, max) = (226.338, 406.868, 454.716), stdev = 100.946
[info]   CI (99.9%): [18.162, 795.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce
[info] # Run progress: 87.31% complete, ETA 00:04:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207460.755 ops/s
[info] # Warmup Iteration   2: 310441.109 ops/s
[info] # Warmup Iteration   3: 307397.532 ops/s
[info] # Warmup Iteration   4: 311087.709 ops/s
[info] # Warmup Iteration   5: 313761.566 ops/s
[info] Iteration   1: 314455.686 ops/s
[info]                  ·gc.alloc.rate:                   1070.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4932.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 313475.097 ops/s
[info]                  ·gc.alloc.rate:                   1067.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6632.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 305703.381 ops/s
[info]                  ·gc.alloc.rate:                   1040.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5128.798 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 312628.091 ops/s
[info]                  ·gc.alloc.rate:                   1064.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5040.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 313697.471 ops/s
[info]                  ·gc.alloc.rate:                   1068.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5039.753 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce":
[info]   311991.945 ±(99.9%) 13766.967 ops/s [Average]
[info]   (min, avg, max) = (305703.381, 311991.945, 314455.686), stdev = 3575.238
[info]   CI (99.9%): [298224.978, 325758.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate":
[info]   1062.302 ±(99.9%) 46.966 MB/sec [Average]
[info]   (min, avg, max) = (1040.838, 1062.302, 1070.563), stdev = 12.197
[info]   CI (99.9%): [1015.336, 1109.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.441 ±(99.9%) 0.349 B/op [Average]
[info]   (min, avg, max) = (0.314, 0.441, 0.536), stdev = 0.091
[info]   CI (99.9%): [0.093, 0.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1061.445 ±(99.9%) 559.021 MB/sec [Average]
[info]   (min, avg, max) = (985.158, 1061.445, 1320.819), stdev = 145.176
[info]   CI (99.9%): [502.425, 1620.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5354.656 ±(99.9%) 2762.848 B/op [Average]
[info]   (min, avg, max) = (4932.400, 5354.656, 6632.112), stdev = 717.503
[info]   CI (99.9%): [2591.807, 8117.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson
[info] # Run progress: 88.06% complete, ETA 00:04:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174964.991 ops/s
[info] # Warmup Iteration   2: 288875.979 ops/s
[info] # Warmup Iteration   3: 302012.646 ops/s
[info] # Warmup Iteration   4: 299778.160 ops/s
[info] # Warmup Iteration   5: 300733.252 ops/s
[info] Iteration   1: 300852.916 ops/s
[info]                  ·gc.alloc.rate:                   317.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1338.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 302822.056 ops/s
[info]                  ·gc.alloc.rate:                   320.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1684.211 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 303801.561 ops/s
[info]                  ·gc.alloc.rate:                   321.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1678.889 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 307414.090 ops/s
[info]                  ·gc.alloc.rate:                   324.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1653.862 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 302135.838 ops/s
[info]                  ·gc.alloc.rate:                   319.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1682.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson":
[info]   303405.292 ±(99.9%) 9567.473 ops/s [Average]
[info]   (min, avg, max) = (300852.916, 303405.292, 307414.090), stdev = 2484.642
[info]   CI (99.9%): [293837.819, 312972.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate":
[info]   320.722 ±(99.9%) 10.205 MB/sec [Average]
[info]   (min, avg, max) = (317.966, 320.722, 324.971), stdev = 2.650
[info]   CI (99.9%): [310.517, 330.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm":
[info]   1664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1664.001, 1664.001), stdev = 0.001
[info]   CI (99.9%): [1664.001, 1664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.789 ±(99.9%) 6.575 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.789, 3.843), stdev = 1.707
[info]   CI (99.9%): [≈ 0, 7.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   4.104 ±(99.9%) 34.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.104, 19.980), stdev = 8.876
[info]   CI (99.9%): [≈ 0, 38.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   309.945 ±(99.9%) 116.808 MB/sec [Average]
[info]   (min, avg, max) = (255.689, 309.945, 324.081), stdev = 30.335
[info]   CI (99.9%): [193.137, 426.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1607.575 ±(99.9%) 582.031 B/op [Average]
[info]   (min, avg, max) = (1338.087, 1607.575, 1684.211), stdev = 151.152
[info]   CI (99.9%): [1025.543, 2189.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter
[info] # Run progress: 88.81% complete, ETA 00:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 841723.365 ops/s
[info] # Warmup Iteration   2: 1061440.198 ops/s
[info] # Warmup Iteration   3: 1064476.741 ops/s
[info] # Warmup Iteration   4: 1070666.272 ops/s
[info] # Warmup Iteration   5: 1076528.553 ops/s
[info] Iteration   1: 1067818.796 ops/s
[info]                  ·gc.alloc.rate:                   900.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1455.938 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1074205.246 ops/s
[info]                  ·gc.alloc.rate:                   906.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1452.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1072256.996 ops/s
[info]                  ·gc.alloc.rate:                   904.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 972.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1067828.995 ops/s
[info]                  ·gc.alloc.rate:                   900.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1471.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1076180.887 ops/s
[info]                  ·gc.alloc.rate:                   907.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1464.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter":
[info]   1071658.184 ±(99.9%) 14498.139 ops/s [Average]
[info]   (min, avg, max) = (1067818.796, 1071658.184, 1076180.887), stdev = 3765.121
[info]   CI (99.9%): [1057160.045, 1086156.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate":
[info]   904.031 ±(99.9%) 12.346 MB/sec [Average]
[info]   (min, avg, max) = (900.699, 904.031, 907.812), stdev = 3.206
[info]   CI (99.9%): [891.685, 916.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.128 ±(99.9%) 0.192 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.128, 0.213), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   928.067 ±(99.9%) 571.771 MB/sec [Average]
[info]   (min, avg, max) = (662.623, 928.067, 1001.191), stdev = 148.487
[info]   CI (99.9%): [356.296, 1499.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1363.372 ±(99.9%) 841.220 B/op [Average]
[info]   (min, avg, max) = (972.799, 1363.372, 1471.238), stdev = 218.462
[info]   CI (99.9%): [522.152, 2204.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc
[info] # Run progress: 89.55% complete, ETA 00:03:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 755915.821 ops/s
[info] # Warmup Iteration   2: 926127.115 ops/s
[info] # Warmup Iteration   3: 937581.272 ops/s
[info] # Warmup Iteration   4: 937796.134 ops/s
[info] # Warmup Iteration   5: 944039.535 ops/s
[info] Iteration   1: 943979.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 946077.049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 942257.243 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 941106.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 939063.749 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc":
[info]   942496.826 ±(99.9%) 10331.524 ops/s [Average]
[info]   (min, avg, max) = (939063.749, 942496.826, 946077.049), stdev = 2683.064
[info]   CI (99.9%): [932165.302, 952828.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay
[info] # Run progress: 90.30% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257640.386 ops/s
[info] # Warmup Iteration   2: 333008.357 ops/s
[info] # Warmup Iteration   3: 329497.969 ops/s
[info] # Warmup Iteration   4: 331945.722 ops/s
[info] # Warmup Iteration   5: 330678.480 ops/s
[info] Iteration   1: 331676.915 ops/s
[info]                  ·gc.alloc.rate:                   353.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1553.369 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 331336.680 ops/s
[info]                  ·gc.alloc.rate:                   353.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1554.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 331509.666 ops/s
[info]                  ·gc.alloc.rate:                   353.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1546.474 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 332234.526 ops/s
[info]                  ·gc.alloc.rate:                   354.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3086.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 330987.796 ops/s
[info]                  ·gc.alloc.rate:                   353.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1548.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay":
[info]   331549.117 ±(99.9%) 1772.850 ops/s [Average]
[info]   (min, avg, max) = (330987.796, 331549.117, 332234.526), stdev = 460.404
[info]   CI (99.9%): [329776.267, 333321.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate":
[info]   353.840 ±(99.9%) 1.884 MB/sec [Average]
[info]   (min, avg, max) = (353.216, 353.840, 354.565), stdev = 0.489
[info]   CI (99.9%): [351.956, 355.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   0.780 ±(99.9%) 6.449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.780, 3.774), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   3.701 ±(99.9%) 30.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.701, 17.913), stdev = 7.949
[info]   CI (99.9%): [≈ 0, 34.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   391.446 ±(99.9%) 559.401 MB/sec [Average]
[info]   (min, avg, max) = (325.630, 391.446, 651.317), stdev = 145.275
[info]   CI (99.9%): [≈ 0, 950.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   1857.921 ±(99.9%) 2643.716 B/op [Average]
[info]   (min, avg, max) = (1546.474, 1857.921, 3086.070), stdev = 686.565
[info]   CI (99.9%): [≈ 0, 4501.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce
[info] # Run progress: 91.04% complete, ETA 00:03:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1295942.491 ops/s
[info] # Warmup Iteration   2: 1966294.960 ops/s
[info] # Warmup Iteration   3: 1999774.962 ops/s
[info] # Warmup Iteration   4: 1997429.707 ops/s
[info] # Warmup Iteration   5: 2002173.083 ops/s
[info] Iteration   1: 1994248.016 ops/s
[info]                  ·gc.alloc.rate:                   1378.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1046.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2005934.616 ops/s
[info]                  ·gc.alloc.rate:                   1386.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1046.620 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1998873.330 ops/s
[info]                  ·gc.alloc.rate:                   1381.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1056.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1962537.580 ops/s
[info]                  ·gc.alloc.rate:                   1356.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1079.883 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1998948.159 ops/s
[info]                  ·gc.alloc.rate:                   1381.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1063.386 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce":
[info]   1992108.340 ±(99.9%) 65651.000 ops/s [Average]
[info]   (min, avg, max) = (1962537.580, 1992108.340, 2005934.616), stdev = 17049.356
[info]   CI (99.9%): [1926457.340, 2057759.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate":
[info]   1376.847 ±(99.9%) 45.205 MB/sec [Average]
[info]   (min, avg, max) = (1356.586, 1376.847, 1386.723), stdev = 11.740
[info]   CI (99.9%): [1331.642, 1422.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.092 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (0.049, 0.092, 0.147), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1339.361 ±(99.9%) 38.167 MB/sec [Average]
[info]   (min, avg, max) = (1325.396, 1339.361, 1350.152), stdev = 9.912
[info]   CI (99.9%): [1301.194, 1377.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1058.459 ±(99.9%) 53.602 B/op [Average]
[info]   (min, avg, max) = (1046.389, 1058.459, 1079.883), stdev = 13.920
[info]   CI (99.9%): [1004.856, 1112.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson
[info] # Run progress: 91.79% complete, ETA 00:02:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 927095.331 ops/s
[info] # Warmup Iteration   2: 2597485.820 ops/s
[info] # Warmup Iteration   3: 2942514.159 ops/s
[info] # Warmup Iteration   4: 2979560.560 ops/s
[info] # Warmup Iteration   5: 2963447.254 ops/s
[info] Iteration   1: 2972483.140 ops/s
[info]                  ·gc.alloc.rate:                   1223.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 691.959 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2978744.649 ops/s
[info]                  ·gc.alloc.rate:                   1226.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2976718.491 ops/s
[info]                  ·gc.alloc.rate:                   1225.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700.842 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2963954.920 ops/s
[info]                  ·gc.alloc.rate:                   1220.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 708.127 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2952467.606 ops/s
[info]                  ·gc.alloc.rate:                   1215.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 535.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson":
[info]   2968873.761 ±(99.9%) 41533.383 ops/s [Average]
[info]   (min, avg, max) = (2952467.606, 2968873.761, 2978744.649), stdev = 10786.088
[info]   CI (99.9%): [2927340.379, 3010407.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate":
[info]   1222.154 ±(99.9%) 17.381 MB/sec [Average]
[info]   (min, avg, max) = (1215.242, 1222.154, 1226.441), stdev = 4.514
[info]   CI (99.9%): [1204.773, 1239.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.051 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.051, 0.066), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   1191.407 ±(99.9%) 688.717 MB/sec [Average]
[info]   (min, avg, max) = (986.899, 1191.407, 1333.533), stdev = 178.858
[info]   CI (99.9%): [502.690, 1880.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   631.641 ±(99.9%) 363.271 B/op [Average]
[info]   (min, avg, max) = (521.436, 631.641, 708.127), stdev = 94.340
[info]   CI (99.9%): [268.370, 994.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter
[info] # Run progress: 92.54% complete, ETA 00:02:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2429055.783 ops/s
[info] # Warmup Iteration   2: 3140247.625 ops/s
[info] # Warmup Iteration   3: 3152096.032 ops/s
[info] # Warmup Iteration   4: 3161808.339 ops/s
[info] # Warmup Iteration   5: 3185669.672 ops/s
[info] Iteration   1: 3187160.768 ops/s
[info]                  ·gc.alloc.rate:                   631.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324.349 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3148625.775 ops/s
[info]                  ·gc.alloc.rate:                   624.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3149059.624 ops/s
[info]                  ·gc.alloc.rate:                   624.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3180251.074 ops/s
[info]                  ·gc.alloc.rate:                   630.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3177047.239 ops/s
[info]                  ·gc.alloc.rate:                   629.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter":
[info]   3168428.896 ±(99.9%) 70274.385 ops/s [Average]
[info]   (min, avg, max) = (3148625.775, 3168428.896, 3187160.768), stdev = 18250.035
[info]   CI (99.9%): [3098154.511, 3238703.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate":
[info]   628.024 ±(99.9%) 13.599 MB/sec [Average]
[info]   (min, avg, max) = (624.135, 628.024, 631.640), stdev = 3.532
[info]   CI (99.9%): [614.425, 641.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.037 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.052), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   658.461 ±(99.9%) 7.278 MB/sec [Average]
[info]   (min, avg, max) = (656.639, 658.461, 661.260), stdev = 1.890
[info]   CI (99.9%): [651.183, 665.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   327.128 ±(99.9%) 7.023 B/op [Average]
[info]   (min, avg, max) = (324.349, 327.128, 328.937), stdev = 1.824
[info]   CI (99.9%): [320.105, 334.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc
[info] # Run progress: 93.28% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2569615.890 ops/s
[info] # Warmup Iteration   2: 3246673.736 ops/s
[info] # Warmup Iteration   3: 3273459.122 ops/s
[info] # Warmup Iteration   4: 3268328.181 ops/s
[info] # Warmup Iteration   5: 3277262.883 ops/s
[info] Iteration   1: 3273313.731 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3192116.045 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3269869.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3276811.759 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3269270.234 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc":
[info]   3256276.166 ±(99.9%) 138598.081 ops/s [Average]
[info]   (min, avg, max) = (3192116.045, 3256276.166, 3276811.759), stdev = 35993.482
[info]   CI (99.9%): [3117678.085, 3394874.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay
[info] # Run progress: 94.03% complete, ETA 00:02:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2113307.199 ops/s
[info] # Warmup Iteration   2: 2822201.939 ops/s
[info] # Warmup Iteration   3: 2827820.072 ops/s
[info] # Warmup Iteration   4: 2847539.179 ops/s
[info] # Warmup Iteration   5: 2854299.807 ops/s
[info] Iteration   1: 2858207.171 ops/s
[info]                  ·gc.alloc.rate:                   1205.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 724.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2856599.069 ops/s
[info]                  ·gc.alloc.rate:                   1204.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 729.997 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2857912.272 ops/s
[info]                  ·gc.alloc.rate:                   1205.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550.234 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2797721.939 ops/s
[info]                  ·gc.alloc.rate:                   1180.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752.975 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2843896.869 ops/s
[info]                  ·gc.alloc.rate:                   1199.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 557.582 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay":
[info]   2842867.464 ±(99.9%) 99845.867 ops/s [Average]
[info]   (min, avg, max) = (2797721.939, 2842867.464, 2858207.171), stdev = 25929.655
[info]   CI (99.9%): [2743021.597, 2942713.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate":
[info]   1199.115 ±(99.9%) 41.731 MB/sec [Average]
[info]   (min, avg, max) = (1180.240, 1199.115, 1205.569), stdev = 10.837
[info]   CI (99.9%): [1157.383, 1240.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.166), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.055 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.055, 0.092), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   1196.760 ±(99.9%) 681.695 MB/sec [Average]
[info]   (min, avg, max) = (998.834, 1196.760, 1338.390), stdev = 177.034
[info]   CI (99.9%): [515.065, 1878.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   662.975 ±(99.9%) 385.763 B/op [Average]
[info]   (min, avg, max) = (550.234, 662.975, 752.975), stdev = 100.181
[info]   CI (99.9%): [277.213, 1048.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 94.78% complete, ETA 00:01:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6032.776 ops/s
[info] # Warmup Iteration   2: 9653.669 ops/s
[info] # Warmup Iteration   3: 11004.179 ops/s
[info] # Warmup Iteration   4: 11101.860 ops/s
[info] # Warmup Iteration   5: 11691.067 ops/s
[info] Iteration   1: 12491.990 ops/s
[info]                  ·gc.alloc.rate:                   1817.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              229081.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1993.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251255.426 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 12598.384 ops/s
[info]                  ·gc.alloc.rate:                   1833.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              229120.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209141.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12609.117 ops/s
[info]                  ·gc.alloc.rate:                   1835.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              229120.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252167.064 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12556.181 ops/s
[info]                  ·gc.alloc.rate:                   1828.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              229120.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211902.690 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12394.044 ops/s
[info]                  ·gc.alloc.rate:                   1803.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              229113.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215179.265 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12529.943 ±(99.9%) 341.983 ops/s [Average]
[info]   (min, avg, max) = (12394.044, 12529.943, 12609.117), stdev = 88.812
[info]   CI (99.9%): [12187.960, 12871.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1823.761 ±(99.9%) 49.901 MB/sec [Average]
[info]   (min, avg, max) = (1803.973, 1823.761, 1835.108), stdev = 12.959
[info]   CI (99.9%): [1773.860, 1873.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229111.129 ±(99.9%) 63.985 B/op [Average]
[info]   (min, avg, max) = (229081.806, 229111.129, 229120.032), stdev = 16.617
[info]   CI (99.9%): [229047.144, 229175.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.358 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.146, 0.210), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18.274 ±(99.9%) 44.698 B/op [Average]
[info]   (min, avg, max) = (0.185, 18.274, 26.270), stdev = 11.608
[info]   CI (99.9%): [≈ 0, 62.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1814.475 ±(99.9%) 677.579 MB/sec [Average]
[info]   (min, avg, max) = (1673.764, 1814.475, 2019.700), stdev = 175.965
[info]   CI (99.9%): [1136.896, 2492.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   227929.103 ±(99.9%) 84010.923 B/op [Average]
[info]   (min, avg, max) = (209141.071, 227929.103, 252167.064), stdev = 21817.370
[info]   CI (99.9%): [143918.181, 311940.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson
[info] # Run progress: 95.52% complete, ETA 00:01:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4919.763 ops/s
[info] # Warmup Iteration   2: 16046.991 ops/s
[info] # Warmup Iteration   3: 16805.703 ops/s
[info] # Warmup Iteration   4: 16656.492 ops/s
[info] # Warmup Iteration   5: 16834.719 ops/s
[info] Iteration   1: 16909.718 ops/s
[info]                  ·gc.alloc.rate:                   238.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23805.911 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16924.534 ops/s
[info]                  ·gc.alloc.rate:      238.988 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16703.301 ops/s
[info]                  ·gc.alloc.rate:                   235.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              22213.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30375.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16591.770 ops/s
[info]                  ·gc.alloc.rate:                   234.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              22208.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30580.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16735.520 ops/s
[info]                  ·gc.alloc.rate:      236.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 22208.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson":
[info]   16772.968 ±(99.9%) 547.148 ops/s [Average]
[info]   (min, avg, max) = (16591.770, 16772.968, 16924.534), stdev = 142.093
[info]   CI (99.9%): [16225.820, 17320.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   236.716 ±(99.9%) 8.054 MB/sec [Average]
[info]   (min, avg, max) = (234.072, 236.716, 238.988), stdev = 2.092
[info]   CI (99.9%): [228.662, 244.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   22215.614 ±(99.9%) 31.015 B/op [Average]
[info]   (min, avg, max) = (22208.025, 22215.614, 22224.030), stdev = 8.054
[info]   CI (99.9%): [22184.599, 22246.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.923 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.541), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   10.593 ±(99.9%) 87.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.593, 50.992), stdev = 22.600
[info]   CI (99.9%): [≈ 0, 97.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   180.068 ±(99.9%) 641.571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 180.068, 322.327), stdev = 166.614
[info]   CI (99.9%): [≈ 0, 821.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   16952.307 ±(99.9%) 60506.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16952.307, 30580.308), stdev = 15713.314
[info]   CI (99.9%): [≈ 0, 77458.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter
[info] # Run progress: 96.27% complete, ETA 00:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17261.941 ops/s
[info] # Warmup Iteration   2: 36925.576 ops/s
[info] # Warmup Iteration   3: 37953.802 ops/s
[info] # Warmup Iteration   4: 37801.078 ops/s
[info] # Warmup Iteration   5: 37640.886 ops/s
[info] Iteration   1: 38194.986 ops/s
[info]                  ·gc.alloc.rate:                   349.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13586.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38273.438 ops/s
[info]                  ·gc.alloc.rate:                   350.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13559.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 38255.596 ops/s
[info]                  ·gc.alloc.rate:                   350.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13509.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 38243.658 ops/s
[info]                  ·gc.alloc.rate:                   350.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13514.273 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38122.575 ops/s
[info]                  ·gc.alloc.rate:                   349.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13528.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter":
[info]   38218.051 ±(99.9%) 234.073 ops/s [Average]
[info]   (min, avg, max) = (38122.575, 38218.051, 38273.438), stdev = 60.788
[info]   CI (99.9%): [37983.978, 38452.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   349.989 ±(99.9%) 2.235 MB/sec [Average]
[info]   (min, avg, max) = (349.091, 349.989, 350.532), stdev = 0.581
[info]   CI (99.9%): [347.754, 352.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   14416.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14416.011, 14416.011, 14416.012), stdev = 0.001
[info]   CI (99.9%): [14416.009, 14416.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.675 ±(99.9%) 5.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.290), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   27.808 ±(99.9%) 232.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.808, 135.608), stdev = 60.265
[info]   CI (99.9%): [≈ 0, 259.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   328.713 ±(99.9%) 3.489 MB/sec [Average]
[info]   (min, avg, max) = (327.611, 328.713, 329.698), stdev = 0.906
[info]   CI (99.9%): [325.223, 332.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   13539.644 ±(99.9%) 124.769 B/op [Average]
[info]   (min, avg, max) = (13509.682, 13539.644, 13586.146), stdev = 32.402
[info]   CI (99.9%): [13414.875, 13664.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay
[info] # Run progress: 97.01% complete, ETA 00:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 920.310 ops/s
[info] # Warmup Iteration   2: 3216.099 ops/s
[info] # Warmup Iteration   3: 3114.097 ops/s
[info] # Warmup Iteration   4: 3476.525 ops/s
[info] # Warmup Iteration   5: 3804.541 ops/s
[info] Iteration   1: 3818.218 ops/s
[info]                  ·gc.alloc.rate:                   1226.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 545841.605 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3825.957 ops/s
[info]                  ·gc.alloc.rate:                   1228.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410991.377 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3815.617 ops/s
[info]                  ·gc.alloc.rate:                   1225.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 552033.920 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3792.235 ops/s
[info]                  ·gc.alloc.rate:                   1217.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 557876.712 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3816.699 ops/s
[info]                  ·gc.alloc.rate:                   1225.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1011.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417041.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay":
[info]   3813.745 ±(99.9%) 48.862 ops/s [Average]
[info]   (min, avg, max) = (3792.235, 3813.745, 3825.957), stdev = 12.689
[info]   CI (99.9%): [3764.884, 3862.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1224.657 ±(99.9%) 15.708 MB/sec [Average]
[info]   (min, avg, max) = (1217.769, 1224.657, 1228.654), stdev = 4.079
[info]   CI (99.9%): [1208.949, 1240.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   505496.110 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (505496.107, 505496.110, 505496.124), stdev = 0.007
[info]   CI (99.9%): [505496.082, 505496.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   20.602 ±(99.9%) 55.279 B/op [Average]
[info]   (min, avg, max) = (8.583, 20.602, 42.924), stdev = 14.356
[info]   CI (99.9%): [≈ 0, 75.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1203.187 ±(99.9%) 697.129 MB/sec [Average]
[info]   (min, avg, max) = (998.952, 1203.187, 1343.957), stdev = 181.042
[info]   CI (99.9%): [506.058, 1900.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   496756.929 ±(99.9%) 291422.989 B/op [Average]
[info]   (min, avg, max) = (410991.377, 496756.929, 557876.712), stdev = 75681.625
[info]   CI (99.9%): [205333.940, 788179.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson
[info] # Run progress: 97.76% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ba3b2a41/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 22273.237 ops/s
[info] # Warmup Iteration   2: 56882.740 ops/s
[info] # Warmup Iteration   3: 56694.359 ops/s
[info] # Warmup Iteration   4: 56727.261 ops/s
[info] # Warmup Iteration   5: 56677.214 ops/s
[info] Iteration   1: 56775.098 ops/s
[info]                  ·gc.alloc.rate:                   724.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18113.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 56117.703 ops/s
[info]                  ·gc.alloc.rate:                   716.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18400.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 56862.641 ops/s
[info]                  ·gc.alloc.rate:                   726.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18232.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 56877.744 ops/s
[info]                  ·gc.alloc.rate:                   726.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18302.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 56718.589 ops/s
[info]                  ·gc.alloc.rate:                   724.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27678.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson":
[info]   56670.355 ±(99.9%) 1215.709 ops/s [Average]
[info]   (min, avg, max) = (56117.703, 56670.355, 56877.744), stdev = 315.716
[info]   CI (99.9%): [55454.646, 57886.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   723.621 ±(99.9%) 15.797 MB/sec [Average]
[info]   (min, avg, max) = (716.461, 723.621, 726.288), stdev = 4.102
[info]   CI (99.9%): [707.825, 739.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   20099.994 ±(99.9%) 0.292 B/op [Average]
[info]   (min, avg, max) = (20099.918, 20099.994, 20100.105), stdev = 0.076
[info]   CI (99.9%): [20099.702, 20100.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.923 ±(99.9%) 3.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.923, 2.310), stdev = 0.966
[info]   CI (99.9%): [≈ 0, 4.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   725.299 ±(99.9%) 585.519 MB/sec [Average]
[info]   (min, avg, max) = (653.252, 725.299, 997.253), stdev = 152.057
[info]   CI (99.9%): [139.780, 1310.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   20145.379 ±(99.9%) 16220.066 B/op [Average]
[info]   (min, avg, max) = (18113.597, 20145.379, 27678.251), stdev = 4212.300
[info]   CI (99.9%): [3925.313, 36365.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter
[info] # Run progress: 98.51% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75229.267 ops/s
[info] # Warmup Iteration   2: 92612.500 ops/s
[info] # Warmup Iteration   3: 93101.000 ops/s
[info] # Warmup Iteration   4: 93337.223 ops/s
[info] # Warmup Iteration   5: 94448.238 ops/s
[info] Iteration   1: 94531.347 ops/s
[info]                  ·gc.alloc.rate:                   617.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10912.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 92618.836 ops/s
[info]                  ·gc.alloc.rate:                   605.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11138.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 92507.571 ops/s
[info]                  ·gc.alloc.rate:                   604.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11173.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 94336.037 ops/s
[info]                  ·gc.alloc.rate:                   616.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5489.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 94129.057 ops/s
[info]                  ·gc.alloc.rate:                   615.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11019.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter":
[info]   93624.569 ±(99.9%) 3773.888 ops/s [Average]
[info]   (min, avg, max) = (92507.571, 93624.569, 94531.347), stdev = 980.067
[info]   CI (99.9%): [89850.681, 97398.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   611.847 ±(99.9%) 24.619 MB/sec [Average]
[info]   (min, avg, max) = (604.516, 611.847, 617.683), stdev = 6.393
[info]   CI (99.9%): [587.228, 636.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   10288.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.004, 10288.004, 10288.005), stdev = 0.001
[info]   CI (99.9%): [10288.004, 10288.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.125), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1.404 ±(99.9%) 3.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.404, 2.122), stdev = 0.827
[info]   CI (99.9%): [≈ 0, 4.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   591.002 ±(99.9%) 563.958 MB/sec [Average]
[info]   (min, avg, max) = (329.023, 591.002, 658.856), stdev = 146.458
[info]   CI (99.9%): [27.045, 1154.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   9946.923 ±(99.9%) 9602.447 B/op [Average]
[info]   (min, avg, max) = (5489.810, 9946.923, 11173.750), stdev = 2493.725
[info]   CI (99.9%): [344.477, 19549.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 99.25% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88042.080 ops/s
[info] # Warmup Iteration   2: 108152.640 ops/s
[info] # Warmup Iteration   3: 106220.627 ops/s
[info] # Warmup Iteration   4: 108150.298 ops/s
[info] # Warmup Iteration   5: 108130.636 ops/s
[info] Iteration   1: 108436.459 ops/s
[info]                  ·gc.alloc.rate:      16.529 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 108575.742 ops/s
[info]                  ·gc.alloc.rate:      16.551 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 107961.380 ops/s
[info]                  ·gc.alloc.rate:      16.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 108493.883 ops/s
[info]                  ·gc.alloc.rate:      16.541 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 108273.705 ops/s
[info]                  ·gc.alloc.rate:      16.512 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc":
[info]   108348.234 ±(99.9%) 935.254 ops/s [Average]
[info]   (min, avg, max) = (107961.380, 108348.234, 108575.742), stdev = 242.883
[info]   CI (99.9%): [107412.980, 109283.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   16.518 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (16.457, 16.518, 16.551), stdev = 0.037
[info]   CI (99.9%): [16.375, 16.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.004, 240.004, 240.004), stdev = 0.001
[info]   CI (99.9%): [240.004, 240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:35:07
[info] Benchmark                                                                               Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    741060.299 ±   19784.762   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      1958.480 ±      52.310  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4160.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.129 ±       0.174  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.274 ±       0.367    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      1958.909 ±     562.394  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4161.530 ±    1226.950    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        29.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        25.000                    ms
[info] AdtBenchmark.readJackson                                                               thrpt    5   1697274.546 ±   46887.408   ops/s
[info] AdtBenchmark.readJackson:·gc.alloc.rate                                                thrpt    5      1207.522 ±      33.073  MB/sec
[info] AdtBenchmark.readJackson:·gc.alloc.rate.norm                                           thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.108 ±       0.132  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.100 ±       0.124    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1207.915 ±     723.997  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      1121.079 ±     691.406    B/op
[info] AdtBenchmark.readJackson:·gc.count                                                     thrpt    5        18.000                counts
[info] AdtBenchmark.readJackson:·gc.time                                                      thrpt    5        20.000                    ms
[info] AdtBenchmark.readJsoniter                                                              thrpt    5   4071395.559 ±  271320.004   ops/s
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate                                               thrpt    5       268.962 ±      17.986  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                      thrpt    5         0.628 ±       5.273  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.240 ±       2.012    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                  thrpt    5       250.133 ±     553.125  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                             thrpt    5        95.975 ±     211.589    B/op
[info] AdtBenchmark.readJsoniter:·gc.count                                                    thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniter:·gc.time                                                     thrpt    5         7.000                    ms
[info] AdtBenchmark.readPlay                                                                  thrpt    5    176516.015 ±    5606.010   ops/s
[info] AdtBenchmark.readPlay:·gc.alloc.rate                                                   thrpt    5      1530.457 ±      48.544  MB/sec
[info] AdtBenchmark.readPlay:·gc.alloc.rate.norm                                              thrpt    5     13648.002 ±       0.001    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space                                          thrpt    5         0.108 ±       0.207  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.966 ±       1.855    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                      thrpt    5      1547.744 ±     723.578  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5     13810.057 ±    6734.941    B/op
[info] AdtBenchmark.readPlay:·gc.count                                                        thrpt    5        23.000                counts
[info] AdtBenchmark.readPlay:·gc.time                                                         thrpt    5        25.000                    ms
[info] AdtBenchmark.writeJackson                                                              thrpt    5   2086900.072 ±   32070.963   ops/s
[info] AdtBenchmark.writeJackson:·gc.alloc.rate                                               thrpt    5       678.709 ±      10.464  MB/sec
[info] AdtBenchmark.writeJackson:·gc.alloc.rate.norm                                          thrpt    5       512.000 ±       0.001    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.087 ±       0.174  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.066 ±       0.131    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                                  thrpt    5       659.874 ±      15.721  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5       497.804 ±      17.451    B/op
[info] AdtBenchmark.writeJackson:·gc.count                                                    thrpt    5        10.000                counts
[info] AdtBenchmark.writeJackson:·gc.time                                                     thrpt    5        11.000                    ms
[info] AdtBenchmark.writeJsoniter                                                             thrpt    5  13623184.463 ±  218986.491   ops/s
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate                                              thrpt    5       692.377 ±      11.348  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm                                         thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5         0.058 ±       0.154  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.007 ±       0.018    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5       724.742 ±     562.387  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5        83.711 ±      64.067    B/op
[info] AdtBenchmark.writeJsoniter:·gc.count                                                   thrpt    5        11.000                counts
[info] AdtBenchmark.writeJsoniter:·gc.time                                                    thrpt    5        11.000                    ms
[info] AdtBenchmark.writePlay                                                                 thrpt    5    322252.026 ±    4377.015   ops/s
[info] AdtBenchmark.writePlay:·gc.alloc.rate                                                  thrpt    5      1072.724 ±      14.132  MB/sec
[info] AdtBenchmark.writePlay:·gc.alloc.rate.norm                                             thrpt    5      5240.001 ±       0.001    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space                                         thrpt    5         0.071 ±       0.072  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.345 ±       0.347    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                     thrpt    5      1069.329 ±     596.861  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      5224.213 ±    2945.803    B/op
[info] AdtBenchmark.writePlay:·gc.count                                                       thrpt    5        16.000                counts
[info] AdtBenchmark.writePlay:·gc.time                                                        thrpt    5        18.000                    ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1676472.302 ±   49535.542   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2615.804 ±      76.207  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.117 ±       0.176  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.109 ±       0.165    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2580.811 ±     725.398  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2423.716 ±     713.587    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        38.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        34.000                    ms
[info] AnyRefsBenchmark.readJackson                                                           thrpt    5   2626106.476 ±   56657.743   ops/s
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1841.703 ±      40.041  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.117 ±       0.134  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.070 ±       0.079    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      1827.929 ±     698.820  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      1095.772 ±     419.481    B/op
[info] AnyRefsBenchmark.readJackson:·gc.count                                                 thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJackson:·gc.time                                                  thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.readJsoniter                                                          thrpt    5  11189939.322 ±  119110.685   ops/s
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5      1421.800 ±      14.902  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±       0.179  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.012 ±       0.025    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5      1412.180 ±     569.593  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       198.633 ±      79.327    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.count                                                thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        19.000                    ms
[info] AnyRefsBenchmark.readPlay                                                              thrpt    5    710880.609 ±   17028.430   ops/s
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1850.258 ±      44.383  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      4096.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.108 ±       0.036  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.240 ±       0.077    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1826.881 ±     719.336  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      4042.817 ±    1517.895    B/op
[info] AnyRefsBenchmark.readPlay:·gc.count                                                    thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readPlay:·gc.time                                                     thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   1950616.532 ±   73568.377   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1804.436 ±      67.898  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.079 ±       0.067  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.064 ±       0.054    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1820.991 ±     696.840  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1469.156 ±     548.925    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        27.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeJackson                                                          thrpt    5   6335527.119 ±  323291.361   ops/s
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1738.563 ±      88.892  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.133 ±       0.122  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.033 ±       0.032    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5      1689.612 ±      30.064  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       419.895 ±      22.301    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.count                                                thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writeJackson:·gc.time                                                 thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeJsoniter                                                         thrpt    5  23294235.300 ±  360854.230   ops/s
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       710.243 ±      10.850  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.087 ±       0.207  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.006 ±       0.014    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5       724.934 ±     561.200  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        48.995 ±      37.987    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeJsoniter:·gc.time                                                thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.writeJsoniterPrealloc                                                 thrpt    5  23039377.180 ±  343986.237   ops/s
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count                                       thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlay                                                             thrpt    5   1168747.578 ±   18008.674   ops/s
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      1764.112 ±      27.858  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      2376.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.121 ±       0.088  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.163 ±       0.116    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      1758.541 ±     587.267  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2368.750 ±     805.245    B/op
[info] AnyRefsBenchmark.writePlay:·gc.count                                                   thrpt    5        26.000                counts
[info] AnyRefsBenchmark.writePlay:·gc.time                                                    thrpt    5        29.000                    ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5    930267.197 ±   37149.309   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      3011.528 ±     119.550  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5096.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.150 ±       0.154  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.253 ±       0.255    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      2991.553 ±     601.652  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5062.591 ±    1035.803    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        44.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        37.000                    ms
[info] ArraysBenchmark.readJackson                                                            thrpt    5   1795978.766 ±   54336.072   ops/s
[info] ArraysBenchmark.readJackson:·gc.alloc.rate                                             thrpt    5      1688.492 ±      51.081  MB/sec
[info] ArraysBenchmark.readJackson:·gc.alloc.rate.norm                                        thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.117 ±       0.122  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.102 ±       0.105    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                thrpt    5      1622.228 ±    1073.361  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1421.099 ±     916.784    B/op
[info] ArraysBenchmark.readJackson:·gc.count                                                  thrpt    5        24.000                counts
[info] ArraysBenchmark.readJackson:·gc.time                                                   thrpt    5        28.000                    ms
[info] ArraysBenchmark.readJsoniter                                                           thrpt    5   9910137.575 ±  761238.369   ops/s
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate                                            thrpt    5      2467.940 ±     188.598  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm                                       thrpt    5       392.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                   thrpt    5         0.175 ±       0.185  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.028 ±       0.028    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                               thrpt    5      2445.194 ±     580.800  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       388.338 ±      81.837    B/op
[info] ArraysBenchmark.readJsoniter:·gc.count                                                 thrpt    5        36.000                counts
[info] ArraysBenchmark.readJsoniter:·gc.time                                                  thrpt    5        32.000                    ms
[info] ArraysBenchmark.readPlay                                                               thrpt    5    337368.386 ±    2002.065   ops/s
[info] ArraysBenchmark.readPlay:·gc.alloc.rate                                                thrpt    5      2052.285 ±      11.893  MB/sec
[info] ArraysBenchmark.readPlay:·gc.alloc.rate.norm                                           thrpt    5      9576.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space                                       thrpt    5         0.096 ±       0.072  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.447 ±       0.335    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                   thrpt    5      2031.738 ±      30.514  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      9480.143 ±     154.199    B/op
[info] ArraysBenchmark.readPlay:·gc.count                                                     thrpt    5        30.000                counts
[info] ArraysBenchmark.readPlay:·gc.time                                                      thrpt    5        33.000                    ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1067493.210 ±   20900.040   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2348.944 ±      45.881  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3464.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.112 ±       0.166  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.166 ±       0.248    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2305.175 ±     567.261  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      3400.008 ±     871.975    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        34.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        29.000                    ms
[info] ArraysBenchmark.writeJackson                                                           thrpt    5   3849201.687 ±  100990.856   ops/s
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate                                            thrpt    5      2190.902 ±      56.749  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate.norm                                       thrpt    5       896.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.104 ±       0.139  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.043 ±       0.056    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      2171.102 ±     717.800  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       887.775 ±     284.936    B/op
[info] ArraysBenchmark.writeJackson:·gc.count                                                 thrpt    5        32.000                counts
[info] ArraysBenchmark.writeJackson:·gc.time                                                  thrpt    5        36.000                    ms
[info] ArraysBenchmark.writeJsoniter                                                          thrpt    5  19251802.946 ±  259291.837   ops/s
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate                                           thrpt    5       880.648 ±      12.174  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm                                      thrpt    5        72.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±       0.188  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.007 ±       0.015    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5       861.420 ±     694.532  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        70.447 ±      57.191    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.count                                                thrpt    5        13.000                counts
[info] ArraysBenchmark.writeJsoniter:·gc.time                                                 thrpt    5        11.000                    ms
[info] ArraysBenchmark.writePlay                                                              thrpt    5    583597.560 ±   38445.995   ops/s
[info] ArraysBenchmark.writePlay:·gc.alloc.rate                                               thrpt    5      2034.532 ±     134.229  MB/sec
[info] ArraysBenchmark.writePlay:·gc.alloc.rate.norm                                          thrpt    5      5488.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.125 ±       0.160  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.335 ±       0.418    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      2032.289 ±      28.000  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5483.030 ±     306.343    B/op
[info] ArraysBenchmark.writePlay:·gc.count                                                    thrpt    5        30.000                counts
[info] ArraysBenchmark.writePlay:·gc.time                                                     thrpt    5        33.000                    ms
[info] BigIntArrayBenchmark.readCirce                                                         thrpt    5      8288.309 ±     532.815   ops/s
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1224.438 ±      78.841  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    232527.779 ±      30.895    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.079 ±       0.191  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        15.065 ±      36.880    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1203.097 ±     698.161  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    228361.249 ±  128126.951    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.count                                               thrpt    5        18.000                counts
[info] BigIntArrayBenchmark.readCirce:·gc.time                                                thrpt    5        17.000                    ms
[info] BigIntArrayBenchmark.readJackson                                                       thrpt    5     25148.043 ±     464.109   ops/s
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate                                        thrpt    5       930.093 ±      17.332  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                   thrpt    5     58216.016 ±       0.002    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.042 ±       0.127  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         2.608 ±       7.944    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       923.341 ±     576.164  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     57796.971 ±   36147.811    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.count                                             thrpt    5        14.000                counts
[info] BigIntArrayBenchmark.readJackson:·gc.time                                              thrpt    5        15.000                    ms
[info] BigIntArrayBenchmark.readJsoniter                                                      thrpt    5     27627.435 ±    1014.230   ops/s
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5       501.445 ±      18.526  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5     28568.015 ±       0.002    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.021 ±       0.057  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.188 ±       3.238    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       462.681 ±     697.035  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     26421.395 ±   40561.126    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.count                                            thrpt    5         7.000                counts
[info] BigIntArrayBenchmark.readJsoniter:·gc.time                                             thrpt    5         7.000                    ms
[info] BigIntArrayBenchmark.writeJackson                                                      thrpt    5     15173.535 ±     656.169   ops/s
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate                                       thrpt    5      1514.334 ±      65.679  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                  thrpt    5    157088.003 ±       0.194    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±       0.104  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        10.372 ±      10.918    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                          thrpt    5      1486.639 ±     716.633  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    154152.607 ±   71395.535    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.count                                            thrpt    5        22.000                counts
[info] BigIntArrayBenchmark.writeJackson:·gc.time                                             thrpt    5        26.000                    ms
[info] BigIntArrayBenchmark.writeJsoniter                                                     thrpt    5     18061.702 ±     483.703   ops/s
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5      1577.995 ±      42.948  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5    137528.024 ±       0.010    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.100 ±       0.132  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         8.701 ±      11.394    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5      1619.258 ±     570.984  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    141085.789 ±   47823.203    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.count                                           thrpt    5        24.000                counts
[info] BigIntArrayBenchmark.writeJsoniter:·gc.time                                            thrpt    5        21.000                    ms
[info] BigIntArrayBenchmark.writeJsoniterPrealloc                                             thrpt    5     17741.712 ±     559.498   ops/s
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                              thrpt    5      1548.953 ±      48.648  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5    137440.025 ±       0.010    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                     thrpt    5         0.096 ±       0.134  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                thrpt    5         8.501 ±      11.985    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                 thrpt    5      1551.526 ±     705.696  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm            thrpt    5    137581.854 ±   58994.560    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                   thrpt    5        23.000                counts
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time                                    thrpt    5        20.000                    ms
[info] BitSetsBenchmark.readJackson                                                           thrpt    5   2152138.997 ±   15943.836   ops/s
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1367.241 ±      10.876  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1000.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.112 ±       0.091  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.082 ±       0.066    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      1346.856 ±      28.139  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       985.097 ±      24.899    B/op
[info] BitSetsBenchmark.readJackson:·gc.count                                                 thrpt    5        20.000                counts
[info] BitSetsBenchmark.readJackson:·gc.time                                                  thrpt    5        23.000                    ms
[info] BitSetsBenchmark.readJsoniter                                                          thrpt    5   5198207.994 ±  286908.175   ops/s
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5       686.926 ±      38.087  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.062 ±       0.057  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.019 ±       0.017    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5       660.351 ±      10.234  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       199.994 ±      13.721    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.count                                                thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniter:·gc.time                                                 thrpt    5         9.000                    ms
[info] BitSetsBenchmark.readPlay                                                              thrpt    5    426744.039 ±    5003.765   ops/s
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      2001.954 ±      23.808  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      7384.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.096 ±       0.091  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.353 ±       0.340    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1965.087 ±     573.593  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      7247.318 ±    2073.885    B/op
[info] BitSetsBenchmark.readPlay:·gc.count                                                    thrpt    5        29.000                counts
[info] BitSetsBenchmark.readPlay:·gc.time                                                     thrpt    5        33.000                    ms
[info] BitSetsBenchmark.writeJackson                                                          thrpt    5   2694281.575 ±  142108.451   ops/s
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1424.124 ±      75.468  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±       0.057  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.049 ±       0.033    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5      1415.378 ±     593.121  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       826.757 ±     335.472    B/op
[info] BitSetsBenchmark.writeJackson:·gc.count                                                thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJackson:·gc.time                                                 thrpt    5        23.000                    ms
[info] BitSetsBenchmark.writeJsoniter                                                         thrpt    5   6959655.523 ±  500624.411   ops/s
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5      1061.101 ±      76.381  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.112 ±       0.091  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.025 ±       0.021    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5      1065.804 ±     584.681  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       240.972 ±     126.872    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        16.000                counts
[info] BitSetsBenchmark.writeJsoniter:·gc.time                                                thrpt    5        14.000                    ms
[info] BitSetsBenchmark.writePlay                                                             thrpt    5    714190.076 ±   10385.960   ops/s
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      2068.852 ±      29.662  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      4560.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.121 ±       0.105  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.266 ±       0.229    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      2033.425 ±      27.578  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      4481.973 ±      95.738    B/op
[info] BitSetsBenchmark.writePlay:·gc.count                                                   thrpt    5        30.000                counts
[info] BitSetsBenchmark.writePlay:·gc.time                                                    thrpt    5        35.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    823168.496 ±   38905.310   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2669.074 ±     127.184  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5104.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.154 ±       0.134  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.295 ±       0.262    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2648.701 ±     574.536  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      5066.111 ±    1161.389    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        39.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        34.000                    ms
[info] ExtractFieldsBenchmark.readJackson                                                     thrpt    5    984317.144 ±    9738.114   ops/s
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5      1220.573 ±      12.398  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±       0.156  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.113 ±       0.250    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5      1208.377 ±     717.875  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1932.733 ±    1154.928    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.count                                           thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJackson:·gc.time                                            thrpt    5        22.000                    ms
[info] ExtractFieldsBenchmark.readJsoniter                                                    thrpt    5   8248422.636 ±  270372.555   ops/s
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       377.259 ±      12.259  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5         0.640 ±       5.331  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.122 ±       1.020    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5       397.448 ±     574.999  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        75.885 ±     110.295    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.count                                          thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniter:·gc.time                                           thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readPlay                                                        thrpt    5    309367.423 ±   28951.315   ops/s
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1609.981 ±     150.664  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5      8192.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5         0.104 ±       0.057  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.530 ±       0.287    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5      1619.225 ±     590.404  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8227.516 ±    2318.154    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.count                                              thrpt    5        24.000                counts
[info] ExtractFieldsBenchmark.readPlay:·gc.time                                               thrpt    5        27.000                    ms
[info] FloatArrayBenchmark.readCirce                                                          thrpt    5      7433.133 ±     117.587   ops/s
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1406.960 ±      21.477  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    297940.968 ±      27.807    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.062 ±       0.212  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        13.209 ±      44.682    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1407.952 ±     605.680  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    298154.722 ±  128306.823    B/op
[info] FloatArrayBenchmark.readCirce:·gc.count                                                thrpt    5        21.000                counts
[info] FloatArrayBenchmark.readCirce:·gc.time                                                 thrpt    5        20.000                    ms
[info] FloatArrayBenchmark.readJackson                                                        thrpt    5     19540.810 ±     370.788   ops/s
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       849.563 ±      15.868  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     68446.620 ±      53.246    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.067 ±       0.143  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         5.357 ±      11.532    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5       791.419 ±     698.077  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     63774.140 ±   56491.010    B/op
[info] FloatArrayBenchmark.readJackson:·gc.count                                              thrpt    5        12.000                counts
[info] FloatArrayBenchmark.readJackson:·gc.time                                               thrpt    5        13.000                    ms
[info] FloatArrayBenchmark.readJsoniter                                                       thrpt    5     37089.076 ±     274.593   ops/s
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5        97.253 ±       0.749  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5      4128.011 ±       0.002    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5        51.144 ±     440.362  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      2171.691 ±   18698.912    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.count                                             thrpt    5         1.000                counts
[info] FloatArrayBenchmark.readJsoniter:·gc.time                                              thrpt    5         2.000                    ms
[info] FloatArrayBenchmark.readPlay                                                           thrpt    5      6558.322 ±      76.702   ops/s
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1515.357 ±      17.846  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    363712.869 ±       6.934    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.062 ±       0.188  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5        14.972 ±      44.967    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1482.624 ±     715.618  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    355847.227 ±  171320.890    B/op
[info] FloatArrayBenchmark.readPlay:·gc.count                                                 thrpt    5        22.000                counts
[info] FloatArrayBenchmark.readPlay:·gc.time                                                  thrpt    5        22.000                    ms
[info] FloatArrayBenchmark.writeCirce                                                         thrpt    5     17676.746 ±    1848.392   ops/s
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       525.485 ±     102.919  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     46871.904 ±   13662.360    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.042 ±       0.204  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         3.725 ±      18.509    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5       522.431 ±     689.296  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     46718.997 ±   63573.213    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.count                                               thrpt    5         8.000                counts
[info] FloatArrayBenchmark.writeCirce:·gc.time                                                thrpt    5         8.000                    ms
[info] FloatArrayBenchmark.writeJackson                                                       thrpt    5     20188.060 ±    1131.218   ops/s
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       331.781 ±      18.570  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     25872.022 ±       0.263    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.803 ±       6.737  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        62.667 ±     525.425    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       322.703 ±       2.147  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     25168.328 ±    1386.952    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.count                                             thrpt    5         5.000                counts
[info] FloatArrayBenchmark.writeJackson:·gc.time                                              thrpt    5         7.000                    ms
[info] FloatArrayBenchmark.writeJsoniter                                                      thrpt    5     22920.664 ±     118.461   ops/s
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       295.255 ±       1.569  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     20280.018 ±       0.002    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.666 ±       5.597  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5        45.634 ±     383.713    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       314.432 ±     126.472  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     21598.117 ±    8721.346    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.count                                            thrpt    5         5.000                counts
[info] FloatArrayBenchmark.writeJsoniter:·gc.time                                             thrpt    5         8.000                    ms
[info] FloatArrayBenchmark.writeJsoniterPrealloc                                              thrpt    5     23955.058 ±     304.926   ops/s
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       225.823 ±       2.928  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5     14840.017 ±       0.002    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5         0.658 ±       5.584  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5        43.044 ±     365.389    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5       234.281 ±     524.204  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5     15403.340 ±   34455.365    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         4.000                counts
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      7919.413 ±     189.442   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1905.867 ±      46.093  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    378807.521 ±      81.637    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.137 ±       0.307  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        27.073 ±      60.207    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1957.404 ±     578.662  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    389041.701 ±  114262.138    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        29.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readJackson                                                     thrpt    5     14529.345 ±     397.196   ops/s
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5       368.185 ±      10.095  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5     39888.030 ±       0.016    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.908 ±       4.787    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5       324.728 ±       5.586  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     35182.113 ±    1472.074    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.count                                           thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.readJackson:·gc.time                                            thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniter                                                    thrpt    5     23297.051 ±    1473.050   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       398.054 ±      25.273  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5     26896.018 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5         0.012 ±       0.108  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.839 ±       7.221    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5       393.868 ±     564.662  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     26589.673 ±   37623.210    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.count                                          thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.time                                           thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readPlay                                                        thrpt    5      2571.970 ±      59.307   ops/s
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1606.229 ±      36.508  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5    982976.164 ±       0.025    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5         0.012 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5         7.625 ±      43.658    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5      1618.977 ±     577.416  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    990565.872 ±  342906.276    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.count                                              thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.readPlay:·gc.time                                               thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      7719.732 ±     144.615   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1660.393 ±      31.123  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    338576.543 ±      45.395    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.075 ±       0.091  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        15.278 ±      18.590    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1682.144 ±      44.871  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    343020.621 ±   12418.028    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeJackson                                                    thrpt    5     41021.480 ±     801.034   ops/s
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate                                     thrpt    5       594.317 ±      11.691  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                thrpt    5     22807.837 ±       0.529    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                            thrpt    5         0.058 ±       0.143  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         2.238 ±       5.504    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                        thrpt    5       590.996 ±     564.882  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     22692.031 ±   21825.662    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.count                                          thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.time                                           thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniter                                                   thrpt    5     63824.678 ±    2028.315   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate                                    thrpt    5       482.020 ±      15.190  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                               thrpt    5     11888.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.025 ±       0.132  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.616 ±       3.238    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5       458.864 ±     690.394  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     11304.554 ±   16847.203    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.count                                         thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.time                                          thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc                                           thrpt    5     74511.628 ±     547.764   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                            thrpt    5         1.136 ±       0.008  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                       thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlay                                                       thrpt    5      5574.532 ±     133.463   ops/s
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate                                        thrpt    5      1650.432 ±      39.623  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm                                   thrpt    5    466047.949 ±       1.495    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space                               thrpt    5         0.033 ±       0.184  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5         9.457 ±      52.518    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space                           thrpt    5      1620.271 ±     567.081  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    457623.354 ±  164063.975    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.count                                             thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.writePlay:·gc.time                                              thrpt    5        29.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniter                                                   thrpt    5   5435021.880 ±   86614.754   ops/s
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate                                    thrpt    5      1629.658 ±      26.276  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                               thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.087 ±       0.183  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.025 ±       0.053    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5      1617.568 ±     570.205  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       468.471 ±     163.850    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.count                                         thrpt    5        24.000                counts
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.time                                          thrpt    5        20.000                    ms
[info] IntAndLongMapsBenchmark.readPlay                                                       thrpt    5    369117.526 ±    7311.355   ops/s
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate                                        thrpt    5      1982.801 ±      39.071  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm                                   thrpt    5      8456.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                               thrpt    5         0.104 ±       0.098  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.443 ±       0.412    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                           thrpt    5      1964.910 ±     579.666  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      8380.124 ±    2492.698    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.count                                             thrpt    5        29.000                counts
[info] IntAndLongMapsBenchmark.readPlay:·gc.time                                              thrpt    5        34.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniter                                                  thrpt    5   3316324.096 ±  103078.085   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate                                   thrpt    5       539.320 ±      16.427  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                              thrpt    5       256.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.058 ±       0.262  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.028 ±       0.125    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       525.259 ±     691.666  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       249.630 ±     332.033    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.count                                        thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.time                                         thrpt    5         7.000                    ms
[info] IntAndLongMapsBenchmark.writePlay                                                      thrpt    5    351172.817 ±    9161.758   ops/s
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate                                       thrpt    5      1365.097 ±      35.466  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm                                  thrpt    5      6120.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.075 ±       0.091  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.336 ±       0.409    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1411.091 ±     567.173  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      6324.722 ±    2458.460    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.count                                            thrpt    5        21.000                counts
[info] IntAndLongMapsBenchmark.writePlay:·gc.time                                             thrpt    5        25.000                    ms
[info] IntArrayBenchmark.readCirce                                                            thrpt    5     17025.986 ±     144.012   ops/s
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2117.122 ±      17.947  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    195751.838 ±       1.611    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.079 ±       0.104  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         7.311 ±       9.661    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2098.676 ±     589.964  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    194044.573 ±   54374.142    B/op
[info] IntArrayBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000                counts
[info] IntArrayBenchmark.readCirce:·gc.time                                                   thrpt    5        31.000                    ms
[info] IntArrayBenchmark.readJackson                                                          thrpt    5     39671.984 ±     580.575   ops/s
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate                                           thrpt    5       283.616 ±       7.661  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                      thrpt    5     11304.010 ±       0.001    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.012 ±       0.107  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.503 ±       4.335    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.801 ±       6.792  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5        32.318 ±     274.007    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                              thrpt    5       272.303 ±     309.960  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10835.794 ±   12154.524    B/op
[info] IntArrayBenchmark.readJackson:·gc.count                                                thrpt    5         6.000                counts
[info] IntArrayBenchmark.readJackson:·gc.time                                                 thrpt    5        40.000                    ms
[info] IntArrayBenchmark.readJsoniter                                                         thrpt    5     91513.357 ±    1086.626   ops/s
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate                                          thrpt    5       479.012 ±       5.698  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                     thrpt    5      8240.005 ±       0.001    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.037 ±       0.164  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.644 ±       2.828    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5       459.688 ±     692.231  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      7909.117 ±   11928.818    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.count                                               thrpt    5         7.000                counts
[info] IntArrayBenchmark.readJsoniter:·gc.time                                                thrpt    5         7.000                    ms
[info] IntArrayBenchmark.readPlay                                                             thrpt    5      8637.255 ±     276.006   ops/s
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate                                              thrpt    5      3054.395 ±     101.955  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate.norm                                         thrpt    5    556703.538 ±    2124.027    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.104 ±       0.098  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5        18.952 ±      17.773    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      3059.989 ±      14.040  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5    557757.654 ±   19490.776    B/op
[info] IntArrayBenchmark.readPlay:·gc.count                                                   thrpt    5        45.000                counts
[info] IntArrayBenchmark.readPlay:·gc.time                                                    thrpt    5        57.000                    ms
[info] IntArrayBenchmark.writeCirce                                                           thrpt    5     24299.774 ±     444.955   ops/s
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1309.876 ±      24.681  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5     84856.017 ±       0.002    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.129 ±       0.268  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         8.354 ±      17.339    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1271.013 ±     557.992  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     82318.835 ±   35429.183    B/op
[info] IntArrayBenchmark.writeCirce:·gc.count                                                 thrpt    5        19.000                counts
[info] IntArrayBenchmark.writeCirce:·gc.time                                                  thrpt    5        19.000                    ms
[info] IntArrayBenchmark.writeJackson                                                         thrpt    5    101495.419 ±    1146.557   ops/s
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate                                          thrpt    5       818.295 ±       9.084  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                     thrpt    5     12692.325 ±       0.047    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.075 ±       0.122  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         1.162 ±       1.885    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                             thrpt    5       783.974 ±     689.181  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     12163.216 ±   10761.917    B/op
[info] IntArrayBenchmark.writeJackson:·gc.count                                               thrpt    5        12.000                counts
[info] IntArrayBenchmark.writeJackson:·gc.time                                                thrpt    5        13.000                    ms
[info] IntArrayBenchmark.writeJsoniter                                                        thrpt    5    118910.558 ±    5301.664   ops/s
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                         thrpt    5       506.385 ±      22.659  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                    thrpt    5      6704.003 ±       0.001    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5         0.029 ±       0.156  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.383 ±       2.051    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5       459.780 ±     692.669  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      6073.057 ±    8967.137    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.count                                              thrpt    5         7.000                counts
[info] IntArrayBenchmark.writeJsoniter:·gc.time                                               thrpt    5         6.000                    ms
[info] IntArrayBenchmark.writeJsoniterPrealloc                                                thrpt    5    153807.229 ±    1410.626   ops/s
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5         0.003 ±       0.001    B/op
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                      thrpt    5           ≈ 0                counts
[info] IntArrayBenchmark.writePlay                                                            thrpt    5      4219.859 ±     130.795   ops/s
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate                                             thrpt    5      1820.436 ±      56.654  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate.norm                                        thrpt    5    679084.401 ±       1.577    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space                                    thrpt    5         0.033 ±       0.201  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5        12.356 ±      74.372    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                thrpt    5      1817.769 ±     694.019  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    677961.210 ±  251280.379    B/op
[info] IntArrayBenchmark.writePlay:·gc.count                                                  thrpt    5        27.000                counts
[info] IntArrayBenchmark.writePlay:·gc.time                                                   thrpt    5        26.000                    ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    695386.396 ±   24721.463   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2505.450 ±      89.029  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5672.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.133 ±       0.231  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.301 ±       0.520    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2511.225 ±     720.058  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5683.303 ±    1494.450    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        37.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        33.000                    ms
[info] IterablesBenchmark.readJackson                                                         thrpt    5    642359.805 ±   11762.454   ops/s
[info] IterablesBenchmark.readJackson:·gc.alloc.rate                                          thrpt    5       786.724 ±      14.451  MB/sec
[info] IterablesBenchmark.readJackson:·gc.alloc.rate.norm                                     thrpt    5      1928.001 ±       0.001    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.067 ±       0.132  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.163 ±       0.324    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                             thrpt    5       793.691 ±     684.220  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1946.420 ±    1707.218    B/op
[info] IterablesBenchmark.readJackson:·gc.count                                               thrpt    5        12.000                counts
[info] IterablesBenchmark.readJackson:·gc.time                                                thrpt    5        14.000                    ms
[info] IterablesBenchmark.readJsoniter                                                        thrpt    5   4747338.612 ±   87866.741   ops/s
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate                                         thrpt    5      1881.723 ±      34.734  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                                    thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5         0.096 ±       0.122  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.032 ±       0.040    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5      1893.522 ±     725.156  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       627.992 ±     243.910    B/op
[info] IterablesBenchmark.readJsoniter:·gc.count                                              thrpt    5        28.000                counts
[info] IterablesBenchmark.readJsoniter:·gc.time                                               thrpt    5        25.000                    ms
[info] IterablesBenchmark.readPlay                                                            thrpt    5    255694.727 ±    8575.248   ops/s
[info] IterablesBenchmark.readPlay:·gc.alloc.rate                                             thrpt    5      1779.100 ±      59.253  MB/sec
[info] IterablesBenchmark.readPlay:·gc.alloc.rate.norm                                        thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                    thrpt    5         0.100 ±       0.067  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.615 ±       0.407    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                thrpt    5      1758.373 ±     587.849  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5     10830.366 ±    3952.683    B/op
[info] IterablesBenchmark.readPlay:·gc.count                                                  thrpt    5        26.000                counts
[info] IterablesBenchmark.readPlay:·gc.time                                                   thrpt    5        30.000                    ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    872395.202 ±   19841.277   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      2004.354 ±      44.206  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3616.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.125 ±       0.113  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.226 ±       0.209    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1961.581 ±     569.657  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      3539.194 ±    1046.408    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        29.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        26.000                    ms
[info] IterablesBenchmark.writeJackson                                                        thrpt    5   1938628.745 ±   44381.078   ops/s
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate                                         thrpt    5      1310.265 ±      29.683  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate.norm                                    thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.100 ±       0.154  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.081 ±       0.124    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                            thrpt    5      1275.961 ±     586.396  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1036.552 ±     489.663    B/op
[info] IterablesBenchmark.writeJackson:·gc.count                                              thrpt    5        19.000                counts
[info] IterablesBenchmark.writeJackson:·gc.time                                               thrpt    5        21.000                    ms
[info] IterablesBenchmark.writeJsoniter                                                       thrpt    5   7015331.114 ±   36399.481   ops/s
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate                                        thrpt    5       784.348 ±       4.433  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.071 ±       0.209  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.016 ±       0.047    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       791.844 ±     686.837  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       177.725 ±     155.105    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.count                                             thrpt    5        12.000                counts
[info] IterablesBenchmark.writeJsoniter:·gc.time                                              thrpt    5        12.000                    ms
[info] IterablesBenchmark.writePlay                                                           thrpt    5    582365.000 ±   34703.459   ops/s
[info] IterablesBenchmark.writePlay:·gc.alloc.rate                                            thrpt    5      1985.865 ±     118.283  MB/sec
[info] IterablesBenchmark.writePlay:·gc.alloc.rate.norm                                       thrpt    5      5368.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.112 ±       0.146  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.304 ±       0.391    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1964.185 ±     572.761  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5305.599 ±    1275.903    B/op
[info] IterablesBenchmark.writePlay:·gc.count                                                 thrpt    5        29.000                counts
[info] IterablesBenchmark.writePlay:·gc.time                                                  thrpt    5        34.000                    ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    692967.089 ±   17123.223   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2408.943 ±      60.362  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5472.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.142 ±       0.207  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.321 ±       0.469    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2373.957 ±      30.260  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5392.769 ±     185.927    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        35.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        31.000                    ms
[info] MapsBenchmark.readJsoniter                                                             thrpt    5   5516212.049 ±  194599.355   ops/s
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate                                              thrpt    5      1373.669 ±      48.155  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                         thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5         0.096 ±       0.122  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.027 ±       0.035    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5      1409.041 ±     565.878  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5       402.038 ±     157.603    B/op
[info] MapsBenchmark.readJsoniter:·gc.count                                                   thrpt    5        21.000                counts
[info] MapsBenchmark.readJsoniter:·gc.time                                                    thrpt    5        18.000                    ms
[info] MapsBenchmark.readPlay                                                                 thrpt    5    372701.458 ±    7513.146   ops/s
[info] MapsBenchmark.readPlay:·gc.alloc.rate                                                  thrpt    5      1945.171 ±      38.962  MB/sec
[info] MapsBenchmark.readPlay:·gc.alloc.rate.norm                                             thrpt    5      8216.001 ±       0.001    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                         thrpt    5         0.121 ±       0.200  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.509 ±       0.833    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                     thrpt    5      1896.525 ±     721.857  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      8008.919 ±    2968.733    B/op
[info] MapsBenchmark.readPlay:·gc.count                                                       thrpt    5        28.000                counts
[info] MapsBenchmark.readPlay:·gc.time                                                        thrpt    5        33.000                    ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    525877.919 ±   32180.242   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1376.263 ±      84.339  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4120.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.104 ±       0.188  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.312 ±       0.563    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      1404.243 ±     562.509  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      4202.602 ±    1593.569    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        21.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        19.000                    ms
[info] MapsBenchmark.writeJsoniter                                                            thrpt    5   3217808.393 ±   67921.762   ops/s
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate                                             thrpt    5       539.632 ±      11.565  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                        thrpt    5       264.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                    thrpt    5         0.062 ±       0.247  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.031 ±       0.121    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                thrpt    5       525.236 ±     691.414  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                           thrpt    5       256.987 ±     338.591    B/op
[info] MapsBenchmark.writeJsoniter:·gc.count                                                  thrpt    5         8.000                counts
[info] MapsBenchmark.writeJsoniter:·gc.time                                                   thrpt    5         8.000                    ms
[info] MapsBenchmark.writePlay                                                                thrpt    5    367915.504 ±    7507.857   ops/s
[info] MapsBenchmark.writePlay:·gc.alloc.rate                                                 thrpt    5      1344.302 ±      27.375  MB/sec
[info] MapsBenchmark.writePlay:·gc.alloc.rate.norm                                            thrpt    5      5752.001 ±       0.001    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                        thrpt    5         0.092 ±       0.166  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.392 ±       0.713    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                    thrpt    5      1343.643 ±      32.437  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5749.351 ±     204.071    B/op
[info] MapsBenchmark.writePlay:·gc.count                                                      thrpt    5        20.000                counts
[info] MapsBenchmark.writePlay:·gc.time                                                       thrpt    5        23.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   2162900.936 ±   41506.014   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3132.524 ±      60.988  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2280.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.142 ±       0.174  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.103 ±       0.126    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      3127.544 ±     592.273  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      2276.336 ±     424.361    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        46.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        40.000                    ms
[info] MissingReqFieldBenchmark.readJackson                                                   thrpt    5    306510.681 ±   11949.157   ops/s
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate                                    thrpt    5       549.902 ±      21.117  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm                               thrpt    5      2824.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space                           thrpt    5         0.050 ±       0.184  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.257 ±       0.944    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space                       thrpt    5       525.792 ±     696.541  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      2704.875 ±    3633.110    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.count                                         thrpt    5         8.000                counts
[info] MissingReqFieldBenchmark.readJackson:·gc.time                                          thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJsoniter                                                  thrpt    5    628823.014 ±   56597.814   ops/s
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate                                   thrpt    5       399.453 ±      36.061  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm                              thrpt    5      1000.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.037 ±       0.243  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.094 ±       0.615    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       396.366 ±     567.305  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       994.402 ±    1455.853    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.count                                        thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniter:·gc.time                                         thrpt    5         5.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   3793339.178 ±  204368.589   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      1233.989 ±      66.750  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       512.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5         0.092 ±       0.146  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.038 ±       0.061    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5      1273.149 ±     576.572  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5       528.265 ±     239.055    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        19.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        16.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   4040663.273 ±   99383.807   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       349.073 ±       8.740  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       136.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5         0.644 ±       5.320  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5         0.250 ±       2.067    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5       330.969 ±       4.739  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5       128.952 ±       4.119    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5         6.000                    ms
[info] MissingReqFieldBenchmark.readPlay                                                      thrpt    5    199655.549 ±    5969.387   ops/s
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate                                       thrpt    5      1272.394 ±      37.800  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm                                  thrpt    5     10032.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.087 ±       0.104  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.688 ±       0.811    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1274.910 ±     598.401  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     10052.381 ±    4733.048    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.count                                            thrpt    5        19.000                counts
[info] MissingReqFieldBenchmark.readPlay:·gc.time                                             thrpt    5        22.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    729293.347 ±   16637.514   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2786.934 ±      63.531  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6016.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.125 ±       0.219  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.269 ±       0.468    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      2785.142 ±     562.340  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      6011.842 ±    1175.400    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        41.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        38.000                    ms
[info] MutableIterablesBenchmark.readJsoniter                                                 thrpt    5   3877286.560 ±  116097.731   ops/s
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate                                  thrpt    5      2502.650 ±      75.490  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                             thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                         thrpt    5         0.129 ±       0.154  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.052 ±       0.063    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                     thrpt    5      2445.167 ±     587.371  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                thrpt    5       992.606 ±     231.330    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.count                                       thrpt    5        36.000                counts
[info] MutableIterablesBenchmark.readJsoniter:·gc.time                                        thrpt    5        33.000                    ms
[info] MutableIterablesBenchmark.readPlay                                                     thrpt    5    276046.477 ±   17261.964   ops/s
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate                                      thrpt    5      1971.059 ±     123.580  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm                                 thrpt    5     11240.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                             thrpt    5         0.104 ±       0.170  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.592 ±       0.952    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                         thrpt    5      2031.949 ±      29.969  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     11589.168 ±     577.052    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.count                                           thrpt    5        30.000                counts
[info] MutableIterablesBenchmark.readPlay:·gc.time                                            thrpt    5        33.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    860822.358 ±   17442.078   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1889.935 ±      39.361  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3456.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.108 ±       0.088  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.198 ±       0.157    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1891.041 ±     729.013  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3456.810 ±    1273.951    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        24.000                    ms
[info] MutableIterablesBenchmark.writeJackson                                                 thrpt    5   1821484.280 ±   68093.482   ops/s
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate                                  thrpt    5      1046.013 ±      38.920  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm                             thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                         thrpt    5         0.092 ±       0.122  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.079 ±       0.106    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                     thrpt    5      1000.024 ±      26.224  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       864.290 ±      24.550    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.count                                       thrpt    5        15.000                counts
[info] MutableIterablesBenchmark.writeJackson:·gc.time                                        thrpt    5        17.000                    ms
[info] MutableIterablesBenchmark.writeJsoniter                                                thrpt    5   5012903.884 ±   94855.522   ops/s
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate                                 thrpt    5       382.131 ±       7.259  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                            thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                        thrpt    5         0.017 ±       0.036  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.005 ±       0.011    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                    thrpt    5       328.391 ±       3.559  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm               thrpt    5       103.126 ±       2.505    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.count                                      thrpt    5         5.000                counts
[info] MutableIterablesBenchmark.writeJsoniter:·gc.time                                       thrpt    5         5.000                    ms
[info] MutableIterablesBenchmark.writePlay                                                    thrpt    5    523827.574 ±   24005.613   ops/s
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate                                     thrpt    5      1786.248 ±      81.798  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm                                thrpt    5      5368.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                            thrpt    5         0.125 ±       0.219  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.376 ±       0.658    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                        thrpt    5      1758.869 ±     595.185  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5285.138 ±    1729.584    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.count                                          thrpt    5        26.000                counts
[info] MutableIterablesBenchmark.writePlay:·gc.time                                           thrpt    5        30.000                    ms
[info] MutableMapsBenchmark.readJsoniter                                                      thrpt    5   3521481.762 ±   98375.681   ops/s
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5      1664.355 ±      46.046  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.092 ±       0.166  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.041 ±       0.075    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5      1618.711 ±     589.583  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       723.398 ±     254.068    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.count                                            thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readJsoniter:·gc.time                                             thrpt    5        21.000                    ms
[info] MutableMapsBenchmark.readPlay                                                          thrpt    5    311621.472 ±   17779.458   ops/s
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate                                           thrpt    5      1637.538 ±      93.323  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm                                      thrpt    5      8272.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                  thrpt    5         0.079 ±       0.036  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.400 ±       0.186    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                              thrpt    5      1621.447 ±     603.002  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      8197.209 ±    3291.156    B/op
[info] MutableMapsBenchmark.readPlay:·gc.count                                                thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readPlay:·gc.time                                                 thrpt    5        27.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    503462.306 ±   38119.051   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1292.165 ±      98.123  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4040.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.075 ±       0.122  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.234 ±       0.379    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1267.655 ±     554.894  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      3964.782 ±    1766.781    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        19.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        17.000                    ms
[info] MutableMapsBenchmark.writeJsoniter                                                     thrpt    5   2853255.881 ±  237848.335   ops/s
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5       580.035 ±      48.336  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5       320.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.033 ±       0.146  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.018 ±       0.080    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5       591.574 ±     568.130  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       327.220 ±     323.948    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.count                                           thrpt    5         9.000                counts
[info] MutableMapsBenchmark.writeJsoniter:·gc.time                                            thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlay                                                         thrpt    5    356273.695 ±    6683.566   ops/s
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate                                          thrpt    5      1359.830 ±      25.299  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm                                     thrpt    5      6008.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                 thrpt    5         0.096 ±       0.044  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.423 ±       0.194    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                             thrpt    5      1344.954 ±      29.676  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5942.440 ±     202.056    B/op
[info] MutableMapsBenchmark.writePlay:·gc.count                                               thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlay:·gc.time                                                thrpt    5        23.000                    ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    679302.727 ±   12219.687   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2091.922 ±      37.799  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4848.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.117 ±       0.072  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.270 ±       0.168    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2095.828 ±     573.525  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4856.668 ±    1297.052    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.readJackson                                                        thrpt    5   1572851.608 ±   36011.197   ops/s
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5      1191.037 ±      26.683  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±       0.132  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.087 ±       0.131    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5      1207.230 ±     701.339  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1207.995 ±     694.735    B/op
[info] PrimitivesBenchmark.readJackson:·gc.count                                              thrpt    5        18.000                counts
[info] PrimitivesBenchmark.readJackson:·gc.time                                               thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.readJsoniter                                                       thrpt    5   6381711.241 ± 1057996.122   ops/s
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       194.596 ±      32.290  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.623 ±       5.240  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.150 ±       1.264    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       219.917 ±     490.302  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        54.783 ±     120.999    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.count                                             thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniter:·gc.time                                              thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.readPlay                                                           thrpt    5    257462.483 ±    2274.540   ops/s
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1792.442 ±      15.666  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5     10960.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.092 ±       0.091  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.560 ±       0.559    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1825.110 ±     700.687  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     11161.038 ±    4346.865    B/op
[info] PrimitivesBenchmark.readPlay:·gc.count                                                 thrpt    5        27.000                counts
[info] PrimitivesBenchmark.readPlay:·gc.time                                                  thrpt    5        32.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    956094.339 ±   27821.421   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1515.945 ±      44.068  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2496.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.096 ±       0.185  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.157 ±       0.300    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1475.678 ±     712.505  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      2429.827 ±    1175.579    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        22.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.writeJackson                                                       thrpt    5   2565514.803 ±   98412.270   ops/s
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5      1056.030 ±      40.756  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.108 ±       0.088  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.066 ±       0.054    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5      1069.521 ±     596.193  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       656.856 ±     386.952    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.count                                             thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJackson:·gc.time                                              thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.writeJsoniter                                                      thrpt    5   6011520.135 ±  177461.655   ops/s
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       672.165 ±      19.598  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.087 ±       0.215  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.023 ±       0.056    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       658.905 ±       8.898  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       172.539 ±       7.119    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.count                                            thrpt    5        10.000                counts
[info] PrimitivesBenchmark.writeJsoniter:·gc.time                                             thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writeJsoniterPrealloc                                              thrpt    5   5608076.527 ±  197052.156   ops/s
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       342.020 ±      11.949  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5         0.653 ±       5.492  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.183 ±       1.540    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5       329.413 ±       3.406  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5        92.466 ±       2.707    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writePlay                                                          thrpt    5    347008.523 ±    6459.830   ops/s
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate                                           thrpt    5      1952.176 ±      36.213  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm                                      thrpt    5      8856.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                  thrpt    5         0.108 ±       0.132  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.491 ±       0.602    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                              thrpt    5      1962.691 ±     571.445  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      8905.313 ±    2679.807    B/op
[info] PrimitivesBenchmark.writePlay:·gc.count                                                thrpt    5        29.000                counts
[info] PrimitivesBenchmark.writePlay:·gc.time                                                 thrpt    5        32.000                    ms
[info] StringBenchmark.readAsciiCirce                                                         thrpt    5    721996.542 ±    9020.132   ops/s
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate                                          thrpt    5      1611.019 ±      19.456  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm                                     thrpt    5      3512.001 ±       0.001    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.112 ±       0.166  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.245 ±       0.362    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1615.663 ±     577.512  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      3522.583 ±    1279.594    B/op
[info] StringBenchmark.readAsciiCirce:·gc.count                                               thrpt    5        24.000                counts
[info] StringBenchmark.readAsciiCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] StringBenchmark.readAsciiJackson                                                       thrpt    5   1049641.453 ±   22084.184   ops/s
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate                                        thrpt    5      1328.229 ±      27.653  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm                                   thrpt    5      1992.000 ±       0.001    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.112 ±       0.217  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.169 ±       0.328    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space                           thrpt    5      1330.011 ±      50.749  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      1994.710 ±      82.418    B/op
[info] StringBenchmark.readAsciiJackson:·gc.count                                             thrpt    5        20.000                counts
[info] StringBenchmark.readAsciiJackson:·gc.time                                              thrpt    5        21.000                    ms
[info] StringBenchmark.readAsciiJsoniter                                                      thrpt    5    754281.038 ±   48332.448   ops/s
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate                                       thrpt    5       643.966 ±      41.326  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm                                  thrpt    5      1344.001 ±       0.001    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.046 ±       0.119  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.095 ±       0.245    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       595.384 ±     569.166  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1241.612 ±    1174.751    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.count                                            thrpt    5         9.000                counts
[info] StringBenchmark.readAsciiJsoniter:·gc.time                                             thrpt    5         8.000                    ms
[info] StringBenchmark.readNonAsciiCirce                                                      thrpt    5    935937.933 ±   14947.742   ops/s
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate                                       thrpt    5      1398.490 ±      22.528  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm                                  thrpt    5      2352.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.079 ±       0.174  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.133 ±       0.291    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1407.531 ±     581.854  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      2367.355 ±     984.838    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.count                                            thrpt    5        21.000                counts
[info] StringBenchmark.readNonAsciiCirce:·gc.time                                             thrpt    5        19.000                    ms
[info] StringBenchmark.readNonAsciiJackson                                                    thrpt    5   1278484.761 ±   65441.133   ops/s
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate                                     thrpt    5       896.542 ±      45.792  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm                                thrpt    5      1104.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space                            thrpt    5         0.096 ±       0.122  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.118 ±       0.152    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space                        thrpt    5       916.503 ±     555.956  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1129.563 ±     707.866    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.count                                          thrpt    5        14.000                counts
[info] StringBenchmark.readNonAsciiJackson:·gc.time                                           thrpt    5        20.000                    ms
[info] StringBenchmark.readNonAsciiJsoniter                                                   thrpt    5   2301196.266 ±   52831.522   ops/s
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate                                    thrpt    5       561.441 ±      12.981  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm                               thrpt    5       384.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.067 ±       0.154  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.046 ±       0.105    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5       594.943 ±     569.236  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       406.868 ±     388.706    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.count                                         thrpt    5         9.000                counts
[info] StringBenchmark.readNonAsciiJsoniter:·gc.time                                          thrpt    5         9.000                    ms
[info] StringBenchmark.writeAsciiCirce                                                        thrpt    5    311991.945 ±   13766.967   ops/s
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate                                         thrpt    5      1062.302 ±      46.966  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm                                    thrpt    5      5360.001 ±       0.001    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±       0.067  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.441 ±       0.349    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1061.445 ±     559.021  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      5354.656 ±    2762.848    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.count                                              thrpt    5        16.000                counts
[info] StringBenchmark.writeAsciiCirce:·gc.time                                               thrpt    5        15.000                    ms
[info] StringBenchmark.writeAsciiJackson                                                      thrpt    5    303405.292 ±    9567.473   ops/s
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate                                       thrpt    5       320.722 ±      10.205  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm                                  thrpt    5      1664.001 ±       0.001    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space                              thrpt    5         0.789 ±       6.575  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.104 ±      34.178    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space                          thrpt    5       309.945 ±     116.808  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1607.575 ±     582.031    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.count                                            thrpt    5         5.000                counts
[info] StringBenchmark.writeAsciiJackson:·gc.time                                             thrpt    5         9.000                    ms
[info] StringBenchmark.writeAsciiJsoniter                                                     thrpt    5   1071658.184 ±   14498.139   ops/s
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate                                      thrpt    5       904.031 ±      12.346  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm                                 thrpt    5      1328.000 ±       0.001    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±       0.132  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.128 ±       0.192    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5       928.067 ±     571.771  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1363.372 ±     841.220    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.count                                           thrpt    5        14.000                counts
[info] StringBenchmark.writeAsciiJsoniter:·gc.time                                            thrpt    5        12.000                    ms
[info] StringBenchmark.writeAsciiJsoniterPrealloc                                             thrpt    5    942496.826 ±   10331.524   ops/s
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate                              thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5        ≈ 10⁻³                  B/op
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count                                   thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeAsciiPlay                                                         thrpt    5    331549.117 ±    1772.850   ops/s
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate                                          thrpt    5       353.840 ±       1.884  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm                                     thrpt    5      1680.001 ±       0.001    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space                                 thrpt    5         0.780 ±       6.449  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5         3.701 ±      30.608    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space                             thrpt    5       391.446 ±     559.401  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1857.921 ±    2643.716    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.count                                               thrpt    5         6.000                counts
[info] StringBenchmark.writeAsciiPlay:·gc.time                                                thrpt    5         8.000                    ms
[info] StringBenchmark.writeNonAsciiCirce                                                     thrpt    5   1992108.340 ±   65651.000   ops/s
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate                                      thrpt    5      1376.847 ±      45.205  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm                                 thrpt    5      1088.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.117 ±       0.185  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.092 ±       0.145    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1339.361 ±      38.167  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1058.459 ±      53.602    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.count                                           thrpt    5        20.000                counts
[info] StringBenchmark.writeNonAsciiCirce:·gc.time                                            thrpt    5        19.000                    ms
[info] StringBenchmark.writeNonAsciiJackson                                                   thrpt    5   2968873.761 ±   41533.383   ops/s
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate                                    thrpt    5      1222.154 ±      17.381  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm                               thrpt    5       648.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±       0.122  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.051 ±       0.064    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space                       thrpt    5      1191.407 ±     688.717  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       631.641 ±     363.271    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.count                                         thrpt    5        18.000                counts
[info] StringBenchmark.writeNonAsciiJackson:·gc.time                                          thrpt    5        19.000                    ms
[info] StringBenchmark.writeNonAsciiJsoniter                                                  thrpt    5   3168428.896 ±   70274.385   ops/s
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate                                   thrpt    5       628.024 ±      13.599  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm                              thrpt    5       312.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±       0.091  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.037 ±       0.046    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       658.461 ±       7.278  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       327.128 ±       7.023    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.count                                        thrpt    5        10.000                counts
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.time                                         thrpt    5         9.000                    ms
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc                                          thrpt    5   3256276.166 ±  138598.081   ops/s
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeNonAsciiPlay                                                      thrpt    5   2842867.464 ±   99845.867   ops/s
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate                                       thrpt    5      1199.115 ±      41.731  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm                                  thrpt    5       664.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±       0.174  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.055 ±       0.095    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1196.760 ±     681.695  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       662.975 ±     385.763    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.count                                            thrpt    5        18.000                counts
[info] StringBenchmark.writeNonAsciiPlay:·gc.time                                             thrpt    5        20.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     12529.943 ±     341.983   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1823.761 ±      49.901  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    229111.129 ±      63.985    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.146 ±       0.358  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        18.274 ±      44.698    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1814.475 ±     677.579  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    227929.103 ±   84010.923    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        27.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        26.000                    ms
[info] TwitterAPIBenchmark.readJackson                                                        thrpt    5     16772.968 ±     547.148   ops/s
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       236.716 ±       8.054  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     22215.614 ±      31.015    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.112 ±       0.923  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5        10.593 ±      87.023    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5       180.068 ±     641.571  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     16952.307 ±   60506.376    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.count                                              thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJackson:·gc.time                                               thrpt    5         4.000                    ms
[info] TwitterAPIBenchmark.readJsoniter                                                       thrpt    5     38218.051 ±     234.073   ops/s
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       349.989 ±       2.235  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5     14416.011 ±       0.002    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.675 ±       5.630  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5        27.808 ±     232.060    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       328.713 ±       3.489  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     13539.644 ±     124.769    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.count                                             thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.readJsoniter:·gc.time                                              thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readPlay                                                           thrpt    5      3813.745 ±      48.862   ops/s
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1224.657 ±      15.708  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    505496.110 ±       0.029    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.050 ±       0.134  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5        20.602 ±      55.279    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1203.187 ±     697.129  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    496756.929 ±  291422.989    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.count                                                 thrpt    5        18.000                counts
[info] TwitterAPIBenchmark.readPlay:·gc.time                                                  thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.writeJackson                                                       thrpt    5     56670.355 ±    1215.709   ops/s
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       723.621 ±      15.797  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     20099.994 ±       0.292    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.033 ±       0.134  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.923 ±       3.720    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       725.299 ±     585.519  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     20145.379 ±   16220.066    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.count                                             thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJackson:·gc.time                                              thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniter                                                      thrpt    5     93624.569 ±    3773.888   ops/s
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       611.847 ±      24.619  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     10288.004 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±       0.188  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.404 ±       3.184    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       591.002 ±     563.958  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      9946.923 ±    9602.447    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.count                                            thrpt    5         9.000                counts
[info] TwitterAPIBenchmark.writeJsoniter:·gc.time                                             thrpt    5         8.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterPrealloc                                              thrpt    5    108348.234 ±     935.254   ops/s
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5        16.518 ±       0.143  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5       240.004 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[success] Total time: 2144 s, completed Jan 11, 2018, 8:55:05 PM
