[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jan 5, 2018, 5:00:14 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:336:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:344:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] two warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.3.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.3.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 24 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.2-SNAPSHOT.jar ...
[info] Compiling 18 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 285 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 194 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_5adb01ff/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:21:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443641.298 ops/s
[info] # Warmup Iteration   2: 777603.753 ops/s
[info] # Warmup Iteration   3: 789743.472 ops/s
[info] # Warmup Iteration   4: 794151.584 ops/s
[info] # Warmup Iteration   5: 797504.609 ops/s
[info] Iteration   1: 795549.240 ops/s
[info]                  ·gc.alloc.rate:                   2102.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3985.117 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 796143.937 ops/s
[info]                  ·gc.alloc.rate:                   2103.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4004.671 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 779927.480 ops/s
[info]                  ·gc.alloc.rate:                   2061.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4785.219 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 791743.973 ops/s
[info]                  ·gc.alloc.rate:                   2092.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4050.688 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 791587.919 ops/s
[info]                  ·gc.alloc.rate:                   2091.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4053.416 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   790990.510 ±(99.9%) 25151.447 ops/s [Average]
[info]   (min, avg, max) = (779927.480, 790990.510, 796143.937), stdev = 6531.751
[info]   CI (99.9%): [765839.063, 816141.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2090.429 ±(99.9%) 65.514 MB/sec [Average]
[info]   (min, avg, max) = (2061.581, 2090.429, 2103.902), stdev = 17.014
[info]   CI (99.9%): [2024.915, 2155.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 0.306 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.240, 0.331), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2097.294 ±(99.9%) 591.356 MB/sec [Average]
[info]   (min, avg, max) = (2013.769, 2097.294, 2371.422), stdev = 153.573
[info]   CI (99.9%): [1505.938, 2688.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4175.822 ±(99.9%) 1316.655 B/op [Average]
[info]   (min, avg, max) = (3985.117, 4175.822, 4785.219), stdev = 341.931
[info]   CI (99.9%): [2859.167, 5492.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson
[info] # Run progress: 0.79% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 514586.102 ops/s
[info] # Warmup Iteration   2: 1691432.211 ops/s
[info] # Warmup Iteration   3: 1693751.581 ops/s
[info] # Warmup Iteration   4: 1656657.912 ops/s
[info] # Warmup Iteration   5: 1695343.416 ops/s
[info] Iteration   1: 1691991.402 ops/s
[info]                  ·gc.alloc.rate:                   1203.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1236.724 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1691898.095 ops/s
[info]                  ·gc.alloc.rate:                   1203.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1244.330 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1674295.827 ops/s
[info]                  ·gc.alloc.rate:                   1191.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 947.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1686940.113 ops/s
[info]                  ·gc.alloc.rate:                   1200.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1257.225 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1691424.230 ops/s
[info]                  ·gc.alloc.rate:                   1203.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1013.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 943.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson":
[info]   1687309.934 ±(99.9%) 29160.750 ops/s [Average]
[info]   (min, avg, max) = (1674295.827, 1687309.934, 1691991.402), stdev = 7572.954
[info]   CI (99.9%): [1658149.184, 1716470.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate":
[info]   1200.493 ±(99.9%) 20.679 MB/sec [Average]
[info]   (min, avg, max) = (1191.251, 1200.493, 1203.872), stdev = 5.370
[info]   CI (99.9%): [1179.814, 1221.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.093, 0.136), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1206.914 ±(99.9%) 691.661 MB/sec [Average]
[info]   (min, avg, max) = (1007.304, 1206.914, 1347.343), stdev = 179.622
[info]   CI (99.9%): [515.253, 1898.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1125.682 ±(99.9%) 635.544 B/op [Average]
[info]   (min, avg, max) = (943.074, 1125.682, 1257.225), stdev = 165.049
[info]   CI (99.9%): [490.138, 1761.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter
[info] # Run progress: 1.59% complete, ETA 00:32:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3076920.961 ops/s
[info] # Warmup Iteration   2: 3884533.401 ops/s
[info] # Warmup Iteration   3: 4086284.354 ops/s
[info] # Warmup Iteration   4: 4074083.924 ops/s
[info] # Warmup Iteration   5: 4066311.343 ops/s
[info] Iteration   1: 4078222.423 ops/s
[info]                  ·gc.alloc.rate:                   269.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.712 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4104807.574 ops/s
[info]                  ·gc.alloc.rate:      271.242 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4014614.095 ops/s
[info]                  ·gc.alloc.rate:                   265.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4088510.794 ops/s
[info]                  ·gc.alloc.rate:                   270.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4079484.226 ops/s
[info]                  ·gc.alloc.rate:                   269.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.462 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter":
[info]   4073127.822 ±(99.9%) 132420.414 ops/s [Average]
[info]   (min, avg, max) = (4014614.095, 4073127.822, 4104807.574), stdev = 34389.161
[info]   CI (99.9%): [3940707.408, 4205548.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate":
[info]   269.097 ±(99.9%) 8.820 MB/sec [Average]
[info]   (min, avg, max) = (265.209, 269.097, 271.242), stdev = 2.291
[info]   CI (99.9%): [260.276, 277.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.613 ±(99.9%) 5.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.613, 3.053), stdev = 1.364
[info]   CI (99.9%): [≈ 0, 5.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 2.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 1.197), stdev = 0.535
[info]   CI (99.9%): [≈ 0, 2.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   250.124 ±(99.9%) 553.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 250.124, 332.297), stdev = 143.637
[info]   CI (99.9%): [≈ 0, 803.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   96.886 ±(99.9%) 214.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.886, 130.302), stdev = 55.693
[info]   CI (99.9%): [≈ 0, 311.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay
[info] # Run progress: 2.38% complete, ETA 00:32:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33756.741 ops/s
[info] # Warmup Iteration   2: 179925.948 ops/s
[info] # Warmup Iteration   3: 183502.521 ops/s
[info] # Warmup Iteration   4: 184957.997 ops/s
[info] # Warmup Iteration   5: 184108.805 ops/s
[info] Iteration   1: 184257.820 ops/s
[info]                  ·gc.alloc.rate:                   1543.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14278.591 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 183991.590 ops/s
[info]                  ·gc.alloc.rate:                   1540.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14381.851 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 184885.674 ops/s
[info]                  ·gc.alloc.rate:                   1548.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11491.314 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 182937.069 ops/s
[info]                  ·gc.alloc.rate:                   1532.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14559.257 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 183837.103 ops/s
[info]                  ·gc.alloc.rate:                   1539.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11610.798 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay":
[info]   183981.851 ±(99.9%) 2726.675 ops/s [Average]
[info]   (min, avg, max) = (182937.069, 183981.851, 184885.674), stdev = 708.109
[info]   CI (99.9%): [181255.176, 186708.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate":
[info]   1540.881 ±(99.9%) 23.034 MB/sec [Average]
[info]   (min, avg, max) = (1532.067, 1540.881, 1548.425), stdev = 5.982
[info]   CI (99.9%): [1517.847, 1563.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.002, 13184.002, 13184.002), stdev = 0.001
[info]   CI (99.9%): [13184.002, 13184.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.166), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.962 ±(99.9%) 1.148 B/op [Average]
[info]   (min, avg, max) = (0.709, 0.962, 1.425), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 2.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1549.971 ±(99.9%) 693.951 MB/sec [Average]
[info]   (min, avg, max) = (1349.623, 1549.971, 1691.881), stdev = 180.217
[info]   CI (99.9%): [856.020, 2243.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   13264.362 ±(99.9%) 6037.095 B/op [Average]
[info]   (min, avg, max) = (11491.314, 13264.362, 14559.257), stdev = 1567.814
[info]   CI (99.9%): [7227.267, 19301.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson
[info] # Run progress: 3.17% complete, ETA 00:31:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 595630.849 ops/s
[info] # Warmup Iteration   2: 1992884.870 ops/s
[info] # Warmup Iteration   3: 2088002.439 ops/s
[info] # Warmup Iteration   4: 2096966.842 ops/s
[info] # Warmup Iteration   5: 2090450.719 ops/s
[info] Iteration   1: 2083015.485 ops/s
[info]                  ·gc.alloc.rate:                   740.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 742.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2095507.037 ops/s
[info]                  ·gc.alloc.rate:                   745.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 494.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2091907.507 ops/s
[info]                  ·gc.alloc.rate:                   744.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2089848.528 ops/s
[info]                  ·gc.alloc.rate:                   743.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2093534.212 ops/s
[info]                  ·gc.alloc.rate:                   744.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 751.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson":
[info]   2090762.554 ±(99.9%) 18502.699 ops/s [Average]
[info]   (min, avg, max) = (2083015.485, 2090762.554, 2095507.037), stdev = 4805.092
[info]   CI (99.9%): [2072259.855, 2109265.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate":
[info]   743.774 ±(99.9%) 6.705 MB/sec [Average]
[info]   (min, avg, max) = (740.958, 743.774, 745.477), stdev = 1.741
[info]   CI (99.9%): [737.068, 750.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   560.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (560.000, 560.000, 560.000), stdev = 0.001
[info]   CI (99.9%): [560.000, 560.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.056 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.056, 0.079), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   793.317 ±(99.9%) 696.261 MB/sec [Average]
[info]   (min, avg, max) = (658.701, 793.317, 999.932), stdev = 180.817
[info]   CI (99.9%): [97.056, 1489.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   597.423 ±(99.9%) 526.898 B/op [Average]
[info]   (min, avg, max) = (494.814, 597.423, 751.890), stdev = 136.834
[info]   CI (99.9%): [70.525, 1124.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter
[info] # Run progress: 3.97% complete, ETA 00:31:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5775612.849 ops/s
[info] # Warmup Iteration   2: 14181570.966 ops/s
[info] # Warmup Iteration   3: 14302900.324 ops/s
[info] # Warmup Iteration   4: 14102168.325 ops/s
[info] # Warmup Iteration   5: 14075151.200 ops/s
[info] Iteration   1: 13444153.163 ops/s
[info]                  ·gc.alloc.rate:                   683.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13435894.521 ops/s
[info]                  ·gc.alloc.rate:                   682.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13421817.758 ops/s
[info]                  ·gc.alloc.rate:                   683.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13404892.936 ops/s
[info]                  ·gc.alloc.rate:                   681.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13350110.018 ops/s
[info]                  ·gc.alloc.rate:                   678.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter":
[info]   13411373.679 ±(99.9%) 143821.438 ops/s [Average]
[info]   (min, avg, max) = (13350110.018, 13411373.679, 13444153.163), stdev = 37349.971
[info]   CI (99.9%): [13267552.241, 13555195.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   681.840 ±(99.9%) 7.676 MB/sec [Average]
[info]   (min, avg, max) = (678.555, 681.840, 683.349), stdev = 1.993
[info]   CI (99.9%): [674.164, 689.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.008 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   658.540 ±(99.9%) 9.911 MB/sec [Average]
[info]   (min, avg, max) = (656.366, 658.540, 662.111), stdev = 2.574
[info]   CI (99.9%): [648.629, 668.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   77.267 ±(99.9%) 2.014 B/op [Average]
[info]   (min, avg, max) = (76.871, 77.267, 78.061), stdev = 0.523
[info]   CI (99.9%): [75.253, 79.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay
[info] # Run progress: 4.76% complete, ETA 00:31:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65985.714 ops/s
[info] # Warmup Iteration   2: 315511.247 ops/s
[info] # Warmup Iteration   3: 318242.545 ops/s
[info] # Warmup Iteration   4: 316932.335 ops/s
[info] # Warmup Iteration   5: 318004.319 ops/s
[info] Iteration   1: 315925.036 ops/s
[info]                  ·gc.alloc.rate:                   1030.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4937.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 317000.154 ops/s
[info]                  ·gc.alloc.rate:                   1034.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4951.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 318087.127 ops/s
[info]                  ·gc.alloc.rate:                   1038.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4953.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 318170.935 ops/s
[info]                  ·gc.alloc.rate:                   1038.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4972.272 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 316901.587 ops/s
[info]                  ·gc.alloc.rate:                   1033.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6682.347 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay":
[info]   317216.968 ±(99.9%) 3593.082 ops/s [Average]
[info]   (min, avg, max) = (315925.036, 317216.968, 318170.935), stdev = 933.112
[info]   CI (99.9%): [313623.886, 320810.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate":
[info]   1035.038 ±(99.9%) 11.874 MB/sec [Average]
[info]   (min, avg, max) = (1030.758, 1035.038, 1038.050), stdev = 3.084
[info]   CI (99.9%): [1023.164, 1046.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.434 ±(99.9%) 0.655 B/op [Average]
[info]   (min, avg, max) = (0.207, 0.434, 0.620), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 1.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1067.886 ±(99.9%) 597.153 MB/sec [Average]
[info]   (min, avg, max) = (990.950, 1067.886, 1345.144), stdev = 155.079
[info]   CI (99.9%): [470.732, 1665.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5299.364 ±(99.9%) 2977.355 B/op [Average]
[info]   (min, avg, max) = (4937.645, 5299.364, 6682.347), stdev = 773.210
[info]   CI (99.9%): [2322.009, 8276.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 5.56% complete, ETA 00:30:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1020707.121 ops/s
[info] # Warmup Iteration   2: 1592615.272 ops/s
[info] # Warmup Iteration   3: 1612618.669 ops/s
[info] # Warmup Iteration   4: 1595607.039 ops/s
[info] # Warmup Iteration   5: 1637373.315 ops/s
[info] Iteration   1: 1628973.942 ops/s
[info]                  ·gc.alloc.rate:                   2541.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2610.907 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1625297.350 ops/s
[info]                  ·gc.alloc.rate:                   2535.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2373.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2298.410 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1636061.466 ops/s
[info]                  ·gc.alloc.rate:                   2552.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2614.486 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1589220.431 ops/s
[info]                  ·gc.alloc.rate:                   2479.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2381.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2358.963 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1631348.976 ops/s
[info]                  ·gc.alloc.rate:                   2545.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2627.034 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1622180.433 ±(99.9%) 72525.474 ops/s [Average]
[info]   (min, avg, max) = (1589220.431, 1622180.433, 1636061.466), stdev = 18834.635
[info]   CI (99.9%): [1549654.959, 1694705.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2530.769 ±(99.9%) 113.272 MB/sec [Average]
[info]   (min, avg, max) = (2479.275, 2530.769, 2552.472), stdev = 29.416
[info]   CI (99.9%): [2417.496, 2644.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.187), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.121 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.121, 0.181), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2579.080 ±(99.9%) 710.268 MB/sec [Average]
[info]   (min, avg, max) = (2373.122, 2579.080, 2722.293), stdev = 184.454
[info]   CI (99.9%): [1868.812, 3289.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2501.960 ±(99.9%) 615.067 B/op [Average]
[info]   (min, avg, max) = (2298.410, 2501.960, 2627.034), stdev = 159.731
[info]   CI (99.9%): [1886.893, 3117.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson
[info] # Run progress: 6.35% complete, ETA 00:30:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 962195.287 ops/s
[info] # Warmup Iteration   2: 2623845.132 ops/s
[info] # Warmup Iteration   3: 2592395.738 ops/s
[info] # Warmup Iteration   4: 2584243.455 ops/s
[info] # Warmup Iteration   5: 2589433.463 ops/s
[info] Iteration   1: 2597681.698 ops/s
[info]                  ·gc.alloc.rate:                   1821.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1019.605 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2608615.261 ops/s
[info]                  ·gc.alloc.rate:                   1829.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1223.608 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2585776.391 ops/s
[info]                  ·gc.alloc.rate:                   1813.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1031.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2574360.567 ops/s
[info]                  ·gc.alloc.rate:                   1805.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1038.088 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 2582256.808 ops/s
[info]                  ·gc.alloc.rate:                   1811.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1242.365 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson":
[info]   2589738.145 ±(99.9%) 51933.088 ops/s [Average]
[info]   (min, avg, max) = (2574360.567, 2589738.145, 2608615.261), stdev = 13486.858
[info]   CI (99.9%): [2537805.057, 2641671.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate":
[info]   1816.303 ±(99.9%) 36.413 MB/sec [Average]
[info]   (min, avg, max) = (1805.599, 1816.303, 1829.723), stdev = 9.456
[info]   CI (99.9%): [1779.890, 1852.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.125, 0.167), stdev = 0.029
[info]   CI (99.9%): [0.011, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.076 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.076, 0.100), stdev = 0.018
[info]   CI (99.9%): [0.008, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1828.111 ±(99.9%) 720.976 MB/sec [Average]
[info]   (min, avg, max) = (1682.375, 1828.111, 2038.212), stdev = 187.235
[info]   CI (99.9%): [1107.135, 2549.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1111.027 ±(99.9%) 430.221 B/op [Average]
[info]   (min, avg, max) = (1019.605, 1111.027, 1242.365), stdev = 111.727
[info]   CI (99.9%): [680.805, 1541.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 11.000), stdev = 2.280
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter
[info] # Run progress: 7.14% complete, ETA 00:30:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10303445.226 ops/s
[info] # Warmup Iteration   2: 11421317.778 ops/s
[info] # Warmup Iteration   3: 11719584.161 ops/s
[info] # Warmup Iteration   4: 11589409.120 ops/s
[info] # Warmup Iteration   5: 11652579.019 ops/s
[info] Iteration   1: 11700051.923 ops/s
[info]                  ·gc.alloc.rate:                   1486.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11727241.091 ops/s
[info]                  ·gc.alloc.rate:                   1490.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.161 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11722589.904 ops/s
[info]                  ·gc.alloc.rate:                   1489.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.011 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11699514.526 ops/s
[info]                  ·gc.alloc.rate:                   1486.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11748799.822 ops/s
[info]                  ·gc.alloc.rate:                   1492.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter":
[info]   11719639.453 ±(99.9%) 79511.397 ops/s [Average]
[info]   (min, avg, max) = (11699514.526, 11719639.453, 11748799.822), stdev = 20648.857
[info]   CI (99.9%): [11640128.057, 11799150.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1489.022 ±(99.9%) 10.449 MB/sec [Average]
[info]   (min, avg, max) = (1486.403, 1489.022, 1492.794), stdev = 2.714
[info]   CI (99.9%): [1478.573, 1499.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.015, 0.020), stdev = 0.004
[info]   CI (99.9%): [0.001, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1481.414 ±(99.9%) 712.792 MB/sec [Average]
[info]   (min, avg, max) = (1335.879, 1481.414, 1690.183), stdev = 185.110
[info]   CI (99.9%): [768.622, 2194.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   198.986 ±(99.9%) 96.061 B/op [Average]
[info]   (min, avg, max) = (179.743, 198.986, 227.419), stdev = 24.947
[info]   CI (99.9%): [102.925, 295.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay
[info] # Run progress: 7.94% complete, ETA 00:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156747.833 ops/s
[info] # Warmup Iteration   2: 677345.470 ops/s
[info] # Warmup Iteration   3: 691801.599 ops/s
[info] # Warmup Iteration   4: 684773.908 ops/s
[info] # Warmup Iteration   5: 685859.919 ops/s
[info] Iteration   1: 688582.900 ops/s
[info]                  ·gc.alloc.rate:                   1819.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3838.099 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 687188.699 ops/s
[info]                  ·gc.alloc.rate:                   1815.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4639.211 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 686472.390 ops/s
[info]                  ·gc.alloc.rate:                   1814.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3882.042 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 681867.928 ops/s
[info]                  ·gc.alloc.rate:                   1801.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4700.266 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 688511.260 ops/s
[info]                  ·gc.alloc.rate:                   1819.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3882.684 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay":
[info]   686524.635 ±(99.9%) 10600.076 ops/s [Average]
[info]   (min, avg, max) = (681867.928, 686524.635, 688582.900), stdev = 2752.806
[info]   CI (99.9%): [675924.559, 697124.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate":
[info]   1814.191 ±(99.9%) 27.886 MB/sec [Average]
[info]   (min, avg, max) = (1801.941, 1814.191, 1819.586), stdev = 7.242
[info]   CI (99.9%): [1786.305, 1842.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.181 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (0.143, 0.181, 0.238), stdev = 0.040
[info]   CI (99.9%): [0.027, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1826.172 ±(99.9%) 719.029 MB/sec [Average]
[info]   (min, avg, max) = (1678.787, 1826.172, 2035.962), stdev = 186.729
[info]   CI (99.9%): [1107.144, 2545.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   4188.460 ±(99.9%) 1695.229 B/op [Average]
[info]   (min, avg, max) = (3838.099, 4188.460, 4700.266), stdev = 440.246
[info]   CI (99.9%): [2493.232, 5883.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 8.73% complete, ETA 00:29:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1043291.487 ops/s
[info] # Warmup Iteration   2: 1836060.399 ops/s
[info] # Warmup Iteration   3: 1874508.415 ops/s
[info] # Warmup Iteration   4: 1856197.281 ops/s
[info] # Warmup Iteration   5: 1853327.763 ops/s
[info] Iteration   1: 1878920.414 ops/s
[info]                  ·gc.alloc.rate:                   1737.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1396.537 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1867055.484 ops/s
[info]                  ·gc.alloc.rate:                   1727.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1414.494 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1876406.869 ops/s
[info]                  ·gc.alloc.rate:                   1735.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1414.085 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1866797.307 ops/s
[info]                  ·gc.alloc.rate:                   1727.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1711.784 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1869572.752 ops/s
[info]                  ·gc.alloc.rate:                   1729.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1427.678 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1871750.565 ±(99.9%) 21474.835 ops/s [Average]
[info]   (min, avg, max) = (1866797.307, 1871750.565, 1878920.414), stdev = 5576.946
[info]   CI (99.9%): [1850275.731, 1893225.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1731.254 ±(99.9%) 19.071 MB/sec [Average]
[info]   (min, avg, max) = (1727.020, 1731.254, 1737.670), stdev = 4.953
[info]   CI (99.9%): [1712.183, 1750.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.208), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.091 ±(99.9%) 0.200 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.091, 0.175), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1751.174 ±(99.9%) 602.446 MB/sec [Average]
[info]   (min, avg, max) = (1666.703, 1751.174, 2030.416), stdev = 156.453
[info]   CI (99.9%): [1148.728, 2353.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1472.915 ±(99.9%) 515.944 B/op [Average]
[info]   (min, avg, max) = (1396.537, 1472.915, 1711.784), stdev = 133.989
[info]   CI (99.9%): [956.971, 1988.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson
[info] # Run progress: 9.52% complete, ETA 00:29:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2178192.944 ops/s
[info] # Warmup Iteration   2: 6295041.392 ops/s
[info] # Warmup Iteration   3: 6385657.060 ops/s
[info] # Warmup Iteration   4: 6400201.252 ops/s
[info] # Warmup Iteration   5: 6422970.876 ops/s
[info] Iteration   1: 6415048.010 ops/s
[info]                  ·gc.alloc.rate:                   1760.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.601 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6448578.573 ops/s
[info]                  ·gc.alloc.rate:                   1769.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6429774.227 ops/s
[info]                  ·gc.alloc.rate:                   1764.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497.126 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6375250.388 ops/s
[info]                  ·gc.alloc.rate:                   1749.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.669 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6362925.042 ops/s
[info]                  ·gc.alloc.rate:                   1746.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 420.164 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson":
[info]   6406315.248 ±(99.9%) 139642.382 ops/s [Average]
[info]   (min, avg, max) = (6362925.042, 6406315.248, 6448578.573), stdev = 36264.683
[info]   CI (99.9%): [6266672.866, 6545957.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1758.174 ±(99.9%) 38.439 MB/sec [Average]
[info]   (min, avg, max) = (1746.113, 1758.174, 1769.778), stdev = 9.982
[info]   CI (99.9%): [1719.735, 1796.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.025, 0.036), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1757.556 ±(99.9%) 588.382 MB/sec [Average]
[info]   (min, avg, max) = (1677.637, 1757.556, 2030.497), stdev = 152.801
[info]   CI (99.9%): [1169.174, 2345.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   431.805 ±(99.9%) 141.439 B/op [Average]
[info]   (min, avg, max) = (411.468, 431.805, 497.126), stdev = 36.731
[info]   CI (99.9%): [290.367, 573.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter
[info] # Run progress: 10.32% complete, ETA 00:29:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15414103.110 ops/s
[info] # Warmup Iteration   2: 22390265.492 ops/s
[info] # Warmup Iteration   3: 23042291.527 ops/s
[info] # Warmup Iteration   4: 23266526.776 ops/s
[info] # Warmup Iteration   5: 23174324.332 ops/s
[info] Iteration   1: 23093249.384 ops/s
[info]                  ·gc.alloc.rate:                   704.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23275234.837 ops/s
[info]                  ·gc.alloc.rate:                   709.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23310385.546 ops/s
[info]                  ·gc.alloc.rate:                   710.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23229889.475 ops/s
[info]                  ·gc.alloc.rate:                   708.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23147828.800 ops/s
[info]                  ·gc.alloc.rate:                   705.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter":
[info]   23211317.608 ±(99.9%) 345570.982 ops/s [Average]
[info]   (min, avg, max) = (23093249.384, 23211317.608, 23310385.546), stdev = 89743.687
[info]   CI (99.9%): [22865746.627, 23556888.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   707.735 ±(99.9%) 10.612 MB/sec [Average]
[info]   (min, avg, max) = (704.095, 707.735, 710.703), stdev = 2.756
[info]   CI (99.9%): [697.123, 718.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   725.225 ±(99.9%) 572.080 MB/sec [Average]
[info]   (min, avg, max) = (656.579, 725.225, 990.958), stdev = 148.567
[info]   CI (99.9%): [153.145, 1297.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   49.183 ±(99.9%) 38.693 B/op [Average]
[info]   (min, avg, max) = (44.458, 49.183, 67.153), stdev = 10.049
[info]   CI (99.9%): [10.490, 87.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc
[info] # Run progress: 11.11% complete, ETA 00:29:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16891579.988 ops/s
[info] # Warmup Iteration   2: 21620559.665 ops/s
[info] # Warmup Iteration   3: 22236725.623 ops/s
[info] # Warmup Iteration   4: 22120438.745 ops/s
[info] # Warmup Iteration   5: 22313138.460 ops/s
[info] Iteration   1: 22162864.039 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22148360.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22180573.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22294279.452 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22318422.999 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc":
[info]   22220899.937 ±(99.9%) 305342.619 ops/s [Average]
[info]   (min, avg, max) = (22148360.155, 22220899.937, 22318422.999), stdev = 79296.509
[info]   CI (99.9%): [21915557.317, 22526242.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay
[info] # Run progress: 11.90% complete, ETA 00:28:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334772.266 ops/s
[info] # Warmup Iteration   2: 1186307.687 ops/s
[info] # Warmup Iteration   3: 1179655.750 ops/s
[info] # Warmup Iteration   4: 1150991.688 ops/s
[info] # Warmup Iteration   5: 1153337.885 ops/s
[info] Iteration   1: 1172377.427 ops/s
[info]                  ·gc.alloc.rate:                   1769.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2256.227 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1177217.174 ops/s
[info]                  ·gc.alloc.rate:                   1777.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2256.353 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1159365.162 ops/s
[info]                  ·gc.alloc.rate:                   1750.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2298.144 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1179939.830 ops/s
[info]                  ·gc.alloc.rate:                   1781.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2715.218 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1177395.192 ops/s
[info]                  ·gc.alloc.rate:                   1777.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2270.603 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay":
[info]   1173258.957 ±(99.9%) 31707.932 ops/s [Average]
[info]   (min, avg, max) = (1159365.162, 1173258.957, 1179939.830), stdev = 8234.449
[info]   CI (99.9%): [1141551.025, 1204966.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate":
[info]   1771.093 ±(99.9%) 47.327 MB/sec [Average]
[info]   (min, avg, max) = (1750.424, 1771.093, 1781.026), stdev = 12.291
[info]   CI (99.9%): [1723.766, 1818.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   2376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2376.000, 2376.000, 2376.000), stdev = 0.001
[info]   CI (99.9%): [2376.000, 2376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.139 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (0.084, 0.139, 0.195), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1758.969 ±(99.9%) 595.366 MB/sec [Average]
[info]   (min, avg, max) = (1680.316, 1758.969, 2035.300), stdev = 154.615
[info]   CI (99.9%): [1163.603, 2354.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   2359.309 ±(99.9%) 768.940 B/op [Average]
[info]   (min, avg, max) = (2256.227, 2359.309, 2715.218), stdev = 199.691
[info]   CI (99.9%): [1590.369, 3128.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 12.70% complete, ETA 00:28:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 634081.486 ops/s
[info] # Warmup Iteration   2: 935364.093 ops/s
[info] # Warmup Iteration   3: 956465.735 ops/s
[info] # Warmup Iteration   4: 951899.617 ops/s
[info] # Warmup Iteration   5: 958286.667 ops/s
[info] Iteration   1: 955138.713 ops/s
[info]                  ·gc.alloc.rate:                   3102.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5590.114 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 957693.235 ops/s
[info]                  ·gc.alloc.rate:                   3109.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5027.151 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 960734.355 ops/s
[info]                  ·gc.alloc.rate:                   3119.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5018.739 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 945496.428 ops/s
[info]                  ·gc.alloc.rate:                   3070.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5099.352 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 960281.683 ops/s
[info]                  ·gc.alloc.rate:                   3118.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5021.038 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   955868.883 ±(99.9%) 23938.717 ops/s [Average]
[info]   (min, avg, max) = (945496.428, 955868.883, 960734.355), stdev = 6216.809
[info]   CI (99.9%): [931930.165, 979807.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   3104.062 ±(99.9%) 77.960 MB/sec [Average]
[info]   (min, avg, max) = (3070.157, 3104.062, 3119.897), stdev = 20.246
[info]   CI (99.9%): [3026.102, 3182.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5112.000, 5112.000, 5112.000), stdev = 0.001
[info]   CI (99.9%): [5112.000, 5112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.154 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.154, 0.208), stdev = 0.032
[info]   CI (99.9%): [0.032, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.253 ±(99.9%) 0.196 B/op [Average]
[info]   (min, avg, max) = (0.208, 0.253, 0.341), stdev = 0.051
[info]   CI (99.9%): [0.057, 0.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3127.764 ±(99.9%) 569.303 MB/sec [Average]
[info]   (min, avg, max) = (3058.313, 3127.764, 3392.217), stdev = 147.846
[info]   CI (99.9%): [2558.461, 3697.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5151.279 ±(99.9%) 953.393 B/op [Average]
[info]   (min, avg, max) = (5018.739, 5151.279, 5590.114), stdev = 247.593
[info]   CI (99.9%): [4197.886, 6104.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 10.000), stdev = 1.140
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson
[info] # Run progress: 13.49% complete, ETA 00:28:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 801648.360 ops/s
[info] # Warmup Iteration   2: 1741159.824 ops/s
[info] # Warmup Iteration   3: 1725424.887 ops/s
[info] # Warmup Iteration   4: 1742290.105 ops/s
[info] # Warmup Iteration   5: 1776170.552 ops/s
[info] Iteration   1: 1766178.601 ops/s
[info]                  ·gc.alloc.rate:                   1660.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1496.690 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1777130.956 ops/s
[info]                  ·gc.alloc.rate:                   1671.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1494.095 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1740289.743 ops/s
[info]                  ·gc.alloc.rate:                   1636.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1530.799 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1755094.840 ops/s
[info]                  ·gc.alloc.rate:                   1650.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1520.821 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1757394.856 ops/s
[info]                  ·gc.alloc.rate:                   1652.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1217.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson":
[info]   1759217.799 ±(99.9%) 52654.200 ops/s [Average]
[info]   (min, avg, max) = (1740289.743, 1759217.799, 1777130.956), stdev = 13674.129
[info]   CI (99.9%): [1706563.599, 1811872.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate":
[info]   1654.133 ±(99.9%) 49.573 MB/sec [Average]
[info]   (min, avg, max) = (1636.441, 1654.133, 1671.235), stdev = 12.874
[info]   CI (99.9%): [1604.560, 1703.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.097 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.097, 0.151), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1622.675 ±(99.9%) 568.546 MB/sec [Average]
[info]   (min, avg, max) = (1358.793, 1622.675, 1695.721), stdev = 147.650
[info]   CI (99.9%): [1054.129, 2191.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1451.885 ±(99.9%) 509.132 B/op [Average]
[info]   (min, avg, max) = (1217.023, 1451.885, 1530.799), stdev = 132.220
[info]   CI (99.9%): [942.753, 1961.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter
[info] # Run progress: 14.29% complete, ETA 00:28:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9073280.032 ops/s
[info] # Warmup Iteration   2: 9767275.726 ops/s
[info] # Warmup Iteration   3: 9955215.826 ops/s
[info] # Warmup Iteration   4: 9993304.096 ops/s
[info] # Warmup Iteration   5: 9973522.005 ops/s
[info] Iteration   1: 9954622.325 ops/s
[info]                  ·gc.alloc.rate:                   2478.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 374.613 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9967406.827 ops/s
[info]                  ·gc.alloc.rate:                   2482.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 375.210 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9914176.556 ops/s
[info]                  ·gc.alloc.rate:                   2468.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 377.609 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9966271.649 ops/s
[info]                  ·gc.alloc.rate:                   2481.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 430.023 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9751998.538 ops/s
[info]                  ·gc.alloc.rate:                   2428.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2381.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 384.535 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter":
[info]   9910895.179 ±(99.9%) 352029.171 ops/s [Average]
[info]   (min, avg, max) = (9751998.538, 9910895.179, 9967406.827), stdev = 91420.858
[info]   CI (99.9%): [9558866.008, 10262924.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2467.992 ±(99.9%) 88.041 MB/sec [Average]
[info]   (min, avg, max) = (2428.227, 2467.992, 2482.169), stdev = 22.864
[info]   CI (99.9%): [2379.951, 2556.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.015, 0.023), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2445.508 ±(99.9%) 596.394 MB/sec [Average]
[info]   (min, avg, max) = (2368.975, 2445.508, 2722.438), stdev = 154.882
[info]   CI (99.9%): [1849.114, 3041.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   388.398 ±(99.9%) 90.876 B/op [Average]
[info]   (min, avg, max) = (374.613, 388.398, 430.023), stdev = 23.600
[info]   CI (99.9%): [297.522, 479.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay
[info] # Run progress: 15.08% complete, ETA 00:27:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80993.364 ops/s
[info] # Warmup Iteration   2: 340639.389 ops/s
[info] # Warmup Iteration   3: 341035.199 ops/s
[info] # Warmup Iteration   4: 342810.349 ops/s
[info] # Warmup Iteration   5: 337878.662 ops/s
[info] Iteration   1: 341115.584 ops/s
[info]                  ·gc.alloc.rate:                   2075.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10890.237 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 339201.779 ops/s
[info]                  ·gc.alloc.rate:                   2063.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9425.565 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 342727.513 ops/s
[info]                  ·gc.alloc.rate:                   2085.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9348.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 337992.681 ops/s
[info]                  ·gc.alloc.rate:                   2056.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9491.144 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 337394.506 ops/s
[info]                  ·gc.alloc.rate:                   2052.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              9576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2040.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9517.115 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay":
[info]   339686.413 ±(99.9%) 8534.034 ops/s [Average]
[info]   (min, avg, max) = (337394.506, 339686.413, 342727.513), stdev = 2216.261
[info]   CI (99.9%): [331152.379, 348220.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate":
[info]   2066.560 ±(99.9%) 52.375 MB/sec [Average]
[info]   (min, avg, max) = (2052.671, 2066.560, 2085.448), stdev = 13.602
[info]   CI (99.9%): [2014.184, 2118.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   9576.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9576.001, 9576.001, 9576.001), stdev = 0.001
[info]   CI (99.9%): [9576.001, 9576.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.463 ±(99.9%) 0.806 B/op [Average]
[info]   (min, avg, max) = (0.194, 0.463, 0.773), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2100.948 ±(99.9%) 557.444 MB/sec [Average]
[info]   (min, avg, max) = (2031.072, 2100.948, 2359.846), stdev = 144.766
[info]   CI (99.9%): [1543.504, 2658.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   9734.473 ±(99.9%) 2500.545 B/op [Average]
[info]   (min, avg, max) = (9348.302, 9734.473, 10890.237), stdev = 649.384
[info]   CI (99.9%): [7233.928, 12235.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 15.87% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704568.642 ops/s
[info] # Warmup Iteration   2: 1103954.394 ops/s
[info] # Warmup Iteration   3: 1118549.594 ops/s
[info] # Warmup Iteration   4: 1118580.375 ops/s
[info] # Warmup Iteration   5: 1107711.963 ops/s
[info] Iteration   1: 1115611.459 ops/s
[info]                  ·gc.alloc.rate:                   2443.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3332.184 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1101242.169 ops/s
[info]                  ·gc.alloc.rate:                   2412.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3873.513 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1110852.007 ops/s
[info]                  ·gc.alloc.rate:                   2433.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3369.014 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1116621.173 ops/s
[info]                  ·gc.alloc.rate:                   2445.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2380.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3355.581 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1098778.555 ops/s
[info]                  ·gc.alloc.rate:                   2407.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2383.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3412.946 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1108621.073 ±(99.9%) 31587.460 ops/s [Average]
[info]   (min, avg, max) = (1098778.555, 1108621.073, 1116621.173), stdev = 8203.163
[info]   CI (99.9%): [1077033.613, 1140208.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2428.466 ±(99.9%) 67.477 MB/sec [Average]
[info]   (min, avg, max) = (2407.658, 2428.466, 2445.683), stdev = 17.524
[info]   CI (99.9%): [2360.989, 2495.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3448.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3448.000, 3448.000, 3448.000), stdev = 0.001
[info]   CI (99.9%): [3448.000, 3448.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.142 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (0.088, 0.142, 0.178), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2442.443 ±(99.9%) 577.310 MB/sec [Average]
[info]   (min, avg, max) = (2361.287, 2442.443, 2710.211), stdev = 149.926
[info]   CI (99.9%): [1865.132, 3019.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3468.648 ±(99.9%) 878.825 B/op [Average]
[info]   (min, avg, max) = (3332.184, 3468.648, 3873.513), stdev = 228.228
[info]   CI (99.9%): [2589.823, 4347.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson
[info] # Run progress: 16.67% complete, ETA 00:27:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1589848.280 ops/s
[info] # Warmup Iteration   2: 3817861.782 ops/s
[info] # Warmup Iteration   3: 3837039.622 ops/s
[info] # Warmup Iteration   4: 3856543.178 ops/s
[info] # Warmup Iteration   5: 3846011.279 ops/s
[info] Iteration   1: 3864179.556 ops/s
[info]                  ·gc.alloc.rate:                   2199.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.602 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3856321.632 ops/s
[info]                  ·gc.alloc.rate:                   2195.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 968.060 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 3844514.897 ops/s
[info]                  ·gc.alloc.rate:                   2188.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 834.216 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3835412.339 ops/s
[info]                  ·gc.alloc.rate:                   2183.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2379.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 976.410 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 3824611.797 ops/s
[info]                  ·gc.alloc.rate:                   2176.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2041.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 840.445 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson":
[info]   3845008.044 ±(99.9%) 61001.778 ops/s [Average]
[info]   (min, avg, max) = (3824611.797, 3845008.044, 3864179.556), stdev = 15841.968
[info]   CI (99.9%): [3784006.267, 3906009.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate":
[info]   2188.853 ±(99.9%) 35.211 MB/sec [Average]
[info]   (min, avg, max) = (2176.824, 2188.853, 2199.696), stdev = 9.144
[info]   CI (99.9%): [2153.641, 2224.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.117, 0.146), stdev = 0.019
[info]   CI (99.9%): [0.045, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.048, 0.059), stdev = 0.008
[info]   CI (99.9%): [0.019, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   2171.609 ±(99.9%) 717.802 MB/sec [Average]
[info]   (min, avg, max) = (2026.867, 2171.609, 2379.418), stdev = 186.411
[info]   CI (99.9%): [1453.808, 2889.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   888.947 ±(99.9%) 293.693 B/op [Average]
[info]   (min, avg, max) = (825.602, 888.947, 976.410), stdev = 76.271
[info]   CI (99.9%): [595.253, 1182.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 11.000), stdev = 2.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter
[info] # Run progress: 17.46% complete, ETA 00:27:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16657836.778 ops/s
[info] # Warmup Iteration   2: 18570984.259 ops/s
[info] # Warmup Iteration   3: 19135881.210 ops/s
[info] # Warmup Iteration   4: 19027106.461 ops/s
[info] # Warmup Iteration   5: 18979706.022 ops/s
[info] Iteration   1: 19169485.393 ops/s
[info]                  ·gc.alloc.rate:                   876.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19100037.691 ops/s
[info]                  ·gc.alloc.rate:                   873.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19109267.398 ops/s
[info]                  ·gc.alloc.rate:                   874.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19163330.275 ops/s
[info]                  ·gc.alloc.rate:                   876.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19077670.783 ops/s
[info]                  ·gc.alloc.rate:                   872.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter":
[info]   19123958.308 ±(99.9%) 155860.978 ops/s [Average]
[info]   (min, avg, max) = (19077670.783, 19123958.308, 19169485.393), stdev = 40476.601
[info]   CI (99.9%): [18968097.330, 19279819.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   874.694 ±(99.9%) 6.886 MB/sec [Average]
[info]   (min, avg, max) = (872.590, 874.694, 876.559), stdev = 1.788
[info]   CI (99.9%): [867.808, 881.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.008 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.008, 0.010), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   861.332 ±(99.9%) 699.163 MB/sec [Average]
[info]   (min, avg, max) = (660.325, 861.332, 1000.635), stdev = 181.570
[info]   CI (99.9%): [162.170, 1560.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   70.905 ±(99.9%) 57.662 B/op [Average]
[info]   (min, avg, max) = (54.424, 70.905, 82.565), stdev = 14.975
[info]   CI (99.9%): [13.243, 128.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay
[info] # Run progress: 18.25% complete, ETA 00:26:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131547.453 ops/s
[info] # Warmup Iteration   2: 523110.104 ops/s
[info] # Warmup Iteration   3: 528271.763 ops/s
[info] # Warmup Iteration   4: 518877.286 ops/s
[info] # Warmup Iteration   5: 523260.903 ops/s
[info] Iteration   1: 530531.800 ops/s
[info]                  ·gc.alloc.rate:                   1833.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5980.430 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 528066.856 ops/s
[info]                  ·gc.alloc.rate:                   1825.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5028.956 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 523141.869 ops/s
[info]                  ·gc.alloc.rate:                   1808.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5094.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 521086.128 ops/s
[info]                  ·gc.alloc.rate:                   1800.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6148.519 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 523920.130 ops/s
[info]                  ·gc.alloc.rate:                   1810.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5102.774 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay":
[info]   525349.357 ±(99.9%) 14830.396 ops/s [Average]
[info]   (min, avg, max) = (521086.128, 525349.357, 530531.800), stdev = 3851.407
[info]   CI (99.9%): [510518.961, 540179.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate":
[info]   1815.614 ±(99.9%) 51.229 MB/sec [Average]
[info]   (min, avg, max) = (1800.725, 1815.614, 1833.276), stdev = 13.304
[info]   CI (99.9%): [1764.385, 1866.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5440.001, 5440.001, 5440.001), stdev = 0.001
[info]   CI (99.9%): [5440.001, 5440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.287 ±(99.9%) 0.321 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.287, 0.376), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1825.933 ±(99.9%) 701.582 MB/sec [Average]
[info]   (min, avg, max) = (1687.382, 1825.933, 2035.256), stdev = 182.199
[info]   CI (99.9%): [1124.352, 2527.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5471.000 ±(99.9%) 2101.543 B/op [Average]
[info]   (min, avg, max) = (5028.956, 5471.000, 6148.519), stdev = 545.764
[info]   CI (99.9%): [3369.457, 7572.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce
[info] # Run progress: 19.05% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 808.045 ops/s
[info] # Warmup Iteration   2: 1030.476 ops/s
[info] # Warmup Iteration   3: 1035.261 ops/s
[info] # Warmup Iteration   4: 1046.044 ops/s
[info] # Warmup Iteration   5: 1041.250 ops/s
[info] Iteration   1: 1041.578 ops/s
[info]                  ·gc.alloc.rate:                   1174.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              1774920.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1995514.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1036.301 ops/s
[info]                  ·gc.alloc.rate:                   1168.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              1774920.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1513205.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1048.291 ops/s
[info]                  ·gc.alloc.rate:                   1182.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              1774920.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2003189.994 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1053.940 ops/s
[info]                  ·gc.alloc.rate:                   1188.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1774907.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1500308.504 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1031.329 ops/s
[info]                  ·gc.alloc.rate:                   1163.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              1774904.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2051429.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce":
[info]   1042.288 ±(99.9%) 34.882 ops/s [Average]
[info]   (min, avg, max) = (1031.329, 1042.288, 1053.940), stdev = 9.059
[info]   CI (99.9%): [1007.406, 1077.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1175.460 ±(99.9%) 39.387 MB/sec [Average]
[info]   (min, avg, max) = (1163.300, 1175.460, 1188.696), stdev = 10.229
[info]   CI (99.9%): [1136.072, 1214.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1774914.861 ±(99.9%) 30.974 B/op [Average]
[info]   (min, avg, max) = (1774904.395, 1774914.861, 1774920.868), stdev = 8.044
[info]   CI (99.9%): [1774883.887, 1774945.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.111 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.111, 0.166), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   168.506 ±(99.9%) 299.011 B/op [Average]
[info]   (min, avg, max) = (62.119, 168.506, 254.016), stdev = 77.652
[info]   CI (99.9%): [≈ 0, 467.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1200.064 ±(99.9%) 702.175 MB/sec [Average]
[info]   (min, avg, max) = (996.324, 1200.064, 1344.539), stdev = 182.353
[info]   CI (99.9%): [497.889, 1902.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1812729.538 ±(99.9%) 1078841.439 B/op [Average]
[info]   (min, avg, max) = (1500308.504, 1812729.538, 2051429.209), stdev = 280171.696
[info]   CI (99.9%): [733888.099, 2891570.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson
[info] # Run progress: 19.84% complete, ETA 00:26:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2215.456 ops/s
[info] # Warmup Iteration   2: 3078.348 ops/s
[info] # Warmup Iteration   3: 3167.363 ops/s
[info] # Warmup Iteration   4: 3199.898 ops/s
[info] # Warmup Iteration   5: 3207.146 ops/s
[info] Iteration   1: 3221.310 ops/s
[info]                  ·gc.alloc.rate:                   917.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              448336.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319910.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3214.511 ops/s
[info]                  ·gc.alloc.rate:                   915.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              448336.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483192.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3198.735 ops/s
[info]                  ·gc.alloc.rate:                   911.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              448336.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488734.720 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3203.686 ops/s
[info]                  ·gc.alloc.rate:                   912.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              448336.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 489935.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3163.370 ops/s
[info]                  ·gc.alloc.rate:                   900.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              448336.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 332297.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson":
[info]   3200.322 ±(99.9%) 86.556 ops/s [Average]
[info]   (min, avg, max) = (3163.370, 3200.322, 3221.310), stdev = 22.478
[info]   CI (99.9%): [3113.766, 3286.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   911.467 ±(99.9%) 24.657 MB/sec [Average]
[info]   (min, avg, max) = (900.916, 911.467, 917.441), stdev = 6.403
[info]   CI (99.9%): [886.811, 936.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   448336.129 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (448336.127, 448336.129, 448336.137), stdev = 0.004
[info]   CI (99.9%): [448336.113, 448336.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   20.464 ±(99.9%) 73.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.464, 50.961), stdev = 19.071
[info]   CI (99.9%): [≈ 0, 93.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   859.858 ±(99.9%) 698.726 MB/sec [Average]
[info]   (min, avg, max) = (654.639, 859.858, 997.168), stdev = 181.457
[info]   CI (99.9%): [161.132, 1558.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   422814.110 ±(99.9%) 340509.260 B/op [Average]
[info]   (min, avg, max) = (319910.058, 422814.110, 489935.276), stdev = 88429.174
[info]   CI (99.9%): [82304.850, 763323.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter
[info] # Run progress: 20.63% complete, ETA 00:26:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2700.670 ops/s
[info] # Warmup Iteration   2: 2925.533 ops/s
[info] # Warmup Iteration   3: 2941.875 ops/s
[info] # Warmup Iteration   4: 2945.541 ops/s
[info] # Warmup Iteration   5: 2953.169 ops/s
[info] Iteration   1: 2946.880 ops/s
[info]                  ·gc.alloc.rate:                   417.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              223008.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176956.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2952.532 ops/s
[info]                  ·gc.alloc.rate:                   418.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              223008.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352128.433 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2960.214 ops/s
[info]                  ·gc.alloc.rate:                   419.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              223008.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175234.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2947.671 ops/s
[info]                  ·gc.alloc.rate:                   417.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              223008.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176007.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2944.284 ops/s
[info]                  ·gc.alloc.rate:                   417.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              223008.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352372.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter":
[info]   2950.316 ±(99.9%) 24.207 ops/s [Average]
[info]   (min, avg, max) = (2944.284, 2950.316, 2960.214), stdev = 6.286
[info]   CI (99.9%): [2926.110, 2974.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   418.030 ±(99.9%) 3.733 MB/sec [Average]
[info]   (min, avg, max) = (417.135, 418.030, 419.547), stdev = 0.969
[info]   CI (99.9%): [414.298, 421.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   223008.140 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (223008.138, 223008.140, 223008.149), stdev = 0.005
[info]   CI (99.9%): [223008.121, 223008.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   6.669 ±(99.9%) 38.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.669, 22.223), stdev = 9.940
[info]   CI (99.9%): [≈ 0, 44.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   462.058 ±(99.9%) 695.418 MB/sec [Average]
[info]   (min, avg, max) = (329.576, 462.058, 660.672), stdev = 180.598
[info]   CI (99.9%): [≈ 0, 1157.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   246539.831 ±(99.9%) 371595.853 B/op [Average]
[info]   (min, avg, max) = (175234.679, 246539.831, 352372.790), stdev = 96502.263
[info]   CI (99.9%): [≈ 0, 618135.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson
[info] # Run progress: 21.43% complete, ETA 00:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1073.961 ops/s
[info] # Warmup Iteration   2: 1803.231 ops/s
[info] # Warmup Iteration   3: 1792.217 ops/s
[info] # Warmup Iteration   4: 1817.555 ops/s
[info] # Warmup Iteration   5: 1768.840 ops/s
[info] Iteration   1: 1832.814 ops/s
[info]                  ·gc.alloc.rate:                   1399.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1201591.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1150060.318 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1838.550 ops/s
[info]                  ·gc.alloc.rate:                   1403.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1201599.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1151154.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1834.011 ops/s
[info]                  ·gc.alloc.rate:                   1400.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              1201584.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1158576.480 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1839.770 ops/s
[info]                  ·gc.alloc.rate:                   1404.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              1201592.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1446989.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1801.507 ops/s
[info]                  ·gc.alloc.rate:                   1375.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              1201592.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1184739.587 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson":
[info]   1829.330 ±(99.9%) 60.950 ops/s [Average]
[info]   (min, avg, max) = (1801.507, 1829.330, 1839.770), stdev = 15.828
[info]   CI (99.9%): [1768.381, 1890.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   1396.572 ±(99.9%) 46.978 MB/sec [Average]
[info]   (min, avg, max) = (1375.186, 1396.572, 1404.901), stdev = 12.200
[info]   CI (99.9%): [1349.594, 1443.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1201591.921 ±(99.9%) 20.897 B/op [Average]
[info]   (min, avg, max) = (1201584.109, 1201591.921, 1201599.443), stdev = 5.427
[info]   CI (99.9%): [1201571.024, 1201612.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   75.088 ±(99.9%) 111.758 B/op [Average]
[info]   (min, avg, max) = (53.601, 75.088, 124.661), stdev = 29.023
[info]   CI (99.9%): [≈ 0, 186.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1416.290 ±(99.9%) 593.581 MB/sec [Average]
[info]   (min, avg, max) = (1339.058, 1416.290, 1691.819), stdev = 154.151
[info]   CI (99.9%): [822.710, 2009.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1218303.957 ±(99.9%) 495212.985 B/op [Average]
[info]   (min, avg, max) = (1150060.318, 1218303.957, 1446989.315), stdev = 128605.239
[info]   CI (99.9%): [723090.973, 1713516.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter
[info] # Run progress: 22.22% complete, ETA 00:25:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1913.699 ops/s
[info] # Warmup Iteration   2: 2074.579 ops/s
[info] # Warmup Iteration   3: 2058.044 ops/s
[info] # Warmup Iteration   4: 2078.749 ops/s
[info] # Warmup Iteration   5: 2082.052 ops/s
[info] Iteration   1: 2092.589 ops/s
[info]                  ·gc.alloc.rate:                   1633.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229208.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1260495.564 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2061.489 ops/s
[info]                  ·gc.alloc.rate:                   1610.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229208.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1285802.336 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2095.589 ops/s
[info]                  ·gc.alloc.rate:                   1636.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229208.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1268341.928 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2062.322 ops/s
[info]                  ·gc.alloc.rate:                   1610.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229208.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1033835.959 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2075.333 ops/s
[info]                  ·gc.alloc.rate:                   1620.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229208.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1286475.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter":
[info]   2077.465 ±(99.9%) 62.278 ops/s [Average]
[info]   (min, avg, max) = (2061.489, 2077.465, 2095.589), stdev = 16.173
[info]   CI (99.9%): [2015.187, 2139.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1622.394 ±(99.9%) 48.631 MB/sec [Average]
[info]   (min, avg, max) = (1610.136, 1622.394, 1636.896), stdev = 12.629
[info]   CI (99.9%): [1573.763, 1671.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   1229208.199 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (1229208.195, 1229208.199, 1229208.213), stdev = 0.008
[info]   CI (99.9%): [1229208.169, 1229208.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.098 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.098, 0.135), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   74.175 ±(99.9%) 77.525 B/op [Average]
[info]   (min, avg, max) = (46.960, 74.175, 103.294), stdev = 20.133
[info]   CI (99.9%): [≈ 0, 151.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1619.868 ±(99.9%) 571.985 MB/sec [Average]
[info]   (min, avg, max) = (1354.486, 1619.868, 1696.117), stdev = 148.543
[info]   CI (99.9%): [1047.882, 2191.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1226990.251 ±(99.9%) 418014.402 B/op [Average]
[info]   (min, avg, max) = (1033835.959, 1226990.251, 1286475.468), stdev = 108557.013
[info]   CI (99.9%): [808975.849, 1645004.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 23.02% complete, ETA 00:25:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1953.492 ops/s
[info] # Warmup Iteration   2: 2130.330 ops/s
[info] # Warmup Iteration   3: 2120.643 ops/s
[info] # Warmup Iteration   4: 2134.643 ops/s
[info] # Warmup Iteration   5: 2125.850 ops/s
[info] Iteration   1: 2135.348 ops/s
[info]                  ·gc.alloc.rate:                   1456.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              1073872.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 985003.625 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2130.408 ops/s
[info]                  ·gc.alloc.rate:                   1453.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              1073872.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 991989.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2129.250 ops/s
[info]                  ·gc.alloc.rate:                   1452.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1073872.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1245491.681 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2102.046 ops/s
[info]                  ·gc.alloc.rate:                   1434.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1073872.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1012177.499 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2116.582 ops/s
[info]                  ·gc.alloc.rate:                   1443.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              1073872.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1007465.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc":
[info]   2122.727 ±(99.9%) 51.888 ops/s [Average]
[info]   (min, avg, max) = (2102.046, 2122.727, 2135.348), stdev = 13.475
[info]   CI (99.9%): [2070.839, 2174.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1448.237 ±(99.9%) 35.703 MB/sec [Average]
[info]   (min, avg, max) = (1434.015, 1448.237, 1456.558), stdev = 9.272
[info]   CI (99.9%): [1412.534, 1483.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   1073872.192 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (1073872.191, 1073872.192, 1073872.194), stdev = 0.001
[info]   CI (99.9%): [1073872.187, 1073872.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   77.111 ±(99.9%) 83.080 B/op [Average]
[info]   (min, avg, max) = (61.363, 77.111, 107.688), stdev = 21.576
[info]   CI (99.9%): [≈ 0, 160.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1414.065 ±(99.9%) 584.204 MB/sec [Average]
[info]   (min, avg, max) = (1336.020, 1414.065, 1685.147), stdev = 151.716
[info]   CI (99.9%): [829.861, 1998.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1048425.440 ±(99.9%) 426336.588 B/op [Average]
[info]   (min, avg, max) = (985003.625, 1048425.440, 1245491.681), stdev = 110718.258
[info]   CI (99.9%): [622088.851, 1474762.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson
[info] # Run progress: 23.81% complete, ETA 00:25:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1328798.902 ops/s
[info] # Warmup Iteration   2: 2418076.270 ops/s
[info] # Warmup Iteration   3: 2434348.789 ops/s
[info] # Warmup Iteration   4: 2431132.552 ops/s
[info] # Warmup Iteration   5: 2434313.693 ops/s
[info] Iteration   1: 2441127.368 ops/s
[info]                  ·gc.alloc.rate:                   1476.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862.765 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2442516.454 ops/s
[info]                  ·gc.alloc.rate:                   1477.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1083.394 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2438692.283 ops/s
[info]                  ·gc.alloc.rate:                   1474.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 871.638 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2438772.771 ops/s
[info]                  ·gc.alloc.rate:                   1474.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1092.146 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2448125.712 ops/s
[info]                  ·gc.alloc.rate:                   1480.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 871.919 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson":
[info]   2441846.918 ±(99.9%) 14887.531 ops/s [Average]
[info]   (min, avg, max) = (2438692.283, 2441846.918, 2448125.712), stdev = 3866.244
[info]   CI (99.9%): [2426959.387, 2456734.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate":
[info]   1476.640 ±(99.9%) 9.240 MB/sec [Average]
[info]   (min, avg, max) = (1474.606, 1476.640, 1480.498), stdev = 2.400
[info]   CI (99.9%): [1467.400, 1485.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.072 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.072, 0.094), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1483.357 ±(99.9%) 714.389 MB/sec [Average]
[info]   (min, avg, max) = (1337.856, 1483.357, 1691.841), stdev = 185.524
[info]   CI (99.9%): [768.968, 2197.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   956.373 ±(99.9%) 462.252 B/op [Average]
[info]   (min, avg, max) = (862.765, 956.373, 1092.146), stdev = 120.045
[info]   CI (99.9%): [494.120, 1418.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter
[info] # Run progress: 24.60% complete, ETA 00:24:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8483336.228 ops/s
[info] # Warmup Iteration   2: 5066400.283 ops/s
[info] # Warmup Iteration   3: 4920324.532 ops/s
[info] # Warmup Iteration   4: 5127476.001 ops/s
[info] # Warmup Iteration   5: 5143061.466 ops/s
[info] Iteration   1: 5147913.401 ops/s
[info]                  ·gc.alloc.rate:                   680.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5119301.722 ops/s
[info]                  ·gc.alloc.rate:                   676.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5151973.246 ops/s
[info]                  ·gc.alloc.rate:                   680.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.562 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5069382.650 ops/s
[info]                  ·gc.alloc.rate:                   669.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5040215.064 ops/s
[info]                  ·gc.alloc.rate:                   666.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter":
[info]   5105757.217 ±(99.9%) 189772.705 ops/s [Average]
[info]   (min, avg, max) = (5040215.064, 5105757.217, 5151973.246), stdev = 49283.369
[info]   CI (99.9%): [4915984.512, 5295529.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   674.663 ±(99.9%) 24.879 MB/sec [Average]
[info]   (min, avg, max) = (666.105, 674.663, 680.763), stdev = 6.461
[info]   CI (99.9%): [649.784, 699.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.032), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   660.024 ±(99.9%) 10.670 MB/sec [Average]
[info]   (min, avg, max) = (656.886, 660.024, 663.796), stdev = 2.771
[info]   CI (99.9%): [649.353, 670.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   203.507 ±(99.9%) 10.555 B/op [Average]
[info]   (min, avg, max) = (200.889, 203.507, 207.279), stdev = 2.741
[info]   CI (99.9%): [192.953, 214.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay
[info] # Run progress: 25.40% complete, ETA 00:24:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146317.269 ops/s
[info] # Warmup Iteration   2: 415415.548 ops/s
[info] # Warmup Iteration   3: 412426.533 ops/s
[info] # Warmup Iteration   4: 418231.074 ops/s
[info] # Warmup Iteration   5: 416648.580 ops/s
[info] Iteration   1: 414664.696 ops/s
[info]                  ·gc.alloc.rate:                   1945.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6393.741 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 413861.121 ops/s
[info]                  ·gc.alloc.rate:                   1941.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7717.158 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 418108.771 ops/s
[info]                  ·gc.alloc.rate:                   1961.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7657.738 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 412021.437 ops/s
[info]                  ·gc.alloc.rate:                   1933.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7785.164 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 418575.043 ops/s
[info]                  ·gc.alloc.rate:                   1963.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6387.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay":
[info]   415446.213 ±(99.9%) 10845.421 ops/s [Average]
[info]   (min, avg, max) = (412021.437, 415446.213, 418575.043), stdev = 2816.521
[info]   CI (99.9%): [404600.793, 426291.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate":
[info]   1948.959 ±(99.9%) 50.031 MB/sec [Average]
[info]   (min, avg, max) = (1933.299, 1948.959, 1963.408), stdev = 12.993
[info]   CI (99.9%): [1898.928, 1998.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.442 ±(99.9%) 0.698 B/op [Average]
[info]   (min, avg, max) = (0.237, 0.442, 0.633), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 1.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1896.844 ±(99.9%) 723.084 MB/sec [Average]
[info]   (min, avg, max) = (1684.162, 1896.844, 2038.333), stdev = 187.783
[info]   CI (99.9%): [1173.759, 2619.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   7188.170 ±(99.9%) 2809.673 B/op [Average]
[info]   (min, avg, max) = (6387.051, 7188.170, 7785.164), stdev = 729.663
[info]   CI (99.9%): [4378.497, 9997.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson
[info] # Run progress: 26.19% complete, ETA 00:24:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1538289.818 ops/s
[info] # Warmup Iteration   2: 2720740.794 ops/s
[info] # Warmup Iteration   3: 2688471.008 ops/s
[info] # Warmup Iteration   4: 2744080.024 ops/s
[info] # Warmup Iteration   5: 2740730.105 ops/s
[info] Iteration   1: 2706614.290 ops/s
[info]                  ·gc.alloc.rate:                   1430.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 777.812 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2756527.209 ops/s
[info]                  ·gc.alloc.rate:                   1456.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 767.531 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2725432.719 ops/s
[info]                  ·gc.alloc.rate:                   1440.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 973.910 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2727422.363 ops/s
[info]                  ·gc.alloc.rate:                   1441.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 780.670 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2726732.925 ops/s
[info]                  ·gc.alloc.rate:                   1440.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 782.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson":
[info]   2728545.901 ±(99.9%) 68833.702 ops/s [Average]
[info]   (min, avg, max) = (2706614.290, 2728545.901, 2756527.209), stdev = 17875.894
[info]   CI (99.9%): [2659712.199, 2797379.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1442.144 ±(99.9%) 35.746 MB/sec [Average]
[info]   (min, avg, max) = (1430.891, 1442.144, 1456.744), stdev = 9.283
[info]   CI (99.9%): [1406.399, 1477.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.060 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (0.048, 0.060, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1415.095 ±(99.9%) 583.786 MB/sec [Average]
[info]   (min, avg, max) = (1337.698, 1415.095, 1686.011), stdev = 151.607
[info]   CI (99.9%): [831.309, 1998.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   816.465 ±(99.9%) 339.637 B/op [Average]
[info]   (min, avg, max) = (767.531, 816.465, 973.910), stdev = 88.203
[info]   CI (99.9%): [476.829, 1156.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter
[info] # Run progress: 26.98% complete, ETA 00:24:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6317165.777 ops/s
[info] # Warmup Iteration   2: 6987416.222 ops/s
[info] # Warmup Iteration   3: 7208474.495 ops/s
[info] # Warmup Iteration   4: 7230116.998 ops/s
[info] # Warmup Iteration   5: 7111529.128 ops/s
[info] Iteration   1: 7225374.103 ops/s
[info]                  ·gc.alloc.rate:                   1101.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287.596 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7205512.438 ops/s
[info]                  ·gc.alloc.rate:                   1098.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7153900.683 ops/s
[info]                  ·gc.alloc.rate:                   1090.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7122014.840 ops/s
[info]                  ·gc.alloc.rate:                   1085.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.903 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7048967.635 ops/s
[info]                  ·gc.alloc.rate:                   1074.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter":
[info]   7151153.940 ±(99.9%) 270657.757 ops/s [Average]
[info]   (min, avg, max) = (7048967.635, 7151153.940, 7225374.103), stdev = 70288.960
[info]   CI (99.9%): [6880496.183, 7421811.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1090.373 ±(99.9%) 41.629 MB/sec [Average]
[info]   (min, avg, max) = (1074.636, 1090.373, 1101.762), stdev = 10.811
[info]   CI (99.9%): [1048.744, 1132.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.023, 0.032), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1132.904 ±(99.9%) 700.960 MB/sec [Average]
[info]   (min, avg, max) = (995.544, 1132.904, 1343.896), stdev = 182.037
[info]   CI (99.9%): [431.945, 1833.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   249.457 ±(99.9%) 157.150 B/op [Average]
[info]   (min, avg, max) = (217.452, 249.457, 300.134), stdev = 40.811
[info]   CI (99.9%): [92.307, 406.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay
[info] # Run progress: 27.78% complete, ETA 00:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252889.153 ops/s
[info] # Warmup Iteration   2: 683409.765 ops/s
[info] # Warmup Iteration   3: 713362.315 ops/s
[info] # Warmup Iteration   4: 721626.165 ops/s
[info] # Warmup Iteration   5: 726776.669 ops/s
[info] Iteration   1: 715280.819 ops/s
[info]                  ·gc.alloc.rate:                   2072.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4452.701 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 725859.440 ops/s
[info]                  ·gc.alloc.rate:                   2102.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4403.852 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 722733.222 ops/s
[info]                  ·gc.alloc.rate:                   2094.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2373.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5168.019 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 716630.283 ops/s
[info]                  ·gc.alloc.rate:                   2075.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4476.555 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 693412.285 ops/s
[info]                  ·gc.alloc.rate:                   2008.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2041.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4634.104 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay":
[info]   714783.210 ±(99.9%) 48944.899 ops/s [Average]
[info]   (min, avg, max) = (693412.285, 714783.210, 725859.440), stdev = 12710.835
[info]   CI (99.9%): [665838.311, 763728.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate":
[info]   2070.688 ±(99.9%) 142.239 MB/sec [Average]
[info]   (min, avg, max) = (2008.612, 2070.688, 2102.647), stdev = 36.939
[info]   CI (99.9%): [1928.450, 2212.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.000, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.125), stdev = 0.028
[info]   CI (99.9%): [0.005, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.248 ±(99.9%) 0.239 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.248, 0.283), stdev = 0.062
[info]   CI (99.9%): [0.009, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2101.315 ±(99.9%) 586.436 MB/sec [Average]
[info]   (min, avg, max) = (2023.304, 2101.315, 2373.469), stdev = 152.296
[info]   CI (99.9%): [1514.879, 2687.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   4627.046 ±(99.9%) 1210.905 B/op [Average]
[info]   (min, avg, max) = (4403.852, 4627.046, 5168.019), stdev = 314.468
[info]   CI (99.9%): [3416.141, 5837.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 28.57% complete, ETA 00:23:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422455.035 ops/s
[info] # Warmup Iteration   2: 712095.904 ops/s
[info] # Warmup Iteration   3: 733954.391 ops/s
[info] # Warmup Iteration   4: 735621.223 ops/s
[info] # Warmup Iteration   5: 732215.154 ops/s
[info] Iteration   1: 729223.770 ops/s
[info]                  ·gc.alloc.rate:                   2378.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5094.229 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 728225.377 ops/s
[info]                  ·gc.alloc.rate:                   2376.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5122.874 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 730442.931 ops/s
[info]                  ·gc.alloc.rate:                   2383.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5120.949 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 735064.538 ops/s
[info]                  ·gc.alloc.rate:                   2398.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5093.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 720285.694 ops/s
[info]                  ·gc.alloc.rate:                   2349.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5206.665 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   728648.462 ±(99.9%) 20631.693 ops/s [Average]
[info]   (min, avg, max) = (720285.694, 728648.462, 735064.538), stdev = 5357.985
[info]   CI (99.9%): [708016.769, 749280.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2377.323 ±(99.9%) 67.435 MB/sec [Average]
[info]   (min, avg, max) = (2349.930, 2377.323, 2398.230), stdev = 17.513
[info]   CI (99.9%): [2309.888, 2444.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.000, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.029
[info]   CI (99.9%): [0.012, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.270 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (0.178, 0.270, 0.359), stdev = 0.064
[info]   CI (99.9%): [0.024, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2373.296 ±(99.9%) 34.014 MB/sec [Average]
[info]   (min, avg, max) = (2359.539, 2373.296, 2382.261), stdev = 8.833
[info]   CI (99.9%): [2339.282, 2407.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5127.552 ±(99.9%) 178.814 B/op [Average]
[info]   (min, avg, max) = (5093.041, 5127.552, 5206.665), stdev = 46.437
[info]   CI (99.9%): [4948.738, 5306.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson
[info] # Run progress: 29.37% complete, ETA 00:23:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282507.326 ops/s
[info] # Warmup Iteration   2: 980473.520 ops/s
[info] # Warmup Iteration   3: 985405.798 ops/s
[info] # Warmup Iteration   4: 964937.313 ops/s
[info] # Warmup Iteration   5: 973167.218 ops/s
[info] Iteration   1: 980957.592 ops/s
[info]                  ·gc.alloc.rate:                   1216.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1602.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 971635.727 ops/s
[info]                  ·gc.alloc.rate:                   1204.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2167.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 959132.921 ops/s
[info]                  ·gc.alloc.rate:                   1189.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1653.300 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 979964.233 ops/s
[info]                  ·gc.alloc.rate:                   1215.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2165.306 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 968565.536 ops/s
[info]                  ·gc.alloc.rate:                   1200.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2197.260 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson":
[info]   972051.202 ±(99.9%) 34502.731 ops/s [Average]
[info]   (min, avg, max) = (959132.921, 972051.202, 980957.592), stdev = 8960.250
[info]   CI (99.9%): [937548.471, 1006553.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate":
[info]   1205.400 ±(99.9%) 43.034 MB/sec [Average]
[info]   (min, avg, max) = (1189.321, 1205.400, 1216.411), stdev = 11.176
[info]   CI (99.9%): [1162.367, 1248.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.175 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (0.134, 0.175, 0.236), stdev = 0.037
[info]   CI (99.9%): [0.032, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1208.831 ±(99.9%) 723.978 MB/sec [Average]
[info]   (min, avg, max) = (998.613, 1208.831, 1351.796), stdev = 188.015
[info]   CI (99.9%): [484.853, 1932.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1957.242 ±(99.9%) 1160.763 B/op [Average]
[info]   (min, avg, max) = (1602.495, 1957.242, 2197.260), stdev = 301.447
[info]   CI (99.9%): [796.479, 3118.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter
[info] # Run progress: 30.16% complete, ETA 00:23:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7110021.944 ops/s
[info] # Warmup Iteration   2: 8013667.910 ops/s
[info] # Warmup Iteration   3: 8201342.569 ops/s
[info] # Warmup Iteration   4: 8282949.535 ops/s
[info] # Warmup Iteration   5: 8268196.707 ops/s
[info] Iteration   1: 8308568.011 ops/s
[info]                  ·gc.alloc.rate:                   379.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.962 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8267731.719 ops/s
[info]                  ·gc.alloc.rate:                   378.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8265417.594 ops/s
[info]                  ·gc.alloc.rate:                   378.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8219329.295 ops/s
[info]                  ·gc.alloc.rate:                   375.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8143365.262 ops/s
[info]                  ·gc.alloc.rate:                   372.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.855 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter":
[info]   8240882.376 ±(99.9%) 242608.385 ops/s [Average]
[info]   (min, avg, max) = (8143365.262, 8240882.376, 8308568.011), stdev = 63004.627
[info]   CI (99.9%): [7998273.992, 8483490.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   376.922 ±(99.9%) 11.123 MB/sec [Average]
[info]   (min, avg, max) = (372.442, 376.922, 379.971), stdev = 2.889
[info]   CI (99.9%): [365.799, 388.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   330.992 ±(99.9%) 3.097 MB/sec [Average]
[info]   (min, avg, max) = (330.303, 330.992, 332.272), stdev = 0.804
[info]   CI (99.9%): [327.895, 334.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   63.229 ±(99.9%) 1.419 B/op [Average]
[info]   (min, avg, max) = (62.962, 63.229, 63.855), stdev = 0.368
[info]   CI (99.9%): [61.810, 64.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay
[info] # Run progress: 30.95% complete, ETA 00:22:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51413.989 ops/s
[info] # Warmup Iteration   2: 346867.840 ops/s
[info] # Warmup Iteration   3: 357149.199 ops/s
[info] # Warmup Iteration   4: 355961.842 ops/s
[info] # Warmup Iteration   5: 354113.364 ops/s
[info] Iteration   1: 358871.627 ops/s
[info]                  ·gc.alloc.rate:                   1974.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8851.430 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 360284.644 ops/s
[info]                  ·gc.alloc.rate:                   1982.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8860.911 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 348676.849 ops/s
[info]                  ·gc.alloc.rate:                   1919.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9179.178 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 347666.458 ops/s
[info]                  ·gc.alloc.rate:                   1913.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7686.791 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 353961.349 ops/s
[info]                  ·gc.alloc.rate:                   1948.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9063.476 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay":
[info]   353892.185 ±(99.9%) 22088.618 ops/s [Average]
[info]   (min, avg, max) = (347666.458, 353892.185, 360284.644), stdev = 5736.344
[info]   CI (99.9%): [331803.568, 375980.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate":
[info]   1947.712 ±(99.9%) 121.133 MB/sec [Average]
[info]   (min, avg, max) = (1913.647, 1947.712, 1982.787), stdev = 31.458
[info]   CI (99.9%): [1826.580, 2068.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.208), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.554 ±(99.9%) 0.804 B/op [Average]
[info]   (min, avg, max) = (0.376, 0.554, 0.909), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1962.888 ±(99.9%) 571.338 MB/sec [Average]
[info]   (min, avg, max) = (1697.808, 1962.888, 2037.935), stdev = 148.375
[info]   CI (99.9%): [1391.551, 2534.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8728.357 ±(99.9%) 2304.861 B/op [Average]
[info]   (min, avg, max) = (7686.791, 8728.357, 9179.178), stdev = 598.565
[info]   CI (99.9%): [6423.496, 11033.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 31.75% complete, ETA 00:22:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5713.057 ops/s
[info] # Warmup Iteration   2: 7903.870 ops/s
[info] # Warmup Iteration   3: 8036.330 ops/s
[info] # Warmup Iteration   4: 8005.236 ops/s
[info] # Warmup Iteration   5: 8041.368 ops/s
[info] Iteration   1: 8082.679 ops/s
[info]                  ·gc.alloc.rate:                   1944.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 391416.496 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8147.283 ops/s
[info]                  ·gc.alloc.rate:                   1960.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325315.879 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8016.237 ops/s
[info]                  ·gc.alloc.rate:                   1928.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              378794.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398299.351 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7927.314 ops/s
[info]                  ·gc.alloc.rate:                   1908.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              378832.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403695.149 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8120.363 ops/s
[info]                  ·gc.alloc.rate:                   1954.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              378832.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 329172.572 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8058.775 ±(99.9%) 340.567 ops/s [Average]
[info]   (min, avg, max) = (7927.314, 8058.775, 8147.283), stdev = 88.444
[info]   CI (99.9%): [7718.208, 8399.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1939.289 ±(99.9%) 81.367 MB/sec [Average]
[info]   (min, avg, max) = (1908.085, 1939.289, 1960.601), stdev = 21.131
[info]   CI (99.9%): [1857.922, 2020.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378808.570 ±(99.9%) 82.638 B/op [Average]
[info]   (min, avg, max) = (378792.050, 378808.570, 378832.051), stdev = 21.461
[info]   CI (99.9%): [378725.932, 378891.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.078 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.017, 0.078, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15.343 ±(99.9%) 31.858 B/op [Average]
[info]   (min, avg, max) = (3.216, 15.343, 24.793), stdev = 8.273
[info]   CI (99.9%): [≈ 0, 47.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1890.572 ±(99.9%) 702.981 MB/sec [Average]
[info]   (min, avg, max) = (1683.812, 1890.572, 2033.315), stdev = 182.562
[info]   CI (99.9%): [1187.591, 2593.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   369579.889 ±(99.9%) 149848.313 B/op [Average]
[info]   (min, avg, max) = (325315.879, 369579.889, 403695.149), stdev = 38915.131
[info]   CI (99.9%): [219731.576, 519428.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson
[info] # Run progress: 32.54% complete, ETA 00:22:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7569.175 ops/s
[info] # Warmup Iteration   2: 14425.929 ops/s
[info] # Warmup Iteration   3: 14354.192 ops/s
[info] # Warmup Iteration   4: 14498.758 ops/s
[info] # Warmup Iteration   5: 14551.271 ops/s
[info] Iteration   1: 14512.408 ops/s
[info]                  ·gc.alloc.rate:                   367.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34962.165 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 14629.446 ops/s
[info]                  ·gc.alloc.rate:                   370.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34935.812 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14557.555 ops/s
[info]                  ·gc.alloc.rate:                   368.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35106.160 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14532.060 ops/s
[info]                  ·gc.alloc.rate:                   368.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35313.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14504.411 ops/s
[info]                  ·gc.alloc.rate:                   367.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35381.399 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson":
[info]   14547.176 ±(99.9%) 193.896 ops/s [Average]
[info]   (min, avg, max) = (14504.411, 14547.176, 14629.446), stdev = 50.354
[info]   CI (99.9%): [14353.280, 14741.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   368.622 ±(99.9%) 5.084 MB/sec [Average]
[info]   (min, avg, max) = (367.486, 368.622, 370.775), stdev = 1.320
[info]   CI (99.9%): [363.539, 373.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   39888.031 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (39888.028, 39888.031, 39888.035), stdev = 0.003
[info]   CI (99.9%): [39888.019, 39888.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.901 ±(99.9%) 4.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.901, 2.254), stdev = 1.234
[info]   CI (99.9%): [≈ 0, 5.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   324.738 ±(99.9%) 5.771 MB/sec [Average]
[info]   (min, avg, max) = (322.310, 324.738, 325.994), stdev = 1.499
[info]   CI (99.9%): [318.967, 330.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   35139.755 ±(99.9%) 776.716 B/op [Average]
[info]   (min, avg, max) = (34935.812, 35139.755, 35381.399), stdev = 201.711
[info]   CI (99.9%): [34363.040, 35916.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter
[info] # Run progress: 33.33% complete, ETA 00:21:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20060.636 ops/s
[info] # Warmup Iteration   2: 24089.344 ops/s
[info] # Warmup Iteration   3: 24228.065 ops/s
[info] # Warmup Iteration   4: 24222.398 ops/s
[info] # Warmup Iteration   5: 24128.507 ops/s
[info] Iteration   1: 24310.007 ops/s
[info]                  ·gc.alloc.rate:                   415.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21345.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 24309.937 ops/s
[info]                  ·gc.alloc.rate:                   415.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42519.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24319.289 ops/s
[info]                  ·gc.alloc.rate:                   415.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21208.608 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24292.709 ops/s
[info]                  ·gc.alloc.rate:                   415.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21231.301 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 24343.917 ops/s
[info]                  ·gc.alloc.rate:                   415.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21207.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter":
[info]   24315.172 ±(99.9%) 72.088 ops/s [Average]
[info]   (min, avg, max) = (24292.709, 24315.172, 24343.917), stdev = 18.721
[info]   CI (99.9%): [24243.083, 24387.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   415.452 ±(99.9%) 1.144 MB/sec [Average]
[info]   (min, avg, max) = (415.136, 415.452, 415.925), stdev = 0.297
[info]   CI (99.9%): [414.309, 416.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   26896.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26896.017, 26896.017, 26896.018), stdev = 0.001
[info]   CI (99.9%): [26896.015, 26896.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1.347 ±(99.9%) 8.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.347, 5.388), stdev = 2.333
[info]   CI (99.9%): [≈ 0, 10.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   393.915 ±(99.9%) 565.588 MB/sec [Average]
[info]   (min, avg, max) = (327.646, 393.915, 656.660), stdev = 146.881
[info]   CI (99.9%): [≈ 0, 959.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   25502.478 ±(99.9%) 36630.354 B/op [Average]
[info]   (min, avg, max) = (21207.494, 25502.478, 42519.162), stdev = 9512.787
[info]   CI (99.9%): [≈ 0, 62132.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay
[info] # Run progress: 34.13% complete, ETA 00:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1015.548 ops/s
[info] # Warmup Iteration   2: 2511.306 ops/s
[info] # Warmup Iteration   3: 2552.745 ops/s
[info] # Warmup Iteration   4: 2567.722 ops/s
[info] # Warmup Iteration   5: 2576.173 ops/s
[info] Iteration   1: 2570.897 ops/s
[info]                  ·gc.alloc.rate:                   1605.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1024522.351 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2569.400 ops/s
[info]                  ·gc.alloc.rate:                   1604.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1030827.729 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2533.477 ops/s
[info]                  ·gc.alloc.rate:                   1581.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 839398.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2560.625 ops/s
[info]                  ·gc.alloc.rate:                   1599.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1040390.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 2554.259 ops/s
[info]                  ·gc.alloc.rate:                   1594.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1044882.386 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay":
[info]   2557.732 ±(99.9%) 58.340 ops/s [Average]
[info]   (min, avg, max) = (2533.477, 2557.732, 2570.897), stdev = 15.151
[info]   CI (99.9%): [2499.392, 2616.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1597.236 ±(99.9%) 36.881 MB/sec [Average]
[info]   (min, avg, max) = (1581.828, 1597.236, 1605.360), stdev = 9.578
[info]   CI (99.9%): [1560.355, 1634.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   982976.162 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (982976.159, 982976.162, 982976.171), stdev = 0.005
[info]   CI (99.9%): [982976.142, 982976.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   7.694 ±(99.9%) 27.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.694, 12.931), stdev = 7.024
[info]   CI (99.9%): [≈ 0, 34.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1618.993 ±(99.9%) 578.349 MB/sec [Average]
[info]   (min, avg, max) = (1350.780, 1618.993, 1695.361), stdev = 150.195
[info]   CI (99.9%): [1040.643, 2197.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   996004.321 ±(99.9%) 338497.904 B/op [Average]
[info]   (min, avg, max) = (839398.743, 996004.321, 1044882.386), stdev = 87906.831
[info]   CI (99.9%): [657506.417, 1334502.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 11.000), stdev = 2.387
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 34.92% complete, ETA 00:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5400.898 ops/s
[info] # Warmup Iteration   2: 7610.004 ops/s
[info] # Warmup Iteration   3: 7804.718 ops/s
[info] # Warmup Iteration   4: 7731.942 ops/s
[info] # Warmup Iteration   5: 7778.572 ops/s
[info] Iteration   1: 7803.513 ops/s
[info]                  ·gc.alloc.rate:                   1678.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336068.272 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7786.511 ops/s
[info]                  ·gc.alloc.rate:                   1675.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338888.777 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7764.772 ops/s
[info]                  ·gc.alloc.rate:                   1670.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341425.094 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7700.279 ops/s
[info]                  ·gc.alloc.rate:                   1656.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              338586.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345531.795 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7700.000 ops/s
[info]                  ·gc.alloc.rate:                   1656.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              338592.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 346348.655 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7751.015 ±(99.9%) 186.487 ops/s [Average]
[info]   (min, avg, max) = (7700.000, 7751.015, 7803.513), stdev = 48.430
[info]   CI (99.9%): [7564.528, 7937.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1667.171 ±(99.9%) 40.193 MB/sec [Average]
[info]   (min, avg, max) = (1656.081, 1667.171, 1678.194), stdev = 10.438
[info]   CI (99.9%): [1626.978, 1707.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338576.564 ±(99.9%) 45.479 B/op [Average]
[info]   (min, avg, max) = (338568.052, 338576.564, 338592.053), stdev = 11.811
[info]   CI (99.9%): [338531.084, 338622.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.365 ±(99.9%) 33.655 B/op [Average]
[info]   (min, avg, max) = (8.397, 14.365, 29.532), stdev = 8.740
[info]   CI (99.9%): [≈ 0, 48.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1682.212 ±(99.9%) 43.347 MB/sec [Average]
[info]   (min, avg, max) = (1665.803, 1682.212, 1694.019), stdev = 11.257
[info]   CI (99.9%): [1638.865, 1725.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   341652.519 ±(99.9%) 16781.949 B/op [Average]
[info]   (min, avg, max) = (336068.272, 341652.519, 346348.655), stdev = 4358.219
[info]   CI (99.9%): [324870.569, 358434.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson
[info] # Run progress: 35.71% complete, ETA 00:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 24586.474 ops/s
[info] # Warmup Iteration   2: 41678.071 ops/s
[info] # Warmup Iteration   3: 42043.042 ops/s
[info] # Warmup Iteration   4: 42008.920 ops/s
[info] # Warmup Iteration   5: 41291.081 ops/s
[info] Iteration   1: 41513.432 ops/s
[info]                  ·gc.alloc.rate:                   601.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24723.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41600.938 ops/s
[info]                  ·gc.alloc.rate:                   602.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24772.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42038.763 ops/s
[info]                  ·gc.alloc.rate:                   609.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24613.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41950.021 ops/s
[info]                  ·gc.alloc.rate:                   607.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24764.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41568.510 ops/s
[info]                  ·gc.alloc.rate:                   602.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12546.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson":
[info]   41734.333 ±(99.9%) 929.928 ops/s [Average]
[info]   (min, avg, max) = (41513.432, 41734.333, 42038.763), stdev = 241.499
[info]   CI (99.9%): [40804.405, 42664.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   604.669 ±(99.9%) 13.498 MB/sec [Average]
[info]   (min, avg, max) = (601.459, 604.669, 609.055), stdev = 3.505
[info]   CI (99.9%): [591.172, 618.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   22807.837 ±(99.9%) 0.375 B/op [Average]
[info]   (min, avg, max) = (22807.758, 22807.837, 22807.996), stdev = 0.097
[info]   CI (99.9%): [22807.463, 22808.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1.412 ±(99.9%) 4.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.412, 3.150), stdev = 1.291
[info]   CI (99.9%): [≈ 0, 6.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   591.044 ±(99.9%) 559.287 MB/sec [Average]
[info]   (min, avg, max) = (331.276, 591.044, 659.997), stdev = 145.245
[info]   CI (99.9%): [31.757, 1150.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   22284.227 ±(99.9%) 20963.488 B/op [Average]
[info]   (min, avg, max) = (12546.093, 22284.227, 24772.885), stdev = 5444.151
[info]   CI (99.9%): [1320.739, 43247.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter
[info] # Run progress: 36.51% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55591.340 ops/s
[info] # Warmup Iteration   2: 62301.590 ops/s
[info] # Warmup Iteration   3: 62045.521 ops/s
[info] # Warmup Iteration   4: 62941.042 ops/s
[info] # Warmup Iteration   5: 63053.594 ops/s
[info] Iteration   1: 62944.330 ops/s
[info]                  ·gc.alloc.rate:                   474.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8194.212 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 62917.396 ops/s
[info]                  ·gc.alloc.rate:                   473.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16395.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 62958.074 ops/s
[info]                  ·gc.alloc.rate:                   474.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8192.390 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 62636.162 ops/s
[info]                  ·gc.alloc.rate:                   471.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16468.991 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 62871.949 ops/s
[info]                  ·gc.alloc.rate:                   473.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8220.529 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter":
[info]   62865.582 ±(99.9%) 509.809 ops/s [Average]
[info]   (min, avg, max) = (62636.162, 62865.582, 62958.074), stdev = 132.396
[info]   CI (99.9%): [62355.773, 63375.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   473.451 ±(99.9%) 3.823 MB/sec [Average]
[info]   (min, avg, max) = (471.728, 473.451, 474.168), stdev = 0.993
[info]   CI (99.9%): [469.628, 477.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   11856.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11856.006, 11856.007, 11856.007), stdev = 0.001
[info]   CI (99.9%): [11856.006, 11856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1.252 ±(99.9%) 5.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.252, 3.124), stdev = 1.503
[info]   CI (99.9%): [≈ 0, 7.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   458.819 ±(99.9%) 690.512 MB/sec [Average]
[info]   (min, avg, max) = (327.610, 458.819, 655.270), stdev = 179.324
[info]   CI (99.9%): [≈ 0, 1149.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   11494.316 ±(99.9%) 17357.783 B/op [Average]
[info]   (min, avg, max) = (8192.390, 11494.316, 16468.991), stdev = 4507.761
[info]   CI (99.9%): [≈ 0, 28852.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 37.30% complete, ETA 00:20:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68284.042 ops/s
[info] # Warmup Iteration   2: 74647.081 ops/s
[info] # Warmup Iteration   3: 74766.640 ops/s
[info] # Warmup Iteration   4: 74663.550 ops/s
[info] # Warmup Iteration   5: 74632.422 ops/s
[info] Iteration   1: 74808.054 ops/s
[info]                  ·gc.alloc.rate:      1.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 75104.251 ops/s
[info]                  ·gc.alloc.rate:      1.145 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74088.789 ops/s
[info]                  ·gc.alloc.rate:      1.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74456.665 ops/s
[info]                  ·gc.alloc.rate:      1.135 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74829.239 ops/s
[info]                  ·gc.alloc.rate:      1.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc":
[info]   74657.399 ±(99.9%) 1510.506 ops/s [Average]
[info]   (min, avg, max) = (74088.789, 74657.399, 75104.251), stdev = 392.274
[info]   CI (99.9%): [73146.893, 76167.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1.138 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (1.130, 1.138, 1.145), stdev = 0.006
[info]   CI (99.9%): [1.115, 1.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   24.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.006, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay
[info] # Run progress: 38.10% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2171.929 ops/s
[info] # Warmup Iteration   2: 5278.047 ops/s
[info] # Warmup Iteration   3: 5395.075 ops/s
[info] # Warmup Iteration   4: 5417.441 ops/s
[info] # Warmup Iteration   5: 5435.832 ops/s
[info] Iteration   1: 5421.020 ops/s
[info]                  ·gc.alloc.rate:                   1676.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              486904.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486583.349 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5449.629 ops/s
[info]                  ·gc.alloc.rate:                   1685.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              486903.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486392.298 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5430.132 ops/s
[info]                  ·gc.alloc.rate:                   1679.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              486904.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 489734.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5452.637 ops/s
[info]                  ·gc.alloc.rate:                   1686.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              486903.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488912.499 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5366.356 ops/s
[info]                  ·gc.alloc.rate:                   1659.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              486903.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497721.991 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay":
[info]   5423.955 ±(99.9%) 134.030 ops/s [Average]
[info]   (min, avg, max) = (5366.356, 5423.955, 5452.637), stdev = 34.807
[info]   CI (99.9%): [5289.924, 5557.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate":
[info]   1677.658 ±(99.9%) 41.528 MB/sec [Average]
[info]   (min, avg, max) = (1659.806, 1677.658, 1686.642), stdev = 10.785
[info]   CI (99.9%): [1636.130, 1719.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   486903.965 ±(99.9%) 2.909 B/op [Average]
[info]   (min, avg, max) = (486903.194, 486903.965, 486904.891), stdev = 0.755
[info]   CI (99.9%): [486901.056, 486906.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   10.901 ±(99.9%) 47.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.901, 24.417), stdev = 12.417
[info]   CI (99.9%): [≈ 0, 58.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1687.803 ±(99.9%) 32.222 MB/sec [Average]
[info]   (min, avg, max) = (1675.627, 1687.803, 1696.685), stdev = 8.368
[info]   CI (99.9%): [1655.581, 1720.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   489868.909 ±(99.9%) 17801.206 B/op [Average]
[info]   (min, avg, max) = (486392.298, 489868.909, 497721.991), stdev = 4622.917
[info]   CI (99.9%): [472067.703, 507670.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter
[info] # Run progress: 38.89% complete, ETA 00:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4288140.964 ops/s
[info] # Warmup Iteration   2: 4828360.297 ops/s
[info] # Warmup Iteration   3: 4946673.313 ops/s
[info] # Warmup Iteration   4: 4950972.550 ops/s
[info] # Warmup Iteration   5: 4899878.793 ops/s
[info] Iteration   1: 4934526.757 ops/s
[info]                  ·gc.alloc.rate:                   1479.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425.251 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4919475.509 ops/s
[info]                  ·gc.alloc.rate:                   1475.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536.095 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4938693.182 ops/s
[info]                  ·gc.alloc.rate:                   1480.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 429.234 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4924876.712 ops/s
[info]                  ·gc.alloc.rate:                   1476.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.495 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4853245.677 ops/s
[info]                  ·gc.alloc.rate:                   1455.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 549.106 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter":
[info]   4914163.567 ±(99.9%) 134364.012 ops/s [Average]
[info]   (min, avg, max) = (4853245.677, 4914163.567, 4938693.182), stdev = 34893.907
[info]   CI (99.9%): [4779799.555, 5048527.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1473.454 ±(99.9%) 40.141 MB/sec [Average]
[info]   (min, avg, max) = (1455.190, 1473.454, 1480.618), stdev = 10.424
[info]   CI (99.9%): [1433.313, 1513.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.036, 0.047), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1479.586 ±(99.9%) 720.415 MB/sec [Average]
[info]   (min, avg, max) = (1332.914, 1479.586, 1692.910), stdev = 187.089
[info]   CI (99.9%): [759.171, 2200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   474.236 ±(99.9%) 241.115 B/op [Average]
[info]   (min, avg, max) = (425.251, 474.236, 549.106), stdev = 62.617
[info]   CI (99.9%): [233.121, 715.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay
[info] # Run progress: 39.68% complete, ETA 00:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139869.499 ops/s
[info] # Warmup Iteration   2: 385987.009 ops/s
[info] # Warmup Iteration   3: 385479.691 ops/s
[info] # Warmup Iteration   4: 386460.361 ops/s
[info] # Warmup Iteration   5: 388540.052 ops/s
[info] Iteration   1: 388750.343 ops/s
[info]                  ·gc.alloc.rate:                   2171.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2363.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9570.286 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 387835.798 ops/s
[info]                  ·gc.alloc.rate:                   2166.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8249.693 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 386282.067 ops/s
[info]                  ·gc.alloc.rate:                   2157.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8299.243 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 384001.318 ops/s
[info]                  ·gc.alloc.rate:                   2144.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9746.475 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 385848.597 ops/s
[info]                  ·gc.alloc.rate:                   2155.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2041.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8330.722 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay":
[info]   386543.625 ±(99.9%) 7088.249 ops/s [Average]
[info]   (min, avg, max) = (384001.318, 386543.625, 388750.343), stdev = 1840.796
[info]   CI (99.9%): [379455.376, 393631.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   2159.114 ±(99.9%) 40.316 MB/sec [Average]
[info]   (min, avg, max) = (2144.803, 2159.114, 2171.672), stdev = 10.470
[info]   CI (99.9%): [2118.798, 2199.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8792.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8792.001, 8792.001, 8792.001), stdev = 0.001
[info]   CI (99.9%): [8792.001, 8792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.424 ±(99.9%) 0.462 B/op [Average]
[info]   (min, avg, max) = (0.337, 0.424, 0.591), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2170.606 ±(99.9%) 703.995 MB/sec [Average]
[info]   (min, avg, max) = (2032.985, 2170.606, 2377.647), stdev = 182.825
[info]   CI (99.9%): [1466.612, 2874.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8839.284 ±(99.9%) 2891.354 B/op [Average]
[info]   (min, avg, max) = (8249.693, 8839.284, 9746.475), stdev = 750.875
[info]   CI (99.9%): [5947.930, 11730.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 10.000), stdev = 1.304
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter
[info] # Run progress: 40.48% complete, ETA 00:19:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2928643.213 ops/s
[info] # Warmup Iteration   2: 3294982.738 ops/s
[info] # Warmup Iteration   3: 3309869.863 ops/s
[info] # Warmup Iteration   4: 3223760.362 ops/s
[info] # Warmup Iteration   5: 3312186.121 ops/s
[info] Iteration   1: 3285670.092 ops/s
[info]                  ·gc.alloc.rate:                   534.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 314.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3319435.659 ops/s
[info]                  ·gc.alloc.rate:                   539.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3290710.366 ops/s
[info]                  ·gc.alloc.rate:                   535.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 313.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3295009.153 ops/s
[info]                  ·gc.alloc.rate:                   535.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 314.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3303598.145 ops/s
[info]                  ·gc.alloc.rate:                   537.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter":
[info]   3298884.683 ±(99.9%) 50976.474 ops/s [Average]
[info]   (min, avg, max) = (3285670.092, 3298884.683, 3319435.659), stdev = 13238.428
[info]   CI (99.9%): [3247908.209, 3349861.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   536.492 ±(99.9%) 8.596 MB/sec [Average]
[info]   (min, avg, max) = (534.256, 536.492, 539.977), stdev = 2.232
[info]   CI (99.9%): [527.896, 545.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.060), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   525.253 ±(99.9%) 691.455 MB/sec [Average]
[info]   (min, avg, max) = (327.769, 525.253, 657.322), stdev = 179.569
[info]   CI (99.9%): [≈ 0, 1216.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   250.887 ±(99.9%) 332.985 B/op [Average]
[info]   (min, avg, max) = (155.394, 250.887, 314.280), stdev = 86.475
[info]   CI (99.9%): [≈ 0, 583.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay
[info] # Run progress: 41.27% complete, ETA 00:19:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82413.522 ops/s
[info] # Warmup Iteration   2: 348055.170 ops/s
[info] # Warmup Iteration   3: 353743.857 ops/s
[info] # Warmup Iteration   4: 350280.211 ops/s
[info] # Warmup Iteration   5: 352510.556 ops/s
[info] Iteration   1: 351105.994 ops/s
[info]                  ·gc.alloc.rate:                   1364.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7469.417 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 352629.928 ops/s
[info]                  ·gc.alloc.rate:                   1371.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5985.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 347804.672 ops/s
[info]                  ·gc.alloc.rate:                   1352.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6095.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 351542.325 ops/s
[info]                  ·gc.alloc.rate:                   1366.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6045.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 349284.230 ops/s
[info]                  ·gc.alloc.rate:                   1357.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6098.780 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay":
[info]   350473.430 ±(99.9%) 7389.230 ops/s [Average]
[info]   (min, avg, max) = (347804.672, 350473.430, 352629.928), stdev = 1918.960
[info]   CI (99.9%): [343084.200, 357862.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1362.551 ±(99.9%) 29.293 MB/sec [Average]
[info]   (min, avg, max) = (1352.038, 1362.551, 1371.296), stdev = 7.607
[info]   CI (99.9%): [1333.258, 1391.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6120.001, 6120.001, 6120.001), stdev = 0.001
[info]   CI (99.9%): [6120.001, 6120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.336 ±(99.9%) 0.476 B/op [Average]
[info]   (min, avg, max) = (0.280, 0.336, 0.557), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1411.305 ±(99.9%) 547.970 MB/sec [Average]
[info]   (min, avg, max) = (1341.077, 1411.305, 1665.743), stdev = 142.306
[info]   CI (99.9%): [863.335, 1959.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   6338.698 ±(99.9%) 2440.422 B/op [Average]
[info]   (min, avg, max) = (5985.135, 6338.698, 7469.417), stdev = 633.770
[info]   CI (99.9%): [3898.277, 8779.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce
[info] # Run progress: 42.06% complete, ETA 00:19:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14067.451 ops/s
[info] # Warmup Iteration   2: 17415.717 ops/s
[info] # Warmup Iteration   3: 17446.874 ops/s
[info] # Warmup Iteration   4: 17506.379 ops/s
[info] # Warmup Iteration   5: 17450.377 ops/s
[info] Iteration   1: 17576.025 ops/s
[info]                  ·gc.alloc.rate:                   2181.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              195408.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180946.316 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17516.898 ops/s
[info]                  ·gc.alloc.rate:                   2175.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              195407.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212767.562 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 17327.980 ops/s
[info]                  ·gc.alloc.rate:                   2150.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              195408.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184825.737 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17494.838 ops/s
[info]                  ·gc.alloc.rate:                   2171.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              195408.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183371.960 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17516.822 ops/s
[info]                  ·gc.alloc.rate:                   2174.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              195408.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2379.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213748.415 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce":
[info]   17486.512 ±(99.9%) 360.484 ops/s [Average]
[info]   (min, avg, max) = (17327.980, 17486.512, 17576.025), stdev = 93.617
[info]   CI (99.9%): [17126.028, 17846.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   2170.723 ±(99.9%) 44.587 MB/sec [Average]
[info]   (min, avg, max) = (2150.915, 2170.723, 2181.028), stdev = 11.579
[info]   CI (99.9%): [2126.136, 2215.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   195407.842 ±(99.9%) 1.582 B/op [Average]
[info]   (min, avg, max) = (195407.107, 195407.842, 195408.029), stdev = 0.411
[info]   CI (99.9%): [195406.260, 195409.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.162 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.162, 0.208), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.606 ±(99.9%) 15.490 B/op [Average]
[info]   (min, avg, max) = (9.363, 14.606, 18.703), stdev = 4.023
[info]   CI (99.9%): [≈ 0, 30.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2167.866 ±(99.9%) 724.173 MB/sec [Average]
[info]   (min, avg, max) = (2019.615, 2167.866, 2379.026), stdev = 188.066
[info]   CI (99.9%): [1443.693, 2892.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   195131.998 ±(99.9%) 63952.436 B/op [Average]
[info]   (min, avg, max) = (180946.316, 195131.998, 213748.415), stdev = 16608.244
[info]   CI (99.9%): [131179.562, 259084.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.342
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson
[info] # Run progress: 42.86% complete, ETA 00:18:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29247.594 ops/s
[info] # Warmup Iteration   2: 39348.985 ops/s
[info] # Warmup Iteration   3: 40709.603 ops/s
[info] # Warmup Iteration   4: 40480.327 ops/s
[info] # Warmup Iteration   5: 41085.190 ops/s
[info] Iteration   1: 41216.638 ops/s
[info]                  ·gc.alloc.rate:                   293.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              11208.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9766.735 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 41239.567 ops/s
[info]                  ·gc.alloc.rate:                   293.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              11208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12342.619 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 42025.454 ops/s
[info]                  ·gc.alloc.rate:                                  299.237 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11208.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    7.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     160.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                6005.708 B/op
[info]                  ·gc.count:                                       ≈ 0 counts
[info] Iteration   4: 41879.017 ops/s
[info]                  ·gc.alloc.rate:                   298.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              11208.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12116.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41756.223 ops/s
[info]                  ·gc.alloc.rate:                   297.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              11208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12151.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson":
[info]   41623.380 ±(99.9%) 1437.446 ops/s [Average]
[info]   (min, avg, max) = (41216.638, 41623.380, 42025.454), stdev = 373.300
[info]   CI (99.9%): [40185.934, 43060.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   296.340 ±(99.9%) 10.252 MB/sec [Average]
[info]   (min, avg, max) = (293.417, 296.340, 299.237), stdev = 2.662
[info]   CI (99.9%): [286.088, 306.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   11208.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11208.010, 11208.010, 11208.010), stdev = 0.001
[info]   CI (99.9%): [11208.009, 11208.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.701 ±(99.9%) 6.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.701, 3.507), stdev = 1.569
[info]   CI (99.9%): [≈ 0, 6.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.816 ±(99.9%) 6.581 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.870), stdev = 1.709
[info]   CI (99.9%): [≈ 0, 7.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   31.100 ±(99.9%) 251.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.100, 147.698), stdev = 65.247
[info]   CI (99.9%): [≈ 0, 282.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   276.797 ±(99.9%) 274.423 MB/sec [Average]
[info]   (min, avg, max) = (160.343, 276.797, 323.364), stdev = 71.267
[info]   CI (99.9%): [2.373, 551.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   10476.566 ±(99.9%) 10451.612 B/op [Average]
[info]   (min, avg, max) = (6005.708, 10476.566, 12342.619), stdev = 2714.250
[info]   CI (99.9%): [24.954, 20928.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter
[info] # Run progress: 43.65% complete, ETA 00:18:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83930.720 ops/s
[info] # Warmup Iteration   2: 89118.825 ops/s
[info] # Warmup Iteration   3: 89637.834 ops/s
[info] # Warmup Iteration   4: 87967.702 ops/s
[info] # Warmup Iteration   5: 89661.753 ops/s
[info] Iteration   1: 89346.153 ops/s
[info]                  ·gc.alloc.rate:                   695.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17353.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 90102.638 ops/s
[info]                  ·gc.alloc.rate:                   701.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11483.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 89803.322 ops/s
[info]                  ·gc.alloc.rate:                   699.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11557.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 89642.931 ops/s
[info]                  ·gc.alloc.rate:                   697.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11601.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 89226.495 ops/s
[info]                  ·gc.alloc.rate:                   694.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              12256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11690.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter":
[info]   89624.308 ±(99.9%) 1357.070 ops/s [Average]
[info]   (min, avg, max) = (89226.495, 89624.308, 90102.638), stdev = 352.427
[info]   CI (99.9%): [88267.238, 90981.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   697.742 ±(99.9%) 10.608 MB/sec [Average]
[info]   (min, avg, max) = (694.648, 697.742, 701.479), stdev = 2.755
[info]   CI (99.9%): [687.134, 708.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   12256.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12256.005, 12256.005, 12256.005), stdev = 0.001
[info]   CI (99.9%): [12256.004, 12256.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1.168 ±(99.9%) 3.344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.168, 2.182), stdev = 0.869
[info]   CI (99.9%): [≈ 0, 4.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   724.936 ±(99.9%) 559.536 MB/sec [Average]
[info]   (min, avg, max) = (657.275, 724.936, 984.851), stdev = 145.310
[info]   CI (99.9%): [165.401, 1284.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   12737.501 ±(99.9%) 9940.393 B/op [Average]
[info]   (min, avg, max) = (11483.689, 12737.501, 17353.459), stdev = 2581.489
[info]   CI (99.9%): [2797.107, 22677.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay
[info] # Run progress: 44.44% complete, ETA 00:18:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5173.769 ops/s
[info] # Warmup Iteration   2: 8752.937 ops/s
[info] # Warmup Iteration   3: 8997.816 ops/s
[info] # Warmup Iteration   4: 8996.356 ops/s
[info] # Warmup Iteration   5: 8968.363 ops/s
[info] Iteration   1: 8984.262 ops/s
[info]                  ·gc.alloc.rate:                   3102.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              543656.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 535197.297 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 8968.060 ops/s
[info]                  ·gc.alloc.rate:                   3097.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              543656.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 596698.303 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8930.788 ops/s
[info]                  ·gc.alloc.rate:                   3084.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              543658.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 539841.153 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9008.146 ops/s
[info]                  ·gc.alloc.rate:                   3110.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              543656.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 535168.241 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8981.537 ops/s
[info]                  ·gc.alloc.rate:                   3102.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              543656.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536776.606 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay":
[info]   8974.559 ±(99.9%) 109.407 ops/s [Average]
[info]   (min, avg, max) = (8930.788, 8974.559, 9008.146), stdev = 28.413
[info]   CI (99.9%): [8865.151, 9083.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   3099.423 ±(99.9%) 37.586 MB/sec [Average]
[info]   (min, avg, max) = (3084.334, 3099.423, 3110.969), stdev = 9.761
[info]   CI (99.9%): [3061.837, 3137.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   543656.599 ±(99.9%) 4.763 B/op [Average]
[info]   (min, avg, max) = (543656.045, 543656.599, 543658.811), stdev = 1.237
[info]   CI (99.9%): [543651.836, 543661.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   13.878 ±(99.9%) 23.158 B/op [Average]
[info]   (min, avg, max) = (7.273, 13.878, 21.877), stdev = 6.014
[info]   CI (99.9%): [≈ 0, 37.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   3128.312 ±(99.9%) 584.024 MB/sec [Average]
[info]   (min, avg, max) = (3054.091, 3128.312, 3399.545), stdev = 151.669
[info]   CI (99.9%): [2544.288, 3712.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   548736.320 ±(99.9%) 103501.206 B/op [Average]
[info]   (min, avg, max) = (535168.241, 548736.320, 596698.303), stdev = 26878.935
[info]   CI (99.9%): [445235.114, 652237.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 11.000), stdev = 0.894
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce
[info] # Run progress: 45.24% complete, ETA 00:18:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19497.346 ops/s
[info] # Warmup Iteration   2: 23030.910 ops/s
[info] # Warmup Iteration   3: 24384.592 ops/s
[info] # Warmup Iteration   4: 29166.896 ops/s
[info] # Warmup Iteration   5: 26794.908 ops/s
[info] Iteration   1: 24894.131 ops/s
[info]                  ·gc.alloc.rate:                   1311.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              82920.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83777.437 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24757.333 ops/s
[info]                  ·gc.alloc.rate:                   1304.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              82920.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84755.870 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24728.472 ops/s
[info]                  ·gc.alloc.rate:                   1302.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              82920.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85275.759 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24825.479 ops/s
[info]                  ·gc.alloc.rate:                   1307.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              82920.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1008.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63936.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24859.357 ops/s
[info]                  ·gc.alloc.rate:                   1309.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              82920.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85441.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce":
[info]   24812.954 ±(99.9%) 266.299 ops/s [Average]
[info]   (min, avg, max) = (24728.472, 24812.954, 24894.131), stdev = 69.157
[info]   CI (99.9%): [24546.656, 25079.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   1307.003 ±(99.9%) 13.617 MB/sec [Average]
[info]   (min, avg, max) = (1302.509, 1307.003, 1311.170), stdev = 3.536
[info]   CI (99.9%): [1293.387, 1320.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82920.017 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (82920.016, 82920.017, 82920.019), stdev = 0.001
[info]   CI (99.9%): [82920.012, 82920.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.755 ±(99.9%) 5.826 B/op [Average]
[info]   (min, avg, max) = (2.639, 4.755, 6.617), stdev = 1.513
[info]   CI (99.9%): [≈ 0, 10.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1270.985 ±(99.9%) 566.698 MB/sec [Average]
[info]   (min, avg, max) = (1008.204, 1270.985, 1349.170), stdev = 147.170
[info]   CI (99.9%): [704.287, 1837.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   80637.399 ±(99.9%) 36036.630 B/op [Average]
[info]   (min, avg, max) = (63936.531, 80637.399, 85441.400), stdev = 9358.598
[info]   CI (99.9%): [44600.770, 116674.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson
[info] # Run progress: 46.03% complete, ETA 00:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73063.117 ops/s
[info] # Warmup Iteration   2: 102474.429 ops/s
[info] # Warmup Iteration   3: 102450.359 ops/s
[info] # Warmup Iteration   4: 103175.889 ops/s
[info] # Warmup Iteration   5: 103301.023 ops/s
[info] Iteration   1: 102375.863 ops/s
[info]                  ·gc.alloc.rate:                   805.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9948.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 103405.903 ops/s
[info]                  ·gc.alloc.rate:                   814.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14838.435 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 102037.768 ops/s
[info]                  ·gc.alloc.rate:                   803.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10079.399 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 102514.248 ops/s
[info]                  ·gc.alloc.rate:                   807.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15129.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 100739.070 ops/s
[info]                  ·gc.alloc.rate:                   792.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              12392.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10313.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson":
[info]   102214.571 ±(99.9%) 3725.116 ops/s [Average]
[info]   (min, avg, max) = (100739.070, 102214.571, 103405.903), stdev = 967.401
[info]   CI (99.9%): [98489.455, 105939.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   804.642 ±(99.9%) 29.767 MB/sec [Average]
[info]   (min, avg, max) = (792.918, 804.642, 814.274), stdev = 7.730
[info]   CI (99.9%): [774.875, 834.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   12392.243 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (12392.221, 12392.243, 12392.277), stdev = 0.022
[info]   CI (99.9%): [12392.158, 12392.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.893 ±(99.9%) 3.272 B/op [Average]
[info]   (min, avg, max) = (0.320, 0.893, 2.218), stdev = 0.850
[info]   CI (99.9%): [≈ 0, 4.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   784.068 ±(99.9%) 689.574 MB/sec [Average]
[info]   (min, avg, max) = (646.855, 784.068, 985.261), stdev = 179.080
[info]   CI (99.9%): [94.494, 1473.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   12061.739 ±(99.9%) 10291.800 B/op [Average]
[info]   (min, avg, max) = (9948.354, 12061.739, 15129.395), stdev = 2672.748
[info]   CI (99.9%): [1769.939, 22353.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter
[info] # Run progress: 46.83% complete, ETA 00:17:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116941.861 ops/s
[info] # Warmup Iteration   2: 122300.888 ops/s
[info] # Warmup Iteration   3: 122700.629 ops/s
[info] # Warmup Iteration   4: 123355.375 ops/s
[info] # Warmup Iteration   5: 122920.621 ops/s
[info] Iteration   1: 122577.339 ops/s
[info]                  ·gc.alloc.rate:                   508.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              6536.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4216.404 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 122648.360 ops/s
[info]                  ·gc.alloc.rate:                   509.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              6536.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8428.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 123360.932 ops/s
[info]                  ·gc.alloc.rate:                   512.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              6536.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4189.919 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 123096.256 ops/s
[info]                  ·gc.alloc.rate:                   511.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              6536.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8401.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 122970.948 ops/s
[info]                  ·gc.alloc.rate:                   510.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              6536.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4207.263 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter":
[info]   122930.767 ±(99.9%) 1245.830 ops/s [Average]
[info]   (min, avg, max) = (122577.339, 122930.767, 123360.932), stdev = 323.538
[info]   CI (99.9%): [121684.937, 124176.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   510.429 ±(99.9%) 5.093 MB/sec [Average]
[info]   (min, avg, max) = (508.879, 510.429, 512.181), stdev = 1.323
[info]   CI (99.9%): [505.336, 515.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   6536.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6536.003, 6536.003, 6536.004), stdev = 0.001
[info]   CI (99.9%): [6536.003, 6536.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.533 ±(99.9%) 2.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 1.603), stdev = 0.755
[info]   CI (99.9%): [≈ 0, 3.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   459.837 ±(99.9%) 692.911 MB/sec [Average]
[info]   (min, avg, max) = (328.280, 459.837, 657.033), stdev = 179.947
[info]   CI (99.9%): [≈ 0, 1152.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   5888.757 ±(99.9%) 8880.597 B/op [Average]
[info]   (min, avg, max) = (4189.919, 5888.757, 8428.202), stdev = 2306.263
[info]   CI (99.9%): [≈ 0, 14769.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 47.62% complete, ETA 00:17:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141658.428 ops/s
[info] # Warmup Iteration   2: 156246.719 ops/s
[info] # Warmup Iteration   3: 150455.170 ops/s
[info] # Warmup Iteration   4: 157166.351 ops/s
[info] # Warmup Iteration   5: 157422.870 ops/s
[info] Iteration   1: 157498.950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 157024.851 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 156834.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 157876.176 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 157607.773 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc":
[info]   157368.424 ±(99.9%) 1651.059 ops/s [Average]
[info]   (min, avg, max) = (156834.372, 157368.424, 157876.176), stdev = 428.775
[info]   CI (99.9%): [155717.365, 159019.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay
[info] # Run progress: 48.41% complete, ETA 00:17:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2915.850 ops/s
[info] # Warmup Iteration   2: 4184.939 ops/s
[info] # Warmup Iteration   3: 4342.793 ops/s
[info] # Warmup Iteration   4: 4296.569 ops/s
[info] # Warmup Iteration   5: 4319.742 ops/s
[info] Iteration   1: 4341.083 ops/s
[info]                  ·gc.alloc.rate:                   1823.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              660992.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 603963.358 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4324.142 ops/s
[info]                  ·gc.alloc.rate:                   1816.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              660992.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 732742.776 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4288.362 ops/s
[info]                  ·gc.alloc.rate:                   1801.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              660992.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 618879.821 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4302.965 ops/s
[info]                  ·gc.alloc.rate:                   1807.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              660992.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 618572.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4328.789 ops/s
[info]                  ·gc.alloc.rate:                   1817.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              660992.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739573.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay":
[info]   4317.068 ±(99.9%) 81.391 ops/s [Average]
[info]   (min, avg, max) = (4288.362, 4317.068, 4341.083), stdev = 21.137
[info]   CI (99.9%): [4235.677, 4398.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate":
[info]   1813.067 ±(99.9%) 34.001 MB/sec [Average]
[info]   (min, avg, max) = (1801.150, 1813.067, 1823.281), stdev = 8.830
[info]   CI (99.9%): [1779.066, 1847.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   660992.327 ±(99.9%) 1.175 B/op [Average]
[info]   (min, avg, max) = (660992.018, 660992.327, 660992.698), stdev = 0.305
[info]   CI (99.9%): [660991.152, 660993.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   6.072 ±(99.9%) 38.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.072, 22.724), stdev = 9.879
[info]   CI (99.9%): [≈ 0, 44.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1818.105 ±(99.9%) 723.450 MB/sec [Average]
[info]   (min, avg, max) = (1665.971, 1818.105, 2033.719), stdev = 187.878
[info]   CI (99.9%): [1094.656, 2541.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   662746.218 ±(99.9%) 259260.943 B/op [Average]
[info]   (min, avg, max) = (603963.358, 662746.218, 739573.003), stdev = 67329.244
[info]   CI (99.9%): [403485.275, 922007.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 49.21% complete, ETA 00:16:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 501624.581 ops/s
[info] # Warmup Iteration   2: 704778.748 ops/s
[info] # Warmup Iteration   3: 706146.252 ops/s
[info] # Warmup Iteration   4: 709851.025 ops/s
[info] # Warmup Iteration   5: 700708.887 ops/s
[info] Iteration   1: 705235.302 ops/s
[info]                  ·gc.alloc.rate:                   2548.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6034.278 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 710579.550 ops/s
[info]                  ·gc.alloc.rate:                   2567.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6009.858 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 703248.988 ops/s
[info]                  ·gc.alloc.rate:                   2540.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5322.062 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 709108.560 ops/s
[info]                  ·gc.alloc.rate:                   2561.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6042.187 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 702833.479 ops/s
[info]                  ·gc.alloc.rate:                   2539.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5335.737 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   706201.176 ±(99.9%) 13423.892 ops/s [Average]
[info]   (min, avg, max) = (702833.479, 706201.176, 710579.550), stdev = 3486.142
[info]   CI (99.9%): [692777.284, 719625.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2551.680 ±(99.9%) 48.029 MB/sec [Average]
[info]   (min, avg, max) = (2539.509, 2551.680, 2567.295), stdev = 12.473
[info]   CI (99.9%): [2503.650, 2599.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.208), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.278 ±(99.9%) 0.414 B/op [Average]
[info]   (min, avg, max) = (0.186, 0.278, 0.461), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2579.523 ±(99.9%) 702.310 MB/sec [Average]
[info]   (min, avg, max) = (2377.472, 2579.523, 2721.509), stdev = 182.388
[info]   CI (99.9%): [1877.213, 3281.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5748.825 ±(99.9%) 1476.925 B/op [Average]
[info]   (min, avg, max) = (5322.062, 5748.825, 6042.187), stdev = 383.553
[info]   CI (99.9%): [4271.899, 7225.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson
[info] # Run progress: 50.00% complete, ETA 00:16:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282280.736 ops/s
[info] # Warmup Iteration   2: 643020.091 ops/s
[info] # Warmup Iteration   3: 646149.708 ops/s
[info] # Warmup Iteration   4: 649517.132 ops/s
[info] # Warmup Iteration   5: 650910.641 ops/s
[info] Iteration   1: 632915.023 ops/s
[info]                  ·gc.alloc.rate:                   736.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1631.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 648013.140 ops/s
[info]                  ·gc.alloc.rate:                   754.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2403.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 649349.195 ops/s
[info]                  ·gc.alloc.rate:                   755.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1605.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 651237.813 ops/s
[info]                  ·gc.alloc.rate:                   758.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1605.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 642489.069 ops/s
[info]                  ·gc.alloc.rate:                   747.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1632.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson":
[info]   644800.848 ±(99.9%) 28495.934 ops/s [Average]
[info]   (min, avg, max) = (632915.023, 644800.848, 651237.813), stdev = 7400.303
[info]   CI (99.9%): [616304.914, 673296.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate":
[info]   750.457 ±(99.9%) 33.304 MB/sec [Average]
[info]   (min, avg, max) = (736.593, 750.457, 758.075), stdev = 8.649
[info]   CI (99.9%): [717.152, 783.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.253), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   727.702 ±(99.9%) 563.778 MB/sec [Average]
[info]   (min, avg, max) = (655.988, 727.702, 989.518), stdev = 146.411
[info]   CI (99.9%): [163.924, 1291.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1775.762 ±(99.9%) 1352.142 B/op [Average]
[info]   (min, avg, max) = (1605.549, 1775.762, 2403.469), stdev = 351.147
[info]   CI (99.9%): [423.620, 3127.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter
[info] # Run progress: 50.79% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3446055.461 ops/s
[info] # Warmup Iteration   2: 4620932.641 ops/s
[info] # Warmup Iteration   3: 4759375.847 ops/s
[info] # Warmup Iteration   4: 4748101.504 ops/s
[info] # Warmup Iteration   5: 4751139.370 ops/s
[info] Iteration   1: 4753504.576 ops/s
[info]                  ·gc.alloc.rate:                   1884.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 666.916 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4657287.739 ops/s
[info]                  ·gc.alloc.rate:                   1846.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 569.983 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4758198.893 ops/s
[info]                  ·gc.alloc.rate:                   1886.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 671.534 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4748408.526 ops/s
[info]                  ·gc.alloc.rate:                   1882.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 562.090 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4755885.207 ops/s
[info]                  ·gc.alloc.rate:                   1885.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 674.545 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter":
[info]   4734656.988 ±(99.9%) 167128.544 ops/s [Average]
[info]   (min, avg, max) = (4657287.739, 4734656.988, 4758198.893), stdev = 43402.752
[info]   CI (99.9%): [4567528.444, 4901785.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1876.696 ±(99.9%) 66.138 MB/sec [Average]
[info]   (min, avg, max) = (1846.078, 1876.696, 1886.072), stdev = 17.176
[info]   CI (99.9%): [1810.558, 1942.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.035, 0.049), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1892.575 ±(99.9%) 709.942 MB/sec [Average]
[info]   (min, avg, max) = (1686.272, 1892.575, 2037.781), stdev = 184.370
[info]   CI (99.9%): [1182.633, 2602.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   629.014 ±(99.9%) 221.880 B/op [Average]
[info]   (min, avg, max) = (562.090, 629.014, 674.545), stdev = 57.621
[info]   CI (99.9%): [407.134, 850.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay
[info] # Run progress: 51.59% complete, ETA 00:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58058.319 ops/s
[info] # Warmup Iteration   2: 250759.386 ops/s
[info] # Warmup Iteration   3: 250456.616 ops/s
[info] # Warmup Iteration   4: 255463.659 ops/s
[info] # Warmup Iteration   5: 255144.607 ops/s
[info] Iteration   1: 256375.451 ops/s
[info]                  ·gc.alloc.rate:                   1783.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12365.341 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 255561.923 ops/s
[info]                  ·gc.alloc.rate:                   1778.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10393.415 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 256520.264 ops/s
[info]                  ·gc.alloc.rate:                   1784.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10383.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 255324.487 ops/s
[info]                  ·gc.alloc.rate:                   1776.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12543.610 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 256687.406 ops/s
[info]                  ·gc.alloc.rate:                   1785.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10414.654 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay":
[info]   256093.906 ±(99.9%) 2348.815 ops/s [Average]
[info]   (min, avg, max) = (255324.487, 256093.906, 256687.406), stdev = 609.980
[info]   CI (99.9%): [253745.091, 258442.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1781.704 ±(99.9%) 16.150 MB/sec [Average]
[info]   (min, avg, max) = (1776.374, 1781.704, 1785.773), stdev = 4.194
[info]   CI (99.9%): [1765.554, 1797.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.001, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.640 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (0.511, 0.640, 0.769), stdev = 0.091
[info]   CI (99.9%): [0.288, 0.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1825.170 ±(99.9%) 700.506 MB/sec [Average]
[info]   (min, avg, max) = (1687.387, 1825.170, 2034.527), stdev = 181.919
[info]   CI (99.9%): [1124.664, 2525.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11220.007 ±(99.9%) 4346.335 B/op [Average]
[info]   (min, avg, max) = (10383.013, 11220.007, 12543.610), stdev = 1128.729
[info]   CI (99.9%): [6873.671, 15566.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 52.38% complete, ETA 00:15:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 595471.982 ops/s
[info] # Warmup Iteration   2: 849380.992 ops/s
[info] # Warmup Iteration   3: 866137.050 ops/s
[info] # Warmup Iteration   4: 869807.498 ops/s
[info] # Warmup Iteration   5: 868073.667 ops/s
[info] Iteration   1: 862615.755 ops/s
[info]                  ·gc.alloc.rate:                   1981.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3670.799 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 863088.768 ops/s
[info]                  ·gc.alloc.rate:                   1982.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3690.163 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 858831.914 ops/s
[info]                  ·gc.alloc.rate:                   1972.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3722.558 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 870225.405 ops/s
[info]                  ·gc.alloc.rate:                   1998.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3682.900 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 864421.704 ops/s
[info]                  ·gc.alloc.rate:                   1985.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3711.095 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   863836.709 ±(99.9%) 15906.442 ops/s [Average]
[info]   (min, avg, max) = (858831.914, 863836.709, 870225.405), stdev = 4130.852
[info]   CI (99.9%): [847930.267, 879743.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1984.203 ±(99.9%) 36.757 MB/sec [Average]
[info]   (min, avg, max) = (1972.570, 1984.203, 1998.910), stdev = 9.546
[info]   CI (99.9%): [1947.445, 2020.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.174 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.114, 0.174, 0.191), stdev = 0.034
[info]   CI (99.9%): [0.044, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2027.806 ±(99.9%) 41.546 MB/sec [Average]
[info]   (min, avg, max) = (2011.357, 2027.806, 2037.834), stdev = 10.789
[info]   CI (99.9%): [1986.260, 2069.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3695.503 ±(99.9%) 81.063 B/op [Average]
[info]   (min, avg, max) = (3670.799, 3695.503, 3722.558), stdev = 21.052
[info]   CI (99.9%): [3614.440, 3776.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson
[info] # Run progress: 53.17% complete, ETA 00:15:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 790097.261 ops/s
[info] # Warmup Iteration   2: 1916844.292 ops/s
[info] # Warmup Iteration   3: 1899790.348 ops/s
[info] # Warmup Iteration   4: 1919149.376 ops/s
[info] # Warmup Iteration   5: 1924933.563 ops/s
[info] Iteration   1: 1927398.740 ops/s
[info]                  ·gc.alloc.rate:                   1302.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1086.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1913791.617 ops/s
[info]                  ·gc.alloc.rate:                   1293.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1099.936 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1915853.604 ops/s
[info]                  ·gc.alloc.rate:                   1294.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1104.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1916067.217 ops/s
[info]                  ·gc.alloc.rate:                   1294.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1107.677 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1913887.640 ops/s
[info]                  ·gc.alloc.rate:                   1293.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1111.289 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson":
[info]   1917399.764 ±(99.9%) 21909.755 ops/s [Average]
[info]   (min, avg, max) = (1913791.617, 1917399.764, 1927398.740), stdev = 5689.894
[info]   CI (99.9%): [1895490.009, 1939309.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1295.982 ±(99.9%) 14.507 MB/sec [Average]
[info]   (min, avg, max) = (1293.551, 1295.982, 1302.620), stdev = 3.767
[info]   CI (99.9%): [1281.476, 1310.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.072 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.072, 0.120), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1342.097 ±(99.9%) 33.362 MB/sec [Average]
[info]   (min, avg, max) = (1329.788, 1342.097, 1351.307), stdev = 8.664
[info]   CI (99.9%): [1308.735, 1375.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1101.880 ±(99.9%) 37.429 B/op [Average]
[info]   (min, avg, max) = (1086.191, 1101.880, 1111.289), stdev = 9.720
[info]   CI (99.9%): [1064.451, 1139.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter
[info] # Run progress: 53.97% complete, ETA 00:15:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5965827.978 ops/s
[info] # Warmup Iteration   2: 6778267.256 ops/s
[info] # Warmup Iteration   3: 6928129.617 ops/s
[info] # Warmup Iteration   4: 6690694.375 ops/s
[info] # Warmup Iteration   5: 6967247.626 ops/s
[info] Iteration   1: 6991393.955 ops/s
[info]                  ·gc.alloc.rate:                   781.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.858 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6948445.263 ops/s
[info]                  ·gc.alloc.rate:                   777.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6972013.337 ops/s
[info]                  ·gc.alloc.rate:                   779.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6976416.840 ops/s
[info]                  ·gc.alloc.rate:                   780.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6998257.402 ops/s
[info]                  ·gc.alloc.rate:                   782.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter":
[info]   6977305.359 ±(99.9%) 74546.933 ops/s [Average]
[info]   (min, avg, max) = (6948445.263, 6977305.359, 6998257.402), stdev = 19359.602
[info]   CI (99.9%): [6902758.426, 7051852.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   780.144 ±(99.9%) 7.860 MB/sec [Average]
[info]   (min, avg, max) = (777.088, 780.144, 782.368), stdev = 2.041
[info]   CI (99.9%): [772.285, 788.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.017, 0.023), stdev = 0.004
[info]   CI (99.9%): [0.001, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   792.037 ±(99.9%) 693.308 MB/sec [Average]
[info]   (min, avg, max) = (658.108, 792.037, 993.286), stdev = 180.050
[info]   CI (99.9%): [98.729, 1485.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   178.655 ±(99.9%) 155.769 B/op [Average]
[info]   (min, avg, max) = (148.941, 178.655, 224.063), stdev = 40.453
[info]   CI (99.9%): [22.886, 334.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay
[info] # Run progress: 54.76% complete, ETA 00:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181970.344 ops/s
[info] # Warmup Iteration   2: 589252.721 ops/s
[info] # Warmup Iteration   3: 587825.732 ops/s
[info] # Warmup Iteration   4: 589655.239 ops/s
[info] # Warmup Iteration   5: 589664.599 ops/s
[info] Iteration   1: 588732.501 ops/s
[info]                  ·gc.alloc.rate:                   2007.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5404.352 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 582392.532 ops/s
[info]                  ·gc.alloc.rate:                   1985.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5485.186 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 585221.745 ops/s
[info]                  ·gc.alloc.rate:                   1995.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5473.100 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 591231.771 ops/s
[info]                  ·gc.alloc.rate:                   2015.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5426.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 587440.405 ops/s
[info]                  ·gc.alloc.rate:                   2003.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5464.819 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay":
[info]   587003.791 ±(99.9%) 12986.191 ops/s [Average]
[info]   (min, avg, max) = (582392.532, 587003.791, 591231.771), stdev = 3372.473
[info]   CI (99.9%): [574017.600, 599989.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   2001.498 ±(99.9%) 44.518 MB/sec [Average]
[info]   (min, avg, max) = (1985.414, 2001.498, 2015.801), stdev = 11.561
[info]   CI (99.9%): [1956.981, 2046.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.187), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.358 ±(99.9%) 0.426 B/op [Average]
[info]   (min, avg, max) = (0.222, 0.358, 0.506), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2032.288 ±(99.9%) 28.762 MB/sec [Average]
[info]   (min, avg, max) = (2021.010, 2032.288, 2039.287), stdev = 7.469
[info]   CI (99.9%): [2003.526, 2061.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5450.707 ±(99.9%) 131.213 B/op [Average]
[info]   (min, avg, max) = (5404.352, 5450.707, 5485.186), stdev = 34.076
[info]   CI (99.9%): [5319.494, 5581.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 55.56% complete, ETA 00:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 440013.484 ops/s
[info] # Warmup Iteration   2: 684727.575 ops/s
[info] # Warmup Iteration   3: 689274.659 ops/s
[info] # Warmup Iteration   4: 691166.942 ops/s
[info] # Warmup Iteration   5: 689567.607 ops/s
[info] Iteration   1: 694205.584 ops/s
[info]                  ·gc.alloc.rate:                   2405.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5354.994 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 683949.455 ops/s
[info]                  ·gc.alloc.rate:                   2370.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5456.480 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 686441.697 ops/s
[info]                  ·gc.alloc.rate:                   2379.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5450.603 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 675815.811 ops/s
[info]                  ·gc.alloc.rate:                   2342.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5539.641 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 687836.013 ops/s
[info]                  ·gc.alloc.rate:                   2384.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5452.045 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   685649.712 ±(99.9%) 25701.900 ops/s [Average]
[info]   (min, avg, max) = (675815.811, 685649.712, 694205.584), stdev = 6674.702
[info]   CI (99.9%): [659947.812, 711351.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2376.405 ±(99.9%) 89.199 MB/sec [Average]
[info]   (min, avg, max) = (2342.182, 2376.405, 2405.816), stdev = 23.165
[info]   CI (99.9%): [2287.206, 2465.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.229), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.306 ±(99.9%) 0.513 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.306, 0.525), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2373.903 ±(99.9%) 31.974 MB/sec [Average]
[info]   (min, avg, max) = (2361.277, 2373.903, 2382.838), stdev = 8.304
[info]   CI (99.9%): [2341.929, 2405.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5450.753 ±(99.9%) 251.808 B/op [Average]
[info]   (min, avg, max) = (5354.994, 5450.753, 5539.641), stdev = 65.394
[info]   CI (99.9%): [5198.944, 5702.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 10.000), stdev = 1.643
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter
[info] # Run progress: 56.35% complete, ETA 00:14:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4456360.358 ops/s
[info] # Warmup Iteration   2: 4977584.910 ops/s
[info] # Warmup Iteration   3: 5062495.327 ops/s
[info] # Warmup Iteration   4: 5046310.138 ops/s
[info] # Warmup Iteration   5: 5054606.567 ops/s
[info] Iteration   1: 5073393.260 ops/s
[info]                  ·gc.alloc.rate:                   1263.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.714 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5072766.064 ops/s
[info]                  ·gc.alloc.rate:                   1263.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 413.655 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5044613.733 ops/s
[info]                  ·gc.alloc.rate:                   1256.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5056144.869 ops/s
[info]                  ·gc.alloc.rate:                   1259.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.822 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5068131.485 ops/s
[info]                  ·gc.alloc.rate:                   1262.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1011.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 314.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter":
[info]   5063009.882 ±(99.9%) 47737.704 ops/s [Average]
[info]   (min, avg, max) = (5044613.733, 5063009.882, 5073393.260), stdev = 12397.330
[info]   CI (99.9%): [5015272.178, 5110747.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1260.804 ±(99.9%) 12.104 MB/sec [Average]
[info]   (min, avg, max) = (1256.168, 1260.804, 1263.498), stdev = 3.143
[info]   CI (99.9%): [1248.700, 1272.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.278 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.208), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.032, 0.065), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1204.908 ±(99.9%) 709.317 MB/sec [Average]
[info]   (min, avg, max) = (994.840, 1204.908, 1345.163), stdev = 184.207
[info]   CI (99.9%): [495.591, 1914.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   374.687 ±(99.9%) 222.463 B/op [Average]
[info]   (min, avg, max) = (308.714, 374.687, 418.822), stdev = 57.773
[info]   CI (99.9%): [152.224, 597.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay
[info] # Run progress: 57.14% complete, ETA 00:14:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140188.607 ops/s
[info] # Warmup Iteration   2: 387115.495 ops/s
[info] # Warmup Iteration   3: 386664.867 ops/s
[info] # Warmup Iteration   4: 390407.004 ops/s
[info] # Warmup Iteration   5: 386196.737 ops/s
[info] Iteration   1: 387968.743 ops/s
[info]                  ·gc.alloc.rate:                   2093.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9581.712 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 388252.217 ops/s
[info]                  ·gc.alloc.rate:                   2095.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8238.304 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 389044.589 ops/s
[info]                  ·gc.alloc.rate:                   2099.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8237.641 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 390458.097 ops/s
[info]                  ·gc.alloc.rate:                   2107.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8215.955 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 387463.194 ops/s
[info]                  ·gc.alloc.rate:                   2091.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              8496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2040.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8290.379 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay":
[info]   388637.368 ±(99.9%) 4496.757 ops/s [Average]
[info]   (min, avg, max) = (387463.194, 388637.368, 390458.097), stdev = 1167.794
[info]   CI (99.9%): [384140.611, 393134.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate":
[info]   2097.743 ±(99.9%) 25.024 MB/sec [Average]
[info]   (min, avg, max) = (2091.242, 2097.743, 2107.951), stdev = 6.499
[info]   CI (99.9%): [2072.719, 2122.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8496.001, 8496.001, 8496.001), stdev = 0.001
[info]   CI (99.9%): [8496.001, 8496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.472 ±(99.9%) 0.811 B/op [Average]
[info]   (min, avg, max) = (0.253, 0.472, 0.675), stdev = 0.211
[info]   CI (99.9%): [≈ 0, 1.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2101.752 ±(99.9%) 559.001 MB/sec [Average]
[info]   (min, avg, max) = (2032.408, 2101.752, 2361.384), stdev = 145.171
[info]   CI (99.9%): [1542.751, 2660.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8512.798 ±(99.9%) 2303.334 B/op [Average]
[info]   (min, avg, max) = (8215.955, 8512.798, 9581.712), stdev = 598.168
[info]   CI (99.9%): [6209.465, 10816.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 57.94% complete, ETA 00:13:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273518.847 ops/s
[info] # Warmup Iteration   2: 515806.036 ops/s
[info] # Warmup Iteration   3: 513850.132 ops/s
[info] # Warmup Iteration   4: 518063.750 ops/s
[info] # Warmup Iteration   5: 520228.629 ops/s
[info] Iteration   1: 524134.471 ops/s
[info]                  ·gc.alloc.rate:                   1371.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3972.258 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 519709.653 ops/s
[info]                  ·gc.alloc.rate:                   1360.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4030.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 506769.648 ops/s
[info]                  ·gc.alloc.rate:                   1326.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4156.254 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 511410.749 ops/s
[info]                  ·gc.alloc.rate:                   1338.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4136.677 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 501450.123 ops/s
[info]                  ·gc.alloc.rate:                   1312.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4235.598 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   512694.929 ±(99.9%) 35671.659 ops/s [Average]
[info]   (min, avg, max) = (501450.123, 512694.929, 524134.471), stdev = 9263.816
[info]   CI (99.9%): [477023.270, 548366.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1341.801 ±(99.9%) 93.152 MB/sec [Average]
[info]   (min, avg, max) = (1312.393, 1341.801, 1371.635), stdev = 24.191
[info]   CI (99.9%): [1248.649, 1434.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4120.001, 4120.001, 4120.001), stdev = 0.001
[info]   CI (99.9%): [4120.001, 4120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.166), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.267 ±(99.9%) 0.598 B/op [Average]
[info]   (min, avg, max) = (0.128, 0.267, 0.504), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1336.850 ±(99.9%) 40.991 MB/sec [Average]
[info]   (min, avg, max) = (1322.448, 1336.850, 1349.215), stdev = 10.645
[info]   CI (99.9%): [1295.859, 1377.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4106.298 ±(99.9%) 403.025 B/op [Average]
[info]   (min, avg, max) = (3972.258, 4106.298, 4235.598), stdev = 104.664
[info]   CI (99.9%): [3703.274, 4509.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter
[info] # Run progress: 58.73% complete, ETA 00:13:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2851569.291 ops/s
[info] # Warmup Iteration   2: 3161000.798 ops/s
[info] # Warmup Iteration   3: 3055130.688 ops/s
[info] # Warmup Iteration   4: 3119842.442 ops/s
[info] # Warmup Iteration   5: 3202002.922 ops/s
[info] Iteration   1: 3203318.704 ops/s
[info]                  ·gc.alloc.rate:                   537.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 322.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 3210965.847 ops/s
[info]                  ·gc.alloc.rate:                   538.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.649 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3153974.464 ops/s
[info]                  ·gc.alloc.rate:                   528.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3195364.430 ops/s
[info]                  ·gc.alloc.rate:                   535.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3193471.067 ops/s
[info]                  ·gc.alloc.rate:                   535.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter":
[info]   3191418.902 ±(99.9%) 84922.913 ops/s [Average]
[info]   (min, avg, max) = (3153974.464, 3191418.902, 3210965.847), stdev = 22054.211
[info]   CI (99.9%): [3106495.990, 3276341.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   535.218 ±(99.9%) 14.229 MB/sec [Average]
[info]   (min, avg, max) = (528.929, 535.218, 538.441), stdev = 3.695
[info]   CI (99.9%): [520.989, 549.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   525.270 ±(99.9%) 692.834 MB/sec [Average]
[info]   (min, avg, max) = (327.652, 525.270, 657.992), stdev = 179.927
[info]   CI (99.9%): [≈ 0, 1218.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   259.342 ±(99.9%) 344.765 B/op [Average]
[info]   (min, avg, max) = (160.649, 259.342, 327.418), stdev = 89.534
[info]   CI (99.9%): [≈ 0, 604.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay
[info] # Run progress: 59.52% complete, ETA 00:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88250.600 ops/s
[info] # Warmup Iteration   2: 369485.203 ops/s
[info] # Warmup Iteration   3: 370002.775 ops/s
[info] # Warmup Iteration   4: 371650.744 ops/s
[info] # Warmup Iteration   5: 373400.328 ops/s
[info] Iteration   1: 372421.030 ops/s
[info]                  ·gc.alloc.rate:                   1343.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5629.923 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 374824.539 ops/s
[info]                  ·gc.alloc.rate:                   1352.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5623.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 371894.563 ops/s
[info]                  ·gc.alloc.rate:                   1341.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5694.523 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 372650.986 ops/s
[info]                  ·gc.alloc.rate:                   1344.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5699.761 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 374454.476 ops/s
[info]                  ·gc.alloc.rate:                   1351.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5686.169 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay":
[info]   373249.119 ±(99.9%) 5025.478 ops/s [Average]
[info]   (min, avg, max) = (371894.563, 373249.119, 374824.539), stdev = 1305.101
[info]   CI (99.9%): [368223.641, 378274.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1346.755 ±(99.9%) 18.234 MB/sec [Average]
[info]   (min, avg, max) = (1341.803, 1346.755, 1352.511), stdev = 4.735
[info]   CI (99.9%): [1328.521, 1364.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5680.001, 5680.001, 5680.001), stdev = 0.001
[info]   CI (99.9%): [5680.001, 5680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.333 ±(99.9%) 0.279 B/op [Average]
[info]   (min, avg, max) = (0.264, 0.333, 0.437), stdev = 0.073
[info]   CI (99.9%): [0.054, 0.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1343.614 ±(99.9%) 31.887 MB/sec [Average]
[info]   (min, avg, max) = (1331.848, 1343.614, 1352.522), stdev = 8.281
[info]   CI (99.9%): [1311.727, 1375.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5666.794 ±(99.9%) 142.223 B/op [Average]
[info]   (min, avg, max) = (5623.595, 5666.794, 5699.761), stdev = 36.935
[info]   CI (99.9%): [5524.571, 5809.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 60.32% complete, ETA 00:13:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1191111.613 ops/s
[info] # Warmup Iteration   2: 2091688.277 ops/s
[info] # Warmup Iteration   3: 2099057.188 ops/s
[info] # Warmup Iteration   4: 2120853.626 ops/s
[info] # Warmup Iteration   5: 2099687.621 ops/s
[info] Iteration   1: 2129805.297 ops/s
[info]                  ·gc.alloc.rate:                   3128.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3052.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2255.906 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2116890.049 ops/s
[info]                  ·gc.alloc.rate:                   3109.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2274.056 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2119152.769 ops/s
[info]                  ·gc.alloc.rate:                   3112.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2275.228 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2111334.226 ops/s
[info]                  ·gc.alloc.rate:                   3100.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2283.585 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2101098.475 ops/s
[info]                  ·gc.alloc.rate:                   3085.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2294.808 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2115656.163 ±(99.9%) 40594.269 ops/s [Average]
[info]   (min, avg, max) = (2101098.475, 2115656.163, 2129805.297), stdev = 10542.203
[info]   CI (99.9%): [2075061.895, 2156250.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3107.339 ±(99.9%) 60.155 MB/sec [Average]
[info]   (min, avg, max) = (3085.656, 3107.339, 3128.093), stdev = 15.622
[info]   CI (99.9%): [3047.184, 3167.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2312.000, 2312.000, 2312.000), stdev = 0.001
[info]   CI (99.9%): [2312.000, 2312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.025, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.108), stdev = 0.020
[info]   CI (99.9%): [0.019, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3059.841 ±(99.9%) 17.732 MB/sec [Average]
[info]   (min, avg, max) = (3052.198, 3059.841, 3062.892), stdev = 4.605
[info]   CI (99.9%): [3042.109, 3077.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2276.717 ±(99.9%) 55.026 B/op [Average]
[info]   (min, avg, max) = (2255.906, 2276.717, 2294.808), stdev = 14.290
[info]   CI (99.9%): [2221.690, 2331.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson
[info] # Run progress: 61.11% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50341.191 ops/s
[info] # Warmup Iteration   2: 304290.472 ops/s
[info] # Warmup Iteration   3: 302584.340 ops/s
[info] # Warmup Iteration   4: 313455.180 ops/s
[info] # Warmup Iteration   5: 312166.273 ops/s
[info] Iteration   1: 308997.649 ops/s
[info]                  ·gc.alloc.rate:                   551.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              2808.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1657.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 301006.636 ops/s
[info]                  ·gc.alloc.rate:                   537.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              2808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3423.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 307159.493 ops/s
[info]                  ·gc.alloc.rate:                   547.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              2808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3368.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 310255.058 ops/s
[info]                  ·gc.alloc.rate:                   553.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              2808.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1674.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 307253.788 ops/s
[info]                  ·gc.alloc.rate:                   548.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              2808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3387.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson":
[info]   306934.525 ±(99.9%) 13692.116 ops/s [Average]
[info]   (min, avg, max) = (301006.636, 306934.525, 310255.058), stdev = 3555.799
[info]   CI (99.9%): [293242.409, 320626.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate":
[info]   547.537 ±(99.9%) 24.206 MB/sec [Average]
[info]   (min, avg, max) = (537.091, 547.537, 553.494), stdev = 6.286
[info]   CI (99.9%): [523.331, 571.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   2808.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2808.001, 2808.001, 2808.001), stdev = 0.001
[info]   CI (99.9%): [2808.001, 2808.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.279 ±(99.9%) 1.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 0.640), stdev = 0.278
[info]   CI (99.9%): [≈ 0, 1.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   525.714 ±(99.9%) 696.295 MB/sec [Average]
[info]   (min, avg, max) = (325.299, 525.714, 661.222), stdev = 180.825
[info]   CI (99.9%): [≈ 0, 1222.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2702.231 ±(99.9%) 3644.153 B/op [Average]
[info]   (min, avg, max) = (1657.330, 2702.231, 3423.032), stdev = 946.375
[info]   CI (99.9%): [≈ 0, 6346.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter
[info] # Run progress: 61.90% complete, ETA 00:12:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638509.338 ops/s
[info] # Warmup Iteration   2: 690065.497 ops/s
[info] # Warmup Iteration   3: 679562.915 ops/s
[info] # Warmup Iteration   4: 673523.182 ops/s
[info] # Warmup Iteration   5: 690044.355 ops/s
[info] Iteration   1: 690960.026 ops/s
[info]                  ·gc.alloc.rate:                   438.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1509.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 684795.779 ops/s
[info]                  ·gc.alloc.rate:                   435.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 759.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 683275.453 ops/s
[info]                  ·gc.alloc.rate:                   434.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 761.000 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 684130.441 ops/s
[info]                  ·gc.alloc.rate:                   434.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1519.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 682879.045 ops/s
[info]                  ·gc.alloc.rate:                   433.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 760.665 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter":
[info]   685208.149 ±(99.9%) 12709.405 ops/s [Average]
[info]   (min, avg, max) = (682879.045, 685208.149, 690960.026), stdev = 3300.592
[info]   CI (99.9%): [672498.744, 697917.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate":
[info]   435.275 ±(99.9%) 7.960 MB/sec [Average]
[info]   (min, avg, max) = (433.797, 435.275, 438.867), stdev = 2.067
[info]   CI (99.9%): [427.315, 443.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.192), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   462.701 ±(99.9%) 698.567 MB/sec [Average]
[info]   (min, avg, max) = (329.974, 462.701, 662.524), stdev = 181.416
[info]   CI (99.9%): [≈ 0, 1161.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1062.002 ±(99.9%) 1590.615 B/op [Average]
[info]   (min, avg, max) = (759.366, 1062.002, 1519.356), stdev = 413.078
[info]   CI (99.9%): [≈ 0, 2652.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 62.70% complete, ETA 00:12:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3290942.818 ops/s
[info] # Warmup Iteration   2: 3550116.637 ops/s
[info] # Warmup Iteration   3: 3633816.210 ops/s
[info] # Warmup Iteration   4: 3635381.151 ops/s
[info] # Warmup Iteration   5: 3608100.615 ops/s
[info] Iteration   1: 3686469.692 ops/s
[info]                  ·gc.alloc.rate:                   1198.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3678709.561 ops/s
[info]                  ·gc.alloc.rate:                   1196.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 571.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3685810.234 ops/s
[info]                  ·gc.alloc.rate:                   1198.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 429.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3668579.256 ops/s
[info]                  ·gc.alloc.rate:                   1193.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 576.665 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3653475.429 ops/s
[info]                  ·gc.alloc.rate:                   1188.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1011.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435.745 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3674608.835 ±(99.9%) 53284.617 ops/s [Average]
[info]   (min, avg, max) = (3653475.429, 3674608.835, 3686469.692), stdev = 13837.846
[info]   CI (99.9%): [3621324.218, 3727893.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1195.161 ±(99.9%) 17.566 MB/sec [Average]
[info]   (min, avg, max) = (1188.150, 1195.161, 1198.943), stdev = 4.562
[info]   CI (99.9%): [1177.595, 1212.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.037 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.037, 0.071), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1204.487 ±(99.9%) 691.296 MB/sec [Average]
[info]   (min, avg, max) = (1004.687, 1204.487, 1343.865), stdev = 179.527
[info]   CI (99.9%): [513.191, 1895.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   515.928 ±(99.9%) 293.986 B/op [Average]
[info]   (min, avg, max) = (429.089, 515.928, 576.665), stdev = 76.347
[info]   CI (99.9%): [221.941, 809.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 63.49% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5601542.538 ops/s
[info] # Warmup Iteration   2: 6049324.110 ops/s
[info] # Warmup Iteration   3: 6180802.257 ops/s
[info] # Warmup Iteration   4: 6302553.351 ops/s
[info] # Warmup Iteration   5: 6181704.746 ops/s
[info] Iteration   1: 6198032.474 ops/s
[info]                  ·gc.alloc.rate:                   535.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5957853.676 ops/s
[info]                  ·gc.alloc.rate:                   514.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6162109.689 ops/s
[info]                  ·gc.alloc.rate:                   532.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6182279.086 ops/s
[info]                  ·gc.alloc.rate:                   534.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 6136800.720 ops/s
[info]                  ·gc.alloc.rate:                   530.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.629 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6127415.129 ±(99.9%) 375510.600 ops/s [Average]
[info]   (min, avg, max) = (5957853.676, 6127415.129, 6198032.474), stdev = 97518.910
[info]   CI (99.9%): [5751904.529, 6502925.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   529.364 ±(99.9%) 32.431 MB/sec [Average]
[info]   (min, avg, max) = (514.706, 529.364, 535.380), stdev = 8.422
[info]   CI (99.9%): [496.933, 561.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.011 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.032), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   528.768 ±(99.9%) 697.577 MB/sec [Average]
[info]   (min, avg, max) = (330.309, 528.768, 661.272), stdev = 181.159
[info]   CI (99.9%): [≈ 0, 1226.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   135.549 ±(99.9%) 175.313 B/op [Average]
[info]   (min, avg, max) = (84.107, 135.549, 169.629), stdev = 45.528
[info]   CI (99.9%): [≈ 0, 310.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay
[info] # Run progress: 64.29% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17554.848 ops/s
[info] # Warmup Iteration   2: 186239.094 ops/s
[info] # Warmup Iteration   3: 199646.625 ops/s
[info] # Warmup Iteration   4: 200559.565 ops/s
[info] # Warmup Iteration   5: 200736.318 ops/s
[info] Iteration   1: 199563.797 ops/s
[info]                  ·gc.alloc.rate:                   1275.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7864.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 198532.324 ops/s
[info]                  ·gc.alloc.rate:                   1269.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10591.837 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 199009.184 ops/s
[info]                  ·gc.alloc.rate:                   1272.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10619.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 198921.850 ops/s
[info]                  ·gc.alloc.rate:                   1271.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10666.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 199654.438 ops/s
[info]                  ·gc.alloc.rate:                   1276.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1013.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7991.771 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay":
[info]   199136.319 ±(99.9%) 1804.218 ops/s [Average]
[info]   (min, avg, max) = (198532.324, 199136.319, 199654.438), stdev = 468.550
[info]   CI (99.9%): [197332.101, 200940.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate":
[info]   1273.174 ±(99.9%) 10.881 MB/sec [Average]
[info]   (min, avg, max) = (1269.632, 1273.174, 1276.379), stdev = 2.826
[info]   CI (99.9%): [1262.292, 1284.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10064.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10064.002, 10064.002, 10064.002), stdev = 0.001
[info]   CI (99.9%): [10064.002, 10064.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.790 ±(99.9%) 0.944 B/op [Average]
[info]   (min, avg, max) = (0.494, 0.790, 1.155), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1207.452 ±(99.9%) 711.412 MB/sec [Average]
[info]   (min, avg, max) = (996.879, 1207.452, 1348.125), stdev = 184.751
[info]   CI (99.9%): [496.040, 1918.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   9546.922 ±(99.9%) 5694.516 B/op [Average]
[info]   (min, avg, max) = (7864.123, 9546.922, 10666.897), stdev = 1478.848
[info]   CI (99.9%): [3852.407, 15241.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 65.08% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 504828.050 ops/s
[info] # Warmup Iteration   2: 721960.346 ops/s
[info] # Warmup Iteration   3: 726008.575 ops/s
[info] # Warmup Iteration   4: 733207.126 ops/s
[info] # Warmup Iteration   5: 730315.560 ops/s
[info] Iteration   1: 736444.728 ops/s
[info]                  ·gc.alloc.rate:                   2814.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3046.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6512.691 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 738228.802 ops/s
[info]                  ·gc.alloc.rate:                   2820.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5791.535 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 737024.033 ops/s
[info]                  ·gc.alloc.rate:                   2816.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5808.028 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 734980.772 ops/s
[info]                  ·gc.alloc.rate:                   2808.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6560.135 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 730748.665 ops/s
[info]                  ·gc.alloc.rate:                   2792.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5864.972 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   735485.400 ±(99.9%) 11144.482 ops/s [Average]
[info]   (min, avg, max) = (730748.665, 735485.400, 738228.802), stdev = 2894.187
[info]   CI (99.9%): [724340.918, 746629.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2810.613 ±(99.9%) 42.354 MB/sec [Average]
[info]   (min, avg, max) = (2792.691, 2810.613, 2820.983), stdev = 10.999
[info]   CI (99.9%): [2768.259, 2852.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.000, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.187), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.258 ±(99.9%) 0.327 B/op [Average]
[info]   (min, avg, max) = (0.178, 0.258, 0.399), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2853.339 ±(99.9%) 707.610 MB/sec [Average]
[info]   (min, avg, max) = (2715.728, 2853.339, 3062.436), stdev = 183.764
[info]   CI (99.9%): [2145.729, 3560.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6107.472 ±(99.9%) 1512.812 B/op [Average]
[info]   (min, avg, max) = (5791.535, 6107.472, 6560.135), stdev = 392.873
[info]   CI (99.9%): [4594.660, 7620.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 10.000), stdev = 1.304
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter
[info] # Run progress: 65.87% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3345245.604 ops/s
[info] # Warmup Iteration   2: 3895100.158 ops/s
[info] # Warmup Iteration   3: 3922934.417 ops/s
[info] # Warmup Iteration   4: 3917905.974 ops/s
[info] # Warmup Iteration   5: 3912434.087 ops/s
[info] Iteration   1: 3919472.836 ops/s
[info]                  ·gc.alloc.rate:                   2529.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 950.855 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3894913.091 ops/s
[info]                  ·gc.alloc.rate:                   2513.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1097.167 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3932793.585 ops/s
[info]                  ·gc.alloc.rate:                   2538.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 951.985 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3903930.399 ops/s
[info]                  ·gc.alloc.rate:                   2519.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1097.818 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 3928605.576 ops/s
[info]                  ·gc.alloc.rate:                   2535.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 954.586 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter":
[info]   3915943.097 ±(99.9%) 62188.270 ops/s [Average]
[info]   (min, avg, max) = (3894913.091, 3915943.097, 3932793.585), stdev = 16150.096
[info]   CI (99.9%): [3853754.827, 3978131.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2527.308 ±(99.9%) 40.875 MB/sec [Average]
[info]   (min, avg, max) = (2513.409, 2527.308, 2538.393), stdev = 10.615
[info]   CI (99.9%): [2486.433, 2568.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.187), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.055 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.055, 0.076), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2512.968 ±(99.9%) 722.369 MB/sec [Average]
[info]   (min, avg, max) = (2367.225, 2512.968, 2722.506), stdev = 187.597
[info]   CI (99.9%): [1790.599, 3235.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1010.482 ±(99.9%) 305.899 B/op [Average]
[info]   (min, avg, max) = (950.855, 1010.482, 1097.818), stdev = 79.441
[info]   CI (99.9%): [704.583, 1316.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 10.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay
[info] # Run progress: 66.67% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66514.949 ops/s
[info] # Warmup Iteration   2: 268158.981 ops/s
[info] # Warmup Iteration   3: 273233.281 ops/s
[info] # Warmup Iteration   4: 273032.386 ops/s
[info] # Warmup Iteration   5: 272121.442 ops/s
[info] Iteration   1: 271414.021 ops/s
[info]                  ·gc.alloc.rate:                   1940.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11715.393 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 274210.327 ops/s
[info]                  ·gc.alloc.rate:                   1961.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9703.727 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 273353.715 ops/s
[info]                  ·gc.alloc.rate:                   1954.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11708.755 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 271404.830 ops/s
[info]                  ·gc.alloc.rate:                   1940.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11816.170 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 274208.161 ops/s
[info]                  ·gc.alloc.rate:                   1960.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11699.358 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay":
[info]   272918.211 ±(99.9%) 5471.475 ops/s [Average]
[info]   (min, avg, max) = (271404.830, 272918.211, 274210.327), stdev = 1420.925
[info]   CI (99.9%): [267446.736, 278389.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1951.551 ±(99.9%) 39.561 MB/sec [Average]
[info]   (min, avg, max) = (1940.575, 1951.551, 1961.107), stdev = 10.274
[info]   CI (99.9%): [1911.989, 1991.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   11256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11256.001, 11256.002, 11256.002), stdev = 0.001
[info]   CI (99.9%): [11256.001, 11256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.600 ±(99.9%) 0.564 B/op [Average]
[info]   (min, avg, max) = (0.362, 0.600, 0.724), stdev = 0.146
[info]   CI (99.9%): [0.036, 1.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1963.788 ±(99.9%) 588.610 MB/sec [Average]
[info]   (min, avg, max) = (1690.657, 1963.788, 2037.944), stdev = 152.860
[info]   CI (99.9%): [1375.178, 2552.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11328.681 ±(99.9%) 3502.566 B/op [Average]
[info]   (min, avg, max) = (9703.727, 11328.681, 11816.170), stdev = 909.605
[info]   CI (99.9%): [7826.115, 14831.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 67.46% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 545401.325 ops/s
[info] # Warmup Iteration   2: 839787.540 ops/s
[info] # Warmup Iteration   3: 857070.451 ops/s
[info] # Warmup Iteration   4: 857886.540 ops/s
[info] # Warmup Iteration   5: 858330.078 ops/s
[info] Iteration   1: 856054.048 ops/s
[info]                  ·gc.alloc.rate:                   1879.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3690.367 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 859281.922 ops/s
[info]                  ·gc.alloc.rate:                   1886.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3700.585 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 854291.464 ops/s
[info]                  ·gc.alloc.rate:                   1875.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3114.630 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 847319.009 ops/s
[info]                  ·gc.alloc.rate:                   1860.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3777.477 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 858310.784 ops/s
[info]                  ·gc.alloc.rate:                   1884.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3114.709 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   855051.445 ±(99.9%) 18254.406 ops/s [Average]
[info]   (min, avg, max) = (847319.009, 855051.445, 859281.922), stdev = 4740.611
[info]   CI (99.9%): [836797.040, 873305.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1877.177 ±(99.9%) 40.152 MB/sec [Average]
[info]   (min, avg, max) = (1860.306, 1877.177, 1886.637), stdev = 10.427
[info]   CI (99.9%): [1837.025, 1917.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.000, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.207 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (0.115, 0.207, 0.305), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1889.710 ±(99.9%) 688.190 MB/sec [Average]
[info]   (min, avg, max) = (1690.077, 1889.710, 2033.351), stdev = 178.721
[info]   CI (99.9%): [1201.520, 2577.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3479.554 ±(99.9%) 1289.156 B/op [Average]
[info]   (min, avg, max) = (3114.630, 3479.554, 3777.477), stdev = 334.790
[info]   CI (99.9%): [2190.398, 4768.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson
[info] # Run progress: 68.25% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 859919.251 ops/s
[info] # Warmup Iteration   2: 1817417.326 ops/s
[info] # Warmup Iteration   3: 1803452.669 ops/s
[info] # Warmup Iteration   4: 1821624.376 ops/s
[info] # Warmup Iteration   5: 1796849.245 ops/s
[info] Iteration   1: 1832104.396 ops/s
[info]                  ·gc.alloc.rate:                   1052.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1833561.918 ops/s
[info]                  ·gc.alloc.rate:                   1053.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 855.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1828771.521 ops/s
[info]                  ·gc.alloc.rate:                   1050.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1831766.390 ops/s
[info]                  ·gc.alloc.rate:                   1051.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1152.374 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1803601.880 ops/s
[info]                  ·gc.alloc.rate:                   1035.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1009.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 880.909 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson":
[info]   1825961.221 ±(99.9%) 48594.725 ops/s [Average]
[info]   (min, avg, max) = (1803601.880, 1825961.221, 1833561.918), stdev = 12619.896
[info]   CI (99.9%): [1777366.496, 1874555.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1048.615 ±(99.9%) 27.735 MB/sec [Average]
[info]   (min, avg, max) = (1035.866, 1048.615, 1053.069), stdev = 7.203
[info]   CI (99.9%): [1020.881, 1076.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.083 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.083, 0.107), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1067.708 ±(99.9%) 588.579 MB/sec [Average]
[info]   (min, avg, max) = (991.270, 1067.708, 1340.875), stdev = 152.852
[info]   CI (99.9%): [479.130, 1656.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   920.339 ±(99.9%) 501.365 B/op [Average]
[info]   (min, avg, max) = (851.742, 920.339, 1152.374), stdev = 130.203
[info]   CI (99.9%): [418.974, 1421.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter
[info] # Run progress: 69.05% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4287382.356 ops/s
[info] # Warmup Iteration   2: 4555050.276 ops/s
[info] # Warmup Iteration   3: 4713984.230 ops/s
[info] # Warmup Iteration   4: 4730080.614 ops/s
[info] # Warmup Iteration   5: 4756464.776 ops/s
[info] Iteration   1: 4753374.653 ops/s
[info]                  ·gc.alloc.rate:                   362.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.171 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4750479.148 ops/s
[info]                  ·gc.alloc.rate:                   362.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4767272.654 ops/s
[info]                  ·gc.alloc.rate:                   363.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4759913.639 ops/s
[info]                  ·gc.alloc.rate:                   362.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.367 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4723750.066 ops/s
[info]                  ·gc.alloc.rate:                   360.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter":
[info]   4750958.032 ±(99.9%) 63643.835 ops/s [Average]
[info]   (min, avg, max) = (4723750.066, 4750958.032, 4767272.654), stdev = 16528.102
[info]   CI (99.9%): [4687314.197, 4814601.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   362.169 ±(99.9%) 4.848 MB/sec [Average]
[info]   (min, avg, max) = (360.090, 362.169, 363.411), stdev = 1.259
[info]   CI (99.9%): [357.321, 367.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.664 ±(99.9%) 5.401 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.664, 3.172), stdev = 1.403
[info]   CI (99.9%): [≈ 0, 6.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.220 ±(99.9%) 1.789 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.220, 1.051), stdev = 0.465
[info]   CI (99.9%): [≈ 0, 2.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   394.254 ±(99.9%) 567.687 MB/sec [Average]
[info]   (min, avg, max) = (327.667, 394.254, 657.975), stdev = 147.427
[info]   CI (99.9%): [≈ 0, 961.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   130.631 ±(99.9%) 188.081 B/op [Average]
[info]   (min, avg, max) = (108.367, 130.631, 218.003), stdev = 48.844
[info]   CI (99.9%): [≈ 0, 318.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay
[info] # Run progress: 69.84% complete, ETA 00:09:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188884.814 ops/s
[info] # Warmup Iteration   2: 537938.906 ops/s
[info] # Warmup Iteration   3: 532094.419 ops/s
[info] # Warmup Iteration   4: 540306.927 ops/s
[info] # Warmup Iteration   5: 539976.252 ops/s
[info] Iteration   1: 540400.939 ops/s
[info]                  ·gc.alloc.rate:                   1842.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5878.049 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 540183.260 ops/s
[info]                  ·gc.alloc.rate:                   1842.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4922.117 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 537995.597 ops/s
[info]                  ·gc.alloc.rate:                   1834.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4955.599 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 535724.651 ops/s
[info]                  ·gc.alloc.rate:                   1826.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5982.146 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 537094.679 ops/s
[info]                  ·gc.alloc.rate:                   1831.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4977.492 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay":
[info]   538279.825 ±(99.9%) 7734.058 ops/s [Average]
[info]   (min, avg, max) = (535724.651, 538279.825, 540400.939), stdev = 2008.510
[info]   CI (99.9%): [530545.767, 546013.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1835.601 ±(99.9%) 26.432 MB/sec [Average]
[info]   (min, avg, max) = (1826.909, 1835.601, 1842.964), stdev = 6.864
[info]   CI (99.9%): [1809.168, 1862.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.353 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (0.245, 0.353, 0.485), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1826.988 ±(99.9%) 703.598 MB/sec [Average]
[info]   (min, avg, max) = (1689.005, 1826.988, 2035.923), stdev = 182.722
[info]   CI (99.9%): [1123.390, 2530.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5343.081 ±(99.9%) 2069.700 B/op [Average]
[info]   (min, avg, max) = (4922.117, 5343.081, 5982.146), stdev = 537.495
[info]   CI (99.9%): [3273.380, 7412.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter
[info] # Run progress: 70.63% complete, ETA 00:09:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2892969.444 ops/s
[info] # Warmup Iteration   2: 3277386.544 ops/s
[info] # Warmup Iteration   3: 3297501.068 ops/s
[info] # Warmup Iteration   4: 3327874.012 ops/s
[info] # Warmup Iteration   5: 3302134.056 ops/s
[info] Iteration   1: 3325739.234 ops/s
[info]                  ·gc.alloc.rate:                   1571.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 790.256 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3342044.700 ops/s
[info]                  ·gc.alloc.rate:                   1579.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 790.707 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3327939.254 ops/s
[info]                  ·gc.alloc.rate:                   1573.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 637.894 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3340001.937 ops/s
[info]                  ·gc.alloc.rate:                   1578.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 796.643 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3335957.474 ops/s
[info]                  ·gc.alloc.rate:                   1576.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 639.530 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter":
[info]   3334336.520 ±(99.9%) 27832.646 ops/s [Average]
[info]   (min, avg, max) = (3325739.234, 3334336.520, 3342044.700), stdev = 7228.050
[info]   CI (99.9%): [3306503.874, 3362169.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1575.955 ±(99.9%) 13.397 MB/sec [Average]
[info]   (min, avg, max) = (1571.779, 1575.955, 1579.897), stdev = 3.479
[info]   CI (99.9%): [1562.558, 1589.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.033, 0.069), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1548.531 ±(99.9%) 691.683 MB/sec [Average]
[info]   (min, avg, max) = (1348.692, 1548.531, 1690.198), stdev = 179.628
[info]   CI (99.9%): [856.847, 2240.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   731.006 ±(99.9%) 324.580 B/op [Average]
[info]   (min, avg, max) = (637.894, 731.006, 796.643), stdev = 84.292
[info]   CI (99.9%): [406.426, 1055.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay
[info] # Run progress: 71.43% complete, ETA 00:09:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103031.586 ops/s
[info] # Warmup Iteration   2: 305058.536 ops/s
[info] # Warmup Iteration   3: 308839.759 ops/s
[info] # Warmup Iteration   4: 306827.454 ops/s
[info] # Warmup Iteration   5: 309664.692 ops/s
[info] Iteration   1: 308507.386 ops/s
[info]                  ·gc.alloc.rate:                   1643.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8548.617 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 302438.082 ops/s
[info]                  ·gc.alloc.rate:                   1611.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8766.732 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 309707.051 ops/s
[info]                  ·gc.alloc.rate:                   1649.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8590.945 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 307851.070 ops/s
[info]                  ·gc.alloc.rate:                   1639.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8663.722 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 309805.780 ops/s
[info]                  ·gc.alloc.rate:                   1649.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8621.900 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay":
[info]   307661.874 ±(99.9%) 11682.401 ops/s [Average]
[info]   (min, avg, max) = (302438.082, 307661.874, 309805.780), stdev = 3033.882
[info]   CI (99.9%): [295979.473, 319344.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1638.624 ±(99.9%) 61.716 MB/sec [Average]
[info]   (min, avg, max) = (1611.042, 1638.624, 1649.922), stdev = 16.027
[info]   CI (99.9%): [1576.908, 1700.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.001), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.427 ±(99.9%) 0.662 B/op [Average]
[info]   (min, avg, max) = (0.211, 0.427, 0.650), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 1.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1688.232 ±(99.9%) 32.765 MB/sec [Average]
[info]   (min, avg, max) = (1675.418, 1688.232, 1696.739), stdev = 8.509
[info]   CI (99.9%): [1655.467, 1720.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8638.383 ±(99.9%) 320.411 B/op [Average]
[info]   (min, avg, max) = (8548.617, 8638.383, 8766.732), stdev = 83.210
[info]   CI (99.9%): [8317.973, 8958.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 10.000), stdev = 1.789
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 72.22% complete, ETA 00:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287007.327 ops/s
[info] # Warmup Iteration   2: 501080.137 ops/s
[info] # Warmup Iteration   3: 510742.122 ops/s
[info] # Warmup Iteration   4: 508973.433 ops/s
[info] # Warmup Iteration   5: 509798.455 ops/s
[info] Iteration   1: 510746.439 ops/s
[info]                  ·gc.alloc.rate:                   1310.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4068.178 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 510327.743 ops/s
[info]                  ·gc.alloc.rate:                   1309.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4098.504 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 508200.235 ops/s
[info]                  ·gc.alloc.rate:                   1304.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4139.127 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 507707.870 ops/s
[info]                  ·gc.alloc.rate:                   1302.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4162.728 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 507473.631 ops/s
[info]                  ·gc.alloc.rate:                   1302.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4181.388 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   508891.183 ±(99.9%) 5900.655 ops/s [Average]
[info]   (min, avg, max) = (507473.631, 508891.183, 510746.439), stdev = 1532.381
[info]   CI (99.9%): [502990.528, 514791.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1306.025 ±(99.9%) 15.174 MB/sec [Average]
[info]   (min, avg, max) = (1302.375, 1306.025, 1310.643), stdev = 3.941
[info]   CI (99.9%): [1290.851, 1321.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4040.001, 4040.001, 4040.001), stdev = 0.001
[info]   CI (99.9%): [4040.001, 4040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.219 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (0.128, 0.219, 0.321), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1335.079 ±(99.9%) 42.867 MB/sec [Average]
[info]   (min, avg, max) = (1319.784, 1335.079, 1347.954), stdev = 11.132
[info]   CI (99.9%): [1292.213, 1377.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4129.985 ±(99.9%) 178.642 B/op [Average]
[info]   (min, avg, max) = (4068.178, 4129.985, 4181.388), stdev = 46.393
[info]   CI (99.9%): [3951.343, 4308.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter
[info] # Run progress: 73.02% complete, ETA 00:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2549949.159 ops/s
[info] # Warmup Iteration   2: 2839558.274 ops/s
[info] # Warmup Iteration   3: 2894460.430 ops/s
[info] # Warmup Iteration   4: 2901871.389 ops/s
[info] # Warmup Iteration   5: 2900487.752 ops/s
[info] Iteration   1: 2903855.105 ops/s
[info]                  ·gc.alloc.rate:                   590.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 355.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2890426.241 ops/s
[info]                  ·gc.alloc.rate:                   587.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178.625 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2895268.003 ops/s
[info]                  ·gc.alloc.rate:                   588.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 357.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2783512.549 ops/s
[info]                  ·gc.alloc.rate:                   565.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 372.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2857756.904 ops/s
[info]                  ·gc.alloc.rate:                   580.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 363.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter":
[info]   2866163.761 ±(99.9%) 190190.826 ops/s [Average]
[info]   (min, avg, max) = (2783512.549, 2866163.761, 2903855.105), stdev = 49391.954
[info]   CI (99.9%): [2675972.935, 3056354.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   582.644 ±(99.9%) 38.704 MB/sec [Average]
[info]   (min, avg, max) = (565.827, 582.644, 590.342), stdev = 10.051
[info]   CI (99.9%): [543.941, 621.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.030 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.057), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   591.529 ±(99.9%) 567.322 MB/sec [Average]
[info]   (min, avg, max) = (327.989, 591.529, 659.643), stdev = 147.332
[info]   CI (99.9%): [24.207, 1158.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   325.278 ±(99.9%) 316.705 B/op [Average]
[info]   (min, avg, max) = (178.625, 325.278, 372.131), stdev = 82.247
[info]   CI (99.9%): [8.572, 641.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay
[info] # Run progress: 73.81% complete, ETA 00:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77934.644 ops/s
[info] # Warmup Iteration   2: 331653.200 ops/s
[info] # Warmup Iteration   3: 332153.141 ops/s
[info] # Warmup Iteration   4: 333135.739 ops/s
[info] # Warmup Iteration   5: 338882.023 ops/s
[info] Iteration   1: 339647.842 ops/s
[info]                  ·gc.alloc.rate:                   1303.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6163.936 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 340813.488 ops/s
[info]                  ·gc.alloc.rate:                   1307.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6176.689 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 335239.732 ops/s
[info]                  ·gc.alloc.rate:                   1286.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6310.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 337853.305 ops/s
[info]                  ·gc.alloc.rate:                   1296.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6283.804 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 340618.617 ops/s
[info]                  ·gc.alloc.rate:                   1307.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6248.266 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay":
[info]   338834.597 ±(99.9%) 8957.630 ops/s [Average]
[info]   (min, avg, max) = (335239.732, 338834.597, 340813.488), stdev = 2326.268
[info]   CI (99.9%): [329876.967, 347792.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1300.206 ±(99.9%) 34.337 MB/sec [Average]
[info]   (min, avg, max) = (1286.509, 1300.206, 1307.751), stdev = 8.917
[info]   CI (99.9%): [1265.869, 1334.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.348 ±(99.9%) 0.196 B/op [Average]
[info]   (min, avg, max) = (0.291, 0.348, 0.386), stdev = 0.051
[info]   CI (99.9%): [0.152, 0.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1342.485 ±(99.9%) 34.739 MB/sec [Average]
[info]   (min, avg, max) = (1329.840, 1342.485, 1352.380), stdev = 9.022
[info]   CI (99.9%): [1307.746, 1377.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   6236.678 ±(99.9%) 248.982 B/op [Average]
[info]   (min, avg, max) = (6163.936, 6236.678, 6310.695), stdev = 64.660
[info]   CI (99.9%): [5987.696, 6485.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 74.60% complete, ETA 00:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311850.118 ops/s
[info] # Warmup Iteration   2: 651314.770 ops/s
[info] # Warmup Iteration   3: 660616.961 ops/s
[info] # Warmup Iteration   4: 669443.258 ops/s
[info] # Warmup Iteration   5: 670998.713 ops/s
[info] Iteration   1: 667534.119 ops/s
[info]                  ·gc.alloc.rate:                   2055.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4748.529 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 669232.860 ops/s
[info]                  ·gc.alloc.rate:                   2061.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4760.644 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 671515.505 ops/s
[info]                  ·gc.alloc.rate:                   2068.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4761.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 669964.360 ops/s
[info]                  ·gc.alloc.rate:                   2063.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4783.488 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 662907.555 ops/s
[info]                  ·gc.alloc.rate:                   2041.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4839.122 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   668230.880 ±(99.9%) 12716.010 ops/s [Average]
[info]   (min, avg, max) = (662907.555, 668230.880, 671515.505), stdev = 3302.308
[info]   CI (99.9%): [655514.869, 680946.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2058.020 ±(99.9%) 39.467 MB/sec [Average]
[info]   (min, avg, max) = (2041.602, 2058.020, 2068.151), stdev = 10.249
[info]   CI (99.9%): [2018.553, 2097.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.137, 0.187), stdev = 0.035
[info]   CI (99.9%): [0.003, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.323 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (0.244, 0.323, 0.441), stdev = 0.082
[info]   CI (99.9%): [0.009, 0.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2028.494 ±(99.9%) 38.652 MB/sec [Average]
[info]   (min, avg, max) = (2013.334, 2028.494, 2037.863), stdev = 10.038
[info]   CI (99.9%): [1989.842, 2067.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4778.557 ±(99.9%) 139.145 B/op [Average]
[info]   (min, avg, max) = (4748.529, 4778.557, 4839.122), stdev = 36.136
[info]   CI (99.9%): [4639.412, 4917.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson
[info] # Run progress: 75.40% complete, ETA 00:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 510213.813 ops/s
[info] # Warmup Iteration   2: 1551971.429 ops/s
[info] # Warmup Iteration   3: 1560338.384 ops/s
[info] # Warmup Iteration   4: 1544153.198 ops/s
[info] # Warmup Iteration   5: 1561320.787 ops/s
[info] Iteration   1: 1557806.630 ops/s
[info]                  ·gc.alloc.rate:                   1179.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1343.909 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1556205.083 ops/s
[info]                  ·gc.alloc.rate:                   1178.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1013.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1560547.054 ops/s
[info]                  ·gc.alloc.rate:                   1181.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1354.396 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1557396.247 ops/s
[info]                  ·gc.alloc.rate:                   1179.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1021.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1552824.554 ops/s
[info]                  ·gc.alloc.rate:                   1175.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1368.795 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson":
[info]   1556955.914 ±(99.9%) 10796.539 ops/s [Average]
[info]   (min, avg, max) = (1552824.554, 1556955.914, 1560547.054), stdev = 2803.827
[info]   CI (99.9%): [1546159.375, 1567752.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate":
[info]   1179.005 ±(99.9%) 8.586 MB/sec [Average]
[info]   (min, avg, max) = (1175.750, 1179.005, 1181.942), stdev = 2.230
[info]   CI (99.9%): [1170.419, 1187.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.101 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.101, 0.147), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1207.068 ±(99.9%) 706.749 MB/sec [Average]
[info]   (min, avg, max) = (1002.076, 1207.068, 1350.135), stdev = 183.541
[info]   CI (99.9%): [500.319, 1913.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1220.369 ±(99.9%) 714.447 B/op [Average]
[info]   (min, avg, max) = (1013.579, 1220.369, 1368.795), stdev = 185.540
[info]   CI (99.9%): [505.921, 1934.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter
[info] # Run progress: 76.19% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5799639.208 ops/s
[info] # Warmup Iteration   2: 6021443.639 ops/s
[info] # Warmup Iteration   3: 6167700.879 ops/s
[info] # Warmup Iteration   4: 6125017.790 ops/s
[info] # Warmup Iteration   5: 6218190.503 ops/s
[info] Iteration   1: 6155917.347 ops/s
[info]                  ·gc.alloc.rate:                   187.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.397 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6202344.198 ops/s
[info]                  ·gc.alloc.rate:                   189.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.911 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6191184.861 ops/s
[info]                  ·gc.alloc.rate:                   188.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6165678.020 ops/s
[info]                  ·gc.alloc.rate:      188.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6001022.628 ops/s
[info]                  ·gc.alloc.rate:                   182.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter":
[info]   6143229.411 ±(99.9%) 314493.997 ops/s [Average]
[info]   (min, avg, max) = (6001022.628, 6143229.411, 6202344.198), stdev = 81673.092
[info]   CI (99.9%): [5828735.414, 6457723.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   187.322 ±(99.9%) 9.623 MB/sec [Average]
[info]   (min, avg, max) = (182.975, 187.322, 189.145), stdev = 2.499
[info]   CI (99.9%): [177.700, 196.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.617 ±(99.9%) 5.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.617, 3.054), stdev = 1.363
[info]   CI (99.9%): [≈ 0, 5.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.162 ±(99.9%) 1.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.801), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 1.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   219.899 ±(99.9%) 490.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.899, 332.298), stdev = 127.320
[info]   CI (99.9%): [≈ 0, 710.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   56.500 ±(99.9%) 127.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.500, 87.172), stdev = 32.998
[info]   CI (99.9%): [≈ 0, 183.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay
[info] # Run progress: 76.98% complete, ETA 00:07:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50905.356 ops/s
[info] # Warmup Iteration   2: 248312.605 ops/s
[info] # Warmup Iteration   3: 249085.437 ops/s
[info] # Warmup Iteration   4: 252525.547 ops/s
[info] # Warmup Iteration   5: 252191.693 ops/s
[info] Iteration   1: 251650.625 ops/s
[info]                  ·gc.alloc.rate:                   1782.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12597.459 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 250917.066 ops/s
[info]                  ·gc.alloc.rate:                   1777.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10585.620 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 252343.902 ops/s
[info]                  ·gc.alloc.rate:                   1787.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10554.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 247354.108 ops/s
[info]                  ·gc.alloc.rate:                   1752.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10788.456 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 249933.876 ops/s
[info]                  ·gc.alloc.rate:                   1770.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10695.903 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay":
[info]   250439.915 ±(99.9%) 7480.796 ops/s [Average]
[info]   (min, avg, max) = (247354.108, 250439.915, 252343.902), stdev = 1942.739
[info]   CI (99.9%): [242959.120, 257920.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate":
[info]   1774.184 ±(99.9%) 52.951 MB/sec [Average]
[info]   (min, avg, max) = (1752.354, 1774.184, 1787.694), stdev = 13.751
[info]   CI (99.9%): [1721.233, 1827.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   11152.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11152.002, 11152.002, 11152.002), stdev = 0.001
[info]   CI (99.9%): [11152.001, 11152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.166), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.680 ±(99.9%) 0.892 B/op [Average]
[info]   (min, avg, max) = (0.521, 0.680, 1.045), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 1.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1757.269 ±(99.9%) 552.457 MB/sec [Average]
[info]   (min, avg, max) = (1687.247, 1757.269, 2013.816), stdev = 143.471
[info]   CI (99.9%): [1204.812, 2309.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11044.332 ±(99.9%) 3362.265 B/op [Average]
[info]   (min, avg, max) = (10554.224, 11044.332, 12597.459), stdev = 873.170
[info]   CI (99.9%): [7682.067, 14406.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 77.78% complete, ETA 00:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457282.145 ops/s
[info] # Warmup Iteration   2: 926380.478 ops/s
[info] # Warmup Iteration   3: 938744.732 ops/s
[info] # Warmup Iteration   4: 941740.455 ops/s
[info] # Warmup Iteration   5: 944430.316 ops/s
[info] Iteration   1: 941042.694 ops/s
[info]                  ·gc.alloc.rate:                   1516.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2220.235 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 941525.288 ops/s
[info]                  ·gc.alloc.rate:                   1517.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2792.812 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 944794.162 ops/s
[info]                  ·gc.alloc.rate:                   1522.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2237.043 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 941239.818 ops/s
[info]                  ·gc.alloc.rate:                   1516.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2819.211 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 930862.128 ops/s
[info]                  ·gc.alloc.rate:                   1499.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2287.350 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   939892.818 ±(99.9%) 20319.045 ops/s [Average]
[info]   (min, avg, max) = (930862.128, 939892.818, 944794.162), stdev = 5276.791
[info]   CI (99.9%): [919573.773, 960211.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1514.449 ±(99.9%) 33.195 MB/sec [Average]
[info]   (min, avg, max) = (1499.689, 1514.449, 1522.409), stdev = 8.621
[info]   CI (99.9%): [1481.254, 1547.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2536.000, 2536.000, 2536.000), stdev = 0.001
[info]   CI (99.9%): [2536.000, 2536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.146 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.146, 0.278), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1475.998 ±(99.9%) 713.085 MB/sec [Average]
[info]   (min, avg, max) = (1327.342, 1475.998, 1686.173), stdev = 185.186
[info]   CI (99.9%): [762.913, 2189.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2471.330 ±(99.9%) 1180.835 B/op [Average]
[info]   (min, avg, max) = (2220.235, 2471.330, 2819.211), stdev = 306.659
[info]   CI (99.9%): [1290.495, 3652.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson
[info] # Run progress: 78.57% complete, ETA 00:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 842397.879 ops/s
[info] # Warmup Iteration   2: 2581243.312 ops/s
[info] # Warmup Iteration   3: 2538848.716 ops/s
[info] # Warmup Iteration   4: 2574377.951 ops/s
[info] # Warmup Iteration   5: 2570649.516 ops/s
[info] Iteration   1: 2575256.296 ops/s
[info]                  ·gc.alloc.rate:                   1059.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607.163 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2583717.819 ops/s
[info]                  ·gc.alloc.rate:                   1063.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 608.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2577780.443 ops/s
[info]                  ·gc.alloc.rate:                   1061.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 613.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2581213.715 ops/s
[info]                  ·gc.alloc.rate:                   1062.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 614.314 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2543369.101 ops/s
[info]                  ·gc.alloc.rate:                   1046.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 833.827 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson":
[info]   2572267.475 ±(99.9%) 63435.997 ops/s [Average]
[info]   (min, avg, max) = (2543369.101, 2572267.475, 2583717.819), stdev = 16474.127
[info]   CI (99.9%): [2508831.477, 2635703.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1058.786 ±(99.9%) 26.201 MB/sec [Average]
[info]   (min, avg, max) = (1046.858, 1058.786, 1063.599), stdev = 6.804
[info]   CI (99.9%): [1032.585, 1084.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.112, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.068, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.069 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.069, 0.077), stdev = 0.007
[info]   CI (99.9%): [0.041, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1069.986 ±(99.9%) 596.786 MB/sec [Average]
[info]   (min, avg, max) = (993.194, 1069.986, 1347.066), stdev = 154.983
[info]   CI (99.9%): [473.200, 1666.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   655.357 ±(99.9%) 384.347 B/op [Average]
[info]   (min, avg, max) = (607.163, 655.357, 833.827), stdev = 99.814
[info]   CI (99.9%): [271.010, 1039.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter
[info] # Run progress: 79.37% complete, ETA 00:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4331642.733 ops/s
[info] # Warmup Iteration   2: 5948077.489 ops/s
[info] # Warmup Iteration   3: 6020871.350 ops/s
[info] # Warmup Iteration   4: 6003049.762 ops/s
[info] # Warmup Iteration   5: 6051757.731 ops/s
[info] Iteration   1: 6050648.030 ops/s
[info]                  ·gc.alloc.rate:                   676.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6022122.452 ops/s
[info]                  ·gc.alloc.rate:                   673.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6024235.086 ops/s
[info]                  ·gc.alloc.rate:                   673.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6041320.588 ops/s
[info]                  ·gc.alloc.rate:                   675.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6038631.747 ops/s
[info]                  ·gc.alloc.rate:                   675.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter":
[info]   6035391.581 ±(99.9%) 46325.831 ops/s [Average]
[info]   (min, avg, max) = (6022122.452, 6035391.581, 6050648.030), stdev = 12030.671
[info]   CI (99.9%): [5989065.749, 6081717.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   674.729 ±(99.9%) 5.265 MB/sec [Average]
[info]   (min, avg, max) = (673.283, 674.729, 676.421), stdev = 1.367
[info]   CI (99.9%): [669.464, 679.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.027), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   658.936 ±(99.9%) 8.502 MB/sec [Average]
[info]   (min, avg, max) = (656.577, 658.936, 661.936), stdev = 2.208
[info]   CI (99.9%): [650.434, 667.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   171.881 ±(99.9%) 2.479 B/op [Average]
[info]   (min, avg, max) = (170.837, 171.881, 172.571), stdev = 0.644
[info]   CI (99.9%): [169.401, 174.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc
[info] # Run progress: 80.16% complete, ETA 00:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4210019.301 ops/s
[info] # Warmup Iteration   2: 5607481.547 ops/s
[info] # Warmup Iteration   3: 5712112.938 ops/s
[info] # Warmup Iteration   4: 5596494.107 ops/s
[info] # Warmup Iteration   5: 5705760.461 ops/s
[info] Iteration   1: 5639618.454 ops/s
[info]                  ·gc.alloc.rate:                   343.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5713943.160 ops/s
[info]                  ·gc.alloc.rate:                   348.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5684964.251 ops/s
[info]                  ·gc.alloc.rate:                   346.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.912 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5694159.444 ops/s
[info]                  ·gc.alloc.rate:                   347.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.764 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5702183.908 ops/s
[info]                  ·gc.alloc.rate:                   347.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc":
[info]   5686973.843 ±(99.9%) 109876.597 ops/s [Average]
[info]   (min, avg, max) = (5639618.454, 5686973.843, 5713943.160), stdev = 28534.603
[info]   CI (99.9%): [5577097.246, 5796850.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   346.818 ±(99.9%) 6.844 MB/sec [Average]
[info]   (min, avg, max) = (343.883, 346.818, 348.552), stdev = 1.777
[info]   CI (99.9%): [339.974, 353.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.669 ±(99.9%) 5.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.669, 3.241), stdev = 1.438
[info]   CI (99.9%): [≈ 0, 6.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.187 ±(99.9%) 1.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.905), stdev = 0.401
[info]   CI (99.9%): [≈ 0, 1.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   329.125 ±(99.9%) 4.309 MB/sec [Average]
[info]   (min, avg, max) = (328.284, 329.125, 330.427), stdev = 1.119
[info]   CI (99.9%): [324.816, 333.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   91.105 ±(99.9%) 2.419 B/op [Average]
[info]   (min, avg, max) = (90.640, 91.105, 92.200), stdev = 0.628
[info]   CI (99.9%): [88.686, 93.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay
[info] # Run progress: 80.95% complete, ETA 00:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58249.295 ops/s
[info] # Warmup Iteration   2: 345135.021 ops/s
[info] # Warmup Iteration   3: 340019.904 ops/s
[info] # Warmup Iteration   4: 344751.925 ops/s
[info] # Warmup Iteration   5: 345989.589 ops/s
[info] Iteration   1: 346047.175 ops/s
[info]                  ·gc.alloc.rate:                   1967.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7652.844 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 347402.539 ops/s
[info]                  ·gc.alloc.rate:                   1975.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9188.665 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 345445.194 ops/s
[info]                  ·gc.alloc.rate:                   1971.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9171.315 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 346976.225 ops/s
[info]                  ·gc.alloc.rate:                   1973.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9242.508 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 346112.341 ops/s
[info]                  ·gc.alloc.rate:                   1968.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9268.417 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay":
[info]   346396.695 ±(99.9%) 3017.264 ops/s [Average]
[info]   (min, avg, max) = (345445.194, 346396.695, 347402.539), stdev = 783.574
[info]   CI (99.9%): [343379.431, 349413.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate":
[info]   1971.307 ±(99.9%) 12.801 MB/sec [Average]
[info]   (min, avg, max) = (1967.636, 1971.307, 1975.543), stdev = 3.324
[info]   CI (99.9%): [1958.506, 1984.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   8952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8952.001, 8952.001, 8952.001), stdev = 0.001
[info]   CI (99.9%): [8952.001, 8952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.434 ±(99.9%) 0.483 B/op [Average]
[info]   (min, avg, max) = (0.284, 0.434, 0.567), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1961.026 ±(99.9%) 601.147 MB/sec [Average]
[info]   (min, avg, max) = (1682.083, 1961.026, 2038.023), stdev = 156.116
[info]   CI (99.9%): [1359.878, 2562.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8904.750 ±(99.9%) 2699.070 B/op [Average]
[info]   (min, avg, max) = (7652.844, 8904.750, 9268.417), stdev = 700.940
[info]   CI (99.9%): [6205.680, 11603.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce
[info] # Run progress: 81.75% complete, ETA 00:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 511971.237 ops/s
[info] # Warmup Iteration   2: 711543.423 ops/s
[info] # Warmup Iteration   3: 718866.424 ops/s
[info] # Warmup Iteration   4: 710213.213 ops/s
[info] # Warmup Iteration   5: 719484.398 ops/s
[info] Iteration   1: 718645.469 ops/s
[info]                  ·gc.alloc.rate:                   1603.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3652.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 718849.336 ops/s
[info]                  ·gc.alloc.rate:                   1604.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3672.279 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 718263.823 ops/s
[info]                  ·gc.alloc.rate:                   1602.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2954.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 720611.917 ops/s
[info]                  ·gc.alloc.rate:                   1607.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3692.430 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 719322.771 ops/s
[info]                  ·gc.alloc.rate:                   1604.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3707.657 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce":
[info]   719138.663 ±(99.9%) 3495.755 ops/s [Average]
[info]   (min, avg, max) = (718263.823, 719138.663, 720611.917), stdev = 907.837
[info]   CI (99.9%): [715642.908, 722634.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate":
[info]   1604.522 ±(99.9%) 7.533 MB/sec [Average]
[info]   (min, avg, max) = (1602.764, 1604.522, 1607.702), stdev = 1.956
[info]   CI (99.9%): [1596.989, 1612.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm":
[info]   3512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3512.001, 3512.001, 3512.001), stdev = 0.001
[info]   CI (99.9%): [3512.000, 3512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.173 ±(99.9%) 0.192 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.173, 0.228), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1615.430 ±(99.9%) 576.782 MB/sec [Average]
[info]   (min, avg, max) = (1348.173, 1615.430, 1694.285), stdev = 149.789
[info]   CI (99.9%): [1038.648, 2192.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3535.707 ±(99.9%) 1254.469 B/op [Average]
[info]   (min, avg, max) = (2954.138, 3535.707, 3707.657), stdev = 325.782
[info]   CI (99.9%): [2281.238, 4790.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson
[info] # Run progress: 82.54% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560111.763 ops/s
[info] # Warmup Iteration   2: 1121275.710 ops/s
[info] # Warmup Iteration   3: 1150103.363 ops/s
[info] # Warmup Iteration   4: 1147407.843 ops/s
[info] # Warmup Iteration   5: 1162467.938 ops/s
[info] Iteration   1: 1148995.350 ops/s
[info]                  ·gc.alloc.rate:                   1453.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1804.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1130623.549 ops/s
[info]                  ·gc.alloc.rate:                   1430.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2312.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1152058.603 ops/s
[info]                  ·gc.alloc.rate:                   1457.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1827.347 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1123282.782 ops/s
[info]                  ·gc.alloc.rate:                   1421.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1883.363 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1147246.487 ops/s
[info]                  ·gc.alloc.rate:                   1451.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2315.202 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson":
[info]   1140441.354 ±(99.9%) 48906.477 ops/s [Average]
[info]   (min, avg, max) = (1123282.782, 1140441.354, 1152058.603), stdev = 12700.857
[info]   CI (99.9%): [1091534.877, 1189347.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate":
[info]   1443.083 ±(99.9%) 61.734 MB/sec [Average]
[info]   (min, avg, max) = (1421.389, 1443.083, 1457.763), stdev = 16.032
[info]   CI (99.9%): [1381.349, 1504.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm":
[info]   1992.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1992.000, 1992.000, 1992.000), stdev = 0.001
[info]   CI (99.9%): [1992.000, 1992.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.187), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.138 ±(99.9%) 0.280 B/op [Average]
[info]   (min, avg, max) = (0.085, 0.138, 0.261), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   1469.227 ±(99.9%) 721.456 MB/sec [Average]
[info]   (min, avg, max) = (1317.145, 1469.227, 1687.263), stdev = 187.360
[info]   CI (99.9%): [747.771, 2190.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2028.536 ±(99.9%) 1008.128 B/op [Average]
[info]   (min, avg, max) = (1804.750, 2028.536, 2315.202), stdev = 261.808
[info]   CI (99.9%): [1020.408, 3036.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 12.000), stdev = 3.715
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter
[info] # Run progress: 83.33% complete, ETA 00:05:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 769558.403 ops/s
[info] # Warmup Iteration   2: 792440.816 ops/s
[info] # Warmup Iteration   3: 816511.926 ops/s
[info] # Warmup Iteration   4: 816756.342 ops/s
[info] # Warmup Iteration   5: 816244.730 ops/s
[info] Iteration   1: 816898.131 ops/s
[info]                  ·gc.alloc.rate:                   697.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1273.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 814959.394 ops/s
[info]                  ·gc.alloc.rate:                   695.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1913.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 817374.160 ops/s
[info]                  ·gc.alloc.rate:                   697.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1274.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 819113.077 ops/s
[info]                  ·gc.alloc.rate:                   699.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1274.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 820477.473 ops/s
[info]                  ·gc.alloc.rate:                   700.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1275.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter":
[info]   817764.447 ±(99.9%) 8157.201 ops/s [Average]
[info]   (min, avg, max) = (814959.394, 817764.447, 820477.473), stdev = 2118.399
[info]   CI (99.9%): [809607.246, 825921.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate":
[info]   698.241 ±(99.9%) 7.198 MB/sec [Average]
[info]   (min, avg, max) = (695.832, 698.241, 700.607), stdev = 1.869
[info]   CI (99.9%): [691.043, 705.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.000, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.000, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.168 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (0.080, 0.168, 0.241), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   728.317 ±(99.9%) 565.108 MB/sec [Average]
[info]   (min, avg, max) = (660.545, 728.317, 990.828), stdev = 146.757
[info]   CI (99.9%): [163.209, 1293.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1402.332 ±(99.9%) 1100.948 B/op [Average]
[info]   (min, avg, max) = (1273.034, 1402.332, 1913.786), stdev = 285.913
[info]   CI (99.9%): [301.384, 2503.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce
[info] # Run progress: 84.13% complete, ETA 00:05:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 729457.416 ops/s
[info] # Warmup Iteration   2: 980870.791 ops/s
[info] # Warmup Iteration   3: 991385.646 ops/s
[info] # Warmup Iteration   4: 996017.720 ops/s
[info] # Warmup Iteration   5: 991270.281 ops/s
[info] Iteration   1: 995853.976 ops/s
[info]                  ·gc.alloc.rate:                   1487.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2628.773 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 996566.336 ops/s
[info]                  ·gc.alloc.rate:                   1489.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2113.537 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 990948.778 ops/s
[info]                  ·gc.alloc.rate:                   1480.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2669.795 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 992555.754 ops/s
[info]                  ·gc.alloc.rate:                   1482.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2140.891 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 990717.714 ops/s
[info]                  ·gc.alloc.rate:                   1480.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2150.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce":
[info]   993328.511 ±(99.9%) 10534.526 ops/s [Average]
[info]   (min, avg, max) = (990717.714, 993328.511, 996566.336), stdev = 2735.783
[info]   CI (99.9%): [982793.986, 1003863.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate":
[info]   1484.137 ±(99.9%) 15.918 MB/sec [Average]
[info]   (min, avg, max) = (1480.208, 1484.137, 1489.154), stdev = 4.134
[info]   CI (99.9%): [1468.219, 1500.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.152 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.152, 0.231), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1476.921 ±(99.9%) 685.558 MB/sec [Average]
[info]   (min, avg, max) = (1338.172, 1476.921, 1680.586), stdev = 178.037
[info]   CI (99.9%): [791.363, 2162.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2340.603 ±(99.9%) 1087.720 B/op [Average]
[info]   (min, avg, max) = (2113.537, 2340.603, 2669.795), stdev = 282.477
[info]   CI (99.9%): [1252.883, 3428.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson
[info] # Run progress: 84.92% complete, ETA 00:04:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604966.688 ops/s
[info] # Warmup Iteration   2: 1258495.116 ops/s
[info] # Warmup Iteration   3: 1278454.309 ops/s
[info] # Warmup Iteration   4: 1290515.087 ops/s
[info] # Warmup Iteration   5: 1283773.916 ops/s
[info] Iteration   1: 1292344.507 ops/s
[info]                  ·gc.alloc.rate:                   906.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1182.857 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1293504.506 ops/s
[info]                  ·gc.alloc.rate:                   907.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1189.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1287768.036 ops/s
[info]                  ·gc.alloc.rate:                   903.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1293782.169 ops/s
[info]                  ·gc.alloc.rate:                   907.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 801.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1286592.780 ops/s
[info]                  ·gc.alloc.rate:                   902.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1215.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson":
[info]   1290798.399 ±(99.9%) 12985.104 ops/s [Average]
[info]   (min, avg, max) = (1286592.780, 1290798.399, 1293782.169), stdev = 3372.190
[info]   CI (99.9%): [1277813.295, 1303783.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate":
[info]   905.288 ±(99.9%) 8.841 MB/sec [Average]
[info]   (min, avg, max) = (902.337, 905.288, 907.292), stdev = 2.296
[info]   CI (99.9%): [896.447, 914.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.117 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.117, 0.178), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   916.621 ±(99.9%) 556.323 MB/sec [Average]
[info]   (min, avg, max) = (658.586, 916.621, 993.327), stdev = 144.475
[info]   CI (99.9%): [360.298, 1472.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1118.017 ±(99.9%) 683.261 B/op [Average]
[info]   (min, avg, max) = (801.372, 1118.017, 1215.325), stdev = 177.441
[info]   CI (99.9%): [434.756, 1801.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter
[info] # Run progress: 85.71% complete, ETA 00:04:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2023498.759 ops/s
[info] # Warmup Iteration   2: 2134714.749 ops/s
[info] # Warmup Iteration   3: 2157746.845 ops/s
[info] # Warmup Iteration   4: 2165226.405 ops/s
[info] # Warmup Iteration   5: 2161770.604 ops/s
[info] Iteration   1: 2169414.215 ops/s
[info]                  ·gc.alloc.rate:                   529.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2163618.771 ops/s
[info]                  ·gc.alloc.rate:                   527.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2154212.235 ops/s
[info]                  ·gc.alloc.rate:                   525.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2166535.913 ops/s
[info]                  ·gc.alloc.rate:                   528.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2177347.734 ops/s
[info]                  ·gc.alloc.rate:                   531.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter":
[info]   2166225.774 ±(99.9%) 32507.846 ops/s [Average]
[info]   (min, avg, max) = (2154212.235, 2166225.774, 2177347.734), stdev = 8442.184
[info]   CI (99.9%): [2133717.927, 2198733.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate":
[info]   528.445 ±(99.9%) 8.053 MB/sec [Average]
[info]   (min, avg, max) = (525.472, 528.445, 531.227), stdev = 2.091
[info]   CI (99.9%): [520.391, 536.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.076), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   528.797 ±(99.9%) 696.477 MB/sec [Average]
[info]   (min, avg, max) = (330.392, 528.797, 661.431), stdev = 180.873
[info]   CI (99.9%): [≈ 0, 1225.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   384.338 ±(99.9%) 507.109 B/op [Average]
[info]   (min, avg, max) = (240.004, 384.338, 482.755), stdev = 131.695
[info]   CI (99.9%): [≈ 0, 891.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce
[info] # Run progress: 86.51% complete, ETA 00:04:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206893.629 ops/s
[info] # Warmup Iteration   2: 308721.588 ops/s
[info] # Warmup Iteration   3: 309862.723 ops/s
[info] # Warmup Iteration   4: 306420.338 ops/s
[info] # Warmup Iteration   5: 308673.277 ops/s
[info] Iteration   1: 313416.331 ops/s
[info]                  ·gc.alloc.rate:                   1067.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4952.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 311865.859 ops/s
[info]                  ·gc.alloc.rate:                   1061.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4997.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 312516.099 ops/s
[info]                  ·gc.alloc.rate:                   1064.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6689.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 312605.259 ops/s
[info]                  ·gc.alloc.rate:                   1064.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5040.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 310018.307 ops/s
[info]                  ·gc.alloc.rate:                   1055.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5103.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce":
[info]   312084.371 ±(99.9%) 4926.793 ops/s [Average]
[info]   (min, avg, max) = (310018.307, 312084.371, 313416.331), stdev = 1279.472
[info]   CI (99.9%): [307157.579, 317011.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate":
[info]   1062.591 ±(99.9%) 16.687 MB/sec [Average]
[info]   (min, avg, max) = (1055.566, 1062.591, 1067.052), stdev = 4.333
[info]   CI (99.9%): [1045.904, 1079.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.420 ±(99.9%) 0.572 B/op [Average]
[info]   (min, avg, max) = (0.314, 0.420, 0.630), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1061.968 ±(99.9%) 573.568 MB/sec [Average]
[info]   (min, avg, max) = (985.910, 1061.968, 1328.063), stdev = 148.954
[info]   CI (99.9%): [488.400, 1635.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5356.530 ±(99.9%) 2877.091 B/op [Average]
[info]   (min, avg, max) = (4952.409, 5356.530, 6689.405), stdev = 747.171
[info]   CI (99.9%): [2479.439, 8233.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson
[info] # Run progress: 87.30% complete, ETA 00:04:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179653.987 ops/s
[info] # Warmup Iteration   2: 336641.721 ops/s
[info] # Warmup Iteration   3: 354476.909 ops/s
[info] # Warmup Iteration   4: 350318.097 ops/s
[info] # Warmup Iteration   5: 362959.516 ops/s
[info] Iteration   1: 354948.977 ops/s
[info]                  ·gc.alloc.rate:                   375.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1436.992 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 359760.169 ops/s
[info]                  ·gc.alloc.rate:                   380.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1417.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 359910.257 ops/s
[info]                  ·gc.alloc.rate:                   380.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2825.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 359450.803 ops/s
[info]                  ·gc.alloc.rate:                   379.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1414.555 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 349968.994 ops/s
[info]                  ·gc.alloc.rate:                   369.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1452.861 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson":
[info]   356807.840 ±(99.9%) 16734.988 ops/s [Average]
[info]   (min, avg, max) = (349968.994, 356807.840, 359910.257), stdev = 4346.023
[info]   CI (99.9%): [340072.852, 373542.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate":
[info]   377.158 ±(99.9%) 17.715 MB/sec [Average]
[info]   (min, avg, max) = (369.937, 377.158, 380.440), stdev = 4.601
[info]   CI (99.9%): [359.443, 394.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm":
[info]   1664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1664.001, 1664.001), stdev = 0.001
[info]   CI (99.9%): [1664.001, 1664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.794 ±(99.9%) 6.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.794, 3.868), stdev = 1.719
[info]   CI (99.9%): [≈ 0, 7.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3.523 ±(99.9%) 29.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.523, 17.158), stdev = 7.623
[info]   CI (99.9%): [≈ 0, 32.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   388.001 ±(99.9%) 555.378 MB/sec [Average]
[info]   (min, avg, max) = (322.996, 388.001, 646.005), stdev = 144.230
[info]   CI (99.9%): [≈ 0, 943.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1709.548 ±(99.9%) 2403.034 B/op [Average]
[info]   (min, avg, max) = (1414.555, 1709.548, 2825.557), stdev = 624.060
[info]   CI (99.9%): [≈ 0, 4112.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter
[info] # Run progress: 88.10% complete, ETA 00:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 764132.136 ops/s
[info] # Warmup Iteration   2: 960027.683 ops/s
[info] # Warmup Iteration   3: 975572.070 ops/s
[info] # Warmup Iteration   4: 982867.598 ops/s
[info] # Warmup Iteration   5: 976387.445 ops/s
[info] Iteration   1: 982598.697 ops/s
[info]                  ·gc.alloc.rate:                   828.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1053.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 982850.848 ops/s
[info]                  ·gc.alloc.rate:                   829.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1582.996 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 981207.894 ops/s
[info]                  ·gc.alloc.rate:                   827.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1591.426 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 958843.816 ops/s
[info]                  ·gc.alloc.rate:                   808.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1089.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 962389.621 ops/s
[info]                  ·gc.alloc.rate:                   811.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1088.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter":
[info]   973578.175 ±(99.9%) 45879.658 ops/s [Average]
[info]   (min, avg, max) = (958843.816, 973578.175, 982850.848), stdev = 11914.802
[info]   CI (99.9%): [927698.517, 1019457.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate":
[info]   821.369 ±(99.9%) 38.974 MB/sec [Average]
[info]   (min, avg, max) = (808.888, 821.369, 829.335), stdev = 10.121
[info]   CI (99.9%): [782.394, 860.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.064, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.162 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (0.133, 0.162, 0.171), stdev = 0.016
[info]   CI (99.9%): [0.100, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   793.457 ±(99.9%) 692.373 MB/sec [Average]
[info]   (min, avg, max) = (657.264, 793.457, 992.204), stdev = 179.807
[info]   CI (99.9%): [101.084, 1485.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1281.173 ±(99.9%) 1077.321 B/op [Average]
[info]   (min, avg, max) = (1053.099, 1281.173, 1591.426), stdev = 279.777
[info]   CI (99.9%): [203.852, 2358.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc
[info] # Run progress: 88.89% complete, ETA 00:03:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739308.222 ops/s
[info] # Warmup Iteration   2: 916663.363 ops/s
[info] # Warmup Iteration   3: 932831.723 ops/s
[info] # Warmup Iteration   4: 934012.652 ops/s
[info] # Warmup Iteration   5: 934649.849 ops/s
[info] Iteration   1: 936223.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 922892.147 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 915394.000 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 918125.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 932759.358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc":
[info]   925078.842 ±(99.9%) 34981.211 ops/s [Average]
[info]   (min, avg, max) = (915394.000, 925078.842, 936223.186), stdev = 9084.509
[info]   CI (99.9%): [890097.631, 960060.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay
[info] # Run progress: 89.68% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264267.045 ops/s
[info] # Warmup Iteration   2: 329458.441 ops/s
[info] # Warmup Iteration   3: 330423.715 ops/s
[info] # Warmup Iteration   4: 333534.890 ops/s
[info] # Warmup Iteration   5: 327141.891 ops/s
[info] Iteration   1: 327898.337 ops/s
[info]                  ·gc.alloc.rate:                   349.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1571.424 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 330481.413 ops/s
[info]                  ·gc.alloc.rate:                   352.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1559.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 330105.776 ops/s
[info]                  ·gc.alloc.rate:                   352.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1552.966 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 330940.004 ops/s
[info]                  ·gc.alloc.rate:                   353.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1549.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 331115.902 ops/s
[info]                  ·gc.alloc.rate:                   353.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3096.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay":
[info]   330108.286 ±(99.9%) 4994.773 ops/s [Average]
[info]   (min, avg, max) = (327898.337, 330108.286, 331115.902), stdev = 1297.127
[info]   CI (99.9%): [325113.513, 335103.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate":
[info]   352.288 ±(99.9%) 5.333 MB/sec [Average]
[info]   (min, avg, max) = (349.927, 352.288, 353.380), stdev = 1.385
[info]   CI (99.9%): [346.955, 357.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   0.779 ±(99.9%) 6.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.771), stdev = 1.673
[info]   CI (99.9%): [≈ 0, 7.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   3.740 ±(99.9%) 30.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.740, 18.106), stdev = 8.031
[info]   CI (99.9%): [≈ 0, 34.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   391.451 ±(99.9%) 559.437 MB/sec [Average]
[info]   (min, avg, max) = (325.629, 391.451, 651.339), stdev = 145.284
[info]   CI (99.9%): [≈ 0, 950.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   1865.831 ±(99.9%) 2649.364 B/op [Average]
[info]   (min, avg, max) = (1549.039, 1865.831, 3096.526), stdev = 688.031
[info]   CI (99.9%): [≈ 0, 4515.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce
[info] # Run progress: 90.48% complete, ETA 00:03:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1316660.390 ops/s
[info] # Warmup Iteration   2: 1976475.106 ops/s
[info] # Warmup Iteration   3: 2020311.404 ops/s
[info] # Warmup Iteration   4: 2006787.250 ops/s
[info] # Warmup Iteration   5: 2010597.533 ops/s
[info] Iteration   1: 2024456.506 ops/s
[info]                  ·gc.alloc.rate:                   1398.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1030.758 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2021762.054 ops/s
[info]                  ·gc.alloc.rate:                   1397.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1038.424 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2015833.353 ops/s
[info]                  ·gc.alloc.rate:                   1393.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1047.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2012667.072 ops/s
[info]                  ·gc.alloc.rate:                   1391.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1052.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2014135.901 ops/s
[info]                  ·gc.alloc.rate:                   1392.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1319.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce":
[info]   2017770.977 ±(99.9%) 19600.780 ops/s [Average]
[info]   (min, avg, max) = (2012667.072, 2017770.977, 2024456.506), stdev = 5090.260
[info]   CI (99.9%): [1998170.197, 2037371.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate":
[info]   1394.572 ±(99.9%) 13.254 MB/sec [Average]
[info]   (min, avg, max) = (1391.181, 1394.572, 1398.992), stdev = 3.442
[info]   CI (99.9%): [1381.319, 1407.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.081 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (0.065, 0.081, 0.097), stdev = 0.011
[info]   CI (99.9%): [0.037, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1406.941 ±(99.9%) 606.484 MB/sec [Average]
[info]   (min, avg, max) = (1325.388, 1406.941, 1688.337), stdev = 157.502
[info]   CI (99.9%): [800.458, 2013.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1097.764 ±(99.9%) 478.497 B/op [Average]
[info]   (min, avg, max) = (1030.758, 1097.764, 1319.540), stdev = 124.264
[info]   CI (99.9%): [619.267, 1576.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson
[info] # Run progress: 91.27% complete, ETA 00:02:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 928299.334 ops/s
[info] # Warmup Iteration   2: 2645244.008 ops/s
[info] # Warmup Iteration   3: 3024603.046 ops/s
[info] # Warmup Iteration   4: 3054812.313 ops/s
[info] # Warmup Iteration   5: 3042789.550 ops/s
[info] Iteration   1: 3025686.348 ops/s
[info]                  ·gc.alloc.rate:                   1107.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 676.992 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3054656.953 ops/s
[info]                  ·gc.alloc.rate:                   1117.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 506.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3037206.332 ops/s
[info]                  ·gc.alloc.rate:                   1111.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684.121 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3011081.134 ops/s
[info]                  ·gc.alloc.rate:                   1101.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2976840.431 ops/s
[info]                  ·gc.alloc.rate:                   1089.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson":
[info]   3021094.239 ±(99.9%) 113345.792 ops/s [Average]
[info]   (min, avg, max) = (2976840.431, 3021094.239, 3054656.953), stdev = 29435.542
[info]   CI (99.9%): [2907748.447, 3134440.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate":
[info]   1105.452 ±(99.9%) 41.817 MB/sec [Average]
[info]   (min, avg, max) = (1089.173, 1105.452, 1117.960), stdev = 10.860
[info]   CI (99.9%): [1063.635, 1147.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm":
[info]   576.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (576.000, 576.000, 576.000), stdev = 0.001
[info]   CI (99.9%): [576.000, 576.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.043 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.043, 0.065), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   1120.244 ±(99.9%) 669.823 MB/sec [Average]
[info]   (min, avg, max) = (982.937, 1120.244, 1319.917), stdev = 173.951
[info]   CI (99.9%): [450.421, 1790.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   583.547 ±(99.9%) 342.577 B/op [Average]
[info]   (min, avg, max) = (506.433, 583.547, 684.121), stdev = 88.966
[info]   CI (99.9%): [240.970, 926.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter
[info] # Run progress: 92.06% complete, ETA 00:02:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2521686.832 ops/s
[info] # Warmup Iteration   2: 3196104.843 ops/s
[info] # Warmup Iteration   3: 3283718.635 ops/s
[info] # Warmup Iteration   4: 3261069.114 ops/s
[info] # Warmup Iteration   5: 3252945.443 ops/s
[info] Iteration   1: 3268784.565 ops/s
[info]                  ·gc.alloc.rate:                   647.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3271488.459 ops/s
[info]                  ·gc.alloc.rate:                   648.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 315.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3259140.673 ops/s
[info]                  ·gc.alloc.rate:                   645.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 317.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3246301.372 ops/s
[info]                  ·gc.alloc.rate:                   643.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3244186.760 ops/s
[info]                  ·gc.alloc.rate:                   642.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 320.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter":
[info]   3257980.366 ±(99.9%) 48217.998 ops/s [Average]
[info]   (min, avg, max) = (3244186.760, 3257980.366, 3271488.459), stdev = 12522.061
[info]   CI (99.9%): [3209762.368, 3306198.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate":
[info]   645.713 ±(99.9%) 9.549 MB/sec [Average]
[info]   (min, avg, max) = (642.994, 645.713, 648.469), stdev = 2.480
[info]   CI (99.9%): [636.164, 655.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.048, 0.061), stdev = 0.009
[info]   CI (99.9%): [0.015, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   658.367 ±(99.9%) 7.631 MB/sec [Average]
[info]   (min, avg, max) = (656.513, 658.367, 661.298), stdev = 1.982
[info]   CI (99.9%): [650.737, 665.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   318.121 ±(99.9%) 8.274 B/op [Average]
[info]   (min, avg, max) = (315.983, 318.121, 320.882), stdev = 2.149
[info]   CI (99.9%): [309.847, 326.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc
[info] # Run progress: 92.86% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2606060.526 ops/s
[info] # Warmup Iteration   2: 3303006.098 ops/s
[info] # Warmup Iteration   3: 3335546.527 ops/s
[info] # Warmup Iteration   4: 3339162.517 ops/s
[info] # Warmup Iteration   5: 3342604.171 ops/s
[info] Iteration   1: 3306026.069 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3350903.120 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3340350.903 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3355563.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3346188.334 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc":
[info]   3339806.387 ±(99.9%) 75886.999 ops/s [Average]
[info]   (min, avg, max) = (3306026.069, 3339806.387, 3355563.508), stdev = 19707.613
[info]   CI (99.9%): [3263919.388, 3415693.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay
[info] # Run progress: 93.65% complete, ETA 00:02:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2150691.788 ops/s
[info] # Warmup Iteration   2: 2817248.024 ops/s
[info] # Warmup Iteration   3: 2867145.508 ops/s
[info] # Warmup Iteration   4: 2862753.384 ops/s
[info] # Warmup Iteration   5: 2865189.405 ops/s
[info] Iteration   1: 2876225.194 ops/s
[info]                  ·gc.alloc.rate:                   1213.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540.173 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2856702.204 ops/s
[info]                  ·gc.alloc.rate:                   1204.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.293 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2858383.147 ops/s
[info]                  ·gc.alloc.rate:                   1205.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2865542.704 ops/s
[info]                  ·gc.alloc.rate:                   1208.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 735.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2862985.272 ops/s
[info]                  ·gc.alloc.rate:                   1207.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 738.946 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay":
[info]   2863967.704 ±(99.9%) 29681.611 ops/s [Average]
[info]   (min, avg, max) = (2856702.204, 2863967.704, 2876225.194), stdev = 7708.220
[info]   CI (99.9%): [2834286.093, 2893649.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate":
[info]   1208.027 ±(99.9%) 12.492 MB/sec [Average]
[info]   (min, avg, max) = (1204.943, 1208.027, 1213.134), stdev = 3.244
[info]   CI (99.9%): [1195.536, 1220.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.048, 0.069), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   1198.690 ±(99.9%) 724.137 MB/sec [Average]
[info]   (min, avg, max) = (986.901, 1198.690, 1344.265), stdev = 188.056
[info]   CI (99.9%): [474.553, 1922.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   658.954 ±(99.9%) 400.395 B/op [Average]
[info]   (min, avg, max) = (540.173, 658.954, 738.946), stdev = 103.981
[info]   CI (99.9%): [258.560, 1059.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 94.44% complete, ETA 00:01:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5748.842 ops/s
[info] # Warmup Iteration   2: 9007.468 ops/s
[info] # Warmup Iteration   3: 11208.465 ops/s
[info] # Warmup Iteration   4: 10981.977 ops/s
[info] # Warmup Iteration   5: 11449.710 ops/s
[info] Iteration   1: 12490.826 ops/s
[info]                  ·gc.alloc.rate:                   1817.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              229064.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209269.518 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 12438.358 ops/s
[info]                  ·gc.alloc.rate:                   1810.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              229117.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 254095.534 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12498.583 ops/s
[info]                  ·gc.alloc.rate:                   1819.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              229120.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212070.675 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12386.309 ops/s
[info]                  ·gc.alloc.rate:                   1802.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              229120.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 214666.104 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12356.483 ops/s
[info]                  ·gc.alloc.rate:                   1798.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              229115.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 258941.173 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12434.112 ±(99.9%) 241.261 ops/s [Average]
[info]   (min, avg, max) = (12356.483, 12434.112, 12498.583), stdev = 62.655
[info]   CI (99.9%): [12192.851, 12675.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1809.786 ±(99.9%) 34.219 MB/sec [Average]
[info]   (min, avg, max) = (1798.898, 1809.786, 1819.174), stdev = 8.887
[info]   CI (99.9%): [1775.568, 1844.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229107.420 ±(99.9%) 93.683 B/op [Average]
[info]   (min, avg, max) = (229064.035, 229107.420, 229120.033), stdev = 24.329
[info]   CI (99.9%): [229013.737, 229201.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.195 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.123, 0.195, 0.269), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24.698 ±(99.9%) 26.672 B/op [Average]
[info]   (min, avg, max) = (15.684, 24.698, 34.282), stdev = 6.927
[info]   CI (99.9%): [≈ 0, 51.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1814.866 ±(99.9%) 724.813 MB/sec [Average]
[info]   (min, avg, max) = (1660.462, 1814.866, 2033.074), stdev = 188.232
[info]   CI (99.9%): [1090.054, 2539.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   229808.601 ±(99.9%) 94406.470 B/op [Average]
[info]   (min, avg, max) = (209269.518, 229808.601, 258941.173), stdev = 24517.060
[info]   CI (99.9%): [135402.131, 324215.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson
[info] # Run progress: 95.24% complete, ETA 00:01:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5267.672 ops/s
[info] # Warmup Iteration   2: 16654.512 ops/s
[info] # Warmup Iteration   3: 16973.442 ops/s
[info] # Warmup Iteration   4: 16963.302 ops/s
[info] # Warmup Iteration   5: 16675.036 ops/s
[info] Iteration   1: 17018.153 ops/s
[info]                  ·gc.alloc.rate:                   240.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23654.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16980.713 ops/s
[info]                  ·gc.alloc.rate:      239.775 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16922.621 ops/s
[info]                  ·gc.alloc.rate:                   238.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              22212.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29982.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16911.044 ops/s
[info]                  ·gc.alloc.rate:                   238.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              22208.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30003.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16959.661 ops/s
[info]                  ·gc.alloc.rate:                   239.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              22208.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30133.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson":
[info]   16958.439 ±(99.9%) 167.764 ops/s [Average]
[info]   (min, avg, max) = (16911.044, 16958.439, 17018.153), stdev = 43.568
[info]   CI (99.9%): [16790.674, 17126.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   239.332 ±(99.9%) 2.613 MB/sec [Average]
[info]   (min, avg, max) = (238.585, 239.332, 240.238), stdev = 0.679
[info]   CI (99.9%): [236.718, 241.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   22215.333 ±(99.9%) 31.383 B/op [Average]
[info]   (min, avg, max) = (22208.024, 22215.333, 22224.030), stdev = 8.150
[info]   CI (99.9%): [22183.950, 22246.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.520), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 0.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   10.067 ±(99.9%) 82.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.067, 48.396), stdev = 21.443
[info]   CI (99.9%): [≈ 0, 92.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   245.003 ±(99.9%) 539.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 245.003, 324.614), stdev = 140.039
[info]   CI (99.9%): [≈ 0, 784.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   22754.811 ±(99.9%) 50125.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22754.811, 30133.270), stdev = 13017.440
[info]   CI (99.9%): [≈ 0, 72880.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter
[info] # Run progress: 96.03% complete, ETA 00:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17327.168 ops/s
[info] # Warmup Iteration   2: 26296.302 ops/s
[info] # Warmup Iteration   3: 36859.530 ops/s
[info] # Warmup Iteration   4: 37604.994 ops/s
[info] # Warmup Iteration   5: 37564.585 ops/s
[info] Iteration   1: 37746.928 ops/s
[info]                  ·gc.alloc.rate:                   349.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10664.614 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 35748.547 ops/s
[info]                  ·gc.alloc.rate:                   331.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29000.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 37744.343 ops/s
[info]                  ·gc.alloc.rate:                   349.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13692.898 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 37712.122 ops/s
[info]                  ·gc.alloc.rate:                   349.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13704.514 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37861.186 ops/s
[info]                  ·gc.alloc.rate:                   350.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13622.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter":
[info]   37362.625 ±(99.9%) 3481.245 ops/s [Average]
[info]   (min, avg, max) = (35748.547, 37362.625, 37861.186), stdev = 904.068
[info]   CI (99.9%): [33881.380, 40843.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   346.011 ±(99.9%) 31.908 MB/sec [Average]
[info]   (min, avg, max) = (331.223, 346.011, 350.676), stdev = 8.286
[info]   CI (99.9%): [314.103, 377.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   14576.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.011, 14576.012), stdev = 0.001
[info]   CI (99.9%): [14576.010, 14576.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.670 ±(99.9%) 5.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.288), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   29.462 ±(99.9%) 248.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.462, 144.714), stdev = 64.438
[info]   CI (99.9%): [≈ 0, 277.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   379.813 ±(99.9%) 612.975 MB/sec [Average]
[info]   (min, avg, max) = (255.698, 379.813, 658.995), stdev = 159.188
[info]   CI (99.9%): [≈ 0, 992.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   16137.021 ±(99.9%) 28139.986 B/op [Average]
[info]   (min, avg, max) = (10664.614, 16137.021, 29000.174), stdev = 7307.865
[info]   CI (99.9%): [≈ 0, 44277.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay
[info] # Run progress: 96.83% complete, ETA 00:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 888.340 ops/s
[info] # Warmup Iteration   2: 2956.710 ops/s
[info] # Warmup Iteration   3: 2845.536 ops/s
[info] # Warmup Iteration   4: 3147.377 ops/s
[info] # Warmup Iteration   5: 3510.612 ops/s
[info] Iteration   1: 3498.806 ops/s
[info]                  ·gc.alloc.rate:                   1110.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              499592.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445345.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3498.541 ops/s
[info]                  ·gc.alloc.rate:                   1110.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              499592.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 597388.727 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3451.154 ops/s
[info]                  ·gc.alloc.rate:                   1095.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              499592.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 457005.386 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3522.621 ops/s
[info]                  ·gc.alloc.rate:                   1117.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              499592.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 449155.923 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3500.382 ops/s
[info]                  ·gc.alloc.rate:                   1110.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              499592.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1008.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 453604.214 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay":
[info]   3494.301 ±(99.9%) 100.761 ops/s [Average]
[info]   (min, avg, max) = (3451.154, 3494.301, 3522.621), stdev = 26.167
[info]   CI (99.9%): [3393.540, 3595.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1109.017 ±(99.9%) 31.917 MB/sec [Average]
[info]   (min, avg, max) = (1095.350, 1109.017, 1117.989), stdev = 8.289
[info]   CI (99.9%): [1077.101, 1140.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   499592.119 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (499592.116, 499592.119, 499592.126), stdev = 0.004
[info]   CI (99.9%): [499592.103, 499592.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   20.609 ±(99.9%) 78.122 B/op [Average]
[info]   (min, avg, max) = (9.299, 20.609, 56.174), stdev = 20.288
[info]   CI (99.9%): [≈ 0, 98.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1066.683 ±(99.9%) 562.968 MB/sec [Average]
[info]   (min, avg, max) = (989.781, 1066.683, 1327.907), stdev = 146.201
[info]   CI (99.9%): [503.715, 1629.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   480499.891 ±(99.9%) 252185.322 B/op [Average]
[info]   (min, avg, max) = (445345.207, 480499.891, 597388.727), stdev = 65491.727
[info]   CI (99.9%): [228314.569, 732685.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson
[info] # Run progress: 97.62% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5adb01ff/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 25898.209 ops/s
[info] # Warmup Iteration   2: 57583.406 ops/s
[info] # Warmup Iteration   3: 57263.399 ops/s
[info] # Warmup Iteration   4: 57522.008 ops/s
[info] # Warmup Iteration   5: 57764.802 ops/s
[info] Iteration   1: 57717.009 ops/s
[info]                  ·gc.alloc.rate:                   736.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17817.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57904.304 ops/s
[info]                  ·gc.alloc.rate:                   739.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17832.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 57684.906 ops/s
[info]                  ·gc.alloc.rate:                   736.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26996.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 57545.855 ops/s
[info]                  ·gc.alloc.rate:                   734.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18126.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57979.401 ops/s
[info]                  ·gc.alloc.rate:                   740.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18063.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson":
[info]   57766.295 ±(99.9%) 672.783 ops/s [Average]
[info]   (min, avg, max) = (57545.855, 57766.295, 57979.401), stdev = 174.720
[info]   CI (99.9%): [57093.512, 58439.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   737.579 ±(99.9%) 8.599 MB/sec [Average]
[info]   (min, avg, max) = (734.760, 737.579, 740.302), stdev = 2.233
[info]   CI (99.9%): [728.980, 746.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   20100.006 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (20099.954, 20100.006, 20100.058), stdev = 0.037
[info]   CI (99.9%): [20099.862, 20100.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1.929 ±(99.9%) 3.318 B/op [Average]
[info]   (min, avg, max) = (0.565, 1.929, 2.838), stdev = 0.862
[info]   CI (99.9%): [≈ 0, 5.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   725.275 ±(99.9%) 568.550 MB/sec [Average]
[info]   (min, avg, max) = (653.264, 725.275, 989.258), stdev = 147.651
[info]   CI (99.9%): [156.725, 1293.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   19767.318 ±(99.9%) 15569.832 B/op [Average]
[info]   (min, avg, max) = (17817.728, 19767.318, 26996.302), stdev = 4043.436
[info]   CI (99.9%): [4197.486, 35337.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter
[info] # Run progress: 98.41% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72808.338 ops/s
[info] # Warmup Iteration   2: 87139.346 ops/s
[info] # Warmup Iteration   3: 88426.027 ops/s
[info] # Warmup Iteration   4: 88514.742 ops/s
[info] # Warmup Iteration   5: 88705.411 ops/s
[info] Iteration   1: 88916.613 ops/s
[info]                  ·gc.alloc.rate:                   581.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5800.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 88546.329 ops/s
[info]                  ·gc.alloc.rate:                   578.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11650.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 88407.794 ops/s
[info]                  ·gc.alloc.rate:                   577.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11679.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 88811.490 ops/s
[info]                  ·gc.alloc.rate:                   580.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11657.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 88716.406 ops/s
[info]                  ·gc.alloc.rate:                   579.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5843.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter":
[info]   88679.726 ±(99.9%) 785.768 ops/s [Average]
[info]   (min, avg, max) = (88407.794, 88679.726, 88916.613), stdev = 204.061
[info]   CI (99.9%): [87893.959, 89465.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   579.605 ±(99.9%) 5.171 MB/sec [Average]
[info]   (min, avg, max) = (577.747, 579.605, 581.184), stdev = 1.343
[info]   CI (99.9%): [574.434, 584.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   10288.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.005, 10288.005, 10288.005), stdev = 0.001
[info]   CI (99.9%): [10288.004, 10288.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.888 ±(99.9%) 3.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.888, 1.850), stdev = 0.852
[info]   CI (99.9%): [≈ 0, 4.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   525.213 ±(99.9%) 691.464 MB/sec [Average]
[info]   (min, avg, max) = (327.695, 525.213, 657.648), stdev = 179.571
[info]   CI (99.9%): [≈ 0, 1216.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   9326.193 ±(99.9%) 12318.047 B/op [Average]
[info]   (min, avg, max) = (5800.794, 9326.193, 11679.962), stdev = 3198.958
[info]   CI (99.9%): [≈ 0, 21644.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 99.21% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84393.444 ops/s
[info] # Warmup Iteration   2: 100978.478 ops/s
[info] # Warmup Iteration   3: 101409.613 ops/s
[info] # Warmup Iteration   4: 101411.019 ops/s
[info] # Warmup Iteration   5: 101745.545 ops/s
[info] Iteration   1: 101732.839 ops/s
[info]                  ·gc.alloc.rate:      14.478 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 101526.352 ops/s
[info]                  ·gc.alloc.rate:      14.446 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 101342.604 ops/s
[info]                  ·gc.alloc.rate:      14.421 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 101579.800 ops/s
[info]                  ·gc.alloc.rate:      14.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101559.018 ops/s
[info]                  ·gc.alloc.rate:      14.455 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc":
[info]   101548.122 ±(99.9%) 537.555 ops/s [Average]
[info]   (min, avg, max) = (101342.604, 101548.122, 101732.839), stdev = 139.601
[info]   CI (99.9%): [101010.567, 102085.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   14.451 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (14.421, 14.451, 14.478), stdev = 0.021
[info]   CI (99.9%): [14.372, 14.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   224.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.004, 224.004, 224.004), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:33:00
[info] Benchmark                                                                               Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    790990.510 ±   25151.447   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      2090.429 ±      65.514  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4160.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.121 ±       0.154  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.240 ±       0.306    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      2097.294 ±     591.356  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4175.822 ±    1316.655    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        29.000                    ms
[info] AdtBenchmark.readJackson                                                               thrpt    5   1687309.934 ±   29160.750   ops/s
[info] AdtBenchmark.readJackson:·gc.alloc.rate                                                thrpt    5      1200.493 ±      20.679  MB/sec
[info] AdtBenchmark.readJackson:·gc.alloc.rate.norm                                           thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.100 ±       0.143  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.093 ±       0.134    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1206.914 ±     691.661  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      1125.682 ±     635.544    B/op
[info] AdtBenchmark.readJackson:·gc.count                                                     thrpt    5        18.000                counts
[info] AdtBenchmark.readJackson:·gc.time                                                      thrpt    5        21.000                    ms
[info] AdtBenchmark.readJsoniter                                                              thrpt    5   4073127.822 ±  132420.414   ops/s
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate                                               thrpt    5       269.097 ±       8.820  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                      thrpt    5         0.613 ±       5.252  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.240 ±       2.060    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                  thrpt    5       250.124 ±     553.096  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                             thrpt    5        96.886 ±     214.455    B/op
[info] AdtBenchmark.readJsoniter:·gc.count                                                    thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniter:·gc.time                                                     thrpt    5         8.000                    ms
[info] AdtBenchmark.readPlay                                                                  thrpt    5    183981.851 ±    2726.675   ops/s
[info] AdtBenchmark.readPlay:·gc.alloc.rate                                                   thrpt    5      1540.881 ±      23.034  MB/sec
[info] AdtBenchmark.readPlay:·gc.alloc.rate.norm                                              thrpt    5     13184.002 ±       0.001    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space                                          thrpt    5         0.112 ±       0.134  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.962 ±       1.148    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                      thrpt    5      1549.971 ±     693.951  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5     13264.362 ±    6037.095    B/op
[info] AdtBenchmark.readPlay:·gc.count                                                        thrpt    5        23.000                counts
[info] AdtBenchmark.readPlay:·gc.time                                                         thrpt    5        30.000                    ms
[info] AdtBenchmark.writeJackson                                                              thrpt    5   2090762.554 ±   18502.699   ops/s
[info] AdtBenchmark.writeJackson:·gc.alloc.rate                                               thrpt    5       743.774 ±       6.705  MB/sec
[info] AdtBenchmark.writeJackson:·gc.alloc.rate.norm                                          thrpt    5       560.000 ±       0.001    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.075 ±       0.134  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.056 ±       0.101    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                                  thrpt    5       793.317 ±     696.261  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5       597.423 ±     526.898    B/op
[info] AdtBenchmark.writeJackson:·gc.count                                                    thrpt    5        12.000                counts
[info] AdtBenchmark.writeJackson:·gc.time                                                     thrpt    5        14.000                    ms
[info] AdtBenchmark.writeJsoniter                                                             thrpt    5  13411373.679 ±  143821.438   ops/s
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate                                              thrpt    5       681.840 ±       7.676  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm                                         thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5         0.067 ±       0.183  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.008 ±       0.021    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5       658.540 ±       9.911  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5        77.267 ±       2.014    B/op
[info] AdtBenchmark.writeJsoniter:·gc.count                                                   thrpt    5        10.000                counts
[info] AdtBenchmark.writeJsoniter:·gc.time                                                    thrpt    5         9.000                    ms
[info] AdtBenchmark.writePlay                                                                 thrpt    5    317216.968 ±    3593.082   ops/s
[info] AdtBenchmark.writePlay:·gc.alloc.rate                                                  thrpt    5      1035.038 ±      11.874  MB/sec
[info] AdtBenchmark.writePlay:·gc.alloc.rate.norm                                             thrpt    5      5136.001 ±       0.001    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space                                         thrpt    5         0.087 ±       0.132  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.434 ±       0.655    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                     thrpt    5      1067.886 ±     597.153  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      5299.364 ±    2977.355    B/op
[info] AdtBenchmark.writePlay:·gc.count                                                       thrpt    5        16.000                counts
[info] AdtBenchmark.writePlay:·gc.time                                                        thrpt    5        19.000                    ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1622180.433 ±   72525.474   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2530.769 ±     113.272  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.125 ±       0.179  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.121 ±       0.173    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2579.080 ±     710.268  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2501.960 ±     615.067    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        38.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        36.000                    ms
[info] AnyRefsBenchmark.readJackson                                                           thrpt    5   2589738.145 ±   51933.088   ops/s
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1816.303 ±      36.413  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.125 ±       0.113  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.076 ±       0.068    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      1828.111 ±     720.976  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      1111.027 ±     430.221    B/op
[info] AnyRefsBenchmark.readJackson:·gc.count                                                 thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJackson:·gc.time                                                  thrpt    5        36.000                    ms
[info] AnyRefsBenchmark.readJsoniter                                                          thrpt    5  11719639.453 ±   79511.397   ops/s
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5      1489.022 ±      10.449  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.108 ±       0.105  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.015 ±       0.014    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5      1481.414 ±     712.792  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       198.986 ±      96.061    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.count                                                thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        20.000                    ms
[info] AnyRefsBenchmark.readPlay                                                              thrpt    5    686524.635 ±   10600.076   ops/s
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1814.191 ±      27.886  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.079 ±       0.067  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.181 ±       0.155    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1826.172 ±     719.029  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      4188.460 ±    1695.229    B/op
[info] AnyRefsBenchmark.readPlay:·gc.count                                                    thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readPlay:·gc.time                                                     thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   1871750.565 ±   21474.835   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1731.254 ±      19.071  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.108 ±       0.236  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.091 ±       0.200    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1751.174 ±     602.446  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1472.915 ±     515.944    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        26.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJackson                                                          thrpt    5   6406315.248 ±  139642.382   ops/s
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1758.174 ±      38.439  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.100 ±       0.154  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.025 ±       0.038    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5      1757.556 ±     588.382  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       431.805 ±     141.439    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.count                                                thrpt    5        26.000                counts
[info] AnyRefsBenchmark.writeJackson:·gc.time                                                 thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.writeJsoniter                                                         thrpt    5  23211317.608 ±  345570.982   ops/s
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       707.735 ±      10.612  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.062 ±       0.188  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.004 ±       0.013    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5       725.225 ±     572.080  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        49.183 ±      38.693    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeJsoniter:·gc.time                                                thrpt    5        10.000                    ms
[info] AnyRefsBenchmark.writeJsoniterPrealloc                                                 thrpt    5  22220899.937 ±  305342.619   ops/s
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count                                       thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlay                                                             thrpt    5   1173258.957 ±   31707.932   ops/s
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      1771.093 ±      47.327  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      2376.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.104 ±       0.127  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.139 ±       0.168    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      1758.969 ±     595.366  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2359.309 ±     768.940    B/op
[info] AnyRefsBenchmark.writePlay:·gc.count                                                   thrpt    5        26.000                counts
[info] AnyRefsBenchmark.writePlay:·gc.time                                                    thrpt    5        30.000                    ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5    955868.883 ±   23938.717   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      3104.062 ±      77.960  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5112.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.154 ±       0.122  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.253 ±       0.196    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      3127.764 ±     569.303  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5151.279 ±     953.393    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        46.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        42.000                    ms
[info] ArraysBenchmark.readJackson                                                            thrpt    5   1759217.799 ±   52654.200   ops/s
[info] ArraysBenchmark.readJackson:·gc.alloc.rate                                             thrpt    5      1654.133 ±      49.573  MB/sec
[info] ArraysBenchmark.readJackson:·gc.alloc.rate.norm                                        thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.108 ±       0.143  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.097 ±       0.131    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                thrpt    5      1622.675 ±     568.546  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1451.885 ±     509.132    B/op
[info] ArraysBenchmark.readJackson:·gc.count                                                  thrpt    5        24.000                counts
[info] ArraysBenchmark.readJackson:·gc.time                                                   thrpt    5        26.000                    ms
[info] ArraysBenchmark.readJsoniter                                                           thrpt    5   9910895.179 ±  352029.171   ops/s
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate                                            thrpt    5      2467.992 ±      88.041  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm                                       thrpt    5       392.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                   thrpt    5         0.096 ±       0.146  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.015 ±       0.023    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                               thrpt    5      2445.508 ±     596.394  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       388.398 ±      90.876    B/op
[info] ArraysBenchmark.readJsoniter:·gc.count                                                 thrpt    5        36.000                counts
[info] ArraysBenchmark.readJsoniter:·gc.time                                                  thrpt    5        30.000                    ms
[info] ArraysBenchmark.readPlay                                                               thrpt    5    339686.413 ±    8534.034   ops/s
[info] ArraysBenchmark.readPlay:·gc.alloc.rate                                                thrpt    5      2066.560 ±      52.375  MB/sec
[info] ArraysBenchmark.readPlay:·gc.alloc.rate.norm                                           thrpt    5      9576.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space                                       thrpt    5         0.100 ±       0.174  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.463 ±       0.806    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                   thrpt    5      2100.948 ±     557.444  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      9734.473 ±    2500.545    B/op
[info] ArraysBenchmark.readPlay:·gc.count                                                     thrpt    5        31.000                counts
[info] ArraysBenchmark.readPlay:·gc.time                                                      thrpt    5        36.000                    ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1108621.073 ±   31587.460   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2428.466 ±      67.477  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3448.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.100 ±       0.104  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.142 ±       0.149    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2442.443 ±     577.310  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      3468.648 ±     878.825    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        36.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        32.000                    ms
[info] ArraysBenchmark.writeJackson                                                           thrpt    5   3845008.044 ±   61001.778   ops/s
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate                                            thrpt    5      2188.853 ±      35.211  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate.norm                                       thrpt    5       896.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.117 ±       0.072  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.048 ±       0.029    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      2171.609 ±     717.802  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       888.947 ±     293.693    B/op
[info] ArraysBenchmark.writeJackson:·gc.count                                                 thrpt    5        32.000                counts
[info] ArraysBenchmark.writeJackson:·gc.time                                                  thrpt    5        40.000                    ms
[info] ArraysBenchmark.writeJsoniter                                                          thrpt    5  19123958.308 ±  155860.978   ops/s
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate                                           thrpt    5       874.694 ±       6.886  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm                                      thrpt    5        72.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.092 ±       0.091  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.008 ±       0.008    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5       861.332 ±     699.163  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        70.905 ±      57.662    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.count                                                thrpt    5        13.000                counts
[info] ArraysBenchmark.writeJsoniter:·gc.time                                                 thrpt    5        13.000                    ms
[info] ArraysBenchmark.writePlay                                                              thrpt    5    525349.357 ±   14830.396   ops/s
[info] ArraysBenchmark.writePlay:·gc.alloc.rate                                               thrpt    5      1815.614 ±      51.229  MB/sec
[info] ArraysBenchmark.writePlay:·gc.alloc.rate.norm                                          thrpt    5      5440.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.096 ±       0.108  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.287 ±       0.321    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1825.933 ±     701.582  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5471.000 ±    2101.543    B/op
[info] ArraysBenchmark.writePlay:·gc.count                                                    thrpt    5        27.000                counts
[info] ArraysBenchmark.writePlay:·gc.time                                                     thrpt    5        30.000                    ms
[info] BigIntArrayBenchmark.readCirce                                                         thrpt    5      1042.288 ±      34.882   ops/s
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1175.460 ±      39.387  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5   1774914.861 ±      30.974    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.111 ±       0.196  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5       168.506 ±     299.011    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1200.064 ±     702.175  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5   1812729.538 ± 1078841.439    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.count                                               thrpt    5        18.000                counts
[info] BigIntArrayBenchmark.readCirce:·gc.time                                                thrpt    5        19.000                    ms
[info] BigIntArrayBenchmark.readJackson                                                       thrpt    5      3200.322 ±      86.556   ops/s
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate                                        thrpt    5       911.467 ±      24.657  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                   thrpt    5    448336.129 ±       0.016    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.042 ±       0.150  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        20.464 ±      73.437    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       859.858 ±     698.726  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    422814.110 ±  340509.260    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.count                                             thrpt    5        13.000                counts
[info] BigIntArrayBenchmark.readJackson:·gc.time                                              thrpt    5        14.000                    ms
[info] BigIntArrayBenchmark.readJsoniter                                                      thrpt    5      2950.316 ±      24.207   ops/s
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5       418.030 ±       3.733  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5    223008.140 ±       0.019    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.012 ±       0.072  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         6.669 ±      38.274    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       462.058 ±     695.418  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    246539.831 ±  371595.853    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.count                                            thrpt    5         7.000                counts
[info] BigIntArrayBenchmark.readJsoniter:·gc.time                                             thrpt    5         8.000                    ms
[info] BigIntArrayBenchmark.writeJackson                                                      thrpt    5      1829.330 ±      60.950   ops/s
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate                                       thrpt    5      1396.572 ±      46.978  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                  thrpt    5   1201591.921 ±      20.897    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                              thrpt    5         0.087 ±       0.132  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        75.088 ±     111.758    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                          thrpt    5      1416.290 ±     593.581  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5   1218303.957 ±  495212.985    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.count                                            thrpt    5        21.000                counts
[info] BigIntArrayBenchmark.writeJackson:·gc.time                                             thrpt    5        24.000                    ms
[info] BigIntArrayBenchmark.writeJsoniter                                                     thrpt    5      2077.465 ±      62.278   ops/s
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5      1622.394 ±      48.631  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5   1229208.199 ±       0.030    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.098 ±       0.101  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5        74.175 ±      77.525    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5      1619.868 ±     571.985  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5   1226990.251 ±  418014.402    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.count                                           thrpt    5        24.000                counts
[info] BigIntArrayBenchmark.writeJsoniter:·gc.time                                            thrpt    5        22.000                    ms
[info] BigIntArrayBenchmark.writeJsoniterPrealloc                                             thrpt    5      2122.727 ±      51.888   ops/s
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                              thrpt    5      1448.237 ±      35.703  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5   1073872.192 ±       0.005    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                     thrpt    5         0.104 ±       0.113  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                thrpt    5        77.111 ±      83.080    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                 thrpt    5      1414.065 ±     584.204  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm            thrpt    5   1048425.440 ±  426336.588    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                   thrpt    5        21.000                counts
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time                                    thrpt    5        19.000                    ms
[info] BitSetsBenchmark.readJackson                                                           thrpt    5   2441846.918 ±   14887.531   ops/s
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1476.640 ±       9.240  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5       952.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.112 ±       0.122  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.072 ±       0.079    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      1483.357 ±     714.389  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       956.373 ±     462.252    B/op
[info] BitSetsBenchmark.readJackson:·gc.count                                                 thrpt    5        22.000                counts
[info] BitSetsBenchmark.readJackson:·gc.time                                                  thrpt    5        25.000                    ms
[info] BitSetsBenchmark.readJsoniter                                                          thrpt    5   5105757.217 ±  189772.705   ops/s
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5       674.663 ±      24.879  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.071 ±       0.166  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.022 ±       0.051    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5       660.024 ±      10.670  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       203.507 ±      10.555    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.count                                                thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniter:·gc.time                                                 thrpt    5         9.000                    ms
[info] BitSetsBenchmark.readPlay                                                              thrpt    5    415446.213 ±   10845.421   ops/s
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1948.959 ±      50.031  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      7384.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.117 ±       0.185  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.442 ±       0.698    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1896.844 ±     723.084  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      7188.170 ±    2809.673    B/op
[info] BitSetsBenchmark.readPlay:·gc.count                                                    thrpt    5        28.000                counts
[info] BitSetsBenchmark.readPlay:·gc.time                                                     thrpt    5        32.000                    ms
[info] BitSetsBenchmark.writeJackson                                                          thrpt    5   2728545.901 ±   68833.702   ops/s
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1442.144 ±      35.746  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.104 ±       0.113  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.060 ±       0.064    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5      1415.095 ±     583.786  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       816.465 ±     339.637    B/op
[info] BitSetsBenchmark.writeJackson:·gc.count                                                thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJackson:·gc.time                                                 thrpt    5        25.000                    ms
[info] BitSetsBenchmark.writeJsoniter                                                         thrpt    5   7151153.940 ±  270657.757   ops/s
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5      1090.373 ±      41.629  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.104 ±       0.150  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.023 ±       0.032    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5      1132.904 ±     700.960  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       249.457 ±     157.150    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        17.000                counts
[info] BitSetsBenchmark.writeJsoniter:·gc.time                                                thrpt    5        16.000                    ms
[info] BitSetsBenchmark.writePlay                                                             thrpt    5    714783.210 ±   48944.899   ops/s
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      2070.688 ±     142.239  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      4560.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.112 ±       0.107  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.248 ±       0.239    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      2101.315 ±     586.436  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      4627.046 ±    1210.905    B/op
[info] BitSetsBenchmark.writePlay:·gc.count                                                   thrpt    5        31.000                counts
[info] BitSetsBenchmark.writePlay:·gc.time                                                    thrpt    5        36.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    728648.462 ±   20631.693   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2377.323 ±      67.435  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5136.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.125 ±       0.113  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.270 ±       0.246    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2373.296 ±      34.014  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      5127.552 ±     178.814    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        35.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        33.000                    ms
[info] ExtractFieldsBenchmark.readJackson                                                     thrpt    5    972051.202 ±   34502.731   ops/s
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5      1205.400 ±      43.034  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5         0.108 ±       0.088  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.175 ±       0.143    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5      1208.831 ±     723.978  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1957.242 ±    1160.763    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.count                                           thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJackson:·gc.time                                            thrpt    5        20.000                    ms
[info] ExtractFieldsBenchmark.readJsoniter                                                    thrpt    5   8240882.376 ±  242608.385   ops/s
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       376.922 ±      11.123  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5         0.025 ±       0.104  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.005 ±       0.020    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5       330.992 ±       3.097  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        63.229 ±       1.419    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.count                                          thrpt    5         5.000                counts
[info] ExtractFieldsBenchmark.readJsoniter:·gc.time                                           thrpt    5         4.000                    ms
[info] ExtractFieldsBenchmark.readPlay                                                        thrpt    5    353892.185 ±   22088.618   ops/s
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1947.712 ±     121.133  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5      8664.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5         0.125 ±       0.188  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.554 ±       0.804    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5      1962.888 ±     571.338  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8728.357 ±    2304.861    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.count                                              thrpt    5        29.000                counts
[info] ExtractFieldsBenchmark.readPlay:·gc.time                                               thrpt    5        33.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      8058.775 ±     340.567   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1939.289 ±      81.367  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    378808.570 ±      82.638    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.078 ±       0.160  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        15.343 ±      31.858    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1890.572 ±     702.981  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    369579.889 ±  149848.313    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        28.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readJackson                                                     thrpt    5     14547.176 ±     193.896   ops/s
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5       368.622 ±       5.084  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5     39888.031 ±       0.012    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.901 ±       4.751    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5       324.738 ±       5.771  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     35139.755 ±     776.716    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.count                                           thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.readJackson:·gc.time                                            thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniter                                                    thrpt    5     24315.172 ±      72.088   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       415.452 ±       1.144  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5     26896.017 ±       0.002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5         0.021 ±       0.139  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.347 ±       8.984    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5       393.915 ±     565.588  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     25502.478 ±   36630.354    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.count                                          thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.time                                           thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readPlay                                                        thrpt    5      2557.732 ±      58.340   ops/s
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1597.236 ±      36.881  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5    982976.162 ±       0.020    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5         0.012 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5         7.694 ±      27.048    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5      1618.993 ±     578.349  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    996004.321 ±  338497.904    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.count                                              thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.readPlay:·gc.time                                               thrpt    5        36.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      7751.015 ±     186.487   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1667.171 ±      40.193  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    338576.564 ±      45.479    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.071 ±       0.166  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        14.365 ±      33.655    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1682.212 ±      43.347  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    341652.519 ±   16781.949    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        22.000                    ms
[info] GoogleMapsAPIBenchmark.writeJackson                                                    thrpt    5     41734.333 ±     929.928   ops/s
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate                                     thrpt    5       604.669 ±      13.498  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                thrpt    5     22807.837 ±       0.375    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                            thrpt    5         0.037 ±       0.132  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.412 ±       4.972    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                        thrpt    5       591.044 ±     559.287  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     22284.227 ±   20963.488    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.count                                          thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.time                                           thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniter                                                   thrpt    5     62865.582 ±     509.809   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate                                    thrpt    5       473.451 ±       3.823  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                               thrpt    5     11856.007 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.050 ±       0.231  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.252 ±       5.787    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5       458.819 ±     690.512  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     11494.316 ±   17357.783    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.count                                         thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.time                                          thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc                                           thrpt    5     74657.399 ±    1510.506   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                            thrpt    5         1.138 ±       0.023  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                       thrpt    5        24.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlay                                                       thrpt    5      5423.955 ±     134.030   ops/s
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate                                        thrpt    5      1677.658 ±      41.528  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm                                   thrpt    5    486903.965 ±       2.909    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space                               thrpt    5         0.037 ±       0.164  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5        10.901 ±      47.814    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space                           thrpt    5      1687.803 ±      32.222  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    489868.909 ±   17801.206    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.count                                             thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writePlay:·gc.time                                              thrpt    5        30.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniter                                                   thrpt    5   4914163.567 ±  134364.012   ops/s
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate                                    thrpt    5      1473.454 ±      40.141  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                               thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.112 ±       0.122  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.036 ±       0.039    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5      1479.586 ±     720.415  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       474.236 ±     241.115    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.count                                         thrpt    5        22.000                counts
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.time                                          thrpt    5        20.000                    ms
[info] IntAndLongMapsBenchmark.readPlay                                                       thrpt    5    386543.625 ±    7088.249   ops/s
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate                                        thrpt    5      2159.114 ±      40.316  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm                                   thrpt    5      8792.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                               thrpt    5         0.104 ±       0.113  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.424 ±       0.462    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                           thrpt    5      2170.606 ±     703.995  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      8839.284 ±    2891.354    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.count                                             thrpt    5        32.000                counts
[info] IntAndLongMapsBenchmark.readPlay:·gc.time                                              thrpt    5        39.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniter                                                  thrpt    5   3298884.683 ±   50976.474   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate                                   thrpt    5       536.492 ±       8.596  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                              thrpt    5       256.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.046 ±       0.200  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.022 ±       0.095    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       525.253 ±     691.455  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       250.887 ±     332.985    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.count                                        thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.time                                         thrpt    5         8.000                    ms
[info] IntAndLongMapsBenchmark.writePlay                                                      thrpt    5    350473.430 ±    7389.230   ops/s
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate                                       thrpt    5      1362.551 ±      29.293  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm                                  thrpt    5      6120.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.075 ±       0.108  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.336 ±       0.476    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1411.305 ±     547.970  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      6338.698 ±    2440.422    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.count                                            thrpt    5        21.000                counts
[info] IntAndLongMapsBenchmark.writePlay:·gc.time                                             thrpt    5        24.000                    ms
[info] IntArrayBenchmark.readCirce                                                            thrpt    5     17486.512 ±     360.484   ops/s
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2170.723 ±      44.587  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    195407.842 ±       1.582    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.162 ±       0.174  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5        14.606 ±      15.490    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2167.866 ±     724.173  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    195131.998 ±   63952.436    B/op
[info] IntArrayBenchmark.readCirce:·gc.count                                                  thrpt    5        32.000                counts
[info] IntArrayBenchmark.readCirce:·gc.time                                                   thrpt    5        33.000                    ms
[info] IntArrayBenchmark.readJackson                                                          thrpt    5     41623.380 ±    1437.446   ops/s
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate                                           thrpt    5       296.340 ±      10.252  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                      thrpt    5     11208.010 ±       0.001    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.019 ±       0.161  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.701 ±       6.040    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.816 ±       6.581  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5        31.100 ±     251.243    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                              thrpt    5       276.797 ±     274.423  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10476.566 ±   10451.612    B/op
[info] IntArrayBenchmark.readJackson:·gc.count                                                thrpt    5         4.000                counts
[info] IntArrayBenchmark.readJackson:·gc.time                                                 thrpt    5         9.000                    ms
[info] IntArrayBenchmark.readJsoniter                                                         thrpt    5     89624.308 ±    1357.070   ops/s
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate                                          thrpt    5       697.742 ±      10.608  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                     thrpt    5     12256.005 ±       0.001    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.067 ±       0.191  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         1.168 ±       3.344    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5       724.936 ±     559.536  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     12737.501 ±    9940.393    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.count                                               thrpt    5        11.000                counts
[info] IntArrayBenchmark.readJsoniter:·gc.time                                                thrpt    5        11.000                    ms
[info] IntArrayBenchmark.readPlay                                                             thrpt    5      8974.559 ±     109.407   ops/s
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate                                              thrpt    5      3099.423 ±      37.586  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate.norm                                         thrpt    5    543656.599 ±       4.763    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.079 ±       0.132  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5        13.878 ±      23.158    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      3128.312 ±     584.024  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5    548736.320 ±  103501.206    B/op
[info] IntArrayBenchmark.readPlay:·gc.count                                                   thrpt    5        46.000                counts
[info] IntArrayBenchmark.readPlay:·gc.time                                                    thrpt    5        48.000                    ms
[info] IntArrayBenchmark.writeCirce                                                           thrpt    5     24812.954 ±     266.299   ops/s
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1307.003 ±      13.617  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5     82920.017 ±       0.005    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.075 ±       0.091  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         4.755 ±       5.826    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1270.985 ±     566.698  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     80637.399 ±   36036.630    B/op
[info] IntArrayBenchmark.writeCirce:·gc.count                                                 thrpt    5        19.000                counts
[info] IntArrayBenchmark.writeCirce:·gc.time                                                  thrpt    5        18.000                    ms
[info] IntArrayBenchmark.writeJackson                                                         thrpt    5    102214.571 ±    3725.116   ops/s
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate                                          thrpt    5       804.642 ±      29.767  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                     thrpt    5     12392.243 ±       0.085    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.058 ±       0.215  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.893 ±       3.272    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                             thrpt    5       784.068 ±     689.574  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     12061.739 ±   10291.800    B/op
[info] IntArrayBenchmark.writeJackson:·gc.count                                               thrpt    5        12.000                counts
[info] IntArrayBenchmark.writeJackson:·gc.time                                                thrpt    5        16.000                    ms
[info] IntArrayBenchmark.writeJsoniter                                                        thrpt    5    122930.767 ±    1245.830   ops/s
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                         thrpt    5       510.429 ±       5.093  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                    thrpt    5      6536.003 ±       0.001    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5         0.042 ±       0.227  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.533 ±       2.907    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5       459.837 ±     692.911  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      5888.757 ±    8880.597    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.count                                              thrpt    5         7.000                counts
[info] IntArrayBenchmark.writeJsoniter:·gc.time                                               thrpt    5         6.000                    ms
[info] IntArrayBenchmark.writeJsoniterPrealloc                                                thrpt    5    157368.424 ±    1651.059   ops/s
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5         0.003 ±       0.001    B/op
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                      thrpt    5           ≈ 0                counts
[info] IntArrayBenchmark.writePlay                                                            thrpt    5      4317.068 ±      81.391   ops/s
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate                                             thrpt    5      1813.067 ±      34.001  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate.norm                                        thrpt    5    660992.327 ±       1.175    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space                                    thrpt    5         0.017 ±       0.104  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5         6.072 ±      38.039    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                thrpt    5      1818.105 ±     723.450  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    662746.218 ±  259260.943    B/op
[info] IntArrayBenchmark.writePlay:·gc.count                                                  thrpt    5        27.000                counts
[info] IntArrayBenchmark.writePlay:·gc.time                                                   thrpt    5        27.000                    ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    706201.176 ±   13423.892   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2551.680 ±      48.029  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5688.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.125 ±       0.188  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.278 ±       0.414    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2579.523 ±     702.310  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5748.825 ±    1476.925    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        38.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        35.000                    ms
[info] IterablesBenchmark.readJackson                                                         thrpt    5    644800.848 ±   28495.934   ops/s
[info] IterablesBenchmark.readJackson:·gc.alloc.rate                                          thrpt    5       750.457 ±      33.304  MB/sec
[info] IterablesBenchmark.readJackson:·gc.alloc.rate.norm                                     thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.046 ±       0.207  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.111 ±       0.503    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                             thrpt    5       727.702 ±     563.778  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1775.762 ±    1352.142    B/op
[info] IterablesBenchmark.readJackson:·gc.count                                               thrpt    5        11.000                counts
[info] IterablesBenchmark.readJackson:·gc.time                                                thrpt    5        12.000                    ms
[info] IterablesBenchmark.readJsoniter                                                        thrpt    5   4734656.988 ±  167128.544   ops/s
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate                                         thrpt    5      1876.696 ±      66.138  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                                    thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5         0.104 ±       0.188  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.035 ±       0.063    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5      1892.575 ±     709.942  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       629.014 ±     221.880    B/op
[info] IterablesBenchmark.readJsoniter:·gc.count                                              thrpt    5        28.000                counts
[info] IterablesBenchmark.readJsoniter:·gc.time                                               thrpt    5        25.000                    ms
[info] IterablesBenchmark.readPlay                                                            thrpt    5    256093.906 ±    2348.815   ops/s
[info] IterablesBenchmark.readPlay:·gc.alloc.rate                                             thrpt    5      1781.704 ±      16.150  MB/sec
[info] IterablesBenchmark.readPlay:·gc.alloc.rate.norm                                        thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                    thrpt    5         0.104 ±       0.057  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.640 ±       0.352    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                thrpt    5      1825.170 ±     700.506  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5     11220.007 ±    4346.335    B/op
[info] IterablesBenchmark.readPlay:·gc.count                                                  thrpt    5        27.000                counts
[info] IterablesBenchmark.readPlay:·gc.time                                                   thrpt    5        33.000                    ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    863836.709 ±   15906.442   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1984.203 ±      36.757  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3616.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.096 ±       0.072  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.174 ±       0.131    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2027.806 ±      41.546  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      3695.503 ±      81.063    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        30.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        26.000                    ms
[info] IterablesBenchmark.writeJackson                                                        thrpt    5   1917399.764 ±   21909.755   ops/s
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate                                         thrpt    5      1295.982 ±      14.507  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate.norm                                    thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±       0.174  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.072 ±       0.143    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                            thrpt    5      1342.097 ±      33.362  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1101.880 ±      37.429    B/op
[info] IterablesBenchmark.writeJackson:·gc.count                                              thrpt    5        20.000                counts
[info] IterablesBenchmark.writeJackson:·gc.time                                               thrpt    5        22.000                    ms
[info] IterablesBenchmark.writeJsoniter                                                       thrpt    5   6977305.359 ±   74546.933   ops/s
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate                                        thrpt    5       780.144 ±       7.860  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.075 ±       0.072  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.017 ±       0.016    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       792.037 ±     693.308  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       178.655 ±     155.769    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.count                                             thrpt    5        12.000                counts
[info] IterablesBenchmark.writeJsoniter:·gc.time                                              thrpt    5        12.000                    ms
[info] IterablesBenchmark.writePlay                                                           thrpt    5    587003.791 ±   12986.191   ops/s
[info] IterablesBenchmark.writePlay:·gc.alloc.rate                                            thrpt    5      2001.498 ±      44.518  MB/sec
[info] IterablesBenchmark.writePlay:·gc.alloc.rate.norm                                       thrpt    5      5368.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.133 ±       0.156  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.358 ±       0.426    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                               thrpt    5      2032.288 ±      28.762  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5450.707 ±     131.213    B/op
[info] IterablesBenchmark.writePlay:·gc.count                                                 thrpt    5        30.000                counts
[info] IterablesBenchmark.writePlay:·gc.time                                                  thrpt    5        35.000                    ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    685649.712 ±   25701.900   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2376.405 ±      89.199  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5456.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.133 ±       0.224  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.306 ±       0.513    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2373.903 ±      31.974  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5450.753 ±     251.808    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        35.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        36.000                    ms
[info] MapsBenchmark.readJsoniter                                                             thrpt    5   5063009.882 ±   47737.704   ops/s
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate                                              thrpt    5      1260.804 ±      12.104  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                         thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5         0.104 ±       0.278  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.032 ±       0.086    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5      1204.908 ±     709.317  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5       374.687 ±     222.463    B/op
[info] MapsBenchmark.readJsoniter:·gc.count                                                   thrpt    5        18.000                counts
[info] MapsBenchmark.readJsoniter:·gc.time                                                    thrpt    5        16.000                    ms
[info] MapsBenchmark.readPlay                                                                 thrpt    5    388637.368 ±    4496.757   ops/s
[info] MapsBenchmark.readPlay:·gc.alloc.rate                                                  thrpt    5      2097.743 ±      25.024  MB/sec
[info] MapsBenchmark.readPlay:·gc.alloc.rate.norm                                             thrpt    5      8496.001 ±       0.001    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                         thrpt    5         0.117 ±       0.201  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.472 ±       0.811    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                     thrpt    5      2101.752 ±     559.001  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      8512.798 ±    2303.334    B/op
[info] MapsBenchmark.readPlay:·gc.count                                                       thrpt    5        31.000                counts
[info] MapsBenchmark.readPlay:·gc.time                                                        thrpt    5        36.000                    ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    512694.929 ±   35671.659   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1341.801 ±      93.152  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4120.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.087 ±       0.200  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.267 ±       0.598    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      1336.850 ±      40.991  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      4106.298 ±     403.025    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        20.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        21.000                    ms
[info] MapsBenchmark.writeJsoniter                                                            thrpt    5   3191418.902 ±   84922.913   ops/s
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate                                             thrpt    5       535.218 ±      14.229  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                        thrpt    5       264.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                    thrpt    5         0.046 ±       0.174  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.023 ±       0.086    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                thrpt    5       525.270 ±     692.834  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                           thrpt    5       259.342 ±     344.765    B/op
[info] MapsBenchmark.writeJsoniter:·gc.count                                                  thrpt    5         8.000                counts
[info] MapsBenchmark.writeJsoniter:·gc.time                                                   thrpt    5         7.000                    ms
[info] MapsBenchmark.writePlay                                                                thrpt    5    373249.119 ±    5025.478   ops/s
[info] MapsBenchmark.writePlay:·gc.alloc.rate                                                 thrpt    5      1346.755 ±      18.234  MB/sec
[info] MapsBenchmark.writePlay:·gc.alloc.rate.norm                                            thrpt    5      5680.001 ±       0.001    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                        thrpt    5         0.079 ±       0.067  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.333 ±       0.279    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                    thrpt    5      1343.614 ±      31.887  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5666.794 ±     142.223    B/op
[info] MapsBenchmark.writePlay:·gc.count                                                      thrpt    5        20.000                counts
[info] MapsBenchmark.writePlay:·gc.time                                                       thrpt    5        23.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   2115656.163 ±   40594.269   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3107.339 ±      60.155  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2312.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.129 ±       0.105  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.096 ±       0.077    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      3059.841 ±      17.732  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      2276.717 ±      55.026    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        45.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        41.000                    ms
[info] MissingReqFieldBenchmark.readJackson                                                   thrpt    5    306934.525 ±   13692.116   ops/s
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate                                    thrpt    5       547.537 ±      24.206  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm                               thrpt    5      2808.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space                           thrpt    5         0.054 ±       0.209  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.279 ±       1.072    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space                       thrpt    5       525.714 ±     696.295  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      2702.231 ±    3644.153    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.count                                         thrpt    5         8.000                counts
[info] MissingReqFieldBenchmark.readJackson:·gc.time                                          thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJsoniter                                                  thrpt    5    685208.149 ±   12709.405   ops/s
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate                                   thrpt    5       435.275 ±       7.960  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm                              thrpt    5      1000.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.042 ±       0.160  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.095 ±       0.367    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       462.701 ±     698.567  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1062.002 ±    1590.615    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.count                                        thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJsoniter:·gc.time                                         thrpt    5         6.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   3674608.835 ±   53284.617   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      1195.161 ±      17.566  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       512.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5         0.087 ±       0.183  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.037 ±       0.078    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5      1204.487 ±     691.296  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5       515.928 ±     293.986    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        18.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        16.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   6127415.129 ±  375510.600   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       529.364 ±      32.431  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       136.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5         0.042 ±       0.196  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5         0.011 ±       0.050    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5       528.768 ±     697.577  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5       135.549 ±     175.313    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5         8.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readPlay                                                      thrpt    5    199136.319 ±    1804.218   ops/s
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate                                       thrpt    5      1273.174 ±      10.881  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm                                  thrpt    5     10064.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±       0.119  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.790 ±       0.944    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1207.452 ±     711.412  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      9546.922 ±    5694.516    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.count                                            thrpt    5        18.000                counts
[info] MissingReqFieldBenchmark.readPlay:·gc.time                                             thrpt    5        21.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    735485.400 ±   11144.482   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2810.613 ±      42.354  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6016.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.121 ±       0.154  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.258 ±       0.327    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      2853.339 ±     707.610  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      6107.472 ±    1512.812    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        42.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        39.000                    ms
[info] MutableIterablesBenchmark.readJsoniter                                                 thrpt    5   3915943.097 ±   62188.270   ops/s
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate                                  thrpt    5      2527.308 ±      40.875  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                             thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                         thrpt    5         0.137 ±       0.146  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.055 ±       0.059    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                     thrpt    5      2512.968 ±     722.369  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1010.482 ±     305.899    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.count                                       thrpt    5        37.000                counts
[info] MutableIterablesBenchmark.readJsoniter:·gc.time                                        thrpt    5        35.000                    ms
[info] MutableIterablesBenchmark.readPlay                                                     thrpt    5    272918.211 ±    5471.475   ops/s
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate                                      thrpt    5      1951.551 ±      39.561  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm                                 thrpt    5     11256.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                             thrpt    5         0.104 ±       0.098  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.600 ±       0.564    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                         thrpt    5      1963.788 ±     588.610  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     11328.681 ±    3502.566    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.count                                           thrpt    5        29.000                counts
[info] MutableIterablesBenchmark.readPlay:·gc.time                                            thrpt    5        33.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    855051.445 ±   18254.406   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1877.177 ±      40.152  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3456.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.112 ±       0.156  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.207 ±       0.287    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1889.710 ±     688.190  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3479.554 ±    1289.156    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        26.000                    ms
[info] MutableIterablesBenchmark.writeJackson                                                 thrpt    5   1825961.221 ±   48594.725   ops/s
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate                                  thrpt    5      1048.615 ±      27.735  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm                             thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                         thrpt    5         0.096 ±       0.091  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.083 ±       0.079    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                     thrpt    5      1067.708 ±     588.579  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       920.339 ±     501.365    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.count                                       thrpt    5        16.000                counts
[info] MutableIterablesBenchmark.writeJackson:·gc.time                                        thrpt    5        18.000                    ms
[info] MutableIterablesBenchmark.writeJsoniter                                                thrpt    5   4750958.032 ±   63643.835   ops/s
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate                                 thrpt    5       362.169 ±       4.848  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                            thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                        thrpt    5         0.664 ±       5.401  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.220 ±       1.789    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                    thrpt    5       394.254 ±     567.687  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm               thrpt    5       130.631 ±     188.081    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.count                                      thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniter:·gc.time                                       thrpt    5         7.000                    ms
[info] MutableIterablesBenchmark.writePlay                                                    thrpt    5    538279.825 ±    7734.058   ops/s
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate                                     thrpt    5      1835.601 ±      26.432  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm                                thrpt    5      5368.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                            thrpt    5         0.121 ±       0.132  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.353 ±       0.380    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                        thrpt    5      1826.988 ±     703.598  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5343.081 ±    2069.700    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.count                                          thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.writePlay:·gc.time                                           thrpt    5        33.000                    ms
[info] MutableMapsBenchmark.readJsoniter                                                      thrpt    5   3334336.520 ±   27832.646   ops/s
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5      1575.955 ±      13.397  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.071 ±       0.176  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.033 ±       0.083    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5      1548.531 ±     691.683  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       731.006 ±     324.580    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.count                                            thrpt    5        23.000                counts
[info] MutableMapsBenchmark.readJsoniter:·gc.time                                             thrpt    5        21.000                    ms
[info] MutableMapsBenchmark.readPlay                                                          thrpt    5    307661.874 ±   11682.401   ops/s
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate                                           thrpt    5      1638.624 ±      61.716  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm                                      thrpt    5      8384.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±       0.127  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.427 ±       0.662    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                              thrpt    5      1688.232 ±      32.765  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      8638.383 ±     320.411    B/op
[info] MutableMapsBenchmark.readPlay:·gc.count                                                thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readPlay:·gc.time                                                 thrpt    5        34.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    508891.183 ±    5900.655   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1306.025 ±      15.174  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4040.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.071 ±       0.091  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.219 ±       0.282    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1335.079 ±      42.867  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      4129.985 ±     178.642    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        20.000                    ms
[info] MutableMapsBenchmark.writeJsoniter                                                     thrpt    5   2866163.761 ±  190190.826   ops/s
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5       582.644 ±      38.704  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5       320.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.054 ±       0.201  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.030 ±       0.110    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5       591.529 ±     567.322  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       325.278 ±     316.705    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.count                                           thrpt    5         9.000                counts
[info] MutableMapsBenchmark.writeJsoniter:·gc.time                                            thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlay                                                         thrpt    5    338834.597 ±    8957.630   ops/s
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate                                          thrpt    5      1300.206 ±      34.337  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm                                     thrpt    5      6040.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                 thrpt    5         0.075 ±       0.044  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.348 ±       0.196    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                             thrpt    5      1342.485 ±      34.739  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      6236.678 ±     248.982    B/op
[info] MutableMapsBenchmark.writePlay:·gc.count                                               thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlay:·gc.time                                                thrpt    5        23.000                    ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    668230.880 ±   12716.010   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2058.020 ±      39.467  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4848.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.137 ±       0.134  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.323 ±       0.314    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2028.494 ±      38.652  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4778.557 ±     139.145    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        30.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.readJackson                                                        thrpt    5   1556955.914 ±   10796.539   ops/s
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5      1179.005 ±       8.586  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.100 ±       0.119  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.101 ±       0.120    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5      1207.068 ±     706.749  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1220.369 ±     714.447    B/op
[info] PrimitivesBenchmark.readJackson:·gc.count                                              thrpt    5        18.000                counts
[info] PrimitivesBenchmark.readJackson:·gc.time                                               thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.readJsoniter                                                       thrpt    5   6143229.411 ±  314493.997   ops/s
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       187.322 ±       9.623  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.617 ±       5.247  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.162 ±       1.377    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       219.899 ±     490.263  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        56.500 ±     127.065    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.count                                             thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniter:·gc.time                                              thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.readPlay                                                           thrpt    5    250439.915 ±    7480.796   ops/s
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1774.184 ±      52.951  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5     11152.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±       0.143  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.680 ±       0.892    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1757.269 ±     552.457  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     11044.332 ±    3362.265    B/op
[info] PrimitivesBenchmark.readPlay:·gc.count                                                 thrpt    5        27.000                counts
[info] PrimitivesBenchmark.readPlay:·gc.time                                                  thrpt    5        33.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    939892.818 ±   20319.045   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1514.449 ±      33.195  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2536.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.087 ±       0.183  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.146 ±       0.305    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1475.998 ±     713.085  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      2471.330 ±    1180.835    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        22.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        20.000                    ms
[info] PrimitivesBenchmark.writeJackson                                                       thrpt    5   2572267.475 ±   63435.997   ops/s
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5      1058.786 ±      26.201  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.112 ±       0.044  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.069 ±       0.028    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5      1069.986 ±     596.786  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       655.357 ±     384.347    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.count                                             thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJackson:·gc.time                                              thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.writeJsoniter                                                      thrpt    5   6035391.581 ±   46325.831   ops/s
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       674.729 ±       5.265  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.067 ±       0.164  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.017 ±       0.043    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       658.936 ±       8.502  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       171.881 ±       2.479    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.count                                            thrpt    5        10.000                counts
[info] PrimitivesBenchmark.writeJsoniter:·gc.time                                             thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writeJsoniterPrealloc                                              thrpt    5   5686973.843 ±  109876.597   ops/s
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       346.818 ±       6.844  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5         0.669 ±       5.537  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.187 ±       1.546    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5       329.125 ±       4.309  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5        91.105 ±       2.419    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.writePlay                                                          thrpt    5    346396.695 ±    3017.264   ops/s
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate                                           thrpt    5      1971.307 ±      12.801  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm                                      thrpt    5      8952.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                  thrpt    5         0.096 ±       0.107  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.434 ±       0.483    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                              thrpt    5      1961.026 ±     601.147  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      8904.750 ±    2699.070    B/op
[info] PrimitivesBenchmark.writePlay:·gc.count                                                thrpt    5        29.000                counts
[info] PrimitivesBenchmark.writePlay:·gc.time                                                 thrpt    5        34.000                    ms
[info] StringBenchmark.readAsciiCirce                                                         thrpt    5    719138.663 ±    3495.755   ops/s
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate                                          thrpt    5      1604.522 ±       7.533  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm                                     thrpt    5      3512.001 ±       0.001    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.079 ±       0.088  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.173 ±       0.192    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1615.430 ±     576.782  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      3535.707 ±    1254.469    B/op
[info] StringBenchmark.readAsciiCirce:·gc.count                                               thrpt    5        24.000                counts
[info] StringBenchmark.readAsciiCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] StringBenchmark.readAsciiJackson                                                       thrpt    5   1140441.354 ±   48906.477   ops/s
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate                                        thrpt    5      1443.083 ±      61.734  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm                                   thrpt    5      1992.000 ±       0.001    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.100 ±       0.200  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.138 ±       0.280    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space                           thrpt    5      1469.227 ±     721.456  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      2028.536 ±    1008.128    B/op
[info] StringBenchmark.readAsciiJackson:·gc.count                                             thrpt    5        22.000                counts
[info] StringBenchmark.readAsciiJackson:·gc.time                                              thrpt    5        33.000                    ms
[info] StringBenchmark.readAsciiJsoniter                                                      thrpt    5    817764.447 ±    8157.201   ops/s
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate                                       thrpt    5       698.241 ±       7.198  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm                                  thrpt    5      1344.001 ±       0.001    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.087 ±       0.164  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.168 ±       0.317    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       728.317 ±     565.108  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1402.332 ±    1100.948    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.count                                            thrpt    5        11.000                counts
[info] StringBenchmark.readAsciiJsoniter:·gc.time                                             thrpt    5        10.000                    ms
[info] StringBenchmark.readNonAsciiCirce                                                      thrpt    5    993328.511 ±   10534.526   ops/s
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate                                       thrpt    5      1484.137 ±      15.918  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm                                  thrpt    5      2352.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.096 ±       0.156  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.152 ±       0.248    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1476.921 ±     685.558  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      2340.603 ±    1087.720    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.count                                            thrpt    5        22.000                counts
[info] StringBenchmark.readNonAsciiCirce:·gc.time                                             thrpt    5        19.000                    ms
[info] StringBenchmark.readNonAsciiJackson                                                    thrpt    5   1290798.399 ±   12985.104   ops/s
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate                                     thrpt    5       905.288 ±       8.841  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm                                thrpt    5      1104.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space                            thrpt    5         0.096 ±       0.122  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.117 ±       0.149    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space                        thrpt    5       916.621 ±     556.323  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1118.017 ±     683.261    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.count                                          thrpt    5        14.000                counts
[info] StringBenchmark.readNonAsciiJackson:·gc.time                                           thrpt    5        15.000                    ms
[info] StringBenchmark.readNonAsciiJsoniter                                                   thrpt    5   2166225.774 ±   32507.846   ops/s
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate                                    thrpt    5       528.445 ±       8.053  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm                               thrpt    5       384.000 ±       0.001    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.046 ±       0.183  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.033 ±       0.133    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5       528.797 ±     696.477  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       384.338 ±     507.109    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.count                                         thrpt    5         8.000                counts
[info] StringBenchmark.readNonAsciiJsoniter:·gc.time                                          thrpt    5         8.000                    ms
[info] StringBenchmark.writeAsciiCirce                                                        thrpt    5    312084.371 ±    4926.793   ops/s
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate                                         thrpt    5      1062.591 ±      16.687  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm                                    thrpt    5      5360.001 ±       0.001    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.083 ±       0.113  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.420 ±       0.572    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1061.968 ±     573.568  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      5356.530 ±    2877.091    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.count                                              thrpt    5        16.000                counts
[info] StringBenchmark.writeAsciiCirce:·gc.time                                               thrpt    5        15.000                    ms
[info] StringBenchmark.writeAsciiJackson                                                      thrpt    5    356807.840 ±   16734.988   ops/s
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate                                       thrpt    5       377.158 ±      17.715  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm                                  thrpt    5      1664.001 ±       0.001    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space                              thrpt    5         0.794 ±       6.617  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.523 ±      29.354    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space                          thrpt    5       388.001 ±     555.378  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1709.548 ±    2403.034    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.count                                            thrpt    5         6.000                counts
[info] StringBenchmark.writeAsciiJackson:·gc.time                                             thrpt    5         8.000                    ms
[info] StringBenchmark.writeAsciiJsoniter                                                     thrpt    5    973578.175 ±   45879.658   ops/s
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate                                      thrpt    5       821.369 ±      38.974  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm                                 thrpt    5      1328.000 ±       0.001    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.100 ±       0.036  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.162 ±       0.061    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5       793.457 ±     692.373  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1281.173 ±    1077.321    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.count                                           thrpt    5        12.000                counts
[info] StringBenchmark.writeAsciiJsoniter:·gc.time                                            thrpt    5        11.000                    ms
[info] StringBenchmark.writeAsciiJsoniterPrealloc                                             thrpt    5    925078.842 ±   34981.211   ops/s
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate                              thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5        ≈ 10⁻³                  B/op
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count                                   thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeAsciiPlay                                                         thrpt    5    330108.286 ±    4994.773   ops/s
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate                                          thrpt    5       352.288 ±       5.333  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm                                     thrpt    5      1680.001 ±       0.001    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space                                 thrpt    5         0.779 ±       6.441  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5         3.740 ±      30.926    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space                             thrpt    5       391.451 ±     559.437  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1865.831 ±    2649.364    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.count                                               thrpt    5         6.000                counts
[info] StringBenchmark.writeAsciiPlay:·gc.time                                                thrpt    5         8.000                    ms
[info] StringBenchmark.writeNonAsciiCirce                                                     thrpt    5   2017770.977 ±   19600.780   ops/s
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate                                      thrpt    5      1394.572 ±      13.254  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm                                 thrpt    5      1088.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.104 ±       0.057  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.081 ±       0.044    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1406.941 ±     606.484  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1097.764 ±     478.497    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.count                                           thrpt    5        21.000                counts
[info] StringBenchmark.writeNonAsciiCirce:·gc.time                                            thrpt    5        19.000                    ms
[info] StringBenchmark.writeNonAsciiJackson                                                   thrpt    5   3021094.239 ±  113345.792   ops/s
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate                                    thrpt    5      1105.452 ±      41.817  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm                               thrpt    5       576.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space                           thrpt    5         0.083 ±       0.127  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.043 ±       0.065    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space                       thrpt    5      1120.244 ±     669.823  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       583.547 ±     342.577    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.count                                         thrpt    5        17.000                counts
[info] StringBenchmark.writeNonAsciiJackson:·gc.time                                          thrpt    5        24.000                    ms
[info] StringBenchmark.writeNonAsciiJsoniter                                                  thrpt    5   3257980.366 ±   48217.998   ops/s
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate                                   thrpt    5       645.713 ±       9.549  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm                              thrpt    5       312.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.100 ±       0.067  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.048 ±       0.033    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       658.367 ±       7.631  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       318.121 ±       8.274    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.count                                        thrpt    5        10.000                counts
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.time                                         thrpt    5         9.000                    ms
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc                                          thrpt    5   3339806.387 ±   75886.999   ops/s
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeNonAsciiPlay                                                      thrpt    5   2863967.704 ±   29681.611   ops/s
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate                                       thrpt    5      1208.027 ±      12.492  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm                                  thrpt    5       664.000 ±       0.001    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.087 ±       0.174  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.048 ±       0.096    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1198.690 ±     724.137  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       658.954 ±     400.395    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.count                                            thrpt    5        18.000                counts
[info] StringBenchmark.writeNonAsciiPlay:·gc.time                                             thrpt    5        17.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     12434.112 ±     241.261   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1809.786 ±      34.219  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    229107.420 ±      93.683    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.195 ±       0.209  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        24.698 ±      26.672    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1814.866 ±     724.813  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    229808.601 ±   94406.470    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        27.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] TwitterAPIBenchmark.readJackson                                                        thrpt    5     16958.439 ±     167.764   ops/s
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       239.332 ±       2.613  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     22215.333 ±      31.383    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.108 ±       0.888  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5        10.067 ±      82.570    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5       245.003 ±     539.239  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     22754.811 ±   50125.526    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.count                                              thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJackson:·gc.time                                               thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.readJsoniter                                                       thrpt    5     37362.625 ±    3481.245   ops/s
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       346.011 ±      31.908  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5     14576.011 ±       0.002    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.670 ±       5.637  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5        29.462 ±     248.127    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       379.813 ±     612.975  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     16137.021 ±   28139.986    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.count                                             thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.readJsoniter:·gc.time                                              thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.readPlay                                                           thrpt    5      3494.301 ±     100.761   ops/s
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1109.017 ±      31.917  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    499592.119 ±       0.016    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.046 ±       0.174  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5        20.609 ±      78.122    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1066.683 ±     562.968  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    480499.891 ±  252185.322    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.count                                                 thrpt    5        16.000                counts
[info] TwitterAPIBenchmark.readPlay:·gc.time                                                  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.writeJackson                                                       thrpt    5     57766.295 ±     672.783   ops/s
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       737.579 ±       8.599  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     20100.006 ±       0.144    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.071 ±       0.122  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.929 ±       3.318    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       725.275 ±     568.550  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     19767.318 ±   15569.832    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.count                                             thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJackson:·gc.time                                              thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniter                                                      thrpt    5     88679.726 ±     785.768   ops/s
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       579.605 ±       5.171  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     10288.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.050 ±       0.185  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.888 ±       3.281    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       525.213 ±     691.464  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      9326.193 ±   12318.047    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniter:·gc.time                                             thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterPrealloc                                              thrpt    5    101548.122 ±     537.555   ops/s
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5        14.451 ±       0.079  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5       224.004 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[success] Total time: 2017 s, completed Jan 5, 2018, 5:33:52 PM
