[info] Loading settings from build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Dec 2, 2017, 7:38:09 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonWriter.scala:197:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] one warning found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.1-SNAPSHOT.jar ...
[info] Compiling 6 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:32:62: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -854843732 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1882203379 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -739937554 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1690673754 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -553105946 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 14144516 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case -11755678 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:27:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:28:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:29:18: local val v3 in value format is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:63:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:65:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1868115770 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 135249149 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:67:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Array[Int]];
[info]             do 
[info]               x.+=(d2(in, v2))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[scala.math.BigInt];
[info]             do 
[info]               x.+=(in.readBigInt(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1396692260 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             e2(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeKey(c, "aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeKey(c, "a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:69:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -311899171 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 395882128 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:71:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:73:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:75:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:77:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:79:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:81:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = 0.toByte;
[info]           var _s: Short = 0.toShort;
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = 0.toChar;
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -986815646 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1128364876 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 977778859 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2108804597 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:83:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:85:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.A): com.github.plokhotnyuk.jsoniter_scala.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.B): com.github.plokhotnyuk.jsoniter_scala.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.C): com.github.plokhotnyuk.jsoniter_scala.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1283270383 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readValueAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 1042714897 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 1249097774 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case -251352298 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.A, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "type");
[info]             out.writeVal("A")
[info]           };
[info]           {
[info]             c = out.writeKey(c, "a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.B, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "type");
[info]             out.writeVal("B")
[info]           };
[info]           {
[info]             c = out.writeKey(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.C, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "type");
[info]             out.writeVal("C")
[info]           };
[info]           {
[info]             c = out.writeKey(c, "l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:87:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:284:54: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1125392404 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -758822041 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1567327321 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -2118257363 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -560369018 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d11(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d11(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1994874891 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d10(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -422319283 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1231204836 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1565337738 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -903425777 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1481771385 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1617333980 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1034472816 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1096575944 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1766340764 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 656981833 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1692587979 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -761280539 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1523152584 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1042811670 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1322051899 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 430342393 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1547487212 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -738485249 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -869817957 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1479864213 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 892046337 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1815398146 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1854913126 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1700955824 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2002464660 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 196017265 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1725122937 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1346866717 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1251129302 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1343246339 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 929396071 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 356376530 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, req0, req1)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -350359215 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d12(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:134:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:135:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:137:18: local val v4 in value format is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CustomPlayJsonFormats.scala:65:45: Reference to uninitialized value v14
[warn]   implicit val v13: OFormat[C] = Json.format[C]
[warn]                                             ^
[warn] 7 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT.jar ...
Processing 292 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 116 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*JsonCodecMakerBenchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_d8567e99/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce
[info] # Run progress: 0.00% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 860091.347 ops/s
[info] # Warmup Iteration   2: 1204036.350 ops/s
[info] # Warmup Iteration   3: 1289938.988 ops/s
[info] # Warmup Iteration   4: 1388616.763 ops/s
[info] # Warmup Iteration   5: 1406203.285 ops/s
[info] Iteration   1: 1376780.400 ops/s
[info]                  ·gc.alloc.rate:            2029.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       2320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2334.670 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1402016.932 ops/s
[info]                  ·gc.alloc.rate:                                  2066.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2674.775 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 1399864.298 ops/s
[info]                  ·gc.alloc.rate:                                  2062.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2296.208 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1253594.522 ops/s
[info]                  ·gc.alloc.rate:            1847.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       2320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2136.742 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1260093.851 ops/s
[info]                  ·gc.alloc.rate:                                  1857.366 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2550.938 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce":
[info]   1338470.001 ±(99.9%) 289579.090 ops/s [Average]
[info]   (min, avg, max) = (1253594.522, 1338470.001, 1402016.932), stdev = 75202.770
[info]   CI (99.9%): [1048890.911, 1628049.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate":
[info]   1972.698 ±(99.9%) 426.489 MB/sec [Average]
[info]   (min, avg, max) = (1847.614, 1972.698, 2066.561), stdev = 110.758
[info]   CI (99.9%): [1546.209, 2399.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm":
[info]   2320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2320.000, 2320.000, 2320.000), stdev = 0.001
[info]   CI (99.9%): [2320.000, 2320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen":
[info]   2042.025 ±(99.9%) 926.997 MB/sec [Average]
[info]   (min, avg, max) = (1701.670, 2042.025, 2382.579), stdev = 240.738
[info]   CI (99.9%): [1115.029, 2969.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2398.666 ±(99.9%) 822.768 B/op [Average]
[info]   (min, avg, max) = (2136.742, 2398.666, 2674.775), stdev = 213.670
[info]   CI (99.9%): [1575.898, 3221.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.000, 13.000), stdev = 2.828
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson
[info] # Run progress: 0.89% complete, ETA 00:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64848.211 ops/s
[info] # Warmup Iteration   2: 167847.827 ops/s
[info] # Warmup Iteration   3: 171235.003 ops/s
[info] # Warmup Iteration   4: 171542.104 ops/s
[info] # Warmup Iteration   5: 171603.746 ops/s
[info] Iteration   1: 170873.351 ops/s
[info]                  ·gc.alloc.rate:            310.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       2856.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3098.466 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 169912.343 ops/s
[info]                  ·gc.alloc.rate:      308.316 MB/sec
[info]                  ·gc.alloc.rate.norm: 2856.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 171088.050 ops/s
[info]                  ·gc.alloc.rate:                   310.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              2856.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3088.318 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 171935.261 ops/s
[info]                  ·gc.alloc.rate:            311.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       2856.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3079.295 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 170706.251 ops/s
[info]                  ·gc.alloc.rate:            309.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       2856.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3101.460 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson":
[info]   170903.051 ±(99.9%) 2803.837 ops/s [Average]
[info]   (min, avg, max) = (169912.343, 170903.051, 171935.261), stdev = 728.148
[info]   CI (99.9%): [168099.214, 173706.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate":
[info]   310.112 ±(99.9%) 5.062 MB/sec [Average]
[info]   (min, avg, max) = (308.316, 310.112, 311.965), stdev = 1.315
[info]   CI (99.9%): [305.050, 315.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm":
[info]   2856.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2856.002, 2856.002, 2856.003), stdev = 0.001
[info]   CI (99.9%): [2856.002, 2856.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen":
[info]   268.966 ±(99.9%) 578.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.966, 336.384), stdev = 150.357
[info]   CI (99.9%): [≈ 0, 847.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2473.508 ±(99.9%) 5324.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2473.508, 3101.460), stdev = 1382.761
[info]   CI (99.9%): [≈ 0, 7798.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.226 ±(99.9%) 10.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.226, 6.128), stdev = 2.740
[info]   CI (99.9%): [≈ 0, 11.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 6.000), stdev = 2.683
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter
[info] # Run progress: 1.79% complete, ETA 00:30:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309625.815 ops/s
[info] # Warmup Iteration   2: 324155.110 ops/s
[info] # Warmup Iteration   3: 332946.108 ops/s
[info] # Warmup Iteration   4: 324028.474 ops/s
[info] # Warmup Iteration   5: 322802.962 ops/s
[info] Iteration   1: 330248.472 ops/s
[info]                  ·gc.alloc.rate:      217.668 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 323411.305 ops/s
[info]                  ·gc.alloc.rate:            213.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1637.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 259983.246 ops/s
[info]                  ·gc.alloc.rate:            171.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2036.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 320900.153 ops/s
[info]                  ·gc.alloc.rate:      212.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 323989.589 ops/s
[info]                  ·gc.alloc.rate:            214.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1634.218 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter":
[info]   311706.553 ±(99.9%) 112124.175 ops/s [Average]
[info]   (min, avg, max) = (259983.246, 311706.553, 330248.472), stdev = 29118.292
[info]   CI (99.9%): [199582.378, 423830.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate":
[info]   205.829 ±(99.9%) 74.028 MB/sec [Average]
[info]   (min, avg, max) = (171.633, 205.829, 217.668), stdev = 19.225
[info]   CI (99.9%): [131.801, 279.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm":
[info]   1040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1040.001, 1040.001, 1040.002), stdev = 0.001
[info]   CI (99.9%): [1040.001, 1040.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.768 ±(99.9%) 709.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.768, 336.397), stdev = 184.188
[info]   CI (99.9%): [≈ 0, 911.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1061.561 ±(99.9%) 3784.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1061.561, 2036.469), stdev = 982.786
[info]   CI (99.9%): [≈ 0, 4845.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless
[info] # Run progress: 2.68% complete, ETA 00:29:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 698949.545 ops/s
[info] # Warmup Iteration   2: 761226.285 ops/s
[info] # Warmup Iteration   3: 751200.663 ops/s
[info] # Warmup Iteration   4: 767071.287 ops/s
[info] # Warmup Iteration   5: 766871.599 ops/s
[info] Iteration   1: 759285.005 ops/s
[info]                  ·gc.alloc.rate:            266.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 695.344 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 769189.984 ops/s
[info]                  ·gc.alloc.rate:            269.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 688.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 766940.949 ops/s
[info]                  ·gc.alloc.rate:            268.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 690.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 775012.166 ops/s
[info]                  ·gc.alloc.rate:            271.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 683.161 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 782503.165 ops/s
[info]                  ·gc.alloc.rate:      274.426 MB/sec
[info]                  ·gc.alloc.rate.norm: 552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless":
[info]   770586.254 ±(99.9%) 33599.904 ops/s [Average]
[info]   (min, avg, max) = (759285.005, 770586.254, 782503.165), stdev = 8725.788
[info]   CI (99.9%): [736986.350, 804186.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate":
[info]   270.280 ±(99.9%) 11.495 MB/sec [Average]
[info]   (min, avg, max) = (266.509, 270.280, 274.426), stdev = 2.985
[info]   CI (99.9%): [258.784, 281.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm":
[info]   552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (552.001, 552.001, 552.001), stdev = 0.001
[info]   CI (99.9%): [552.000, 552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   268.955 ±(99.9%) 578.947 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.955, 336.371), stdev = 150.351
[info]   CI (99.9%): [≈ 0, 847.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   551.434 ±(99.9%) 1187.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 551.434, 695.344), stdev = 308.292
[info]   CI (99.9%): [≈ 0, 1738.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump
[info] # Run progress: 3.57% complete, ETA 00:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2668587.473 ops/s
[info] # Warmup Iteration   2: 2727609.894 ops/s
[info] # Warmup Iteration   3: 2849684.615 ops/s
[info] # Warmup Iteration   4: 2871783.517 ops/s
[info] # Warmup Iteration   5: 2862895.456 ops/s
[info] Iteration   1: 2674210.219 ops/s
[info]                  ·gc.alloc.rate:            298.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197.983 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2828978.496 ops/s
[info]                  ·gc.alloc.rate:            316.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2551159.943 ops/s
[info]                  ·gc.alloc.rate:            285.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 207.533 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2252171.100 ops/s
[info]                  ·gc.alloc.rate:            251.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235.091 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2867776.594 ops/s
[info]                  ·gc.alloc.rate:            320.690 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.626 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump":
[info]   2634859.270 ±(99.9%) 956745.669 ops/s [Average]
[info]   (min, avg, max) = (2252171.100, 2634859.270, 2867776.594), stdev = 248463.812
[info]   CI (99.9%): [1678113.601, 3591604.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   294.617 ±(99.9%) 107.006 MB/sec [Average]
[info]   (min, avg, max) = (251.820, 294.617, 320.690), stdev = 27.789
[info]   CI (99.9%): [187.611, 401.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   336.369 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (336.301, 336.369, 336.408), stdev = 0.041
[info]   CI (99.9%): [336.210, 336.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   202.477 ±(99.9%) 78.513 B/op [Average]
[info]   (min, avg, max) = (184.626, 202.477, 235.091), stdev = 20.390
[info]   CI (99.9%): [123.964, 280.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay
[info] # Run progress: 4.46% complete, ETA 00:29:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37536.440 ops/s
[info] # Warmup Iteration   2: 102717.231 ops/s
[info] # Warmup Iteration   3: 102889.976 ops/s
[info] # Warmup Iteration   4: 107467.231 ops/s
[info] # Warmup Iteration   5: 107469.111 ops/s
[info] Iteration   1: 107069.498 ops/s
[info]                  ·gc.alloc.rate:            686.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       10088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9889.825 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 107582.784 ops/s
[info]                  ·gc.alloc.rate:            689.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       10088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9842.673 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 107076.555 ops/s
[info]                  ·gc.alloc.rate:            686.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       10088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9888.901 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 106470.098 ops/s
[info]                  ·gc.alloc.rate:                   682.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              10088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9994.409 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 59.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 107513.117 ops/s
[info]                  ·gc.alloc.rate:                                  689.025 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10088.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.193 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14949.427 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay":
[info]   107142.410 ±(99.9%) 1714.520 ops/s [Average]
[info]   (min, avg, max) = (106470.098, 107142.410, 107582.784), stdev = 445.255
[info]   CI (99.9%): [105427.890, 108856.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate":
[info]   686.620 ±(99.9%) 10.972 MB/sec [Average]
[info]   (min, avg, max) = (682.349, 686.620, 689.446), stdev = 2.849
[info]   CI (99.9%): [675.649, 697.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm":
[info]   10088.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10088.004, 10088.004, 10088.004), stdev = 0.001
[info]   CI (99.9%): [10088.003, 10088.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.565 ±(99.9%) 4.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.565, 2.826), stdev = 1.264
[info]   CI (99.9%): [≈ 0, 5.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen":
[info]   743.005 ±(99.9%) 598.576 MB/sec [Average]
[info]   (min, avg, max) = (672.610, 743.005, 1021.067), stdev = 155.448
[info]   CI (99.9%): [144.429, 1341.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10913.047 ±(99.9%) 8691.249 B/op [Average]
[info]   (min, avg, max) = (9842.673, 10913.047, 14949.427), stdev = 2257.090
[info]   CI (99.9%): [2221.798, 19604.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   11.816 ±(99.9%) 101.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.816, 59.080), stdev = 26.421
[info]   CI (99.9%): [≈ 0, 113.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.200, 16.000), stdev = 4.494
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce
[info] # Run progress: 5.36% complete, ETA 00:29:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 357329.349 ops/s
[info] # Warmup Iteration   2: 487986.148 ops/s
[info] # Warmup Iteration   3: 494542.568 ops/s
[info] # Warmup Iteration   4: 495722.394 ops/s
[info] # Warmup Iteration   5: 501611.689 ops/s
[info] Iteration   1: 503377.248 ops/s
[info]                  ·gc.alloc.rate:                                  1292.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3192.738 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 491992.056 ops/s
[info]                  ·gc.alloc.rate:                                  1270.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4355.633 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 506534.256 ops/s
[info]                  ·gc.alloc.rate:                                  1308.011 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4230.583 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 510460.844 ops/s
[info]                  ·gc.alloc.rate:            1317.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4198.157 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 508963.993 ops/s
[info]                  ·gc.alloc.rate:            1314.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4210.478 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce":
[info]   504265.679 ±(99.9%) 28363.842 ops/s [Average]
[info]   (min, avg, max) = (491992.056, 504265.679, 510460.844), stdev = 7366.000
[info]   CI (99.9%): [475901.838, 532629.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate":
[info]   1300.558 ±(99.9%) 74.949 MB/sec [Average]
[info]   (min, avg, max) = (1270.349, 1300.558, 1317.861), stdev = 19.464
[info]   CI (99.9%): [1225.609, 1375.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm":
[info]   4064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4064.001, 4064.001, 4064.001), stdev = 0.001
[info]   CI (99.9%): [4064.001, 4064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1292.268 ±(99.9%) 595.981 MB/sec [Average]
[info]   (min, avg, max) = (1015.399, 1292.268, 1361.625), stdev = 154.774
[info]   CI (99.9%): [696.287, 1888.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4037.518 ±(99.9%) 1834.463 B/op [Average]
[info]   (min, avg, max) = (3192.738, 4037.518, 4355.633), stdev = 476.404
[info]   CI (99.9%): [2203.054, 5871.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson
[info] # Run progress: 6.25% complete, ETA 00:28:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 665952.440 ops/s
[info] # Warmup Iteration   2: 1073711.152 ops/s
[info] # Warmup Iteration   3: 1070280.267 ops/s
[info] # Warmup Iteration   4: 1079066.645 ops/s
[info] # Warmup Iteration   5: 1076660.263 ops/s
[info] Iteration   1: 1075818.185 ops/s
[info]                  ·gc.alloc.rate:            765.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 984.269 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1066332.689 ops/s
[info]                  ·gc.alloc.rate:                   758.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1488.573 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.899 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 1076766.604 ops/s
[info]                  ·gc.alloc.rate:                                  766.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       994.095 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.974 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1067857.517 ops/s
[info]                  ·gc.alloc.rate:                                  759.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1003.352 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1074722.748 ops/s
[info]                  ·gc.alloc.rate:            764.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 996.970 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson":
[info]   1072299.549 ±(99.9%) 18621.192 ops/s [Average]
[info]   (min, avg, max) = (1066332.689, 1072299.549, 1076766.604), stdev = 4835.864
[info]   CI (99.9%): [1053678.356, 1090920.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate":
[info]   763.024 ±(99.9%) 13.085 MB/sec [Average]
[info]   (min, avg, max) = (758.775, 763.024, 766.188), stdev = 3.398
[info]   CI (99.9%): [749.939, 776.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen":
[info]   744.554 ±(99.9%) 568.261 MB/sec [Average]
[info]   (min, avg, max) = (672.721, 744.554, 1008.475), stdev = 147.576
[info]   CI (99.9%): [176.292, 1312.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1093.452 ±(99.9%) 850.941 B/op [Average]
[info]   (min, avg, max) = (984.269, 1093.452, 1488.573), stdev = 220.987
[info]   CI (99.9%): [242.511, 1944.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.375 ±(99.9%) 9.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.375, 5.899), stdev = 2.564
[info]   CI (99.9%): [≈ 0, 11.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 6.580
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter
[info] # Run progress: 7.14% complete, ETA 00:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2169828.541 ops/s
[info] # Warmup Iteration   2: 2765384.068 ops/s
[info] # Warmup Iteration   3: 2771594.602 ops/s
[info] # Warmup Iteration   4: 2753802.914 ops/s
[info] # Warmup Iteration   5: 2793285.809 ops/s
[info] Iteration   1: 2777265.232 ops/s
[info]                  ·gc.alloc.rate:            183.471 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.630 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2641903.011 ops/s
[info]                  ·gc.alloc.rate:      174.554 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2714371.217 ops/s
[info]                  ·gc.alloc.rate:            179.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 195.059 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2793204.189 ops/s
[info]                  ·gc.alloc.rate:      184.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2577159.791 ops/s
[info]                  ·gc.alloc.rate:            170.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter":
[info]   2700780.688 ±(99.9%) 351472.249 ops/s [Average]
[info]   (min, avg, max) = (2577159.791, 2700780.688, 2793204.189), stdev = 91276.227
[info]   CI (99.9%): [2349308.440, 3052252.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate":
[info]   178.445 ±(99.9%) 23.187 MB/sec [Average]
[info]   (min, avg, max) = (170.297, 178.445, 184.565), stdev = 6.022
[info]   CI (99.9%): [155.258, 201.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.814 ±(99.9%) 709.403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.814, 336.409), stdev = 184.230
[info]   CI (99.9%): [≈ 0, 911.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   118.227 ±(99.9%) 416.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.227, 205.444), stdev = 108.060
[info]   CI (99.9%): [≈ 0, 534.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay
[info] # Run progress: 8.04% complete, ETA 00:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56462.355 ops/s
[info] # Warmup Iteration   2: 101994.543 ops/s
[info] # Warmup Iteration   3: 103206.081 ops/s
[info] # Warmup Iteration   4: 104442.936 ops/s
[info] # Warmup Iteration   5: 105354.948 ops/s
[info] Iteration   1: 104582.994 ops/s
[info]                  ·gc.alloc.rate:            886.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15187.165 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 105487.398 ops/s
[info]                  ·gc.alloc.rate:                                  893.771 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.358 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15166.074 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                59.631 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 106689.563 ops/s
[info]                  ·gc.alloc.rate:                                  903.868 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.549 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10042.777 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 105231.843 ops/s
[info]                  ·gc.alloc.rate:            891.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15273.281 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 105359.644 ops/s
[info]                  ·gc.alloc.rate:            892.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15254.728 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay":
[info]   105470.289 ±(99.9%) 2947.260 ops/s [Average]
[info]   (min, avg, max) = (104582.994, 105470.289, 106689.563), stdev = 765.394
[info]   CI (99.9%): [102523.028, 108417.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate":
[info]   893.615 ±(99.9%) 24.838 MB/sec [Average]
[info]   (min, avg, max) = (886.103, 893.615, 903.868), stdev = 6.450
[info]   CI (99.9%): [868.778, 918.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm":
[info]   13336.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.004, 13336.004, 13336.004), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.182 ±(99.9%) 0.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.549), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen":
[info]   949.697 ±(99.9%) 579.423 MB/sec [Average]
[info]   (min, avg, max) = (680.665, 949.697, 1021.179), stdev = 150.474
[info]   CI (99.9%): [370.274, 1529.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   14184.805 ±(99.9%) 8917.697 B/op [Average]
[info]   (min, avg, max) = (10042.777, 14184.805, 15273.281), stdev = 2315.897
[info]   CI (99.9%): [5267.109, 23102.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   11.926 ±(99.9%) 102.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.926, 59.631), stdev = 26.668
[info]   CI (99.9%): [≈ 0, 114.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 18.000), stdev = 6.419
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce
[info] # Run progress: 8.93% complete, ETA 00:27:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 837444.147 ops/s
[info] # Warmup Iteration   2: 1096103.696 ops/s
[info] # Warmup Iteration   3: 1142147.366 ops/s
[info] # Warmup Iteration   4: 1173885.849 ops/s
[info] # Warmup Iteration   5: 1183434.368 ops/s
[info] Iteration   1: 1181275.648 ops/s
[info]                  ·gc.alloc.rate:            1843.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2267.586 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1164957.843 ops/s
[info]                  ·gc.alloc.rate:            1817.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2299.300 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1168912.511 ops/s
[info]                  ·gc.alloc.rate:            1823.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2749.943 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 1174851.775 ops/s
[info]                  ·gc.alloc.rate:                                  1833.656 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2278.929 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1146167.541 ops/s
[info]                  ·gc.alloc.rate:                                  1788.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2804.523 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce":
[info]   1167233.063 ±(99.9%) 51193.016 ops/s [Average]
[info]   (min, avg, max) = (1146167.541, 1167233.063, 1181275.648), stdev = 13294.664
[info]   CI (99.9%): [1116040.048, 1218426.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate":
[info]   1821.271 ±(99.9%) 80.076 MB/sec [Average]
[info]   (min, avg, max) = (1788.414, 1821.271, 1843.175), stdev = 20.795
[info]   CI (99.9%): [1741.196, 1901.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1837.759 ±(99.9%) 717.616 MB/sec [Average]
[info]   (min, avg, max) = (1701.455, 1837.759, 2042.202), stdev = 186.363
[info]   CI (99.9%): [1120.143, 2555.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2480.056 ±(99.9%) 1048.172 B/op [Average]
[info]   (min, avg, max) = (2267.586, 2480.056, 2804.523), stdev = 272.207
[info]   CI (99.9%): [1431.884, 3528.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 11.000), stdev = 2.345
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson
[info] # Run progress: 9.82% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1023099.675 ops/s
[info] # Warmup Iteration   2: 1574671.347 ops/s
[info] # Warmup Iteration   3: 1595611.835 ops/s
[info] # Warmup Iteration   4: 1587111.735 ops/s
[info] # Warmup Iteration   5: 1588237.861 ops/s
[info] Iteration   1: 1612094.143 ops/s
[info]                  ·gc.alloc.rate:                                  1130.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.154 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       996.309 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.650 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1600332.317 ops/s
[info]                  ·gc.alloc.rate:                                  1122.233 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1339.060 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1615928.181 ops/s
[info]                  ·gc.alloc.rate:            1133.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 994.614 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1625118.234 ops/s
[info]                  ·gc.alloc.rate:            1139.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 988.978 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1614839.734 ops/s
[info]                  ·gc.alloc.rate:                                  1132.635 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1327.020 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson":
[info]   1613662.522 ±(99.9%) 34328.363 ops/s [Average]
[info]   (min, avg, max) = (1600332.317, 1613662.522, 1625118.234), stdev = 8914.967
[info]   CI (99.9%): [1579334.159, 1647990.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate":
[info]   1131.694 ±(99.9%) 24.291 MB/sec [Average]
[info]   (min, avg, max) = (1122.233, 1131.694, 1139.755), stdev = 6.308
[info]   CI (99.9%): [1107.404, 1155.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.154), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1156.980 ±(99.9%) 718.239 MB/sec [Average]
[info]   (min, avg, max) = (1020.282, 1156.980, 1361.439), stdev = 186.524
[info]   CI (99.9%): [438.741, 1875.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1129.196 ±(99.9%) 716.804 B/op [Average]
[info]   (min, avg, max) = (988.978, 1129.196, 1339.060), stdev = 186.152
[info]   CI (99.9%): [412.392, 1846.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.130 ±(99.9%) 1.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.650), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter
[info] # Run progress: 10.71% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6836235.806 ops/s
[info] # Warmup Iteration   2: 6907479.961 ops/s
[info] # Warmup Iteration   3: 6981217.506 ops/s
[info] # Warmup Iteration   4: 6926502.289 ops/s
[info] # Warmup Iteration   5: 6918745.656 ops/s
[info] Iteration   1: 6947966.778 ops/s
[info]                  ·gc.alloc.rate:                   883.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        152.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 5350698.550 ops/s
[info]                  ·gc.alloc.rate:                                  679.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200.058 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.196 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 6028280.717 ops/s
[info]                  ·gc.alloc.rate:                                  766.166 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       266.605 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 7027135.786 ops/s
[info]                  ·gc.alloc.rate:            892.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 152.476 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7050646.768 ops/s
[info]                  ·gc.alloc.rate:            895.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 227.936 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter":
[info]   6480945.720 ±(99.9%) 2934683.214 ops/s [Average]
[info]   (min, avg, max) = (5350698.550, 6480945.720, 7050646.768), stdev = 762127.911
[info]   CI (99.9%): [3546262.506, 9415628.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate":
[info]   823.533 ±(99.9%) 372.712 MB/sec [Average]
[info]   (min, avg, max) = (679.907, 823.533, 895.805), stdev = 96.792
[info]   CI (99.9%): [450.821, 1196.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   815.172 ±(99.9%) 724.048 MB/sec [Average]
[info]   (min, avg, max) = (672.880, 815.172, 1021.318), stdev = 188.033
[info]   CI (99.9%): [91.123, 1539.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   199.896 ±(99.9%) 190.019 B/op [Average]
[info]   (min, avg, max) = (152.403, 199.896, 266.605), stdev = 49.347
[info]   CI (99.9%): [9.877, 389.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.190 ±(99.9%) 1.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.754), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay
[info] # Run progress: 11.61% complete, ETA 00:27:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188242.835 ops/s
[info] # Warmup Iteration   2: 325992.288 ops/s
[info] # Warmup Iteration   3: 329441.781 ops/s
[info] # Warmup Iteration   4: 329782.199 ops/s
[info] # Warmup Iteration   5: 329964.446 ops/s
[info] Iteration   1: 331890.169 ops/s
[info]                  ·gc.alloc.rate:            885.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       4200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3190.474 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 330354.393 ops/s
[info]                  ·gc.alloc.rate:                   881.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1016.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4842.677 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 336252.556 ops/s
[info]                  ·gc.alloc.rate:                                  897.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4200.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3186.261 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 328570.556 ops/s
[info]                  ·gc.alloc.rate:            876.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       4200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4891.687 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 333356.254 ops/s
[info]                  ·gc.alloc.rate:            889.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       4200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4821.017 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay":
[info]   332084.786 ±(99.9%) 11287.197 ops/s [Average]
[info]   (min, avg, max) = (328570.556, 332084.786, 336252.556), stdev = 2931.249
[info]   CI (99.9%): [320797.589, 343371.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate":
[info]   886.126 ±(99.9%) 30.273 MB/sec [Average]
[info]   (min, avg, max) = (876.715, 886.126, 897.326), stdev = 7.862
[info]   CI (99.9%): [855.854, 916.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm":
[info]   4200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4200.001, 4200.001, 4200.001), stdev = 0.001
[info]   CI (99.9%): [4200.001, 4200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.040 ±(99.9%) 0.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.199), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   882.388 ±(99.9%) 722.907 MB/sec [Average]
[info]   (min, avg, max) = (672.793, 882.388, 1021.098), stdev = 187.737
[info]   CI (99.9%): [159.482, 1605.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4186.423 ±(99.9%) 3509.697 B/op [Average]
[info]   (min, avg, max) = (3186.261, 4186.423, 4891.687), stdev = 911.457
[info]   CI (99.9%): [676.727, 7696.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.808 ±(99.9%) 32.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.808, 19.041), stdev = 8.515
[info]   CI (99.9%): [≈ 0, 36.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 17.000), stdev = 5.975
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce
[info] # Run progress: 12.50% complete, ETA 00:26:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351716.954 ops/s
[info] # Warmup Iteration   2: 527693.827 ops/s
[info] # Warmup Iteration   3: 528915.334 ops/s
[info] # Warmup Iteration   4: 537440.043 ops/s
[info] # Warmup Iteration   5: 551668.625 ops/s
[info] Iteration   1: 548433.183 ops/s
[info]                  ·gc.alloc.rate:                                  1775.693 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4884.300 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 551552.454 ops/s
[info]                  ·gc.alloc.rate:                                  1785.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4856.419 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 545851.844 ops/s
[info]                  ·gc.alloc.rate:                                  1767.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4907.229 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 550048.646 ops/s
[info]                  ·gc.alloc.rate:                                  1780.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4869.837 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 548144.115 ops/s
[info]                  ·gc.alloc.rate:            1774.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5864.271 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce":
[info]   548806.048 ±(99.9%) 8256.758 ops/s [Average]
[info]   (min, avg, max) = (545851.844, 548806.048, 551552.454), stdev = 2144.254
[info]   CI (99.9%): [540549.290, 557062.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate":
[info]   1776.813 ±(99.9%) 26.686 MB/sec [Average]
[info]   (min, avg, max) = (1767.271, 1776.813, 1785.684), stdev = 6.930
[info]   CI (99.9%): [1750.126, 1803.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm":
[info]   5096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.001, 5096.001, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.001, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.011), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1769.876 ±(99.9%) 586.021 MB/sec [Average]
[info]   (min, avg, max) = (1701.732, 1769.876, 2042.118), stdev = 152.188
[info]   CI (99.9%): [1183.855, 2355.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5076.411 ±(99.9%) 1697.476 B/op [Average]
[info]   (min, avg, max) = (4856.419, 5076.411, 5864.271), stdev = 440.829
[info]   CI (99.9%): [3378.935, 6773.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 11.000), stdev = 1.673
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson
[info] # Run progress: 13.39% complete, ETA 00:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588362.562 ops/s
[info] # Warmup Iteration   2: 947993.239 ops/s
[info] # Warmup Iteration   3: 955965.146 ops/s
[info] # Warmup Iteration   4: 961302.873 ops/s
[info] # Warmup Iteration   5: 959438.853 ops/s
[info] Iteration   1: 952063.503 ops/s
[info]                  ·gc.alloc.rate:                   895.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1668.315 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 976082.353 ops/s
[info]                  ·gc.alloc.rate:                   917.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1096.650 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 971872.456 ops/s
[info]                  ·gc.alloc.rate:                                  913.871 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1653.671 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 954479.392 ops/s
[info]                  ·gc.alloc.rate:                                  897.511 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1683.894 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 973291.414 ops/s
[info]                  ·gc.alloc.rate:            915.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1100.864 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson":
[info]   965557.824 ±(99.9%) 43704.260 ops/s [Average]
[info]   (min, avg, max) = (952063.503, 965557.824, 976082.353), stdev = 11349.858
[info]   CI (99.9%): [921853.563, 1009262.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate":
[info]   907.920 ±(99.9%) 41.273 MB/sec [Average]
[info]   (min, avg, max) = (895.140, 907.920, 917.937), stdev = 10.718
[info]   CI (99.9%): [866.647, 949.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen":
[info]   882.436 ±(99.9%) 710.303 MB/sec [Average]
[info]   (min, avg, max) = (680.173, 882.436, 1021.158), stdev = 184.464
[info]   CI (99.9%): [172.133, 1592.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1440.679 ±(99.9%) 1202.621 B/op [Average]
[info]   (min, avg, max) = (1096.650, 1440.679, 1683.894), stdev = 312.317
[info]   CI (99.9%): [238.058, 2643.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.316 ±(99.9%) 9.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.316, 5.506), stdev = 2.388
[info]   CI (99.9%): [≈ 0, 10.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.504
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter
[info] # Run progress: 14.29% complete, ETA 00:26:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2296704.302 ops/s
[info] # Warmup Iteration   2: 2609544.597 ops/s
[info] # Warmup Iteration   3: 2649176.672 ops/s
[info] # Warmup Iteration   4: 2647779.211 ops/s
[info] # Warmup Iteration   5: 2627399.329 ops/s
[info] Iteration   1: 2680934.412 ops/s
[info]                  ·gc.alloc.rate:                                  1117.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.152 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       798.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.391 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2702604.189 ops/s
[info]                  ·gc.alloc.rate:            1126.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 594.701 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2705761.156 ops/s
[info]                  ·gc.alloc.rate:                                  1127.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       594.011 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2658197.232 ops/s
[info]                  ·gc.alloc.rate:            1107.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 806.095 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2701784.018 ops/s
[info]                  ·gc.alloc.rate:            1125.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 594.847 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter":
[info]   2689856.202 ±(99.9%) 77961.045 ops/s [Average]
[info]   (min, avg, max) = (2658197.232, 2689856.202, 2705761.156), stdev = 20246.236
[info]   CI (99.9%): [2611895.157, 2767817.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate":
[info]   1120.940 ±(99.9%) 32.501 MB/sec [Average]
[info]   (min, avg, max) = (1107.819, 1120.940, 1127.565), stdev = 8.440
[info]   CI (99.9%): [1088.439, 1153.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.152), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1156.966 ±(99.9%) 716.810 MB/sec [Average]
[info]   (min, avg, max) = (1020.958, 1156.966, 1361.291), stdev = 186.153
[info]   CI (99.9%): [440.156, 1873.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   677.720 ±(99.9%) 438.805 B/op [Average]
[info]   (min, avg, max) = (594.011, 677.720, 806.095), stdev = 113.956
[info]   CI (99.9%): [238.916, 1116.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.391), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay
[info] # Run progress: 15.18% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74434.525 ops/s
[info] # Warmup Iteration   2: 167289.605 ops/s
[info] # Warmup Iteration   3: 171003.980 ops/s
[info] # Warmup Iteration   4: 170925.895 ops/s
[info] # Warmup Iteration   5: 160122.963 ops/s
[info] Iteration   1: 171338.749 ops/s
[info]                  ·gc.alloc.rate:                   1059.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              9736.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9300.769 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.714 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 173096.570 ops/s
[info]                  ·gc.alloc.rate:                                  1070.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9736.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.560 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12380.297 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 166488.425 ops/s
[info]                  ·gc.alloc.rate:            1029.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       9736.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9653.529 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 172627.989 ops/s
[info]                  ·gc.alloc.rate:            1067.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       9736.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9309.798 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 173685.475 ops/s
[info]                  ·gc.alloc.rate:            1074.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       9736.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9253.686 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay":
[info]   171447.442 ±(99.9%) 11181.095 ops/s [Average]
[info]   (min, avg, max) = (166488.425, 171447.442, 173685.475), stdev = 2903.695
[info]   CI (99.9%): [160266.347, 182628.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate":
[info]   1060.442 ±(99.9%) 69.386 MB/sec [Average]
[info]   (min, avg, max) = (1029.667, 1060.442, 1074.273), stdev = 18.019
[info]   CI (99.9%): [991.057, 1129.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm":
[info]   9736.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9736.002, 9736.002, 9736.003), stdev = 0.001
[info]   CI (99.9%): [9736.002, 9736.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.112 ±(99.9%) 0.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.560), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1087.388 ±(99.9%) 590.123 MB/sec [Average]
[info]   (min, avg, max) = (1012.351, 1087.388, 1361.452), stdev = 153.253
[info]   CI (99.9%): [497.265, 1677.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9979.616 ±(99.9%) 5204.094 B/op [Average]
[info]   (min, avg, max) = (9253.686, 9979.616, 12380.297), stdev = 1351.487
[info]   CI (99.9%): [4775.522, 15183.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.343 ±(99.9%) 63.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.343, 36.714), stdev = 16.419
[info]   CI (99.9%): [≈ 0, 70.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 14.000), stdev = 4.336
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson
[info] # Run progress: 16.07% complete, ETA 00:25:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 961822.159 ops/s
[info] # Warmup Iteration   2: 1494492.856 ops/s
[info] # Warmup Iteration   3: 1526254.945 ops/s
[info] # Warmup Iteration   4: 1527830.182 ops/s
[info] # Warmup Iteration   5: 1525297.869 ops/s
[info] Iteration   1: 1536950.199 ops/s
[info]                  ·gc.alloc.rate:                   976.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1035.476 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.775 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1553336.060 ops/s
[info]                  ·gc.alloc.rate:                                  986.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1034.704 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1546509.710 ops/s
[info]                  ·gc.alloc.rate:            982.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1039.266 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1555615.778 ops/s
[info]                  ·gc.alloc.rate:            988.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 688.762 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1556739.665 ops/s
[info]                  ·gc.alloc.rate:            988.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1032.398 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson":
[info]   1549830.282 ±(99.9%) 31661.143 ops/s [Average]
[info]   (min, avg, max) = (1536950.199, 1549830.282, 1556739.665), stdev = 8222.298
[info]   CI (99.9%): [1518169.139, 1581491.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate":
[info]   984.435 ±(99.9%) 20.323 MB/sec [Average]
[info]   (min, avg, max) = (976.179, 984.435, 988.885), stdev = 5.278
[info]   CI (99.9%): [964.112, 1004.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   950.824 ±(99.9%) 581.978 MB/sec [Average]
[info]   (min, avg, max) = (680.574, 950.824, 1020.972), stdev = 151.138
[info]   CI (99.9%): [368.846, 1532.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   966.121 ±(99.9%) 597.112 B/op [Average]
[info]   (min, avg, max) = (688.762, 966.121, 1039.266), stdev = 155.068
[info]   CI (99.9%): [369.009, 1563.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.955 ±(99.9%) 8.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.955, 4.775), stdev = 2.135
[info]   CI (99.9%): [≈ 0, 9.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.506
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter
[info] # Run progress: 16.96% complete, ETA 00:25:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3106027.058 ops/s
[info] # Warmup Iteration   2: 3964340.876 ops/s
[info] # Warmup Iteration   3: 3755438.561 ops/s
[info] # Warmup Iteration   4: 3939679.120 ops/s
[info] # Warmup Iteration   5: 4009948.020 ops/s
[info] Iteration   1: 3979714.333 ops/s
[info]                  ·gc.alloc.rate:            525.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 266.078 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4000846.860 ops/s
[info]                  ·gc.alloc.rate:            528.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132.337 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3906622.543 ops/s
[info]                  ·gc.alloc.rate:            516.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 271.046 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 3805729.577 ops/s
[info]                  ·gc.alloc.rate:            502.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.122 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3984558.264 ops/s
[info]                  ·gc.alloc.rate:                   526.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        265.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter":
[info]   3935494.315 ±(99.9%) 312270.977 ops/s [Average]
[info]   (min, avg, max) = (3805729.577, 3935494.315, 4000846.860), stdev = 81095.781
[info]   CI (99.9%): [3623223.339, 4247765.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate":
[info]   520.058 ±(99.9%) 41.229 MB/sec [Average]
[info]   (min, avg, max) = (502.933, 520.058, 528.708), stdev = 10.707
[info]   CI (99.9%): [478.829, 561.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.187 ±(99.9%) 709.357 MB/sec [Average]
[info]   (min, avg, max) = (336.382, 538.187, 672.778), stdev = 184.218
[info]   CI (99.9%): [≈ 0, 1247.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   214.868 ±(99.9%) 278.452 B/op [Average]
[info]   (min, avg, max) = (132.337, 214.868, 271.046), stdev = 72.313
[info]   CI (99.9%): [≈ 0, 493.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.263 ±(99.9%) 2.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.263, 1.316), stdev = 0.588
[info]   CI (99.9%): [≈ 0, 2.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.600, 14.000), stdev = 3.507
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay
[info] # Run progress: 17.86% complete, ETA 00:25:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96698.475 ops/s
[info] # Warmup Iteration   2: 203452.533 ops/s
[info] # Warmup Iteration   3: 205587.982 ops/s
[info] # Warmup Iteration   4: 205600.549 ops/s
[info] # Warmup Iteration   5: 204460.489 ops/s
[info] Iteration   1: 206332.226 ops/s
[info]                  ·gc.alloc.rate:                   944.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              7208.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7697.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.405 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 210261.316 ops/s
[info]                  ·gc.alloc.rate:                                  962.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7208.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.415 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7639.062 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.986 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 209132.636 ops/s
[info]                  ·gc.alloc.rate:            957.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       7208.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7685.162 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 209536.024 ops/s
[info]                  ·gc.alloc.rate:            959.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       7208.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5113.540 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 208818.644 ops/s
[info]                  ·gc.alloc.rate:            956.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       7208.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7696.827 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay":
[info]   208816.169 ±(99.9%) 5736.286 ops/s [Average]
[info]   (min, avg, max) = (206332.226, 208816.169, 210261.316), stdev = 1489.695
[info]   CI (99.9%): [203079.883, 214552.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate":
[info]   956.201 ±(99.9%) 26.255 MB/sec [Average]
[info]   (min, avg, max) = (944.798, 956.201, 962.718), stdev = 6.818
[info]   CI (99.9%): [929.946, 982.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm":
[info]   7208.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7208.002, 7208.002, 7208.002), stdev = 0.001
[info]   CI (99.9%): [7208.002, 7208.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.083 ±(99.9%) 0.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.415), stdev = 0.186
[info]   CI (99.9%): [≈ 0, 0.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   950.440 ±(99.9%) 580.886 MB/sec [Average]
[info]   (min, avg, max) = (680.740, 950.440, 1021.116), stdev = 150.854
[info]   CI (99.9%): [369.555, 1531.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   7166.476 ±(99.9%) 4420.064 B/op [Average]
[info]   (min, avg, max) = (5113.540, 7166.476, 7697.789), stdev = 1147.877
[info]   CI (99.9%): [2746.412, 11586.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.078 ±(99.9%) 42.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.078, 25.405), stdev = 11.018
[info]   CI (99.9%): [≈ 0, 48.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 17.000), stdev = 5.941
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce
[info] # Run progress: 18.75% complete, ETA 00:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349723.648 ops/s
[info] # Warmup Iteration   2: 473859.966 ops/s
[info] # Warmup Iteration   3: 486071.347 ops/s
[info] # Warmup Iteration   4: 487935.553 ops/s
[info] # Warmup Iteration   5: 496828.062 ops/s
[info] Iteration   1: 500362.919 ops/s
[info]                  ·gc.alloc.rate:                                  1635.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5353.405 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 495916.498 ops/s
[info]                  ·gc.alloc.rate:                                  1620.675 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4321.061 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 499257.125 ops/s
[info]                  ·gc.alloc.rate:                                  1631.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5364.919 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 498029.214 ops/s
[info]                  ·gc.alloc.rate:                                  1627.465 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5378.328 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 497620.924 ops/s
[info]                  ·gc.alloc.rate:                                  1627.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5378.306 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce":
[info]   498237.336 ±(99.9%) 6491.402 ops/s [Average]
[info]   (min, avg, max) = (495916.498, 498237.336, 500362.919), stdev = 1685.797
[info]   CI (99.9%): [491745.934, 504728.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate":
[info]   1628.451 ±(99.9%) 21.054 MB/sec [Average]
[info]   (min, avg, max) = (1620.675, 1628.451, 1635.151), stdev = 5.468
[info]   CI (99.9%): [1607.397, 1649.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.001, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.001, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.010, 0.013), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen":
[info]   1633.575 ±(99.9%) 585.881 MB/sec [Average]
[info]   (min, avg, max) = (1361.398, 1633.575, 1701.923), stdev = 152.151
[info]   CI (99.9%): [1047.694, 2219.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5159.204 ±(99.9%) 1804.611 B/op [Average]
[info]   (min, avg, max) = (4321.061, 5159.204, 5378.328), stdev = 468.652
[info]   CI (99.9%): [3354.593, 6963.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 11.000), stdev = 1.924
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson
[info] # Run progress: 19.64% complete, ETA 00:24:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248129.217 ops/s
[info] # Warmup Iteration   2: 446210.140 ops/s
[info] # Warmup Iteration   3: 451957.359 ops/s
[info] # Warmup Iteration   4: 457917.145 ops/s
[info] # Warmup Iteration   5: 451447.616 ops/s
[info] Iteration   1: 449704.830 ops/s
[info]                  ·gc.alloc.rate:            557.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2354.637 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 455520.941 ops/s
[info]                  ·gc.alloc.rate:            564.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2323.492 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 451456.388 ops/s
[info]                  ·gc.alloc.rate:            559.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1172.777 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 456179.310 ops/s
[info]                  ·gc.alloc.rate:            565.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2321.272 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 457258.604 ops/s
[info]                  ·gc.alloc.rate:                   567.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2324.941 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson":
[info]   454024.015 ±(99.9%) 12565.839 ops/s [Average]
[info]   (min, avg, max) = (449704.830, 454024.015, 457258.604), stdev = 3263.308
[info]   CI (99.9%): [441458.176, 466589.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate":
[info]   563.075 ±(99.9%) 15.615 MB/sec [Average]
[info]   (min, avg, max) = (557.698, 563.075, 567.105), stdev = 4.055
[info]   CI (99.9%): [547.460, 578.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen":
[info]   605.959 ±(99.9%) 580.291 MB/sec [Average]
[info]   (min, avg, max) = (336.388, 605.959, 675.453), stdev = 150.700
[info]   CI (99.9%): [25.668, 1186.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2099.424 ±(99.9%) 1995.372 B/op [Average]
[info]   (min, avg, max) = (1172.777, 2099.424, 2354.637), stdev = 518.192
[info]   CI (99.9%): [104.052, 4094.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.210 ±(99.9%) 27.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.210, 16.050), stdev = 7.178
[info]   CI (99.9%): [≈ 0, 30.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 12.000), stdev = 2.550
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter
[info] # Run progress: 20.54% complete, ETA 00:24:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4637222.585 ops/s
[info] # Warmup Iteration   2: 4866708.082 ops/s
[info] # Warmup Iteration   3: 3903524.707 ops/s
[info] # Warmup Iteration   4: 4996357.125 ops/s
[info] # Warmup Iteration   5: 3099861.474 ops/s
[info] Iteration   1: 5037788.639 ops/s
[info]                  ·gc.alloc.rate:            230.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4200532.820 ops/s
[info]                  ·gc.alloc.rate:            192.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 126.047 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3168804.374 ops/s
[info]                  ·gc.alloc.rate:      144.980 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4864069.143 ops/s
[info]                  ·gc.alloc.rate:            222.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108.853 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 3125983.029 ops/s
[info]                  ·gc.alloc.rate:      143.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter":
[info]   4079435.601 ±(99.9%) 3490665.492 ops/s [Average]
[info]   (min, avg, max) = (3125983.029, 4079435.601, 5037788.639), stdev = 906514.743
[info]   CI (99.9%): [588770.109, 7570101.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate":
[info]   186.636 ±(99.9%) 159.633 MB/sec [Average]
[info]   (min, avg, max) = (143.035, 186.636, 230.418), stdev = 41.456
[info]   CI (99.9%): [27.003, 346.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.854 ±(99.9%) 709.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.854, 336.476), stdev = 184.266
[info]   CI (99.9%): [≈ 0, 911.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   67.999 ±(99.9%) 240.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.999, 126.047), stdev = 62.575
[info]   CI (99.9%): [≈ 0, 308.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay
[info] # Run progress: 21.43% complete, ETA 00:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58825.792 ops/s
[info] # Warmup Iteration   2: 159298.956 ops/s
[info] # Warmup Iteration   3: 156291.741 ops/s
[info] # Warmup Iteration   4: 158399.958 ops/s
[info] # Warmup Iteration   5: 158801.548 ops/s
[info] Iteration   1: 159251.307 ops/s
[info]                  ·gc.alloc.rate:            879.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       8696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9973.710 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 161736.198 ops/s
[info]                  ·gc.alloc.rate:                   893.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              8696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6579.407 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 160440.347 ops/s
[info]                  ·gc.alloc.rate:                                  886.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.668 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10017.368 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 161124.460 ops/s
[info]                  ·gc.alloc.rate:                                  890.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6649.941 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 160263.248 ops/s
[info]                  ·gc.alloc.rate:            885.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       8696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10028.430 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay":
[info]   160563.112 ±(99.9%) 3610.717 ops/s [Average]
[info]   (min, avg, max) = (159251.307, 160563.112, 161736.198), stdev = 937.692
[info]   CI (99.9%): [156952.394, 164173.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate":
[info]   887.077 ±(99.9%) 20.102 MB/sec [Average]
[info]   (min, avg, max) = (879.709, 887.077, 893.551), stdev = 5.220
[info]   CI (99.9%): [866.975, 907.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm":
[info]   8696.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8696.003, 8696.003, 8696.003), stdev = 0.001
[info]   CI (99.9%): [8696.002, 8696.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.134 ±(99.9%) 1.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.668), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen":
[info]   881.613 ±(99.9%) 714.585 MB/sec [Average]
[info]   (min, avg, max) = (676.062, 881.613, 1021.173), stdev = 185.575
[info]   CI (99.9%): [167.028, 1596.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8649.771 ±(99.9%) 7154.731 B/op [Average]
[info]   (min, avg, max) = (6579.407, 8649.771, 10028.430), stdev = 1858.061
[info]   CI (99.9%): [1495.040, 15804.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.779 ±(99.9%) 66.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.779, 38.893), stdev = 17.393
[info]   CI (99.9%): [≈ 0, 74.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 5.683
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce
[info] # Run progress: 22.32% complete, ETA 00:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2931.037 ops/s
[info] # Warmup Iteration   2: 4426.766 ops/s
[info] # Warmup Iteration   3: 4411.229 ops/s
[info] # Warmup Iteration   4: 4541.337 ops/s
[info] # Warmup Iteration   5: 4501.226 ops/s
[info] Iteration   1: 4572.693 ops/s
[info]                  ·gc.alloc.rate:                                  1100.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.096 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 62.720 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       351206.478 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                229.247 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4635.703 ops/s
[info]                  ·gc.alloc.rate:                                  1115.360 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       346660.989 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4641.316 ops/s
[info]                  ·gc.alloc.rate:                                  1117.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.169 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       346213.011 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4485.852 ops/s
[info]                  ·gc.alloc.rate:                                  1081.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.097 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.856 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       474914.546 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4626.837 ops/s
[info]                  ·gc.alloc.rate:                                  1113.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       347335.136 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce":
[info]   4592.480 ±(99.9%) 252.464 ops/s [Average]
[info]   (min, avg, max) = (4485.852, 4592.480, 4641.316), stdev = 65.564
[info]   CI (99.9%): [4340.017, 4844.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1105.723 ±(99.9%) 57.547 MB/sec [Average]
[info]   (min, avg, max) = (1081.756, 1105.723, 1117.392), stdev = 14.945
[info]   CI (99.9%): [1048.176, 1163.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   378808.092 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (378808.088, 378808.092, 378808.097), stdev = 0.005
[info]   CI (99.9%): [378808.073, 378808.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.068 ±(99.9%) 0.267 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.068, 0.182), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   23.314 ±(99.9%) 92.192 B/op [Average]
[info]   (min, avg, max) = (1.046, 23.314, 62.720), stdev = 23.942
[info]   CI (99.9%): [≈ 0, 115.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1087.910 ±(99.9%) 577.527 MB/sec [Average]
[info]   (min, avg, max) = (1020.296, 1087.910, 1356.205), stdev = 149.982
[info]   CI (99.9%): [510.384, 1665.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   373266.032 ±(99.9%) 218938.399 B/op [Average]
[info]   (min, avg, max) = (346213.011, 373266.032, 474914.546), stdev = 56857.607
[info]   CI (99.9%): [154327.633, 592204.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   45.849 ±(99.9%) 394.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.849, 229.247), stdev = 102.522
[info]   CI (99.9%): [≈ 0, 440.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson
[info] # Run progress: 23.21% complete, ETA 00:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5515.828 ops/s
[info] # Warmup Iteration   2: 8957.224 ops/s
[info] # Warmup Iteration   3: 9201.271 ops/s
[info] # Warmup Iteration   4: 9067.026 ops/s
[info] # Warmup Iteration   5: 8972.044 ops/s
[info] Iteration   1: 9151.522 ops/s
[info]                  ·gc.alloc.rate:      231.864 MB/sec
[info]                  ·gc.alloc.rate.norm: 39872.048 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9048.025 ops/s
[info]                  ·gc.alloc.rate:            229.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58402.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 9046.439 ops/s
[info]                  ·gc.alloc.rate:            229.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58408.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 9079.726 ops/s
[info]                  ·gc.alloc.rate:      230.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 39872.048 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9119.055 ops/s
[info]                  ·gc.alloc.rate:            231.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       39872.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57947.621 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson":
[info]   9088.953 ±(99.9%) 176.339 ops/s [Average]
[info]   (min, avg, max) = (9046.439, 9088.953, 9151.522), stdev = 45.795
[info]   CI (99.9%): [8912.614, 9265.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   230.282 ±(99.9%) 4.449 MB/sec [Average]
[info]   (min, avg, max) = (229.220, 230.282, 231.864), stdev = 1.155
[info]   CI (99.9%): [225.833, 234.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   39872.046 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (39872.045, 39872.046, 39872.048), stdev = 0.002
[info]   CI (99.9%): [39872.039, 39872.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   201.472 ±(99.9%) 708.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.472, 335.789), stdev = 183.918
[info]   CI (99.9%): [≈ 0, 909.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   34951.730 ±(99.9%) 122862.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34951.730, 58408.743), stdev = 31906.966
[info]   CI (99.9%): [≈ 0, 157814.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 7.000), stdev = 3.493
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter
[info] # Run progress: 24.11% complete, ETA 00:23:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12154.929 ops/s
[info] # Warmup Iteration   2: 17365.013 ops/s
[info] # Warmup Iteration   3: 17074.009 ops/s
[info] # Warmup Iteration   4: 17311.095 ops/s
[info] # Warmup Iteration   5: 17308.399 ops/s
[info] Iteration   1: 17381.361 ops/s
[info]                  ·gc.alloc.rate:            297.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30459.067 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 17539.399 ops/s
[info]                  ·gc.alloc.rate:      299.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 26896.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17401.933 ops/s
[info]                  ·gc.alloc.rate:            297.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30424.067 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 17149.967 ops/s
[info]                  ·gc.alloc.rate:            293.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30872.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 17370.946 ops/s
[info]                  ·gc.alloc.rate:            296.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30478.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter":
[info]   17368.721 ±(99.9%) 538.581 ops/s [Average]
[info]   (min, avg, max) = (17149.967, 17368.721, 17539.399), stdev = 139.868
[info]   CI (99.9%): [16830.140, 17907.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   296.819 ±(99.9%) 9.231 MB/sec [Average]
[info]   (min, avg, max) = (293.050, 296.819, 299.720), stdev = 2.397
[info]   CI (99.9%): [287.588, 306.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   26896.025 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (26896.023, 26896.025, 26896.029), stdev = 0.002
[info]   CI (99.9%): [26896.016, 26896.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.122 ±(99.9%) 579.306 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.122, 336.435), stdev = 150.444
[info]   CI (99.9%): [≈ 0, 848.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   24446.864 ±(99.9%) 52628.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24446.864, 30872.836), stdev = 13667.431
[info]   CI (99.9%): [≈ 0, 77075.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay
[info] # Run progress: 25.00% complete, ETA 00:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 809.769 ops/s
[info] # Warmup Iteration   2: 1729.263 ops/s
[info] # Warmup Iteration   3: 1739.399 ops/s
[info] # Warmup Iteration   4: 1725.579 ops/s
[info] # Warmup Iteration   5: 1742.863 ops/s
[info] Iteration   1: 1757.971 ops/s
[info]                  ·gc.alloc.rate:                                  1064.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.232 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 36.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       909679.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3576.723 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1769.633 ops/s
[info]                  ·gc.alloc.rate:                                  1070.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.231 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 57.482 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       908173.451 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 1776.673 ops/s
[info]                  ·gc.alloc.rate:                                  1075.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.247 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       904087.181 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1775.256 ops/s
[info]                  ·gc.alloc.rate:                                  1074.544 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.230 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 37.784 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       905105.297 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1772.823 ops/s
[info]                  ·gc.alloc.rate:                                  1073.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952664.230 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 43.865 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       906125.709 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay":
[info]   1770.471 ±(99.9%) 28.806 ops/s [Average]
[info]   (min, avg, max) = (1757.971, 1770.471, 1776.673), stdev = 7.481
[info]   CI (99.9%): [1741.665, 1799.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1071.635 ±(99.9%) 17.593 MB/sec [Average]
[info]   (min, avg, max) = (1064.072, 1071.635, 1075.546), stdev = 4.569
[info]   CI (99.9%): [1054.042, 1089.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   952664.234 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (952664.230, 952664.234, 952664.247), stdev = 0.008
[info]   CI (99.9%): [952664.205, 952664.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.041, 0.065), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   36.076 ±(99.9%) 73.959 B/op [Average]
[info]   (min, avg, max) = (5.192, 36.076, 57.482), stdev = 19.207
[info]   CI (99.9%): [≈ 0, 110.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1019.848 ±(99.9%) 8.166 MB/sec [Average]
[info]   (min, avg, max) = (1016.061, 1019.848, 1020.927), stdev = 2.121
[info]   CI (99.9%): [1011.682, 1028.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   906634.311 ±(99.9%) 8765.842 B/op [Average]
[info]   (min, avg, max) = (904087.181, 906634.311, 909679.918), stdev = 2276.461
[info]   CI (99.9%): [897868.470, 915400.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   715.345 ±(99.9%) 6159.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 715.345, 3576.723), stdev = 1599.559
[info]   CI (99.9%): [≈ 0, 6874.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter
[info] # Run progress: 25.89% complete, ETA 00:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3258805.226 ops/s
[info] # Warmup Iteration   2: 3643569.902 ops/s
[info] # Warmup Iteration   3: 3605460.358 ops/s
[info] # Warmup Iteration   4: 3654077.505 ops/s
[info] # Warmup Iteration   5: 3672201.428 ops/s
[info] Iteration   1: 3735197.323 ops/s
[info]                  ·gc.alloc.rate:                                  1120.074 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       573.425 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.281 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 3747787.057 ops/s
[info]                  ·gc.alloc.rate:            1123.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 428.816 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 3756320.266 ops/s
[info]                  ·gc.alloc.rate:                                  1126.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       427.837 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 3746540.276 ops/s
[info]                  ·gc.alloc.rate:                                  1123.737 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       571.973 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 3731337.303 ops/s
[info]                  ·gc.alloc.rate:            1118.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 430.724 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter":
[info]   3743436.445 ±(99.9%) 38928.982 ops/s [Average]
[info]   (min, avg, max) = (3731337.303, 3743436.445, 3756320.266), stdev = 10109.733
[info]   CI (99.9%): [3704507.463, 3782365.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   1122.627 ±(99.9%) 12.007 MB/sec [Average]
[info]   (min, avg, max) = (1118.902, 1122.627, 1126.610), stdev = 3.118
[info]   CI (99.9%): [1110.621, 1134.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   1157.151 ±(99.9%) 717.458 MB/sec [Average]
[info]   (min, avg, max) = (1020.991, 1157.151, 1361.752), stdev = 186.321
[info]   CI (99.9%): [439.694, 1874.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   486.555 ±(99.9%) 302.841 B/op [Average]
[info]   (min, avg, max) = (427.837, 486.555, 573.425), stdev = 78.647
[info]   CI (99.9%): [183.714, 789.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.281), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay
[info] # Run progress: 26.79% complete, ETA 00:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93397.464 ops/s
[info] # Warmup Iteration   2: 170809.701 ops/s
[info] # Warmup Iteration   3: 172904.571 ops/s
[info] # Warmup Iteration   4: 173813.176 ops/s
[info] # Warmup Iteration   5: 172987.405 ops/s
[info] Iteration   1: 172856.807 ops/s
[info]                  ·gc.alloc.rate:                   975.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              8888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9219.210 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 176858.646 ops/s
[info]                  ·gc.alloc.rate:                                  998.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8888.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.544 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9087.690 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 176194.081 ops/s
[info]                  ·gc.alloc.rate:            994.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       8888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9121.829 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 176210.263 ops/s
[info]                  ·gc.alloc.rate:            995.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       8888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6080.633 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 177949.555 ops/s
[info]                  ·gc.alloc.rate:            1004.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       8888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9031.576 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay":
[info]   176013.871 ±(99.9%) 7331.058 ops/s [Average]
[info]   (min, avg, max) = (172856.807, 176013.871, 177949.555), stdev = 1903.853
[info]   CI (99.9%): [168682.812, 183344.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate":
[info]   993.795 ±(99.9%) 41.351 MB/sec [Average]
[info]   (min, avg, max) = (975.951, 993.795, 1004.639), stdev = 10.739
[info]   CI (99.9%): [952.444, 1035.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   8888.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8888.002, 8888.002, 8888.003), stdev = 0.001
[info]   CI (99.9%): [8888.002, 8888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.109 ±(99.9%) 0.936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.544), stdev = 0.243
[info]   CI (99.9%): [≈ 0, 1.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   951.177 ±(99.9%) 582.291 MB/sec [Average]
[info]   (min, avg, max) = (680.750, 951.177, 1021.003), stdev = 151.219
[info]   CI (99.9%): [368.886, 1533.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8508.188 ±(99.9%) 5232.092 B/op [Average]
[info]   (min, avg, max) = (6080.633, 8508.188, 9219.210), stdev = 1358.758
[info]   CI (99.9%): [3276.096, 13740.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.278 ±(99.9%) 62.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.278, 36.392), stdev = 16.275
[info]   CI (99.9%): [≈ 0, 69.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 14.000), stdev = 4.827
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce
[info] # Run progress: 27.68% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297531.088 ops/s
[info] # Warmup Iteration   2: 445740.159 ops/s
[info] # Warmup Iteration   3: 464447.120 ops/s
[info] # Warmup Iteration   4: 467851.806 ops/s
[info] # Warmup Iteration   5: 469340.592 ops/s
[info] Iteration   1: 468017.450 ops/s
[info]                  ·gc.alloc.rate:            1691.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5723.216 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 474679.877 ops/s
[info]                  ·gc.alloc.rate:            1715.367 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5643.003 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 474584.236 ops/s
[info]                  ·gc.alloc.rate:                                  1715.059 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5644.097 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 470510.028 ops/s
[info]                  ·gc.alloc.rate:                                  1700.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5692.801 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 471420.684 ops/s
[info]                  ·gc.alloc.rate:            1703.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5681.935 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce":
[info]   471842.455 ±(99.9%) 10917.142 ops/s [Average]
[info]   (min, avg, max) = (468017.450, 471842.455, 474679.877), stdev = 2835.147
[info]   CI (99.9%): [460925.313, 482759.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate":
[info]   1705.049 ±(99.9%) 39.720 MB/sec [Average]
[info]   (min, avg, max) = (1691.194, 1705.049, 1715.367), stdev = 10.315
[info]   CI (99.9%): [1665.329, 1744.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1701.705 ±(99.9%) 0.488 MB/sec [Average]
[info]   (min, avg, max) = (1701.506, 1701.705, 1701.821), stdev = 0.127
[info]   CI (99.9%): [1701.218, 1702.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5677.010 ±(99.9%) 131.266 B/op [Average]
[info]   (min, avg, max) = (5643.003, 5677.010, 5723.216), stdev = 34.089
[info]   CI (99.9%): [5545.745, 5808.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.400, 16.000), stdev = 2.966
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson
[info] # Run progress: 28.57% complete, ETA 00:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237834.002 ops/s
[info] # Warmup Iteration   2: 458695.861 ops/s
[info] # Warmup Iteration   3: 464858.146 ops/s
[info] # Warmup Iteration   4: 464408.081 ops/s
[info] # Warmup Iteration   5: 463221.369 ops/s
[info] Iteration   1: 448799.172 ops/s
[info]                  ·gc.alloc.rate:            522.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1177.343 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 462001.116 ops/s
[info]                  ·gc.alloc.rate:            537.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2287.421 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 463273.575 ops/s
[info]                  ·gc.alloc.rate:            539.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2281.068 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 468404.506 ops/s
[info]                  ·gc.alloc.rate:            545.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1128.076 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 464218.378 ops/s
[info]                  ·gc.alloc.rate:                   540.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2276.513 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson":
[info]   461339.349 ±(99.9%) 28533.795 ops/s [Average]
[info]   (min, avg, max) = (448799.172, 461339.349, 468404.506), stdev = 7410.136
[info]   CI (99.9%): [432805.555, 489873.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate":
[info]   536.944 ±(99.9%) 33.335 MB/sec [Average]
[info]   (min, avg, max) = (522.294, 536.944, 545.194), stdev = 8.657
[info]   CI (99.9%): [503.610, 570.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   537.108 ±(99.9%) 708.041 MB/sec [Average]
[info]   (min, avg, max) = (335.654, 537.108, 671.406), stdev = 183.876
[info]   CI (99.9%): [≈ 0, 1245.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1830.084 ±(99.9%) 2382.058 B/op [Average]
[info]   (min, avg, max) = (1128.076, 1830.084, 2287.421), stdev = 618.613
[info]   CI (99.9%): [≈ 0, 4212.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.710 ±(99.9%) 23.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.710, 13.551), stdev = 6.060
[info]   CI (99.9%): [≈ 0, 26.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 13.000), stdev = 3.421
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter
[info] # Run progress: 29.46% complete, ETA 00:21:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2601923.351 ops/s
[info] # Warmup Iteration   2: 2967343.444 ops/s
[info] # Warmup Iteration   3: 2977950.911 ops/s
[info] # Warmup Iteration   4: 3006270.022 ops/s
[info] # Warmup Iteration   5: 2988322.997 ops/s
[info] Iteration   1: 3052389.617 ops/s
[info]                  ·gc.alloc.rate:                                  1210.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       526.555 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   2: 3044818.674 ops/s
[info]                  ·gc.alloc.rate:                                  1207.088 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       703.778 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3047303.690 ops/s
[info]                  ·gc.alloc.rate:            1208.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 527.411 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3034051.900 ops/s
[info]                  ·gc.alloc.rate:                                  1202.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       706.307 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3063086.026 ops/s
[info]                  ·gc.alloc.rate:            1214.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 524.704 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter":
[info]   3048329.981 ±(99.9%) 40908.796 ops/s [Average]
[info]   (min, avg, max) = (3034051.900, 3048329.981, 3063086.026), stdev = 10623.884
[info]   CI (99.9%): [3007421.186, 3089238.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate":
[info]   1208.560 ±(99.9%) 16.399 MB/sec [Average]
[info]   (min, avg, max) = (1202.826, 1208.560, 1214.473), stdev = 4.259
[info]   CI (99.9%): [1192.161, 1224.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1157.303 ±(99.9%) 717.594 MB/sec [Average]
[info]   (min, avg, max) = (1021.155, 1157.303, 1361.482), stdev = 186.357
[info]   CI (99.9%): [439.710, 1874.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   597.751 ±(99.9%) 377.179 B/op [Average]
[info]   (min, avg, max) = (524.704, 597.751, 706.307), stdev = 97.952
[info]   CI (99.9%): [220.572, 974.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay
[info] # Run progress: 30.36% complete, ETA 00:21:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49883.729 ops/s
[info] # Warmup Iteration   2: 128464.199 ops/s
[info] # Warmup Iteration   3: 127600.715 ops/s
[info] # Warmup Iteration   4: 128873.125 ops/s
[info] # Warmup Iteration   5: 130185.635 ops/s
[info] Iteration   1: 113299.854 ops/s
[info]                  ·gc.alloc.rate:            787.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14019.014 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 130423.413 ops/s
[info]                  ·gc.alloc.rate:                   906.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8159.092 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 131400.003 ops/s
[info]                  ·gc.alloc.rate:                                  913.025 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10936.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.877 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12231.246 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 130903.557 ops/s
[info]                  ·gc.alloc.rate:            909.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12277.864 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 131123.852 ops/s
[info]                  ·gc.alloc.rate:            911.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8171.574 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay":
[info]   127430.135 ±(99.9%) 30447.652 ops/s [Average]
[info]   (min, avg, max) = (113299.854, 127430.135, 131400.003), stdev = 7907.158
[info]   CI (99.9%): [96982.484, 157877.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate":
[info]   885.380 ±(99.9%) 211.815 MB/sec [Average]
[info]   (min, avg, max) = (787.081, 885.380, 913.025), stdev = 55.008
[info]   CI (99.9%): [673.565, 1097.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm":
[info]   10936.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10936.003, 10936.003, 10936.004), stdev = 0.001
[info]   CI (99.9%): [10936.002, 10936.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.175 ±(99.9%) 1.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.877), stdev = 0.392
[info]   CI (99.9%): [≈ 0, 1.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   881.625 ±(99.9%) 714.573 MB/sec [Average]
[info]   (min, avg, max) = (676.078, 881.625, 1021.162), stdev = 185.572
[info]   CI (99.9%): [167.052, 1596.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10971.758 ±(99.9%) 10247.726 B/op [Average]
[info]   (min, avg, max) = (8159.092, 10971.758, 14019.014), stdev = 2661.302
[info]   CI (99.9%): [724.032, 21219.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.646 ±(99.9%) 83.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.646, 48.231), stdev = 21.570
[info]   CI (99.9%): [≈ 0, 92.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 17.000), stdev = 5.805
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce
[info] # Run progress: 31.25% complete, ETA 00:21:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211296.319 ops/s
[info] # Warmup Iteration   2: 394401.736 ops/s
[info] # Warmup Iteration   3: 400869.534 ops/s
[info] # Warmup Iteration   4: 406125.383 ops/s
[info] # Warmup Iteration   5: 406742.979 ops/s
[info] Iteration   1: 412941.061 ops/s
[info]                  ·gc.alloc.rate:                                  1439.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6486.812 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 412118.368 ops/s
[info]                  ·gc.alloc.rate:                                  1436.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5199.723 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 408997.924 ops/s
[info]                  ·gc.alloc.rate:                                  1425.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5239.317 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 408288.242 ops/s
[info]                  ·gc.alloc.rate:                                  1423.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5248.555 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 410475.800 ops/s
[info]                  ·gc.alloc.rate:                                  1431.220 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6525.871 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce":
[info]   410564.279 ±(99.9%) 7630.187 ops/s [Average]
[info]   (min, avg, max) = (408288.242, 410564.279, 412941.061), stdev = 1981.535
[info]   CI (99.9%): [402934.092, 418194.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate":
[info]   1431.401 ±(99.9%) 26.454 MB/sec [Average]
[info]   (min, avg, max) = (1423.466, 1431.401, 1439.572), stdev = 6.870
[info]   CI (99.9%): [1404.947, 1457.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm":
[info]   5488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5488.001, 5488.001, 5488.001), stdev = 0.001
[info]   CI (99.9%): [5488.001, 5488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.012), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen":
[info]   1497.495 ±(99.9%) 717.913 MB/sec [Average]
[info]   (min, avg, max) = (1361.325, 1497.495, 1701.886), stdev = 186.440
[info]   CI (99.9%): [779.582, 2215.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5740.056 ±(99.9%) 2695.054 B/op [Average]
[info]   (min, avg, max) = (5199.723, 5740.056, 6525.871), stdev = 699.897
[info]   CI (99.9%): [3045.002, 8435.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 12.000), stdev = 3.674
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson
[info] # Run progress: 32.14% complete, ETA 00:20:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344273.178 ops/s
[info] # Warmup Iteration   2: 696259.056 ops/s
[info] # Warmup Iteration   3: 699843.504 ops/s
[info] # Warmup Iteration   4: 701581.647 ops/s
[info] # Warmup Iteration   5: 698543.642 ops/s
[info] Iteration   1: 708702.547 ops/s
[info]                  ·gc.alloc.rate:            835.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1491.169 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 699030.908 ops/s
[info]                  ·gc.alloc.rate:                   824.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2276.676 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 710450.016 ops/s
[info]                  ·gc.alloc.rate:                                  837.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.309 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1508.154 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 710251.454 ops/s
[info]                  ·gc.alloc.rate:                                  837.495 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1508.600 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 708370.642 ops/s
[info]                  ·gc.alloc.rate:                                  835.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2268.857 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson":
[info]   707361.113 ±(99.9%) 18275.991 ops/s [Average]
[info]   (min, avg, max) = (699030.908, 707361.113, 710450.016), stdev = 4746.217
[info]   CI (99.9%): [689085.122, 725637.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate":
[info]   834.065 ±(99.9%) 21.473 MB/sec [Average]
[info]   (min, avg, max) = (824.268, 834.065, 837.617), stdev = 5.576
[info]   CI (99.9%): [812.591, 855.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.000, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.309), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen":
[info]   812.990 ±(99.9%) 714.234 MB/sec [Average]
[info]   (min, avg, max) = (671.385, 812.990, 1021.103), stdev = 185.484
[info]   CI (99.9%): [98.756, 1527.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1810.691 ±(99.9%) 1624.520 B/op [Average]
[info]   (min, avg, max) = (1491.169, 1810.691, 2276.676), stdev = 421.883
[info]   CI (99.9%): [186.171, 3435.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.100 ±(99.9%) 18.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.100, 10.499), stdev = 4.695
[info]   CI (99.9%): [≈ 0, 20.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 15.000), stdev = 5.167
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter
[info] # Run progress: 33.04% complete, ETA 00:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2919505.743 ops/s
[info] # Warmup Iteration   2: 3278065.381 ops/s
[info] # Warmup Iteration   3: 3255038.940 ops/s
[info] # Warmup Iteration   4: 3267873.485 ops/s
[info] # Warmup Iteration   5: 3293818.916 ops/s
[info] Iteration   1: 3242122.280 ops/s
[info]                  ·gc.alloc.rate:            807.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 489.896 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 3318715.925 ops/s
[info]                  ·gc.alloc.rate:                   826.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        320.643 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3306874.768 ops/s
[info]                  ·gc.alloc.rate:                                  823.656 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       486.024 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3325365.772 ops/s
[info]                  ·gc.alloc.rate:            828.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 322.213 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3321198.474 ops/s
[info]                  ·gc.alloc.rate:                                  827.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       483.937 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter":
[info]   3302855.444 ±(99.9%) 133382.002 ops/s [Average]
[info]   (min, avg, max) = (3242122.280, 3302855.444, 3325365.772), stdev = 34638.882
[info]   CI (99.9%): [3169473.442, 3436237.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate":
[info]   822.604 ±(99.9%) 33.226 MB/sec [Average]
[info]   (min, avg, max) = (807.465, 822.604, 828.219), stdev = 8.629
[info]   CI (99.9%): [789.378, 855.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   881.659 ±(99.9%) 714.590 MB/sec [Average]
[info]   (min, avg, max) = (676.127, 881.659, 1021.217), stdev = 185.577
[info]   CI (99.9%): [167.069, 1596.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   420.543 ±(99.9%) 348.507 B/op [Average]
[info]   (min, avg, max) = (320.643, 420.543, 489.896), stdev = 90.506
[info]   CI (99.9%): [72.035, 769.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.379 ±(99.9%) 3.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.895), stdev = 0.848
[info]   CI (99.9%): [≈ 0, 3.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 5.550
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay
[info] # Run progress: 33.93% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106897.292 ops/s
[info] # Warmup Iteration   2: 189058.802 ops/s
[info] # Warmup Iteration   3: 189826.044 ops/s
[info] # Warmup Iteration   4: 189955.148 ops/s
[info] # Warmup Iteration   5: 191031.103 ops/s
[info] Iteration   1: 188653.912 ops/s
[info]                  ·gc.alloc.rate:                                  1053.875 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8792.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8480.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                33.345 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 191583.730 ops/s
[info]                  ·gc.alloc.rate:                                  1070.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8792.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8389.352 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 193858.233 ops/s
[info]                  ·gc.alloc.rate:            1082.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       8792.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8290.442 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 192379.987 ops/s
[info]                  ·gc.alloc.rate:            1074.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       8792.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11139.236 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 191667.144 ops/s
[info]                  ·gc.alloc.rate:            1070.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       8792.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8385.414 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay":
[info]   191628.601 ±(99.9%) 7303.068 ops/s [Average]
[info]   (min, avg, max) = (188653.912, 191628.601, 193858.233), stdev = 1896.583
[info]   CI (99.9%): [184325.534, 198931.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate":
[info]   1070.430 ±(99.9%) 40.615 MB/sec [Average]
[info]   (min, avg, max) = (1053.875, 1070.430, 1082.785), stdev = 10.548
[info]   CI (99.9%): [1029.815, 1111.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm":
[info]   8792.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8792.002, 8792.002, 8792.002), stdev = 0.001
[info]   CI (99.9%): [8792.002, 8792.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.101 ±(99.9%) 0.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.337), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1088.296 ±(99.9%) 588.396 MB/sec [Average]
[info]   (min, avg, max) = (1016.580, 1088.296, 1361.619), stdev = 152.805
[info]   CI (99.9%): [499.900, 1676.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8937.062 ±(99.9%) 4747.435 B/op [Average]
[info]   (min, avg, max) = (8290.442, 8937.062, 11139.236), stdev = 1232.894
[info]   CI (99.9%): [4189.627, 13684.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.669 ±(99.9%) 57.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.669, 33.345), stdev = 14.913
[info]   CI (99.9%): [≈ 0, 64.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce
[info] # Run progress: 34.82% complete, ETA 00:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288952.004 ops/s
[info] # Warmup Iteration   2: 447756.737 ops/s
[info] # Warmup Iteration   3: 452811.608 ops/s
[info] # Warmup Iteration   4: 460585.111 ops/s
[info] # Warmup Iteration   5: 459650.556 ops/s
[info] Iteration   1: 460512.921 ops/s
[info]                  ·gc.alloc.rate:                                  1759.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5816.657 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 467376.997 ops/s
[info]                  ·gc.alloc.rate:                                  1786.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5730.806 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 464214.550 ops/s
[info]                  ·gc.alloc.rate:                                  1774.522 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5770.229 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 462298.468 ops/s
[info]                  ·gc.alloc.rate:                                  1767.358 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5794.052 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 461406.119 ops/s
[info]                  ·gc.alloc.rate:                                  1763.424 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6966.603 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce":
[info]   463161.811 ±(99.9%) 10496.180 ops/s [Average]
[info]   (min, avg, max) = (460512.921, 463161.811, 467376.997), stdev = 2725.825
[info]   CI (99.9%): [452665.631, 473657.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate":
[info]   1770.311 ±(99.9%) 40.184 MB/sec [Average]
[info]   (min, avg, max) = (1759.976, 1770.311, 1786.277), stdev = 10.436
[info]   CI (99.9%): [1730.127, 1810.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1769.901 ±(99.9%) 585.859 MB/sec [Average]
[info]   (min, avg, max) = (1701.597, 1769.901, 2042.067), stdev = 152.146
[info]   CI (99.9%): [1184.041, 2355.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6015.670 ±(99.9%) 2050.611 B/op [Average]
[info]   (min, avg, max) = (5730.806, 6015.670, 6966.603), stdev = 532.537
[info]   CI (99.9%): [3965.059, 8066.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.200, 10.000), stdev = 1.789
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter
[info] # Run progress: 35.71% complete, ETA 00:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2136469.990 ops/s
[info] # Warmup Iteration   2: 2469504.356 ops/s
[info] # Warmup Iteration   3: 2464167.525 ops/s
[info] # Warmup Iteration   4: 2493585.024 ops/s
[info] # Warmup Iteration   5: 2503953.607 ops/s
[info] Iteration   1: 2522294.976 ops/s
[info]                  ·gc.alloc.rate:                                  1627.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       849.601 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2551179.489 ops/s
[info]                  ·gc.alloc.rate:                                  1646.771 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1049.959 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2514654.308 ops/s
[info]                  ·gc.alloc.rate:            1623.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1065.148 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2549576.500 ops/s
[info]                  ·gc.alloc.rate:                                  1645.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1050.660 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 2545342.595 ops/s
[info]                  ·gc.alloc.rate:                                  1643.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1052.396 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter":
[info]   2536609.574 ±(99.9%) 65109.786 ops/s [Average]
[info]   (min, avg, max) = (2514654.308, 2536609.574, 2551179.489), stdev = 16908.805
[info]   CI (99.9%): [2471499.788, 2601719.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate":
[info]   1637.237 ±(99.9%) 42.166 MB/sec [Average]
[info]   (min, avg, max) = (1623.107, 1637.237, 1646.771), stdev = 10.950
[info]   CI (99.9%): [1595.071, 1679.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1633.626 ±(99.9%) 586.358 MB/sec [Average]
[info]   (min, avg, max) = (1361.228, 1633.626, 1701.952), stdev = 152.275
[info]   CI (99.9%): [1047.268, 2219.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1013.553 ±(99.9%) 353.722 B/op [Average]
[info]   (min, avg, max) = (849.601, 1013.553, 1065.148), stdev = 91.861
[info]   CI (99.9%): [659.831, 1367.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay
[info] # Run progress: 36.61% complete, ETA 00:19:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42130.983 ops/s
[info] # Warmup Iteration   2: 125095.695 ops/s
[info] # Warmup Iteration   3: 127272.956 ops/s
[info] # Warmup Iteration   4: 128785.083 ops/s
[info] # Warmup Iteration   5: 130902.037 ops/s
[info] Iteration   1: 130056.191 ops/s
[info]                  ·gc.alloc.rate:            937.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12211.865 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 130670.571 ops/s
[info]                  ·gc.alloc.rate:                                  941.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.185 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12242.466 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                48.136 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 130947.680 ops/s
[info]                  ·gc.alloc.rate:                                  943.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12273.270 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 131303.780 ops/s
[info]                  ·gc.alloc.rate:            946.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12239.814 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 131539.329 ops/s
[info]                  ·gc.alloc.rate:            948.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8145.549 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay":
[info]   130903.510 ±(99.9%) 2227.593 ops/s [Average]
[info]   (min, avg, max) = (130056.191, 130903.510, 131539.329), stdev = 578.499
[info]   CI (99.9%): [128675.918, 133131.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate":
[info]   943.375 ±(99.9%) 16.191 MB/sec [Average]
[info]   (min, avg, max) = (937.186, 943.375, 948.002), stdev = 4.205
[info]   CI (99.9%): [927.184, 959.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   11344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11344.003, 11344.003, 11344.003), stdev = 0.001
[info]   CI (99.9%): [11344.003, 11344.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.185), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.506 ±(99.9%) 3.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.234), stdev = 0.974
[info]   CI (99.9%): [≈ 0, 4.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   949.579 ±(99.9%) 579.072 MB/sec [Average]
[info]   (min, avg, max) = (680.712, 949.579, 1021.070), stdev = 150.383
[info]   CI (99.9%): [370.508, 1528.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   11422.593 ±(99.9%) 7054.581 B/op [Average]
[info]   (min, avg, max) = (8145.549, 11422.593, 12273.270), stdev = 1832.052
[info]   CI (99.9%): [4368.012, 18477.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.627 ±(99.9%) 82.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.627, 48.136), stdev = 21.527
[info]   CI (99.9%): [≈ 0, 92.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 17.000), stdev = 6.058
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson
[info] # Run progress: 37.50% complete, ETA 00:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216528.776 ops/s
[info] # Warmup Iteration   2: 687806.234 ops/s
[info] # Warmup Iteration   3: 688763.022 ops/s
[info] # Warmup Iteration   4: 693998.079 ops/s
[info] # Warmup Iteration   5: 683346.068 ops/s
[info] Iteration   1: 687800.875 ops/s
[info]                  ·gc.alloc.rate:            891.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2304.690 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 697905.514 ops/s
[info]                  ·gc.alloc.rate:                   904.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1521.728 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 700513.782 ops/s
[info]                  ·gc.alloc.rate:                                  907.919 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.312 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.701 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2294.297 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 698960.798 ops/s
[info]                  ·gc.alloc.rate:            905.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2299.321 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 699644.268 ops/s
[info]                  ·gc.alloc.rate:            906.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1531.479 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson":
[info]   696965.047 ±(99.9%) 20066.002 ops/s [Average]
[info]   (min, avg, max) = (687800.875, 696965.047, 700513.782), stdev = 5211.077
[info]   CI (99.9%): [676899.045, 717031.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate":
[info]   903.331 ±(99.9%) 26.046 MB/sec [Average]
[info]   (min, avg, max) = (891.433, 903.331, 907.919), stdev = 6.764
[info]   CI (99.9%): [877.285, 929.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2040.001, 2040.001, 2040.001), stdev = 0.001
[info]   CI (99.9%): [2040.001, 2040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.062 ±(99.9%) 0.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.312), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.140 ±(99.9%) 1.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.701), stdev = 0.313
[info]   CI (99.9%): [≈ 0, 1.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   880.960 ±(99.9%) 714.660 MB/sec [Average]
[info]   (min, avg, max) = (674.754, 880.960, 1021.096), stdev = 185.595
[info]   CI (99.9%): [166.300, 1595.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1990.303 ±(99.9%) 1630.084 B/op [Average]
[info]   (min, avg, max) = (1521.728, 1990.303, 2304.690), stdev = 423.328
[info]   CI (99.9%): [360.219, 3620.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.103 ±(99.9%) 18.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.103, 10.515), stdev = 4.703
[info]   CI (99.9%): [≈ 0, 20.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 19.000), stdev = 6.557
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter
[info] # Run progress: 38.39% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2014564.321 ops/s
[info] # Warmup Iteration   2: 2394678.075 ops/s
[info] # Warmup Iteration   3: 2399024.981 ops/s
[info] # Warmup Iteration   4: 2390055.179 ops/s
[info] # Warmup Iteration   5: 2396693.821 ops/s
[info] Iteration   1: 2436435.489 ops/s
[info]                  ·gc.alloc.rate:                                  1151.517 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.161 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       659.662 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2433518.284 ops/s
[info]                  ·gc.alloc.rate:                                  1150.247 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       880.581 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 2381154.825 ops/s
[info]                  ·gc.alloc.rate:            1125.628 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 674.964 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 2430838.523 ops/s
[info]                  ·gc.alloc.rate:            1149.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 661.200 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2422690.465 ops/s
[info]                  ·gc.alloc.rate:            1145.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 884.555 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter":
[info]   2420927.517 ±(99.9%) 87855.200 ops/s [Average]
[info]   (min, avg, max) = (2381154.825, 2420927.517, 2436435.489), stdev = 22815.716
[info]   CI (99.9%): [2333072.317, 2508782.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate":
[info]   1144.430 ±(99.9%) 41.404 MB/sec [Average]
[info]   (min, avg, max) = (1125.628, 1144.430, 1151.517), stdev = 10.752
[info]   CI (99.9%): [1103.027, 1185.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.161), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   1157.363 ±(99.9%) 717.998 MB/sec [Average]
[info]   (min, avg, max) = (1020.984, 1157.363, 1361.838), stdev = 186.462
[info]   CI (99.9%): [439.365, 1875.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   752.192 ±(99.9%) 458.895 B/op [Average]
[info]   (min, avg, max) = (659.662, 752.192, 884.555), stdev = 119.174
[info]   CI (99.9%): [293.297, 1211.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay
[info] # Run progress: 39.29% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89352.607 ops/s
[info] # Warmup Iteration   2: 160767.802 ops/s
[info] # Warmup Iteration   3: 166417.961 ops/s
[info] # Warmup Iteration   4: 166735.932 ops/s
[info] # Warmup Iteration   5: 166329.554 ops/s
[info] Iteration   1: 165997.015 ops/s
[info]                  ·gc.alloc.rate:                   924.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              8768.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9568.279 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 168695.029 ops/s
[info]                  ·gc.alloc.rate:                                  939.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8768.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9521.266 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.215 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 168310.765 ops/s
[info]                  ·gc.alloc.rate:                                  937.559 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8768.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6365.803 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 168275.561 ops/s
[info]                  ·gc.alloc.rate:            937.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       8768.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9551.257 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 168206.919 ops/s
[info]                  ·gc.alloc.rate:            937.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       8768.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1019.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9533.979 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay":
[info]   167897.058 ±(99.9%) 4155.019 ops/s [Average]
[info]   (min, avg, max) = (165997.015, 167897.058, 168695.029), stdev = 1079.045
[info]   CI (99.9%): [163742.039, 172052.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate":
[info]   935.393 ±(99.9%) 23.299 MB/sec [Average]
[info]   (min, avg, max) = (924.697, 935.393, 939.659), stdev = 6.051
[info]   CI (99.9%): [912.094, 958.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm":
[info]   8768.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8768.002, 8768.002, 8768.003), stdev = 0.001
[info]   CI (99.9%): [8768.002, 8768.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.095 ±(99.9%) 0.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.467), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   950.175 ±(99.9%) 580.388 MB/sec [Average]
[info]   (min, avg, max) = (680.693, 950.175, 1021.083), stdev = 150.725
[info]   CI (99.9%): [369.787, 1530.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8908.117 ±(99.9%) 5472.949 B/op [Average]
[info]   (min, avg, max) = (6365.803, 8908.117, 9568.279), stdev = 1421.308
[info]   CI (99.9%): [3435.168, 14381.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.559 ±(99.9%) 52.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.559, 31.578), stdev = 13.694
[info]   CI (99.9%): [≈ 0, 60.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 18.000), stdev = 6.465
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce
[info] # Run progress: 40.18% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210109.609 ops/s
[info] # Warmup Iteration   2: 399766.050 ops/s
[info] # Warmup Iteration   3: 399378.463 ops/s
[info] # Warmup Iteration   4: 404906.718 ops/s
[info] # Warmup Iteration   5: 408913.346 ops/s
[info] Iteration   1: 410653.103 ops/s
[info]                  ·gc.alloc.rate:                                  1270.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.137 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5218.257 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 411361.705 ops/s
[info]                  ·gc.alloc.rate:                                  1273.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5208.910 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 412120.585 ops/s
[info]                  ·gc.alloc.rate:            1275.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5199.407 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 414446.255 ops/s
[info]                  ·gc.alloc.rate:                                  1283.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3877.947 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 408529.649 ops/s
[info]                  ·gc.alloc.rate:                                  1264.819 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5245.356 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce":
[info]   411422.260 ±(99.9%) 8302.285 ops/s [Average]
[info]   (min, avg, max) = (408529.649, 411422.260, 414446.255), stdev = 2156.077
[info]   CI (99.9%): [403119.975, 419724.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate":
[info]   1273.641 ±(99.9%) 25.860 MB/sec [Average]
[info]   (min, avg, max) = (1264.819, 1273.641, 1283.159), stdev = 6.716
[info]   CI (99.9%): [1247.781, 1299.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.108 ±(99.9%) 0.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.524), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   1293.490 ±(99.9%) 585.800 MB/sec [Average]
[info]   (min, avg, max) = (1021.351, 1293.490, 1361.745), stdev = 152.130
[info]   CI (99.9%): [707.690, 1879.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4949.975 ±(99.9%) 2308.568 B/op [Average]
[info]   (min, avg, max) = (3877.947, 4949.975, 5245.356), stdev = 599.528
[info]   CI (99.9%): [2641.407, 7258.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson
[info] # Run progress: 41.07% complete, ETA 00:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571053.174 ops/s
[info] # Warmup Iteration   2: 922398.814 ops/s
[info] # Warmup Iteration   3: 924857.247 ops/s
[info] # Warmup Iteration   4: 923583.443 ops/s
[info] # Warmup Iteration   5: 926845.954 ops/s
[info] Iteration   1: 928101.097 ops/s
[info]                  ·gc.alloc.rate:            702.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1140.965 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 893066.823 ops/s
[info]                  ·gc.alloc.rate:            676.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1185.677 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 921402.971 ops/s
[info]                  ·gc.alloc.rate:                   697.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1149.116 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 929881.208 ops/s
[info]                  ·gc.alloc.rate:                                  703.947 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            679.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1151.154 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.127 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 935027.650 ops/s
[info]                  ·gc.alloc.rate:                                  708.036 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1718.892 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson":
[info]   921495.950 ±(99.9%) 64008.525 ops/s [Average]
[info]   (min, avg, max) = (893066.823, 921495.950, 935027.650), stdev = 16622.811
[info]   CI (99.9%): [857487.424, 985504.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate":
[info]   697.709 ±(99.9%) 48.439 MB/sec [Average]
[info]   (min, avg, max) = (676.216, 697.709, 708.036), stdev = 12.579
[info]   CI (99.9%): [649.270, 746.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   743.724 ±(99.9%) 596.988 MB/sec [Average]
[info]   (min, avg, max) = (672.495, 743.724, 1021.004), stdev = 155.036
[info]   CI (99.9%): [146.735, 1340.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1269.161 ±(99.9%) 970.330 B/op [Average]
[info]   (min, avg, max) = (1140.965, 1269.161, 1718.892), stdev = 251.992
[info]   CI (99.9%): [298.831, 2239.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.558 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.329), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.363 ±(99.9%) 9.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.363, 5.689), stdev = 2.467
[info]   CI (99.9%): [≈ 0, 10.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 12.000), stdev = 4.123
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter
[info] # Run progress: 41.96% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3826396.573 ops/s
[info] # Warmup Iteration   2: 4118249.725 ops/s
[info] # Warmup Iteration   3: 4103953.097 ops/s
[info] # Warmup Iteration   4: 4119738.533 ops/s
[info] # Warmup Iteration   5: 4128349.589 ops/s
[info] Iteration   1: 4077786.753 ops/s
[info]                  ·gc.alloc.rate:                   124.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        129.319 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.514 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4116152.762 ops/s
[info]                  ·gc.alloc.rate:      125.526 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4076922.138 ops/s
[info]                  ·gc.alloc.rate:            124.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.854 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 4090533.393 ops/s
[info]                  ·gc.alloc.rate:      124.725 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4042222.443 ops/s
[info]                  ·gc.alloc.rate:      123.264 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter":
[info]   4080723.498 ±(99.9%) 102907.925 ops/s [Average]
[info]   (min, avg, max) = (4042222.443, 4080723.498, 4116152.762), stdev = 26724.861
[info]   CI (99.9%): [3977815.573, 4183631.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate":
[info]   124.428 ±(99.9%) 3.150 MB/sec [Average]
[info]   (min, avg, max) = (123.264, 124.428, 125.526), stdev = 0.818
[info]   CI (99.9%): [121.277, 127.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.242 ±(99.9%) 707.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.242, 336.292), stdev = 183.819
[info]   CI (99.9%): [≈ 0, 842.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   51.835 ±(99.9%) 273.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.835, 129.854), stdev = 70.978
[info]   CI (99.9%): [≈ 0, 325.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.103 ±(99.9%) 0.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.514), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 0.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay
[info] # Run progress: 42.86% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70030.498 ops/s
[info] # Warmup Iteration   2: 125213.983 ops/s
[info] # Warmup Iteration   3: 127584.886 ops/s
[info] # Warmup Iteration   4: 128009.000 ops/s
[info] # Warmup Iteration   5: 111460.837 ops/s
[info] Iteration   1: 129093.537 ops/s
[info]                  ·gc.alloc.rate:            869.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8202.532 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 127227.111 ops/s
[info]                  ·gc.alloc.rate:                   856.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              10600.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12525.230 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 130528.429 ops/s
[info]                  ·gc.alloc.rate:                                  879.003 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10600.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.641 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12313.037 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 130614.958 ops/s
[info]                  ·gc.alloc.rate:            879.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8203.225 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 129645.123 ops/s
[info]                  ·gc.alloc.rate:            873.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12397.268 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay":
[info]   129421.832 ±(99.9%) 5315.612 ops/s [Average]
[info]   (min, avg, max) = (127227.111, 129421.832, 130614.958), stdev = 1380.448
[info]   CI (99.9%): [124106.220, 134737.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate":
[info]   871.535 ±(99.9%) 35.808 MB/sec [Average]
[info]   (min, avg, max) = (856.777, 871.535, 879.602), stdev = 9.299
[info]   CI (99.9%): [835.727, 907.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm":
[info]   10600.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10600.003, 10600.003, 10600.003), stdev = 0.001
[info]   CI (99.9%): [10600.003, 10600.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.128 ±(99.9%) 1.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.128, 0.641), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   881.572 ±(99.9%) 720.391 MB/sec [Average]
[info]   (min, avg, max) = (672.672, 881.572, 1021.056), stdev = 187.083
[info]   CI (99.9%): [161.181, 1601.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10728.259 ±(99.9%) 8881.832 B/op [Average]
[info]   (min, avg, max) = (8202.532, 10728.259, 12525.230), stdev = 2306.584
[info]   CI (99.9%): [1846.426, 19610.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.888 ±(99.9%) 85.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.888, 49.442), stdev = 22.111
[info]   CI (99.9%): [≈ 0, 95.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 14.000), stdev = 5.030
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce
[info] # Run progress: 43.75% complete, ETA 00:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105308.293 ops/s
[info] # Warmup Iteration   2: 119924.679 ops/s
[info] # Warmup Iteration   3: 121319.369 ops/s
[info] # Warmup Iteration   4: 119691.284 ops/s
[info] # Warmup Iteration   5: 120935.593 ops/s
[info] Iteration   1: 121513.904 ops/s
[info]                  ·gc.alloc.rate:                   901.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8714.191 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 122450.673 ops/s
[info]                  ·gc.alloc.rate:                                  908.666 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13116.832 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.562 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 123130.951 ops/s
[info]                  ·gc.alloc.rate:                                  913.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13052.707 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 123334.895 ops/s
[info]                  ·gc.alloc.rate:            915.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       11680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8687.485 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 123047.096 ops/s
[info]                  ·gc.alloc.rate:                                  912.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13062.041 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce":
[info]   122695.504 ±(99.9%) 2841.513 ops/s [Average]
[info]   (min, avg, max) = (121513.904, 122695.504, 123334.895), stdev = 737.932
[info]   CI (99.9%): [119853.991, 125537.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate":
[info]   910.419 ±(99.9%) 21.207 MB/sec [Average]
[info]   (min, avg, max) = (901.581, 910.419, 915.225), stdev = 5.507
[info]   CI (99.9%): [889.211, 931.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate.norm":
[info]   11680.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11680.003, 11680.003, 11680.004), stdev = 0.001
[info]   CI (99.9%): [11680.003, 11680.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.082), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.238 ±(99.9%) 1.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.238, 1.048), stdev = 0.455
[info]   CI (99.9%): [≈ 0, 1.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen":
[info]   883.172 ±(99.9%) 725.887 MB/sec [Average]
[info]   (min, avg, max) = (672.650, 883.172, 1021.104), stdev = 188.511
[info]   CI (99.9%): [157.285, 1609.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11326.651 ±(99.9%) 9230.658 B/op [Average]
[info]   (min, avg, max) = (8687.485, 11326.651, 13116.832), stdev = 2397.172
[info]   CI (99.9%): [2095.993, 20557.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.340 ±(99.9%) 72.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.340, 43.140), stdev = 18.706
[info]   CI (99.9%): [≈ 0, 82.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 11.000), stdev = 3.421
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson
[info] # Run progress: 44.64% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492750.788 ops/s
[info] # Warmup Iteration   2: 560407.987 ops/s
[info] # Warmup Iteration   3: 560979.166 ops/s
[info] # Warmup Iteration   4: 569866.882 ops/s
[info] # Warmup Iteration   5: 563572.344 ops/s
[info] Iteration   1: 428753.028 ops/s
[info]                  ·gc.alloc.rate:            562.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2469.781 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 557846.690 ops/s
[info]                  ·gc.alloc.rate:            731.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1898.049 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 561668.197 ops/s
[info]                  ·gc.alloc.rate:                   736.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1894.566 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 572325.224 ops/s
[info]                  ·gc.alloc.rate:                                  750.439 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.279 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2808.278 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 576277.431 ops/s
[info]                  ·gc.alloc.rate:            755.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1859.258 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson":
[info]   539374.114 ±(99.9%) 239877.789 ops/s [Average]
[info]   (min, avg, max) = (428753.028, 539374.114, 576277.431), stdev = 62295.500
[info]   CI (99.9%): [299496.326, 779251.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate":
[info]   707.216 ±(99.9%) 314.695 MB/sec [Average]
[info]   (min, avg, max) = (562.096, 707.216, 755.656), stdev = 81.725
[info]   CI (99.9%): [392.521, 1021.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate.norm":
[info]   2064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2064.001, 2064.001, 2064.001), stdev = 0.001
[info]   CI (99.9%): [2064.000, 2064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.279), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen":
[info]   744.594 ±(99.9%) 595.224 MB/sec [Average]
[info]   (min, avg, max) = (672.593, 744.594, 1021.047), stdev = 154.578
[info]   CI (99.9%): [149.369, 1339.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2185.986 ±(99.9%) 1658.877 B/op [Average]
[info]   (min, avg, max) = (1859.258, 2185.986, 2808.278), stdev = 430.805
[info]   CI (99.9%): [527.109, 3844.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.240 ±(99.9%) 19.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.240, 11.199), stdev = 5.009
[info]   CI (99.9%): [≈ 0, 21.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 12.000), stdev = 4.278
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter
[info] # Run progress: 45.54% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 584689.285 ops/s
[info] # Warmup Iteration   2: 612333.576 ops/s
[info] # Warmup Iteration   3: 612696.960 ops/s
[info] # Warmup Iteration   4: 607821.558 ops/s
[info] # Warmup Iteration   5: 613506.121 ops/s
[info] Iteration   1: 609512.410 ops/s
[info]                  ·gc.alloc.rate:            520.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1737.269 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 614440.373 ops/s
[info]                  ·gc.alloc.rate:            524.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 861.682 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 606634.473 ops/s
[info]                  ·gc.alloc.rate:            517.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1745.464 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 606370.162 ops/s
[info]                  ·gc.alloc.rate:            517.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 873.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 606832.554 ops/s
[info]                  ·gc.alloc.rate:                   518.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1744.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter":
[info]   608757.994 ±(99.9%) 13167.989 ops/s [Average]
[info]   (min, avg, max) = (606370.162, 608757.994, 614440.373), stdev = 3419.685
[info]   CI (99.9%): [595590.005, 621925.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate":
[info]   519.792 ±(99.9%) 11.213 MB/sec [Average]
[info]   (min, avg, max) = (517.793, 519.792, 524.656), stdev = 2.912
[info]   CI (99.9%): [508.579, 531.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.001, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.001, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.165 ±(99.9%) 709.306 MB/sec [Average]
[info]   (min, avg, max) = (336.374, 538.165, 672.719), stdev = 184.204
[info]   CI (99.9%): [≈ 0, 1247.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1392.492 ±(99.9%) 1845.862 B/op [Average]
[info]   (min, avg, max) = (861.682, 1392.492, 1745.464), stdev = 479.365
[info]   CI (99.9%): [≈ 0, 3238.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   1.728 ±(99.9%) 14.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.728, 8.638), stdev = 3.863
[info]   CI (99.9%): [≈ 0, 16.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay
[info] # Run progress: 46.43% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148501.649 ops/s
[info] # Warmup Iteration   2: 179173.865 ops/s
[info] # Warmup Iteration   3: 183592.109 ops/s
[info] # Warmup Iteration   4: 186823.527 ops/s
[info] # Warmup Iteration   5: 189957.546 ops/s
[info] Iteration   1: 191336.446 ops/s
[info]                  ·gc.alloc.rate:                                  1743.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14000.009 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 189925.503 ops/s
[info]                  ·gc.alloc.rate:                                  1730.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14103.854 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 190860.453 ops/s
[info]                  ·gc.alloc.rate:                                  1739.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14034.772 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 188795.465 ops/s
[info]                  ·gc.alloc.rate:                                  1720.563 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14188.557 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   5: 184671.938 ops/s
[info]                  ·gc.alloc.rate:            1683.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       14344.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14505.442 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay":
[info]   189117.961 ±(99.9%) 10275.016 ops/s [Average]
[info]   (min, avg, max) = (184671.938, 189117.961, 191336.446), stdev = 2668.389
[info]   CI (99.9%): [178842.945, 199392.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate":
[info]   1723.357 ±(99.9%) 93.003 MB/sec [Average]
[info]   (min, avg, max) = (1683.084, 1723.357, 1743.466), stdev = 24.153
[info]   CI (99.9%): [1630.354, 1816.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate.norm":
[info]   14344.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14344.002, 14344.002, 14344.002), stdev = 0.001
[info]   CI (99.9%): [14344.002, 14344.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.029), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen":
[info]   1701.761 ±(99.9%) 0.765 MB/sec [Average]
[info]   (min, avg, max) = (1701.573, 1701.761, 1702.027), stdev = 0.199
[info]   CI (99.9%): [1700.997, 1702.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen.norm":
[info]   14166.527 ±(99.9%) 780.562 B/op [Average]
[info]   (min, avg, max) = (14000.009, 14166.527, 14505.442), stdev = 202.709
[info]   CI (99.9%): [13385.965, 14947.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.000, 14.000), stdev = 3.317
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce
[info] # Run progress: 47.32% complete, ETA 00:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2804.682 ops/s
[info] # Warmup Iteration   2: 4954.586 ops/s
[info] # Warmup Iteration   3: 6643.650 ops/s
[info] # Warmup Iteration   4: 7365.946 ops/s
[info] # Warmup Iteration   5: 7364.023 ops/s
[info] Iteration   1: 7347.116 ops/s
[info]                  ·gc.alloc.rate:                   1081.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              231656.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        288932.698 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 856.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 7458.377 ops/s
[info]                  ·gc.alloc.rate:                                  1097.704 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       215478.151 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7505.274 ops/s
[info]                  ·gc.alloc.rate:                                  1104.706 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.591 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       214129.081 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7534.291 ops/s
[info]                  ·gc.alloc.rate:                                  1108.911 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       213305.070 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7495.834 ops/s
[info]                  ·gc.alloc.rate:                                  1103.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231672.266 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.674 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       285886.267 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce":
[info]   7468.178 ±(99.9%) 280.754 ops/s [Average]
[info]   (min, avg, max) = (7347.116, 7468.178, 7534.291), stdev = 72.911
[info]   CI (99.9%): [7187.424, 7748.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate":
[info]   1099.126 ±(99.9%) 41.658 MB/sec [Average]
[info]   (min, avg, max) = (1081.154, 1099.126, 1108.911), stdev = 10.818
[info]   CI (99.9%): [1057.468, 1140.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm":
[info]   231659.298 ±(99.9%) 27.915 B/op [Average]
[info]   (min, avg, max) = (231656.054, 231659.298, 231672.266), stdev = 7.249
[info]   CI (99.9%): [231631.383, 231687.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.097), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.997 ±(99.9%) 29.914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.997, 20.524), stdev = 7.769
[info]   CI (99.9%): [≈ 0, 37.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   1154.603 ±(99.9%) 704.249 MB/sec [Average]
[info]   (min, avg, max) = (1021.045, 1154.603, 1361.309), stdev = 182.891
[info]   CI (99.9%): [450.354, 1858.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   243546.253 ±(99.9%) 154270.124 B/op [Average]
[info]   (min, avg, max) = (213305.070, 243546.253, 288932.698), stdev = 40063.461
[info]   CI (99.9%): [89276.129, 397816.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   171.219 ±(99.9%) 1474.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 171.219, 856.097), stdev = 382.858
[info]   CI (99.9%): [≈ 0, 1645.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 21.000), stdev = 7.280
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson
[info] # Run progress: 48.21% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3883.661 ops/s
[info] # Warmup Iteration   2: 10555.241 ops/s
[info] # Warmup Iteration   3: 9046.455 ops/s
[info] # Warmup Iteration   4: 10765.064 ops/s
[info] # Warmup Iteration   5: 7908.556 ops/s
[info] Iteration   1: 10698.368 ops/s
[info]                  ·gc.alloc.rate:                   151.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48998.879 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 391.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10732.112 ops/s
[info]                  ·gc.alloc.rate:      151.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 22227.250 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10724.704 ops/s
[info]                  ·gc.alloc.rate:            151.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49266.552 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 7955.950 ops/s
[info]                  ·gc.alloc.rate:      112.418 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.051 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10627.480 ops/s
[info]                  ·gc.alloc.rate:            150.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49720.793 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson":
[info]   10147.723 ±(99.9%) 4720.638 ops/s [Average]
[info]   (min, avg, max) = (7955.950, 10147.723, 10732.112), stdev = 1225.935
[info]   CI (99.9%): [5427.084, 14868.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate":
[info]   143.362 ±(99.9%) 66.644 MB/sec [Average]
[info]   (min, avg, max) = (112.418, 143.362, 151.572), stdev = 17.307
[info]   CI (99.9%): [76.718, 210.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   22234.283 ±(99.9%) 30.681 B/op [Average]
[info]   (min, avg, max) = (22224.038, 22234.283, 22240.051), stdev = 7.968
[info]   CI (99.9%): [22203.603, 22264.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   200.921 ±(99.9%) 706.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 200.921, 335.780), stdev = 183.418
[info]   CI (99.9%): [≈ 0, 907.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   29597.245 ±(99.9%) 104043.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29597.245, 49720.793), stdev = 27019.697
[info]   CI (99.9%): [≈ 0, 133640.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   78.398 ±(99.9%) 675.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.398, 391.991), stdev = 175.304
[info]   CI (99.9%): [≈ 0, 753.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 7.000), stdev = 3.674
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter
[info] # Run progress: 49.11% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7772.993 ops/s
[info] # Warmup Iteration   2: 12094.136 ops/s
[info] # Warmup Iteration   3: 20359.147 ops/s
[info] # Warmup Iteration   4: 20609.554 ops/s
[info] # Warmup Iteration   5: 20411.425 ops/s
[info] Iteration   1: 20587.215 ops/s
[info]                  ·gc.alloc.rate:      185.168 MB/sec
[info]                  ·gc.alloc.rate.norm: 14160.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20510.533 ops/s
[info]                  ·gc.alloc.rate:            184.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25811.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 20337.331 ops/s
[info]                  ·gc.alloc.rate:      183.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 14160.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20626.777 ops/s
[info]                  ·gc.alloc.rate:            185.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25666.758 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 20461.596 ops/s
[info]                  ·gc.alloc.rate:            184.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25873.687 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter":
[info]   20504.690 ±(99.9%) 437.416 ops/s [Average]
[info]   (min, avg, max) = (20337.331, 20504.690, 20626.777), stdev = 113.596
[info]   CI (99.9%): [20067.274, 20942.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate":
[info]   184.468 ±(99.9%) 3.823 MB/sec [Average]
[info]   (min, avg, max) = (183.007, 184.468, 185.553), stdev = 0.993
[info]   CI (99.9%): [180.646, 188.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   14160.022 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (14160.020, 14160.022, 14160.028), stdev = 0.003
[info]   CI (99.9%): [14160.008, 14160.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.815 ±(99.9%) 709.408 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.815, 336.384), stdev = 184.231
[info]   CI (99.9%): [≈ 0, 911.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   15470.467 ±(99.9%) 54381.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15470.467, 25873.687), stdev = 14122.739
[info]   CI (99.9%): [≈ 0, 69852.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay
[info] # Run progress: 50.00% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002.446 ops/s
[info] # Warmup Iteration   2: 2952.310 ops/s
[info] # Warmup Iteration   3: 3057.565 ops/s
[info] # Warmup Iteration   4: 3147.826 ops/s
[info] # Warmup Iteration   5: 3168.388 ops/s
[info] Iteration   1: 3144.716 ops/s
[info]                  ·gc.alloc.rate:            923.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       462024.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 504956.338 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 3155.662 ops/s
[info]                  ·gc.alloc.rate:                                  926.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462024.129 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 41.766 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       506850.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1992.859 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 3196.883 ops/s
[info]                  ·gc.alloc.rate:                                  938.411 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462024.148 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       502647.595 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3182.613 ops/s
[info]                  ·gc.alloc.rate:                                  934.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462024.128 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.377 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       336571.819 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3200.639 ops/s
[info]                  ·gc.alloc.rate:                                  939.549 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462024.127 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       502019.678 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay":
[info]   3176.103 ±(99.9%) 95.866 ops/s [Average]
[info]   (min, avg, max) = (3144.716, 3176.103, 3200.639), stdev = 24.896
[info]   CI (99.9%): [3080.237, 3271.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate":
[info]   932.373 ±(99.9%) 28.176 MB/sec [Average]
[info]   (min, avg, max) = (923.099, 932.373, 939.549), stdev = 7.317
[info]   CI (99.9%): [904.197, 960.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   462024.134 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (462024.127, 462024.134, 462024.148), stdev = 0.009
[info]   CI (99.9%): [462024.100, 462024.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.084), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   15.782 ±(99.9%) 61.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.782, 41.766), stdev = 15.933
[info]   CI (99.9%): [≈ 0, 77.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   949.527 ±(99.9%) 578.968 MB/sec [Average]
[info]   (min, avg, max) = (680.706, 949.527, 1020.921), stdev = 150.356
[info]   CI (99.9%): [370.560, 1528.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   470609.183 ±(99.9%) 288620.166 B/op [Average]
[info]   (min, avg, max) = (336571.819, 470609.183, 506850.483), stdev = 74953.740
[info]   CI (99.9%): [181989.017, 759229.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   398.572 ±(99.9%) 3431.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 398.572, 1992.859), stdev = 891.234
[info]   CI (99.9%): [≈ 0, 3830.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 18.000), stdev = 6.340
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce
[info] # Run progress: 50.89% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196971.766 ops/s
[info] # Warmup Iteration   2: 328587.927 ops/s
[info] # Warmup Iteration   3: 333998.881 ops/s
[info] # Warmup Iteration   4: 334387.366 ops/s
[info] # Warmup Iteration   5: 329778.165 ops/s
[info] Iteration   1: 337549.746 ops/s
[info]                  ·gc.alloc.rate:                                  1113.443 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.518 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4758.222 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.106 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 338590.286 ops/s
[info]                  ·gc.alloc.rate:            1116.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4746.888 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 339148.864 ops/s
[info]                  ·gc.alloc.rate:            1118.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4739.120 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 339579.857 ops/s
[info]                  ·gc.alloc.rate:                                  1120.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6310.734 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 338260.468 ops/s
[info]                  ·gc.alloc.rate:            1116.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4751.490 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce":
[info]   338625.844 ±(99.9%) 3029.824 ops/s [Average]
[info]   (min, avg, max) = (337549.746, 338625.844, 339579.857), stdev = 786.836
[info]   CI (99.9%): [335596.020, 341655.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate":
[info]   1117.083 ±(99.9%) 10.157 MB/sec [Average]
[info]   (min, avg, max) = (1113.443, 1117.083, 1120.266), stdev = 2.638
[info]   CI (99.9%): [1106.925, 1127.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm":
[info]   5192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5192.001, 5192.001, 5192.001), stdev = 0.001
[info]   CI (99.9%): [5192.001, 5192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.104 ±(99.9%) 0.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.518), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 0.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1089.149 ±(99.9%) 586.586 MB/sec [Average]
[info]   (min, avg, max) = (1020.418, 1089.149, 1361.653), stdev = 152.335
[info]   CI (99.9%): [502.563, 1675.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5061.291 ±(99.9%) 2689.654 B/op [Average]
[info]   (min, avg, max) = (4739.120, 5061.291, 6310.734), stdev = 698.495
[info]   CI (99.9%): [2371.637, 7750.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.621 ±(99.9%) 5.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.621, 3.106), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 5.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson
[info] # Run progress: 51.79% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 831777.246 ops/s
[info] # Warmup Iteration   2: 1386411.536 ops/s
[info] # Warmup Iteration   3: 1386136.661 ops/s
[info] # Warmup Iteration   4: 1365065.376 ops/s
[info] # Warmup Iteration   5: 1398579.917 ops/s
[info] Iteration   1: 1390520.652 ops/s
[info]                  ·gc.alloc.rate:            579.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 759.993 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1363799.183 ops/s
[info]                  ·gc.alloc.rate:            568.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 774.883 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1366563.270 ops/s
[info]                  ·gc.alloc.rate:            569.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 773.291 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1357723.956 ops/s
[info]                  ·gc.alloc.rate:            565.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 389.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1390985.478 ops/s
[info]                  ·gc.alloc.rate:                   579.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        764.290 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson":
[info]   1373918.507 ±(99.9%) 60446.415 ops/s [Average]
[info]   (min, avg, max) = (1357723.956, 1373918.507, 1390985.478), stdev = 15697.742
[info]   CI (99.9%): [1313472.093, 1434364.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate":
[info]   572.579 ±(99.9%) 25.068 MB/sec [Average]
[info]   (min, avg, max) = (565.790, 572.579, 579.634), stdev = 6.510
[info]   CI (99.9%): [547.511, 597.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen":
[info]   605.031 ±(99.9%) 579.889 MB/sec [Average]
[info]   (min, avg, max) = (335.655, 605.031, 675.317), stdev = 150.595
[info]   CI (99.9%): [25.142, 1184.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   692.326 ±(99.9%) 652.996 B/op [Average]
[info]   (min, avg, max) = (389.172, 692.326, 774.883), stdev = 169.581
[info]   CI (99.9%): [39.330, 1345.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.055 ±(99.9%) 9.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.055, 5.276), stdev = 2.360
[info]   CI (99.9%): [≈ 0, 10.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 12.000), stdev = 2.828
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter
[info] # Run progress: 52.68% complete, ETA 00:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9878917.443 ops/s
[info] # Warmup Iteration   2: 11082097.010 ops/s
[info] # Warmup Iteration   3: 11294637.919 ops/s
[info] # Warmup Iteration   4: 11336204.282 ops/s
[info] # Warmup Iteration   5: 11244928.797 ops/s
[info] Iteration   1: 11338064.448 ops/s
[info]                  ·gc.alloc.rate:            576.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.392 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 11466309.361 ops/s
[info]                  ·gc.alloc.rate:            582.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 11375087.375 ops/s
[info]                  ·gc.alloc.rate:            578.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.084 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 11291293.598 ops/s
[info]                  ·gc.alloc.rate:                   573.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        93.776 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 11523099.388 ops/s
[info]                  ·gc.alloc.rate:                   585.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             339.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46.401 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter":
[info]   11398770.834 ±(99.9%) 364372.305 ops/s [Average]
[info]   (min, avg, max) = (11291293.598, 11398770.834, 11523099.388), stdev = 94626.331
[info]   CI (99.9%): [11034398.529, 11763143.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate":
[info]   579.375 ±(99.9%) 18.480 MB/sec [Average]
[info]   (min, avg, max) = (573.858, 579.375, 585.651), stdev = 4.799
[info]   CI (99.9%): [560.895, 597.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.868 ±(99.9%) 705.962 MB/sec [Average]
[info]   (min, avg, max) = (336.387, 538.868, 672.868), stdev = 183.336
[info]   CI (99.9%): [≈ 0, 1244.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   74.565 ±(99.9%) 99.406 B/op [Average]
[info]   (min, avg, max) = (46.174, 74.565, 93.776), stdev = 25.815
[info]   CI (99.9%): [≈ 0, 173.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.464), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 11.000), stdev = 3.937
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay
[info] # Run progress: 53.57% complete, ETA 00:14:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122704.557 ops/s
[info] # Warmup Iteration   2: 198272.553 ops/s
[info] # Warmup Iteration   3: 204056.039 ops/s
[info] # Warmup Iteration   4: 204232.253 ops/s
[info] # Warmup Iteration   5: 205436.231 ops/s
[info] Iteration   1: 203378.847 ops/s
[info]                  ·gc.alloc.rate:            649.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5206.563 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 201455.587 ops/s
[info]                  ·gc.alloc.rate:            643.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5256.124 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 205676.401 ops/s
[info]                  ·gc.alloc.rate:            656.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5148.249 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 206382.583 ops/s
[info]                  ·gc.alloc.rate:                   658.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5156.240 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 206808.296 ops/s
[info]                  ·gc.alloc.rate:                                  660.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.496 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5181.057 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay":
[info]   204740.343 ±(99.9%) 8715.751 ops/s [Average]
[info]   (min, avg, max) = (201455.587, 204740.343, 206808.296), stdev = 2263.453
[info]   CI (99.9%): [196024.591, 213456.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate":
[info]   653.465 ±(99.9%) 27.666 MB/sec [Average]
[info]   (min, avg, max) = (643.132, 653.465, 660.078), stdev = 7.185
[info]   CI (99.9%): [625.799, 681.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm":
[info]   5024.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5024.002, 5024.002, 5024.002), stdev = 0.001
[info]   CI (99.9%): [5024.002, 5024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.099 ±(99.9%) 0.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.099, 0.496), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 0.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen":
[info]   674.966 ±(99.9%) 13.594 MB/sec [Average]
[info]   (min, avg, max) = (672.595, 674.966, 680.713), stdev = 3.530
[info]   CI (99.9%): [661.372, 688.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5189.647 ±(99.9%) 167.945 B/op [Average]
[info]   (min, avg, max) = (5148.249, 5189.647, 5256.124), stdev = 43.615
[info]   CI (99.9%): [5021.702, 5357.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.096 ±(99.9%) 52.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.096, 30.480), stdev = 13.631
[info]   CI (99.9%): [≈ 0, 58.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce
[info] # Run progress: 54.46% complete, ETA 00:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 957137.269 ops/s
[info] # Warmup Iteration   2: 1242305.928 ops/s
[info] # Warmup Iteration   3: 1224816.082 ops/s
[info] # Warmup Iteration   4: 1236744.245 ops/s
[info] # Warmup Iteration   5: 1253809.678 ops/s
[info] Iteration   1: 1264436.344 ops/s
[info]                  ·gc.alloc.rate:                                  1272.234 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1694.780 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 1258634.283 ops/s
[info]                  ·gc.alloc.rate:                                  1266.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1702.560 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1264187.704 ops/s
[info]                  ·gc.alloc.rate:                                  1273.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1692.424 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1270548.132 ops/s
[info]                  ·gc.alloc.rate:                                  1279.106 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1264.987 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1265553.055 ops/s
[info]                  ·gc.alloc.rate:                                  1273.706 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1693.332 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce":
[info]   1264671.904 ±(99.9%) 16342.488 ops/s [Average]
[info]   (min, avg, max) = (1258634.283, 1264671.904, 1270548.132), stdev = 4244.092
[info]   CI (99.9%): [1248329.415, 1281014.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate":
[info]   1272.962 ±(99.9%) 17.140 MB/sec [Average]
[info]   (min, avg, max) = (1266.607, 1272.962, 1279.106), stdev = 4.451
[info]   CI (99.9%): [1255.822, 1290.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm":
[info]   1584.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1584.000, 1584.000, 1584.000), stdev = 0.001
[info]   CI (99.9%): [1584.000, 1584.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1293.208 ±(99.9%) 584.881 MB/sec [Average]
[info]   (min, avg, max) = (1021.497, 1293.208, 1361.620), stdev = 151.892
[info]   CI (99.9%): [708.327, 1878.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1609.616 ±(99.9%) 742.001 B/op [Average]
[info]   (min, avg, max) = (1264.987, 1609.616, 1702.560), stdev = 192.695
[info]   CI (99.9%): [867.615, 2351.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson
[info] # Run progress: 55.36% complete, ETA 00:13:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2330192.279 ops/s
[info] # Warmup Iteration   2: 3477652.384 ops/s
[info] # Warmup Iteration   3: 3508091.640 ops/s
[info] # Warmup Iteration   4: 3484939.041 ops/s
[info] # Warmup Iteration   5: 3502697.388 ops/s
[info] Iteration   1: 3504447.008 ops/s
[info]                  ·gc.alloc.rate:                   961.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        454.146 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 3567245.486 ops/s
[info]                  ·gc.alloc.rate:                                  978.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       450.555 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3553083.447 ops/s
[info]                  ·gc.alloc.rate:            975.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 452.334 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3573733.912 ops/s
[info]                  ·gc.alloc.rate:            980.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 299.822 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3556101.387 ops/s
[info]                  ·gc.alloc.rate:            975.889 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 451.969 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson":
[info]   3550922.248 ±(99.9%) 105071.478 ops/s [Average]
[info]   (min, avg, max) = (3504447.008, 3550922.248, 3573733.912), stdev = 27286.729
[info]   CI (99.9%): [3445850.770, 3655993.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate":
[info]   974.479 ±(99.9%) 28.908 MB/sec [Average]
[info]   (min, avg, max) = (961.691, 974.479, 980.789), stdev = 7.507
[info]   CI (99.9%): [945.571, 1003.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   950.931 ±(99.9%) 581.934 MB/sec [Average]
[info]   (min, avg, max) = (680.700, 950.931, 1021.005), stdev = 151.126
[info]   CI (99.9%): [368.998, 1532.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   421.765 ±(99.9%) 262.538 B/op [Average]
[info]   (min, avg, max) = (299.822, 421.765, 454.146), stdev = 68.180
[info]   CI (99.9%): [159.227, 684.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.419 ±(99.9%) 3.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.419, 2.094), stdev = 0.937
[info]   CI (99.9%): [≈ 0, 4.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter
[info] # Run progress: 56.25% complete, ETA 00:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14642459.183 ops/s
[info] # Warmup Iteration   2: 16156066.815 ops/s
[info] # Warmup Iteration   3: 16113062.662 ops/s
[info] # Warmup Iteration   4: 16078453.112 ops/s
[info] # Warmup Iteration   5: 16087513.630 ops/s
[info] Iteration   1: 16290281.129 ops/s
[info]                  ·gc.alloc.rate:            496.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32.501 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 15620936.168 ops/s
[info]                  ·gc.alloc.rate:            476.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67.786 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 16171630.321 ops/s
[info]                  ·gc.alloc.rate:            493.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32.739 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 16061661.793 ops/s
[info]                  ·gc.alloc.rate:            489.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.928 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 16323855.505 ops/s
[info]                  ·gc.alloc.rate:            497.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32.433 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter":
[info]   16093672.983 ±(99.9%) 1092899.505 ops/s [Average]
[info]   (min, avg, max) = (15620936.168, 16093672.983, 16323855.505), stdev = 283822.531
[info]   CI (99.9%): [15000773.478, 17186572.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate":
[info]   490.715 ±(99.9%) 33.232 MB/sec [Average]
[info]   (min, avg, max) = (476.334, 490.715, 497.783), stdev = 8.630
[info]   CI (99.9%): [457.482, 523.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.862 ±(99.9%) 709.470 MB/sec [Average]
[info]   (min, avg, max) = (336.254, 470.862, 672.702), stdev = 184.247
[info]   CI (99.9%): [≈ 0, 1180.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   46.278 ±(99.9%) 72.386 B/op [Average]
[info]   (min, avg, max) = (32.433, 46.278, 67.786), stdev = 18.798
[info]   CI (99.9%): [≈ 0, 118.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc
[info] # Run progress: 57.14% complete, ETA 00:13:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14401617.015 ops/s
[info] # Warmup Iteration   2: 17515816.979 ops/s
[info] # Warmup Iteration   3: 17979074.750 ops/s
[info] # Warmup Iteration   4: 18014794.291 ops/s
[info] # Warmup Iteration   5: 18021766.428 ops/s
[info] Iteration   1: 18020343.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17831795.115 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17644743.618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17623236.662 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17539402.866 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc":
[info]   17731904.265 ±(99.9%) 744772.513 ops/s [Average]
[info]   (min, avg, max) = (17539402.866, 17731904.265, 18020343.062), stdev = 193415.056
[info]   CI (99.9%): [16987131.752, 18476676.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay
[info] # Run progress: 58.04% complete, ETA 00:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453689.007 ops/s
[info] # Warmup Iteration   2: 731185.252 ops/s
[info] # Warmup Iteration   3: 743162.740 ops/s
[info] # Warmup Iteration   4: 745479.439 ops/s
[info] # Warmup Iteration   5: 746495.456 ops/s
[info] Iteration   1: 750753.325 ops/s
[info]                  ·gc.alloc.rate:                                  1095.076 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.174 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2844.595 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.379 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 758667.826 ops/s
[info]                  ·gc.alloc.rate:                                  1106.599 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2118.447 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 751797.943 ops/s
[info]                  ·gc.alloc.rate:            1096.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       2296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2137.802 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 757572.075 ops/s
[info]                  ·gc.alloc.rate:            1105.000 MB/sec
[info]                  ·gc.alloc.rate.norm:       2296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2121.509 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 755125.221 ops/s
[info]                  ·gc.alloc.rate:                                  1101.457 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2837.847 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay":
[info]   754783.278 ±(99.9%) 13358.012 ops/s [Average]
[info]   (min, avg, max) = (750753.325, 754783.278, 758667.826), stdev = 3469.033
[info]   CI (99.9%): [741425.266, 768141.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate":
[info]   1100.946 ±(99.9%) 19.446 MB/sec [Average]
[info]   (min, avg, max) = (1095.076, 1100.946, 1106.599), stdev = 5.050
[info]   CI (99.9%): [1081.500, 1120.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm":
[info]   2296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.001, 2296.001, 2296.001), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.297 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.174), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.364), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   1156.242 ±(99.9%) 712.967 MB/sec [Average]
[info]   (min, avg, max) = (1021.022, 1156.242, 1361.396), stdev = 185.155
[info]   CI (99.9%): [443.276, 1869.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   2412.040 ±(99.9%) 1508.925 B/op [Average]
[info]   (min, avg, max) = (2118.447, 2412.040, 2844.595), stdev = 391.863
[info]   CI (99.9%): [903.115, 3920.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   1.676 ±(99.9%) 14.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.676, 8.379), stdev = 3.747
[info]   CI (99.9%): [≈ 0, 16.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 11.000), stdev = 3.317
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce
[info] # Run progress: 58.93% complete, ETA 00:12:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354589.884 ops/s
[info] # Warmup Iteration   2: 595515.416 ops/s
[info] # Warmup Iteration   3: 614048.418 ops/s
[info] # Warmup Iteration   4: 615047.985 ops/s
[info] # Warmup Iteration   5: 621950.658 ops/s
[info] Iteration   1: 624568.245 ops/s
[info]                  ·gc.alloc.rate:                                  1415.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4288.898 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 627173.237 ops/s
[info]                  ·gc.alloc.rate:            1421.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3416.728 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 625445.015 ops/s
[info]                  ·gc.alloc.rate:                                  1417.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3426.094 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 632094.182 ops/s
[info]                  ·gc.alloc.rate:                                  1432.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3390.379 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 630450.289 ops/s
[info]                  ·gc.alloc.rate:            1428.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3399.165 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce":
[info]   627946.194 ±(99.9%) 12438.859 ops/s [Average]
[info]   (min, avg, max) = (624568.245, 627946.194, 632094.182), stdev = 3230.332
[info]   CI (99.9%): [615507.334, 640385.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate":
[info]   1423.291 ±(99.9%) 28.060 MB/sec [Average]
[info]   (min, avg, max) = (1415.526, 1423.291, 1432.644), stdev = 7.287
[info]   CI (99.9%): [1395.231, 1451.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1429.372 ±(99.9%) 585.831 MB/sec [Average]
[info]   (min, avg, max) = (1361.270, 1429.372, 1701.526), stdev = 152.138
[info]   CI (99.9%): [843.541, 2015.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3584.253 ±(99.9%) 1517.769 B/op [Average]
[info]   (min, avg, max) = (3390.379, 3584.253, 4288.898), stdev = 394.160
[info]   CI (99.9%): [2066.484, 5102.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.200, 9.000), stdev = 1.304
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson
[info] # Run progress: 59.82% complete, ETA 00:12:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 975495.504 ops/s
[info] # Warmup Iteration   2: 2159623.292 ops/s
[info] # Warmup Iteration   3: 2156649.865 ops/s
[info] # Warmup Iteration   4: 2207626.181 ops/s
[info] # Warmup Iteration   5: 2108356.321 ops/s
[info] Iteration   1: 2273447.444 ops/s
[info]                  ·gc.alloc.rate:                                  1294.079 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       942.583 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2289136.513 ops/s
[info]                  ·gc.alloc.rate:            1302.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 936.148 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2291924.991 ops/s
[info]                  ·gc.alloc.rate:            1304.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 701.241 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2245111.234 ops/s
[info]                  ·gc.alloc.rate:                                  1278.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       954.507 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2257908.271 ops/s
[info]                  ·gc.alloc.rate:                                  1285.140 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       949.068 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson":
[info]   2271505.690 ±(99.9%) 77328.018 ops/s [Average]
[info]   (min, avg, max) = (2245111.234, 2271505.690, 2291924.991), stdev = 20081.841
[info]   CI (99.9%): [2194177.672, 2348833.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate":
[info]   1293.002 ±(99.9%) 44.131 MB/sec [Average]
[info]   (min, avg, max) = (1278.030, 1293.002, 1304.769), stdev = 11.461
[info]   CI (99.9%): [1248.871, 1337.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen":
[info]   1293.326 ±(99.9%) 585.861 MB/sec [Average]
[info]   (min, avg, max) = (1021.158, 1293.326, 1361.483), stdev = 152.146
[info]   CI (99.9%): [707.465, 1879.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   896.709 ±(99.9%) 421.595 B/op [Average]
[info]   (min, avg, max) = (701.241, 896.709, 954.507), stdev = 109.487
[info]   CI (99.9%): [475.115, 1318.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter
[info] # Run progress: 60.71% complete, ETA 00:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4445121.998 ops/s
[info] # Warmup Iteration   2: 4814096.700 ops/s
[info] # Warmup Iteration   3: 4910950.085 ops/s
[info] # Warmup Iteration   4: 4861071.695 ops/s
[info] # Warmup Iteration   5: 5011526.304 ops/s
[info] Iteration   1: 4996106.871 ops/s
[info]                  ·gc.alloc.rate:            1320.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 428.899 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4993213.728 ops/s
[info]                  ·gc.alloc.rate:                                  1319.636 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       429.161 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 5045905.783 ops/s
[info]                  ·gc.alloc.rate:                                  1333.751 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       424.677 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 5031213.543 ops/s
[info]                  ·gc.alloc.rate:            1329.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 425.932 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4993869.662 ops/s
[info]                  ·gc.alloc.rate:                                  1320.086 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       429.113 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter":
[info]   5012061.918 ±(99.9%) 95356.280 ops/s [Average]
[info]   (min, avg, max) = (4993213.728, 5012061.918, 5045905.783), stdev = 24763.723
[info]   CI (99.9%): [4916705.638, 5107418.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate":
[info]   1324.707 ±(99.9%) 25.550 MB/sec [Average]
[info]   (min, avg, max) = (1319.636, 1324.707, 1333.751), stdev = 6.635
[info]   CI (99.9%): [1299.157, 1350.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1361.479 ±(99.9%) 0.901 MB/sec [Average]
[info]   (min, avg, max) = (1361.115, 1361.479, 1361.695), stdev = 0.234
[info]   CI (99.9%): [1360.578, 1362.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   427.556 ±(99.9%) 8.106 B/op [Average]
[info]   (min, avg, max) = (424.677, 427.556, 429.161), stdev = 2.105
[info]   CI (99.9%): [419.450, 435.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay
[info] # Run progress: 61.61% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125173.007 ops/s
[info] # Warmup Iteration   2: 287263.321 ops/s
[info] # Warmup Iteration   3: 288134.719 ops/s
[info] # Warmup Iteration   4: 289080.004 ops/s
[info] # Warmup Iteration   5: 288521.459 ops/s
[info] Iteration   1: 288009.979 ops/s
[info]                  ·gc.alloc.rate:                   1000.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5533.190 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 290385.469 ops/s
[info]                  ·gc.alloc.rate:                                  1009.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.357 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5534.726 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 289632.774 ops/s
[info]                  ·gc.alloc.rate:                                  1007.048 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5548.979 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 288361.187 ops/s
[info]                  ·gc.alloc.rate:            1002.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5573.548 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 289527.043 ops/s
[info]                  ·gc.alloc.rate:            1006.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5551.182 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay":
[info]   289183.290 ±(99.9%) 3761.997 ops/s [Average]
[info]   (min, avg, max) = (288009.979, 289183.290, 290385.469), stdev = 976.979
[info]   CI (99.9%): [285421.294, 292945.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate":
[info]   1005.440 ±(99.9%) 13.688 MB/sec [Average]
[info]   (min, avg, max) = (1000.947, 1005.440, 1009.760), stdev = 3.555
[info]   CI (99.9%): [991.752, 1019.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.357), stdev = 0.159
[info]   CI (99.9%): [≈ 0, 0.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1019.462 ±(99.9%) 15.762 MB/sec [Average]
[info]   (min, avg, max) = (1012.140, 1019.462, 1021.335), stdev = 4.093
[info]   CI (99.9%): [1003.700, 1035.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5548.325 ±(99.9%) 62.648 B/op [Average]
[info]   (min, avg, max) = (5533.190, 5548.325, 5573.548), stdev = 16.270
[info]   CI (99.9%): [5485.677, 5610.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.368 ±(99.9%) 37.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.368, 21.842), stdev = 9.768
[info]   CI (99.9%): [≈ 0, 41.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 14.000), stdev = 4.336
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson
[info] # Run progress: 62.50% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1256248.934 ops/s
[info] # Warmup Iteration   2: 1876309.569 ops/s
[info] # Warmup Iteration   3: 1870272.137 ops/s
[info] # Warmup Iteration   4: 1585991.018 ops/s
[info] # Warmup Iteration   5: 1864235.499 ops/s
[info] Iteration   1: 1854100.894 ops/s
[info]                  ·gc.alloc.rate:                   980.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        858.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 1874961.959 ops/s
[info]                  ·gc.alloc.rate:                                  991.241 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.219 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       857.165 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1881962.120 ops/s
[info]                  ·gc.alloc.rate:            994.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 854.001 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1880764.716 ops/s
[info]                  ·gc.alloc.rate:            994.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 854.558 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1885022.125 ops/s
[info]                  ·gc.alloc.rate:            996.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 568.423 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson":
[info]   1875362.363 ±(99.9%) 47872.951 ops/s [Average]
[info]   (min, avg, max) = (1854100.894, 1875362.363, 1885022.125), stdev = 12432.453
[info]   CI (99.9%): [1827489.412, 1923235.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate":
[info]   991.406 ±(99.9%) 25.355 MB/sec [Average]
[info]   (min, avg, max) = (980.141, 991.406, 996.537), stdev = 6.585
[info]   CI (99.9%): [966.051, 1016.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.219), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   951.120 ±(99.9%) 582.049 MB/sec [Average]
[info]   (min, avg, max) = (680.835, 951.120, 1021.279), stdev = 151.156
[info]   CI (99.9%): [369.071, 1533.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   798.497 ±(99.9%) 495.299 B/op [Average]
[info]   (min, avg, max) = (568.423, 798.497, 858.336), stdev = 128.628
[info]   CI (99.9%): [303.198, 1293.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.792 ±(99.9%) 6.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.792, 3.958), stdev = 1.770
[info]   CI (99.9%): [≈ 0, 7.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 15.000), stdev = 5.148
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter
[info] # Run progress: 63.39% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4031822.810 ops/s
[info] # Warmup Iteration   2: 4555486.648 ops/s
[info] # Warmup Iteration   3: 4459476.615 ops/s
[info] # Warmup Iteration   4: 4036193.845 ops/s
[info] # Warmup Iteration   5: 4339206.098 ops/s
[info] Iteration   1: 4453951.723 ops/s
[info]                  ·gc.alloc.rate:            815.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 356.622 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 4543027.846 ops/s
[info]                  ·gc.alloc.rate:                   831.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        234.240 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4536604.728 ops/s
[info]                  ·gc.alloc.rate:                                  830.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.153 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       354.269 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4595170.530 ops/s
[info]                  ·gc.alloc.rate:            841.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233.178 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4596959.275 ops/s
[info]                  ·gc.alloc.rate:            841.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter":
[info]   4545142.820 ±(99.9%) 224371.516 ops/s [Average]
[info]   (min, avg, max) = (4453951.723, 4545142.820, 4596959.275), stdev = 58268.570
[info]   CI (99.9%): [4320771.305, 4769514.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate":
[info]   831.802 ±(99.9%) 41.100 MB/sec [Average]
[info]   (min, avg, max) = (815.037, 831.802, 841.128), stdev = 10.674
[info]   CI (99.9%): [790.702, 872.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (288.000, 288.000, 288.000), stdev = 0.001
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.153), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   813.720 ±(99.9%) 708.822 MB/sec [Average]
[info]   (min, avg, max) = (676.280, 813.720, 1021.369), stdev = 184.079
[info]   CI (99.9%): [104.898, 1522.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   282.281 ±(99.9%) 257.211 B/op [Average]
[info]   (min, avg, max) = (233.094, 282.281, 356.622), stdev = 66.797
[info]   CI (99.9%): [25.070, 539.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.277 ±(99.9%) 2.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.277, 1.385), stdev = 0.619
[info]   CI (99.9%): [≈ 0, 2.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 16.000), stdev = 5.630
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay
[info] # Run progress: 64.29% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219403.755 ops/s
[info] # Warmup Iteration   2: 381410.259 ops/s
[info] # Warmup Iteration   3: 390312.141 ops/s
[info] # Warmup Iteration   4: 389388.866 ops/s
[info] # Warmup Iteration   5: 386215.755 ops/s
[info] Iteration   1: 390070.523 ops/s
[info]                  ·gc.alloc.rate:                                  1129.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4117.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.688 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 395730.098 ops/s
[info]                  ·gc.alloc.rate:                                  1146.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5415.136 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 393395.565 ops/s
[info]                  ·gc.alloc.rate:            1139.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4085.506 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 337527.378 ops/s
[info]                  ·gc.alloc.rate:                                  978.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4761.821 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 396879.675 ops/s
[info]                  ·gc.alloc.rate:            1150.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4049.678 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay":
[info]   382720.648 ±(99.9%) 97796.691 ops/s [Average]
[info]   (min, avg, max) = (337527.378, 382720.648, 396879.675), stdev = 25397.490
[info]   CI (99.9%): [284923.957, 480517.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate":
[info]   1108.836 ±(99.9%) 282.841 MB/sec [Average]
[info]   (min, avg, max) = (978.160, 1108.836, 1150.127), stdev = 73.453
[info]   CI (99.9%): [825.995, 1391.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.060 ±(99.9%) 0.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.286), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   1089.105 ±(99.9%) 586.062 MB/sec [Average]
[info]   (min, avg, max) = (1020.298, 1089.105, 1361.365), stdev = 152.198
[info]   CI (99.9%): [503.044, 1675.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4485.941 ±(99.9%) 2299.038 B/op [Average]
[info]   (min, avg, max) = (4049.678, 4485.941, 5415.136), stdev = 597.053
[info]   CI (99.9%): [2186.903, 6784.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   0.538 ±(99.9%) 4.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.538, 2.688), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce
[info] # Run progress: 65.18% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3081.382 ops/s
[info] # Warmup Iteration   2: 4275.018 ops/s
[info] # Warmup Iteration   3: 4265.203 ops/s
[info] # Warmup Iteration   4: 4371.153 ops/s
[info] # Warmup Iteration   5: 4390.204 ops/s
[info] Iteration   1: 4430.395 ops/s
[info]                  ·gc.alloc.rate:                                  1077.503 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382880.106 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.178 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 63.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       481938.022 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1419.552 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 4480.399 ops/s
[info]                  ·gc.alloc.rate:                                  1089.886 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382880.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.772 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       358649.489 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 4461.629 ops/s
[info]                  ·gc.alloc.rate:                                  1085.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382880.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       360176.341 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4480.365 ops/s
[info]                  ·gc.alloc.rate:                                  1089.805 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382880.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       358729.526 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4477.603 ops/s
[info]                  ·gc.alloc.rate:            1089.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       382880.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 358889.709 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce":
[info]   4466.078 ±(99.9%) 82.477 ops/s [Average]
[info]   (min, avg, max) = (4430.395, 4466.078, 4480.399), stdev = 21.419
[info]   CI (99.9%): [4383.602, 4548.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1086.341 ±(99.9%) 20.327 MB/sec [Average]
[info]   (min, avg, max) = (1077.503, 1086.341, 1089.886), stdev = 5.279
[info]   CI (99.9%): [1066.015, 1106.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   382880.096 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (382880.091, 382880.096, 382880.106), stdev = 0.007
[info]   CI (99.9%): [382880.070, 382880.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.066 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.178), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   23.426 ±(99.9%) 90.908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.426, 63.117), stdev = 23.609
[info]   CI (99.9%): [≈ 0, 114.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1088.032 ±(99.9%) 577.408 MB/sec [Average]
[info]   (min, avg, max) = (1020.897, 1088.032, 1356.272), stdev = 149.951
[info]   CI (99.9%): [510.624, 1665.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   383676.617 ±(99.9%) 211528.597 B/op [Average]
[info]   (min, avg, max) = (358649.489, 383676.617, 481938.022), stdev = 54933.305
[info]   CI (99.9%): [172148.021, 595205.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   283.910 ±(99.9%) 2444.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 283.910, 1419.552), stdev = 634.843
[info]   CI (99.9%): [≈ 0, 2728.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson
[info] # Run progress: 66.07% complete, ETA 00:10:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 16643.909 ops/s
[info] # Warmup Iteration   2: 25642.829 ops/s
[info] # Warmup Iteration   3: 25428.933 ops/s
[info] # Warmup Iteration   4: 25601.956 ops/s
[info] # Warmup Iteration   5: 25295.467 ops/s
[info] Iteration   1: 25738.703 ops/s
[info]                  ·gc.alloc.rate:            373.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.707 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20529.165 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 25805.014 ops/s
[info]                  ·gc.alloc.rate:            373.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.828 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20476.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 25533.717 ops/s
[info]                  ·gc.alloc.rate:            370.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.879 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20692.338 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 22546.660 ops/s
[info]                  ·gc.alloc.rate:            326.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.844 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23436.022 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 25761.424 ops/s
[info]                  ·gc.alloc.rate:            373.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.837 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20511.636 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson":
[info]   25077.104 ±(99.9%) 5461.777 ops/s [Average]
[info]   (min, avg, max) = (22546.660, 25077.104, 25805.014), stdev = 1418.406
[info]   CI (99.9%): [19615.327, 30538.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   363.424 ±(99.9%) 79.121 MB/sec [Average]
[info]   (min, avg, max) = (326.763, 363.424, 373.882), stdev = 20.547
[info]   CI (99.9%): [284.304, 442.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   22807.819 ±(99.9%) 0.253 B/op [Average]
[info]   (min, avg, max) = (22807.707, 22807.819, 22807.879), stdev = 0.066
[info]   CI (99.9%): [22807.566, 22808.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   335.745 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (335.668, 335.745, 335.770), stdev = 0.043
[info]   CI (99.9%): [335.578, 335.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   21129.166 ±(99.9%) 4975.944 B/op [Average]
[info]   (min, avg, max) = (20476.667, 21129.166, 23436.022), stdev = 1292.237
[info]   CI (99.9%): [16153.222, 26105.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter
[info] # Run progress: 66.96% complete, ETA 00:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32213.878 ops/s
[info] # Warmup Iteration   2: 36389.938 ops/s
[info] # Warmup Iteration   3: 35028.856 ops/s
[info] # Warmup Iteration   4: 35620.201 ops/s
[info] # Warmup Iteration   5: 35660.178 ops/s
[info] Iteration   1: 35718.203 ops/s
[info]                  ·gc.alloc.rate:      273.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 12064.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35194.766 ops/s
[info]                  ·gc.alloc.rate:            269.761 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15043.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 35395.136 ops/s
[info]                  ·gc.alloc.rate:            271.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14958.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 35758.103 ops/s
[info]                  ·gc.alloc.rate:            274.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14806.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 35746.513 ops/s
[info]                  ·gc.alloc.rate:            274.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14811.224 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter":
[info]   35562.544 ±(99.9%) 980.978 ops/s [Average]
[info]   (min, avg, max) = (35194.766, 35562.544, 35758.103), stdev = 254.757
[info]   CI (99.9%): [34581.567, 36543.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   272.587 ±(99.9%) 7.517 MB/sec [Average]
[info]   (min, avg, max) = (269.761, 272.587, 274.060), stdev = 1.952
[info]   CI (99.9%): [265.071, 280.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   12064.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (12064.011, 12064.012, 12064.013), stdev = 0.001
[info]   CI (99.9%): [12064.010, 12064.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.112 ±(99.9%) 579.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.112, 336.412), stdev = 150.438
[info]   CI (99.9%): [≈ 0, 848.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   11923.977 ±(99.9%) 25670.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11923.977, 15043.491), stdev = 6666.465
[info]   CI (99.9%): [≈ 0, 37594.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc
[info] # Run progress: 67.86% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51153.905 ops/s
[info] # Warmup Iteration   2: 58017.081 ops/s
[info] # Warmup Iteration   3: 57456.233 ops/s
[info] # Warmup Iteration   4: 57559.932 ops/s
[info] # Warmup Iteration   5: 56983.187 ops/s
[info] Iteration   1: 57287.654 ops/s
[info]                  ·gc.alloc.rate:      17.176 MB/sec
[info]                  ·gc.alloc.rate.norm: 472.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 56357.882 ops/s
[info]                  ·gc.alloc.rate:      16.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 472.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 57793.411 ops/s
[info]                  ·gc.alloc.rate:      17.329 MB/sec
[info]                  ·gc.alloc.rate.norm: 472.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 57789.244 ops/s
[info]                  ·gc.alloc.rate:      17.329 MB/sec
[info]                  ·gc.alloc.rate.norm: 472.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57032.381 ops/s
[info]                  ·gc.alloc.rate:      17.106 MB/sec
[info]                  ·gc.alloc.rate.norm: 472.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc":
[info]   57252.114 ±(99.9%) 2302.920 ops/s [Average]
[info]   (min, avg, max) = (56357.882, 57252.114, 57793.411), stdev = 598.061
[info]   CI (99.9%): [54949.194, 59555.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   17.168 ±(99.9%) 0.690 MB/sec [Average]
[info]   (min, avg, max) = (16.898, 17.168, 17.329), stdev = 0.179
[info]   CI (99.9%): [16.478, 17.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   472.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.007, 472.007, 472.007), stdev = 0.001
[info]   CI (99.9%): [472.007, 472.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay
[info] # Run progress: 68.75% complete, ETA 00:09:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2353.242 ops/s
[info] # Warmup Iteration   2: 4146.641 ops/s
[info] # Warmup Iteration   3: 4169.539 ops/s
[info] # Warmup Iteration   4: 4280.220 ops/s
[info] # Warmup Iteration   5: 4189.438 ops/s
[info] Iteration   1: 4284.750 ops/s
[info]                  ·gc.alloc.rate:                                  1228.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451520.334 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.311 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       500067.509 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4290.919 ops/s
[info]                  ·gc.alloc.rate:                                  1230.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451520.893 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       374526.330 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4283.840 ops/s
[info]                  ·gc.alloc.rate:                                  1228.838 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451519.096 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 31.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       500184.211 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4344.181 ops/s
[info]                  ·gc.alloc.rate:                                  1243.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451519.831 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.665 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       369957.884 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4327.409 ops/s
[info]                  ·gc.alloc.rate:                                  1241.522 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451519.874 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.809 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       495100.334 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay":
[info]   4306.220 ±(99.9%) 106.954 ops/s [Average]
[info]   (min, avg, max) = (4283.840, 4306.220, 4344.181), stdev = 27.776
[info]   CI (99.9%): [4199.266, 4413.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1234.746 ±(99.9%) 27.549 MB/sec [Average]
[info]   (min, avg, max) = (1228.838, 1234.746, 1243.466), stdev = 7.154
[info]   CI (99.9%): [1207.197, 1262.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   451520.006 ±(99.9%) 2.561 B/op [Average]
[info]   (min, avg, max) = (451519.096, 451520.006, 451520.893), stdev = 0.665
[info]   CI (99.9%): [451517.444, 451522.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.052 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.039, 0.052, 0.085), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   19.127 ±(99.9%) 26.496 B/op [Average]
[info]   (min, avg, max) = (14.311, 19.127, 31.220), stdev = 6.881
[info]   CI (99.9%): [≈ 0, 45.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1224.725 ±(99.9%) 719.869 MB/sec [Average]
[info]   (min, avg, max) = (1018.848, 1224.725, 1361.353), stdev = 186.948
[info]   CI (99.9%): [504.856, 1944.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   447967.254 ±(99.9%) 266374.437 B/op [Average]
[info]   (min, avg, max) = (369957.884, 447967.254, 500184.211), stdev = 69176.595
[info]   CI (99.9%): [181592.816, 714341.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson
[info] # Run progress: 69.64% complete, ETA 00:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 94344.013 ops/s
[info] # Warmup Iteration   2: 464806.526 ops/s
[info] # Warmup Iteration   3: 470567.629 ops/s
[info] # Warmup Iteration   4: 474309.075 ops/s
[info] # Warmup Iteration   5: 475284.357 ops/s
[info] Iteration   1: 474886.581 ops/s
[info]                  ·gc.alloc.rate:                   1064.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3349.145 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.454 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 483494.046 ops/s
[info]                  ·gc.alloc.rate:                                  1083.882 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.282 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.917 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3324.221 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 479847.345 ops/s
[info]                  ·gc.alloc.rate:                                  1075.828 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3349.539 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 478318.464 ops/s
[info]                  ·gc.alloc.rate:                                  1072.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4480.026 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 476447.708 ops/s
[info]                  ·gc.alloc.rate:                                  1068.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3373.240 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson":
[info]   478598.829 ±(99.9%) 12772.397 ops/s [Average]
[info]   (min, avg, max) = (474886.581, 478598.829, 483494.046), stdev = 3316.951
[info]   CI (99.9%): [465826.432, 491371.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate":
[info]   1072.918 ±(99.9%) 28.732 MB/sec [Average]
[info]   (min, avg, max) = (1064.569, 1072.918, 1083.882), stdev = 7.461
[info]   CI (99.9%): [1044.187, 1101.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm":
[info]   3528.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3528.001, 3528.001, 3528.001), stdev = 0.001
[info]   CI (99.9%): [3528.001, 3528.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.057 ±(99.9%) 0.483 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.282), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.186 ±(99.9%) 1.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.186, 0.917), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen":
[info]   1087.220 ±(99.9%) 590.977 MB/sec [Average]
[info]   (min, avg, max) = (1010.600, 1087.220, 1361.639), stdev = 153.475
[info]   CI (99.9%): [496.243, 1678.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3575.234 ±(99.9%) 1948.776 B/op [Average]
[info]   (min, avg, max) = (3324.221, 3575.234, 4480.026), stdev = 506.091
[info]   CI (99.9%): [1626.458, 5524.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.091 ±(99.9%) 26.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.091, 15.454), stdev = 6.911
[info]   CI (99.9%): [≈ 0, 29.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter
[info] # Run progress: 70.54% complete, ETA 00:09:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2095960.752 ops/s
[info] # Warmup Iteration   2: 2355243.354 ops/s
[info] # Warmup Iteration   3: 2322183.682 ops/s
[info] # Warmup Iteration   4: 2333925.626 ops/s
[info] # Warmup Iteration   5: 2325983.129 ops/s
[info] Iteration   1: 2345139.534 ops/s
[info]                  ·gc.alloc.rate:            488.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 225.769 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2323807.994 ops/s
[info]                  ·gc.alloc.rate:            484.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 455.666 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2354824.801 ops/s
[info]                  ·gc.alloc.rate:            490.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.832 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2336366.942 ops/s
[info]                  ·gc.alloc.rate:            486.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 226.613 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2339669.075 ops/s
[info]                  ·gc.alloc.rate:            487.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 452.572 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter":
[info]   2339961.669 ±(99.9%) 43974.618 ops/s [Average]
[info]   (min, avg, max) = (2323807.994, 2339961.669, 2354824.801), stdev = 11420.069
[info]   CI (99.9%): [2295987.051, 2383936.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   487.541 ±(99.9%) 9.118 MB/sec [Average]
[info]   (min, avg, max) = (484.198, 487.541, 490.700), stdev = 2.368
[info]   CI (99.9%): [478.423, 496.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (328.000, 328.000, 328.000), stdev = 0.001
[info]   CI (99.9%): [328.000, 328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.850 ±(99.9%) 709.394 MB/sec [Average]
[info]   (min, avg, max) = (336.203, 470.850, 672.661), stdev = 184.227
[info]   CI (99.9%): [≈ 0, 1180.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   317.091 ±(99.9%) 481.699 B/op [Average]
[info]   (min, avg, max) = (224.832, 317.091, 455.666), stdev = 125.096
[info]   CI (99.9%): [≈ 0, 798.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay
[info] # Run progress: 71.43% complete, ETA 00:08:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76988.204 ops/s
[info] # Warmup Iteration   2: 217780.163 ops/s
[info] # Warmup Iteration   3: 220644.905 ops/s
[info] # Warmup Iteration   4: 195005.118 ops/s
[info] # Warmup Iteration   5: 220320.325 ops/s
[info] Iteration   1: 220805.435 ops/s
[info]                  ·gc.alloc.rate:            866.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       6176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7192.986 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 221864.447 ops/s
[info]                  ·gc.alloc.rate:                   870.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              6176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7182.642 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.353 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 225606.263 ops/s
[info]                  ·gc.alloc.rate:                                  885.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.456 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4749.103 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 224552.500 ops/s
[info]                  ·gc.alloc.rate:                                  881.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7157.404 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 225264.242 ops/s
[info]                  ·gc.alloc.rate:            884.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       6176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4738.185 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay":
[info]   223618.577 ±(99.9%) 8286.060 ops/s [Average]
[info]   (min, avg, max) = (220805.435, 223618.577, 225606.263), stdev = 2151.863
[info]   CI (99.9%): [215332.517, 231904.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate":
[info]   877.576 ±(99.9%) 33.457 MB/sec [Average]
[info]   (min, avg, max) = (866.298, 877.576, 885.112), stdev = 8.689
[info]   CI (99.9%): [844.119, 911.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   6176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6176.002, 6176.002, 6176.002), stdev = 0.001
[info]   CI (99.9%): [6176.002, 6176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.456), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 0.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   880.377 ±(99.9%) 705.333 MB/sec [Average]
[info]   (min, avg, max) = (678.946, 880.377, 1021.072), stdev = 183.173
[info]   CI (99.9%): [175.044, 1585.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6204.064 ±(99.9%) 5133.846 B/op [Average]
[info]   (min, avg, max) = (4738.185, 6204.064, 7192.986), stdev = 1333.244
[info]   CI (99.9%): [1070.218, 11337.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.671 ±(99.9%) 48.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.671, 28.353), stdev = 12.680
[info]   CI (99.9%): [≈ 0, 54.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 18.000), stdev = 7.294
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce
[info] # Run progress: 72.32% complete, ETA 00:08:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 350240.495 ops/s
[info] # Warmup Iteration   2: 506661.837 ops/s
[info] # Warmup Iteration   3: 521009.848 ops/s
[info] # Warmup Iteration   4: 522945.075 ops/s
[info] # Warmup Iteration   5: 521043.100 ops/s
[info] Iteration   1: 527293.254 ops/s
[info]                  ·gc.alloc.rate:                                  1283.706 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3832.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4063.932 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 533713.954 ops/s
[info]                  ·gc.alloc.rate:                                  1299.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3832.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4015.132 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 529812.675 ops/s
[info]                  ·gc.alloc.rate:                                  1289.759 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3832.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4044.835 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 531626.535 ops/s
[info]                  ·gc.alloc.rate:                                  1294.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3832.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3023.265 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 533111.113 ops/s
[info]                  ·gc.alloc.rate:            1297.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       3832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4019.778 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce":
[info]   531111.506 ±(99.9%) 10060.141 ops/s [Average]
[info]   (min, avg, max) = (527293.254, 531111.506, 533713.954), stdev = 2612.587
[info]   CI (99.9%): [521051.365, 541171.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate":
[info]   1292.946 ±(99.9%) 24.427 MB/sec [Average]
[info]   (min, avg, max) = (1283.706, 1292.946, 1299.351), stdev = 6.344
[info]   CI (99.9%): [1268.520, 1317.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm":
[info]   3832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3832.001, 3832.001, 3832.001), stdev = 0.001
[info]   CI (99.9%): [3832.001, 3832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.022), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1293.323 ±(99.9%) 586.085 MB/sec [Average]
[info]   (min, avg, max) = (1021.052, 1293.323, 1361.447), stdev = 152.204
[info]   CI (99.9%): [707.238, 1879.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3833.388 ±(99.9%) 1745.505 B/op [Average]
[info]   (min, avg, max) = (3023.265, 3833.388, 4063.932), stdev = 453.302
[info]   CI (99.9%): [2087.883, 5578.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 11.000), stdev = 2.550
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson
[info] # Run progress: 73.21% complete, ETA 00:08:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 558713.184 ops/s
[info] # Warmup Iteration   2: 967542.854 ops/s
[info] # Warmup Iteration   3: 964299.083 ops/s
[info] # Warmup Iteration   4: 969301.266 ops/s
[info] # Warmup Iteration   5: 970998.519 ops/s
[info] Iteration   1: 974388.643 ops/s
[info]                  ·gc.alloc.rate:            658.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 542.313 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 977428.992 ops/s
[info]                  ·gc.alloc.rate:            660.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1081.241 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 971885.472 ops/s
[info]                  ·gc.alloc.rate:            656.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1087.306 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 967081.286 ops/s
[info]                  ·gc.alloc.rate:                   653.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1098.235 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 974402.215 ops/s
[info]                  ·gc.alloc.rate:                                  658.686 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1099.618 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson":
[info]   973037.322 ±(99.9%) 14885.727 ops/s [Average]
[info]   (min, avg, max) = (967081.286, 973037.322, 977428.992), stdev = 3865.776
[info]   CI (99.9%): [958151.595, 987923.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate":
[info]   657.714 ±(99.9%) 10.198 MB/sec [Average]
[info]   (min, avg, max) = (653.638, 657.714, 660.713), stdev = 2.648
[info]   CI (99.9%): [647.516, 667.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.040 ±(99.9%) 0.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.202), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   606.763 ±(99.9%) 583.670 MB/sec [Average]
[info]   (min, avg, max) = (335.699, 606.763, 680.736), stdev = 151.577
[info]   CI (99.9%): [23.092, 1190.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   981.743 ±(99.9%) 946.363 B/op [Average]
[info]   (min, avg, max) = (542.313, 981.743, 1099.618), stdev = 245.767
[info]   CI (99.9%): [35.380, 1928.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.518 ±(99.9%) 13.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.518, 7.589), stdev = 3.394
[info]   CI (99.9%): [≈ 0, 14.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 13.000), stdev = 2.739
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter
[info] # Run progress: 74.11% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4755385.740 ops/s
[info] # Warmup Iteration   2: 4855584.547 ops/s
[info] # Warmup Iteration   3: 4810939.112 ops/s
[info] # Warmup Iteration   4: 4833679.103 ops/s
[info] # Warmup Iteration   5: 4820814.119 ops/s
[info] Iteration   1: 4844121.422 ops/s
[info]                  ·gc.alloc.rate:                   935.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        328.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 4926697.167 ops/s
[info]                  ·gc.alloc.rate:                                  951.498 MB/sec
[info]                  ·gc.alloc.rate.norm:                             304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       326.233 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4914425.450 ops/s
[info]                  ·gc.alloc.rate:            949.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 218.029 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 4928515.509 ops/s
[info]                  ·gc.alloc.rate:            951.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 326.113 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 4927149.126 ops/s
[info]                  ·gc.alloc.rate:            951.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 326.203 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter":
[info]   4908181.735 ±(99.9%) 139619.076 ops/s [Average]
[info]   (min, avg, max) = (4844121.422, 4908181.735, 4928515.509), stdev = 36258.631
[info]   CI (99.9%): [4768562.659, 5047800.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate":
[info]   947.859 ±(99.9%) 27.273 MB/sec [Average]
[info]   (min, avg, max) = (935.345, 947.859, 951.843), stdev = 7.083
[info]   CI (99.9%): [920.586, 975.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.147), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   951.207 ±(99.9%) 582.509 MB/sec [Average]
[info]   (min, avg, max) = (680.684, 951.207, 1021.085), stdev = 151.276
[info]   CI (99.9%): [368.698, 1533.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   305.109 ±(99.9%) 187.504 B/op [Average]
[info]   (min, avg, max) = (218.029, 305.109, 328.968), stdev = 48.694
[info]   CI (99.9%): [117.605, 492.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 2.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.299), stdev = 0.581
[info]   CI (99.9%): [≈ 0, 2.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay
[info] # Run progress: 75.00% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134969.358 ops/s
[info] # Warmup Iteration   2: 293284.589 ops/s
[info] # Warmup Iteration   3: 293636.105 ops/s
[info] # Warmup Iteration   4: 292953.956 ops/s
[info] # Warmup Iteration   5: 293311.044 ops/s
[info] Iteration   1: 295443.527 ops/s
[info]                  ·gc.alloc.rate:                   1010.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5393.873 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.292 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 299275.384 ops/s
[info]                  ·gc.alloc.rate:                                  1023.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5370.450 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 299680.060 ops/s
[info]                  ·gc.alloc.rate:            1024.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5363.229 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 298451.378 ops/s
[info]                  ·gc.alloc.rate:                                  1020.936 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5385.257 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 299670.611 ops/s
[info]                  ·gc.alloc.rate:            1024.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5363.301 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay":
[info]   298504.192 ±(99.9%) 6863.549 ops/s [Average]
[info]   (min, avg, max) = (295443.527, 298504.192, 299680.060), stdev = 1782.442
[info]   CI (99.9%): [291640.643, 305367.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate":
[info]   1020.934 ±(99.9%) 23.605 MB/sec [Average]
[info]   (min, avg, max) = (1010.358, 1020.934, 1024.964), stdev = 6.130
[info]   CI (99.9%): [997.329, 1044.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.079 ±(99.9%) 0.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.386), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.258 ±(99.9%) 15.177 MB/sec [Average]
[info]   (min, avg, max) = (1012.210, 1019.258, 1021.175), stdev = 3.941
[info]   CI (99.9%): [1004.082, 1034.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5375.222 ±(99.9%) 52.983 B/op [Average]
[info]   (min, avg, max) = (5363.229, 5375.222, 5393.873), stdev = 13.759
[info]   CI (99.9%): [5322.239, 5428.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.258 ±(99.9%) 36.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.258, 21.292), stdev = 9.522
[info]   CI (99.9%): [≈ 0, 40.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce
[info] # Run progress: 75.89% complete, ETA 00:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145308.916 ops/s
[info] # Warmup Iteration   2: 293732.959 ops/s
[info] # Warmup Iteration   3: 299417.814 ops/s
[info] # Warmup Iteration   4: 297305.281 ops/s
[info] # Warmup Iteration   5: 298664.036 ops/s
[info] Iteration   1: 288408.251 ops/s
[info]                  ·gc.alloc.rate:            782.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       4272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5507.399 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 301188.067 ops/s
[info]                  ·gc.alloc.rate:                   817.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              4272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3515.721 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 303526.214 ops/s
[info]                  ·gc.alloc.rate:                                  823.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5291.721 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.454 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 303811.881 ops/s
[info]                  ·gc.alloc.rate:            824.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       4272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3526.806 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 302785.160 ops/s
[info]                  ·gc.alloc.rate:            821.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       4272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3538.755 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce":
[info]   299943.915 ±(99.9%) 25138.996 ops/s [Average]
[info]   (min, avg, max) = (288408.251, 299943.915, 303811.881), stdev = 6528.517
[info]   CI (99.9%): [274804.919, 325082.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate":
[info]   814.182 ±(99.9%) 68.377 MB/sec [Average]
[info]   (min, avg, max) = (782.793, 814.182, 824.593), stdev = 17.757
[info]   CI (99.9%): [745.805, 882.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm":
[info]   4272.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4272.001, 4272.001, 4272.001), stdev = 0.001
[info]   CI (99.9%): [4272.001, 4272.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.063 ±(99.9%) 0.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.313), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen":
[info]   812.861 ±(99.9%) 710.511 MB/sec [Average]
[info]   (min, avg, max) = (672.891, 812.861, 1020.655), stdev = 184.517
[info]   CI (99.9%): [102.350, 1523.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4276.080 ±(99.9%) 3960.214 B/op [Average]
[info]   (min, avg, max) = (3515.721, 4276.080, 5507.399), stdev = 1028.455
[info]   CI (99.9%): [315.866, 8236.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.172 ±(99.9%) 29.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.172, 17.405), stdev = 7.547
[info]   CI (99.9%): [≈ 0, 33.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.380
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson
[info] # Run progress: 76.79% complete, ETA 00:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 115377.852 ops/s
[info] # Warmup Iteration   2: 662710.463 ops/s
[info] # Warmup Iteration   3: 654838.529 ops/s
[info] # Warmup Iteration   4: 654685.951 ops/s
[info] # Warmup Iteration   5: 658718.772 ops/s
[info] Iteration   1: 649433.874 ops/s
[info]                  ·gc.alloc.rate:                   990.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2440.869 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 663234.146 ops/s
[info]                  ·gc.alloc.rate:                                  1011.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2400.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.297 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.705 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1019.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2420.157 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.162 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 662365.132 ops/s
[info]                  ·gc.alloc.rate:            1010.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2426.450 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 666457.564 ops/s
[info]                  ·gc.alloc.rate:            1016.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.207 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2411.623 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 664703.653 ops/s
[info]                  ·gc.alloc.rate:            1013.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2417.956 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson":
[info]   661238.874 ±(99.9%) 26105.479 ops/s [Average]
[info]   (min, avg, max) = (649433.874, 661238.874, 666457.564), stdev = 6779.510
[info]   CI (99.9%): [635133.395, 687344.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate":
[info]   1008.304 ±(99.9%) 39.796 MB/sec [Average]
[info]   (min, avg, max) = (990.298, 1008.304, 1016.286), stdev = 10.335
[info]   CI (99.9%): [968.508, 1048.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm":
[info]   2400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2400.001, 2400.001, 2400.001), stdev = 0.001
[info]   CI (99.9%): [2400.001, 2400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.059 ±(99.9%) 0.512 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.297), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.141 ±(99.9%) 1.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.705), stdev = 0.315
[info]   CI (99.9%): [≈ 0, 1.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen":
[info]   1018.102 ±(99.9%) 23.651 MB/sec [Average]
[info]   (min, avg, max) = (1007.162, 1018.102, 1021.222), stdev = 6.142
[info]   CI (99.9%): [994.451, 1041.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2423.411 ±(99.9%) 42.763 B/op [Average]
[info]   (min, avg, max) = (2411.623, 2423.411, 2440.869), stdev = 11.105
[info]   CI (99.9%): [2380.648, 2466.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.331), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.247 ±(99.9%) 13.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.247, 8.072), stdev = 3.532
[info]   CI (99.9%): [≈ 0, 15.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 19.000), stdev = 6.364
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter
[info] # Run progress: 77.68% complete, ETA 00:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2162241.388 ops/s
[info] # Warmup Iteration   2: 2355631.533 ops/s
[info] # Warmup Iteration   3: 2366755.445 ops/s
[info] # Warmup Iteration   4: 2347721.370 ops/s
[info] # Warmup Iteration   5: 2350954.700 ops/s
[info] Iteration   1: 2365078.248 ops/s
[info]                  ·gc.alloc.rate:            564.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 223.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2349996.153 ops/s
[info]                  ·gc.alloc.rate:            561.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 450.587 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2347806.825 ops/s
[info]                  ·gc.alloc.rate:            560.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 451.000 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2363070.234 ops/s
[info]                  ·gc.alloc.rate:            564.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.049 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2365899.133 ops/s
[info]                  ·gc.alloc.rate:                   565.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        449.794 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter":
[info]   2358370.119 ±(99.9%) 33650.894 ops/s [Average]
[info]   (min, avg, max) = (2347806.825, 2358370.119, 2365899.133), stdev = 8739.030
[info]   CI (99.9%): [2324719.225, 2392021.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate":
[info]   563.400 ±(99.9%) 7.988 MB/sec [Average]
[info]   (min, avg, max) = (560.835, 563.400, 565.292), stdev = 2.075
[info]   CI (99.9%): [555.411, 571.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.900 ±(99.9%) 712.043 MB/sec [Average]
[info]   (min, avg, max) = (336.334, 538.900, 676.236), stdev = 184.915
[info]   CI (99.9%): [≈ 0, 1250.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   359.858 ±(99.9%) 477.723 B/op [Average]
[info]   (min, avg, max) = (223.859, 359.858, 451.000), stdev = 124.063
[info]   CI (99.9%): [≈ 0, 837.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.532 ±(99.9%) 4.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.532, 2.659), stdev = 1.189
[info]   CI (99.9%): [≈ 0, 5.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 11.000), stdev = 2.793
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay
[info] # Run progress: 78.57% complete, ETA 00:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80392.354 ops/s
[info] # Warmup Iteration   2: 229818.737 ops/s
[info] # Warmup Iteration   3: 232764.104 ops/s
[info] # Warmup Iteration   4: 230181.762 ops/s
[info] # Warmup Iteration   5: 234609.296 ops/s
[info] Iteration   1: 211380.404 ops/s
[info]                  ·gc.alloc.rate:            764.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7514.167 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 223537.737 ops/s
[info]                  ·gc.alloc.rate:                   807.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4736.942 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 236496.939 ops/s
[info]                  ·gc.alloc.rate:                                  854.812 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6790.371 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.432 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 239199.223 ops/s
[info]                  ·gc.alloc.rate:                                  864.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4479.521 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 238018.867 ops/s
[info]                  ·gc.alloc.rate:            860.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6752.474 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay":
[info]   229726.634 ±(99.9%) 46336.493 ops/s [Average]
[info]   (min, avg, max) = (211380.404, 229726.634, 239199.223), stdev = 12033.440
[info]   CI (99.9%): [183390.142, 276063.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate":
[info]   830.304 ±(99.9%) 167.489 MB/sec [Average]
[info]   (min, avg, max) = (764.079, 830.304, 864.467), stdev = 43.496
[info]   CI (99.9%): [662.815, 997.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm":
[info]   5688.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.002, 5688.002, 5688.002), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.182), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.243 ±(99.9%) 2.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.243, 1.214), stdev = 0.543
[info]   CI (99.9%): [≈ 0, 2.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen":
[info]   880.958 ±(99.9%) 718.139 MB/sec [Average]
[info]   (min, avg, max) = (672.697, 880.958, 1021.422), stdev = 186.498
[info]   CI (99.9%): [162.820, 1599.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6054.695 ±(99.9%) 5228.879 B/op [Average]
[info]   (min, avg, max) = (4479.521, 6054.695, 7514.167), stdev = 1357.923
[info]   CI (99.9%): [825.816, 11283.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.577 ±(99.9%) 39.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.577, 23.450), stdev = 10.174
[info]   CI (99.9%): [≈ 0, 44.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.573
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce
[info] # Run progress: 79.46% complete, ETA 00:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384265.865 ops/s
[info] # Warmup Iteration   2: 509069.159 ops/s
[info] # Warmup Iteration   3: 523436.113 ops/s
[info] # Warmup Iteration   4: 518068.167 ops/s
[info] # Warmup Iteration   5: 520644.461 ops/s
[info] Iteration   1: 532385.400 ops/s
[info]                  ·gc.alloc.rate:                                  1228.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4024.896 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 533675.008 ops/s
[info]                  ·gc.alloc.rate:            1231.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       3632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4015.395 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 531065.863 ops/s
[info]                  ·gc.alloc.rate:            1225.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       3632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3026.424 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 524433.672 ops/s
[info]                  ·gc.alloc.rate:                                  1210.424 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4086.161 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 528869.618 ops/s
[info]                  ·gc.alloc.rate:                                  1220.291 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3038.960 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce":
[info]   530085.912 ±(99.9%) 13957.821 ops/s [Average]
[info]   (min, avg, max) = (524433.672, 530085.912, 533675.008), stdev = 3624.802
[info]   CI (99.9%): [516128.092, 544043.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate":
[info]   1223.146 ±(99.9%) 31.613 MB/sec [Average]
[info]   (min, avg, max) = (1210.424, 1223.146, 1231.415), stdev = 8.210
[info]   CI (99.9%): [1191.533, 1254.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   3632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.001, 3632.001, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.001, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.509), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 0.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1225.279 ±(99.9%) 718.011 MB/sec [Average]
[info]   (min, avg, max) = (1020.995, 1225.279, 1361.781), stdev = 186.465
[info]   CI (99.9%): [507.268, 1943.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3638.367 ±(99.9%) 2131.669 B/op [Average]
[info]   (min, avg, max) = (3026.424, 3638.367, 4086.161), stdev = 553.588
[info]   CI (99.9%): [1506.699, 5770.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson
[info] # Run progress: 80.36% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 573372.200 ops/s
[info] # Warmup Iteration   2: 1017809.070 ops/s
[info] # Warmup Iteration   3: 1016204.076 ops/s
[info] # Warmup Iteration   4: 1019690.361 ops/s
[info] # Warmup Iteration   5: 1013526.576 ops/s
[info] Iteration   1: 1032262.863 ops/s
[info]                  ·gc.alloc.rate:            592.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 511.890 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1023218.160 ops/s
[info]                  ·gc.alloc.rate:            587.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1032.833 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1022241.112 ops/s
[info]                  ·gc.alloc.rate:            587.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1033.794 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 998596.009 ops/s
[info]                  ·gc.alloc.rate:                   573.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1058.292 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 1034534.656 ops/s
[info]                  ·gc.alloc.rate:                   594.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             338.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        515.842 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson":
[info]   1022170.560 ±(99.9%) 54849.289 ops/s [Average]
[info]   (min, avg, max) = (998596.009, 1022170.560, 1034534.656), stdev = 14244.186
[info]   CI (99.9%): [967321.271, 1077019.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate":
[info]   587.030 ±(99.9%) 31.402 MB/sec [Average]
[info]   (min, avg, max) = (573.503, 587.030, 594.088), stdev = 8.155
[info]   CI (99.9%): [555.628, 618.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   537.778 ±(99.9%) 704.637 MB/sec [Average]
[info]   (min, avg, max) = (335.649, 537.778, 671.434), stdev = 182.992
[info]   CI (99.9%): [≈ 0, 1242.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   830.530 ±(99.9%) 1113.825 B/op [Average]
[info]   (min, avg, max) = (511.890, 830.530, 1058.292), stdev = 289.257
[info]   CI (99.9%): [≈ 0, 1944.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.455 ±(99.9%) 8.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.455, 5.249), stdev = 2.295
[info]   CI (99.9%): [≈ 0, 10.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 13.000), stdev = 4.615
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter
[info] # Run progress: 81.25% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3951739.439 ops/s
[info] # Warmup Iteration   2: 4291229.291 ops/s
[info] # Warmup Iteration   3: 4362375.516 ops/s
[info] # Warmup Iteration   4: 4416022.082 ops/s
[info] # Warmup Iteration   5: 4381476.236 ops/s
[info] Iteration   1: 4327565.615 ops/s
[info]                  ·gc.alloc.rate:            593.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4305543.670 ops/s
[info]                  ·gc.alloc.rate:            591.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245.933 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 4349523.907 ops/s
[info]                  ·gc.alloc.rate:            596.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243.455 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 3937459.282 ops/s
[info]                  ·gc.alloc.rate:                   540.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        134.465 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4339105.274 ops/s
[info]                  ·gc.alloc.rate:                   595.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246.698 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter":
[info]   4251839.549 ±(99.9%) 679644.278 ops/s [Average]
[info]   (min, avg, max) = (3937459.282, 4251839.549, 4349523.907), stdev = 176501.461
[info]   CI (99.9%): [3572195.271, 4931483.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate":
[info]   583.516 ±(99.9%) 93.057 MB/sec [Average]
[info]   (min, avg, max) = (540.466, 583.516, 596.927), stdev = 24.167
[info]   CI (99.9%): [490.459, 676.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   216.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (216.000, 216.000, 216.000), stdev = 0.001
[info]   CI (99.9%): [216.000, 216.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   606.954 ±(99.9%) 582.405 MB/sec [Average]
[info]   (min, avg, max) = (336.452, 606.954, 680.101), stdev = 151.249
[info]   CI (99.9%): [24.549, 1189.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   223.044 ±(99.9%) 190.733 B/op [Average]
[info]   (min, avg, max) = (134.465, 223.044, 246.698), stdev = 49.533
[info]   CI (99.9%): [32.311, 413.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.315 ±(99.9%) 2.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.315, 1.331), stdev = 0.578
[info]   CI (99.9%): [≈ 0, 2.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.200, 15.000), stdev = 4.324
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay
[info] # Run progress: 82.14% complete, ETA 00:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122827.036 ops/s
[info] # Warmup Iteration   2: 283825.678 ops/s
[info] # Warmup Iteration   3: 285989.178 ops/s
[info] # Warmup Iteration   4: 248409.530 ops/s
[info] # Warmup Iteration   5: 287373.818 ops/s
[info] Iteration   1: 288834.351 ops/s
[info]                  ·gc.alloc.rate:                   976.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              5320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5499.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 291455.716 ops/s
[info]                  ·gc.alloc.rate:                                  985.057 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5510.775 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.597 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 291151.594 ops/s
[info]                  ·gc.alloc.rate:            984.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5520.167 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 292012.900 ops/s
[info]                  ·gc.alloc.rate:                                  987.042 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5503.987 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 291306.290 ops/s
[info]                  ·gc.alloc.rate:                                  984.559 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5517.192 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay":
[info]   290952.170 ±(99.9%) 4727.454 ops/s [Average]
[info]   (min, avg, max) = (288834.351, 290952.170, 292012.900), stdev = 1227.705
[info]   CI (99.9%): [286224.716, 295679.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate":
[info]   983.404 ±(99.9%) 16.006 MB/sec [Average]
[info]   (min, avg, max) = (976.242, 983.404, 987.042), stdev = 4.157
[info]   CI (99.9%): [967.399, 999.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   5320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5320.001, 5320.001, 5320.002), stdev = 0.001
[info]   CI (99.9%): [5320.001, 5320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.243), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1018.577 ±(99.9%) 20.384 MB/sec [Average]
[info]   (min, avg, max) = (1009.126, 1018.577, 1021.177), stdev = 5.294
[info]   CI (99.9%): [998.194, 1038.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5510.264 ±(99.9%) 33.795 B/op [Average]
[info]   (min, avg, max) = (5499.201, 5510.264, 5520.167), stdev = 8.777
[info]   CI (99.9%): [5476.469, 5544.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.349 ±(99.9%) 30.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.349, 18.149), stdev = 7.870
[info]   CI (99.9%): [≈ 0, 34.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 17.000), stdev = 5.718
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce
[info] # Run progress: 83.04% complete, ETA 00:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143333.503 ops/s
[info] # Warmup Iteration   2: 285656.403 ops/s
[info] # Warmup Iteration   3: 293731.339 ops/s
[info] # Warmup Iteration   4: 292016.693 ops/s
[info] # Warmup Iteration   5: 294249.522 ops/s
[info] Iteration   1: 293955.648 ops/s
[info]                  ·gc.alloc.rate:            787.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       4216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3602.214 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 291034.908 ops/s
[info]                  ·gc.alloc.rate:                   779.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5457.581 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 295199.221 ops/s
[info]                  ·gc.alloc.rate:                   790.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             679.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3625.833 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 297097.858 ops/s
[info]                  ·gc.alloc.rate:                                  795.766 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3606.337 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 295581.558 ops/s
[info]                  ·gc.alloc.rate:                                  791.678 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5437.300 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce":
[info]   294573.838 ±(99.9%) 8756.188 ops/s [Average]
[info]   (min, avg, max) = (291034.908, 294573.838, 297097.858), stdev = 2273.954
[info]   CI (99.9%): [285817.651, 303330.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate":
[info]   788.972 ±(99.9%) 23.505 MB/sec [Average]
[info]   (min, avg, max) = (779.479, 788.972, 795.766), stdev = 6.104
[info]   CI (99.9%): [765.467, 812.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm":
[info]   4216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4216.001, 4216.001, 4216.002), stdev = 0.001
[info]   CI (99.9%): [4216.001, 4216.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.044 ±(99.9%) 0.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.205), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen":
[info]   812.675 ±(99.9%) 711.562 MB/sec [Average]
[info]   (min, avg, max) = (672.697, 812.675, 1021.012), stdev = 184.790
[info]   CI (99.9%): [101.113, 1524.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4345.853 ±(99.9%) 3872.486 B/op [Average]
[info]   (min, avg, max) = (3602.214, 4345.853, 5457.581), stdev = 1005.672
[info]   CI (99.9%): [473.367, 8218.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.313 ±(99.9%) 30.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.313, 18.012), stdev = 7.811
[info]   CI (99.9%): [≈ 0, 34.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 17.000), stdev = 5.975
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson
[info] # Run progress: 83.93% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 106076.694 ops/s
[info] # Warmup Iteration   2: 569408.015 ops/s
[info] # Warmup Iteration   3: 586244.105 ops/s
[info] # Warmup Iteration   4: 586560.698 ops/s
[info] # Warmup Iteration   5: 588813.057 ops/s
[info] Iteration   1: 585149.495 ops/s
[info]                  ·gc.alloc.rate:            951.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2709.091 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 590783.769 ops/s
[info]                  ·gc.alloc.rate:                                  960.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.246 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.656 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2704.551 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.422 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 592538.661 ops/s
[info]                  ·gc.alloc.rate:                                  963.598 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2712.255 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 600068.294 ops/s
[info]                  ·gc.alloc.rate:            975.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2678.451 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 592618.479 ops/s
[info]                  ·gc.alloc.rate:                                  963.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2712.114 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson":
[info]   592231.739 ±(99.9%) 20548.712 ops/s [Average]
[info]   (min, avg, max) = (585149.495, 592231.739, 600068.294), stdev = 5336.435
[info]   CI (99.9%): [571683.028, 612780.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate":
[info]   963.106 ±(99.9%) 33.619 MB/sec [Average]
[info]   (min, avg, max) = (951.518, 963.106, 975.933), stdev = 8.731
[info]   CI (99.9%): [929.487, 996.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2560.001, 2560.001, 2560.001), stdev = 0.001
[info]   CI (99.9%): [2560.001, 2560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.061 ±(99.9%) 0.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.246), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.161 ±(99.9%) 1.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.656), stdev = 0.284
[info]   CI (99.9%): [≈ 0, 1.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   1016.985 ±(99.9%) 23.821 MB/sec [Average]
[info]   (min, avg, max) = (1006.933, 1016.985, 1021.090), stdev = 6.186
[info]   CI (99.9%): [993.163, 1040.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2703.292 ±(99.9%) 54.811 B/op [Average]
[info]   (min, avg, max) = (2678.451, 2703.292, 2712.255), stdev = 14.234
[info]   CI (99.9%): [2648.481, 2758.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.484 ±(99.9%) 21.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.484, 12.422), stdev = 5.556
[info]   CI (99.9%): [≈ 0, 23.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 19.000), stdev = 6.745
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter
[info] # Run progress: 84.82% complete, ETA 00:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1831782.413 ops/s
[info] # Warmup Iteration   2: 2044144.173 ops/s
[info] # Warmup Iteration   3: 2037833.666 ops/s
[info] # Warmup Iteration   4: 2068408.927 ops/s
[info] # Warmup Iteration   5: 2077669.812 ops/s
[info] Iteration   1: 2039802.927 ops/s
[info]                  ·gc.alloc.rate:            528.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 519.121 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2075205.450 ops/s
[info]                  ·gc.alloc.rate:            538.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 255.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2062249.458 ops/s
[info]                  ·gc.alloc.rate:            534.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 513.461 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 2057005.068 ops/s
[info]                  ·gc.alloc.rate:            533.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 514.773 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 2041962.510 ops/s
[info]                  ·gc.alloc.rate:                   529.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        259.282 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.567 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter":
[info]   2055245.082 ±(99.9%) 56640.539 ops/s [Average]
[info]   (min, avg, max) = (2039802.927, 2055245.082, 2075205.450), stdev = 14709.368
[info]   CI (99.9%): [1998604.544, 2111885.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate":
[info]   532.793 ±(99.9%) 14.906 MB/sec [Average]
[info]   (min, avg, max) = (528.685, 532.793, 538.034), stdev = 3.871
[info]   CI (99.9%): [517.887, 547.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.234 ±(99.9%) 709.388 MB/sec [Average]
[info]   (min, avg, max) = (336.397, 538.234, 672.875), stdev = 184.226
[info]   CI (99.9%): [≈ 0, 1247.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   412.355 ±(99.9%) 545.445 B/op [Average]
[info]   (min, avg, max) = (255.138, 412.355, 519.121), stdev = 141.650
[info]   CI (99.9%): [≈ 0, 957.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.513 ±(99.9%) 4.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.513, 2.567), stdev = 1.148
[info]   CI (99.9%): [≈ 0, 4.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.800, 15.000), stdev = 4.604
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay
[info] # Run progress: 85.71% complete, ETA 00:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86682.090 ops/s
[info] # Warmup Iteration   2: 242448.746 ops/s
[info] # Warmup Iteration   3: 243015.369 ops/s
[info] # Warmup Iteration   4: 241367.285 ops/s
[info] # Warmup Iteration   5: 242586.071 ops/s
[info] Iteration   1: 243397.326 ops/s
[info]                  ·gc.alloc.rate:            930.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4350.419 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 243018.653 ops/s
[info]                  ·gc.alloc.rate:                                  928.788 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6583.340 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                25.885 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 242069.542 ops/s
[info]                  ·gc.alloc.rate:                                  925.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6639.243 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 244918.866 ops/s
[info]                  ·gc.alloc.rate:            936.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6562.268 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 240722.735 ops/s
[info]                  ·gc.alloc.rate:            920.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4451.183 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay":
[info]   242825.424 ±(99.9%) 6008.598 ops/s [Average]
[info]   (min, avg, max) = (240722.735, 242825.424, 244918.866), stdev = 1560.414
[info]   CI (99.9%): [236816.826, 248834.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate":
[info]   928.061 ±(99.9%) 22.846 MB/sec [Average]
[info]   (min, avg, max) = (920.042, 928.061, 936.034), stdev = 5.933
[info]   CI (99.9%): [905.215, 950.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm":
[info]   6016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.002, 6016.002, 6016.002), stdev = 0.001
[info]   CI (99.9%): [6016.002, 6016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.090 ±(99.9%) 0.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.305), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   882.380 ±(99.9%) 723.139 MB/sec [Average]
[info]   (min, avg, max) = (672.657, 882.380, 1021.109), stdev = 187.797
[info]   CI (99.9%): [159.241, 1605.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5717.291 ±(99.9%) 4630.946 B/op [Average]
[info]   (min, avg, max) = (4350.419, 5717.291, 6639.243), stdev = 1202.642
[info]   CI (99.9%): [1086.345, 10348.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.177 ±(99.9%) 44.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.177, 25.885), stdev = 11.576
[info]   CI (99.9%): [≈ 0, 49.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 11.000), stdev = 3.782
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce
[info] # Run progress: 86.61% complete, ETA 00:04:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334201.437 ops/s
[info] # Warmup Iteration   2: 530071.756 ops/s
[info] # Warmup Iteration   3: 541057.842 ops/s
[info] # Warmup Iteration   4: 541848.627 ops/s
[info] # Warmup Iteration   5: 537092.707 ops/s
[info] Iteration   1: 541323.343 ops/s
[info]                  ·gc.alloc.rate:                   946.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1956.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 539044.210 ops/s
[info]                  ·gc.alloc.rate:                                  942.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2979.616 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.945 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 540295.226 ops/s
[info]                  ·gc.alloc.rate:                                  944.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2974.775 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 545129.387 ops/s
[info]                  ·gc.alloc.rate:            953.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2943.788 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 548328.701 ops/s
[info]                  ·gc.alloc.rate:            958.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2931.173 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce":
[info]   542824.173 ±(99.9%) 14732.175 ops/s [Average]
[info]   (min, avg, max) = (539044.210, 542824.173, 548328.701), stdev = 3825.899
[info]   CI (99.9%): [528091.998, 557556.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate":
[info]   949.164 ±(99.9%) 26.013 MB/sec [Average]
[info]   (min, avg, max) = (942.290, 949.164, 958.646), stdev = 6.755
[info]   CI (99.9%): [923.151, 975.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm":
[info]   2752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2752.001, 2752.001, 2752.001), stdev = 0.001
[info]   CI (99.9%): [2752.001, 2752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   951.080 ±(99.9%) 599.337 MB/sec [Average]
[info]   (min, avg, max) = (672.654, 951.080, 1021.414), stdev = 155.646
[info]   CI (99.9%): [351.743, 1550.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2757.079 ±(99.9%) 1726.078 B/op [Average]
[info]   (min, avg, max) = (1956.046, 2757.079, 2979.616), stdev = 448.257
[info]   CI (99.9%): [1031.001, 4483.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.326 ±(99.9%) 16.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.326, 9.683), stdev = 4.198
[info]   CI (99.9%): [≈ 0, 18.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 12.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson
[info] # Run progress: 87.50% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 950690.140 ops/s
[info] # Warmup Iteration   2: 1538155.734 ops/s
[info] # Warmup Iteration   3: 1561540.979 ops/s
[info] # Warmup Iteration   4: 1572264.011 ops/s
[info] # Warmup Iteration   5: 1556291.814 ops/s
[info] Iteration   1: 1569671.821 ops/s
[info]                  ·gc.alloc.rate:            646.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 673.265 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 1572972.672 ops/s
[info]                  ·gc.alloc.rate:            647.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 671.799 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1571169.376 ops/s
[info]                  ·gc.alloc.rate:            646.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 672.570 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1566722.588 ops/s
[info]                  ·gc.alloc.rate:                   644.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        678.512 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1578631.469 ops/s
[info]                  ·gc.alloc.rate:                                  649.915 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       678.724 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson":
[info]   1571833.585 ±(99.9%) 17085.043 ops/s [Average]
[info]   (min, avg, max) = (1566722.588, 1571833.585, 1578631.469), stdev = 4436.932
[info]   CI (99.9%): [1554748.542, 1588918.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate":
[info]   647.089 ±(99.9%) 7.055 MB/sec [Average]
[info]   (min, avg, max) = (644.980, 647.089, 649.915), stdev = 1.832
[info]   CI (99.9%): [640.034, 654.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   674.027 ±(99.9%) 15.897 MB/sec [Average]
[info]   (min, avg, max) = (671.286, 674.027, 680.730), stdev = 4.128
[info]   CI (99.9%): [658.130, 689.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   674.974 ±(99.9%) 12.967 B/op [Average]
[info]   (min, avg, max) = (671.799, 674.974, 678.724), stdev = 3.367
[info]   CI (99.9%): [662.007, 687.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.937 ±(99.9%) 8.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.937, 4.684), stdev = 2.095
[info]   CI (99.9%): [≈ 0, 9.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter
[info] # Run progress: 88.39% complete, ETA 00:03:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3896791.598 ops/s
[info] # Warmup Iteration   2: 4095104.033 ops/s
[info] # Warmup Iteration   3: 4062602.195 ops/s
[info] # Warmup Iteration   4: 4062452.139 ops/s
[info] # Warmup Iteration   5: 4071138.484 ops/s
[info] Iteration   1: 4092583.299 ops/s
[info]                  ·gc.alloc.rate:            457.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.369 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4054554.442 ops/s
[info]                  ·gc.alloc.rate:            453.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261.159 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 4103366.375 ops/s
[info]                  ·gc.alloc.rate:            458.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.026 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4085189.771 ops/s
[info]                  ·gc.alloc.rate:            456.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.598 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4066594.061 ops/s
[info]                  ·gc.alloc.rate:            454.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 260.390 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter":
[info]   4080457.590 ±(99.9%) 75980.955 ops/s [Average]
[info]   (min, avg, max) = (4054554.442, 4080457.590, 4103366.375), stdev = 19732.013
[info]   CI (99.9%): [4004476.634, 4156438.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate":
[info]   456.237 ±(99.9%) 8.423 MB/sec [Average]
[info]   (min, avg, max) = (453.384, 456.237, 458.799), stdev = 2.187
[info]   CI (99.9%): [447.814, 464.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.892 ±(99.9%) 709.464 MB/sec [Average]
[info]   (min, avg, max) = (336.316, 470.892, 672.758), stdev = 184.246
[info]   CI (99.9%): [≈ 0, 1180.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   181.908 ±(99.9%) 277.228 B/op [Average]
[info]   (min, avg, max) = (129.026, 181.908, 261.159), stdev = 71.995
[info]   CI (99.9%): [≈ 0, 459.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 12.000), stdev = 3.421
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc
[info] # Run progress: 89.29% complete, ETA 00:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3928555.187 ops/s
[info] # Warmup Iteration   2: 4221782.538 ops/s
[info] # Warmup Iteration   3: 4165907.541 ops/s
[info] # Warmup Iteration   4: 4237270.680 ops/s
[info] # Warmup Iteration   5: 2725100.781 ops/s
[info] Iteration   1: 2861955.158 ops/s
[info]                  ·gc.alloc.rate:            174.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.999 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2765684.516 ops/s
[info]                  ·gc.alloc.rate:      168.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3017583.889 ops/s
[info]                  ·gc.alloc.rate:            184.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 175.458 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 4160788.920 ops/s
[info]                  ·gc.alloc.rate:      253.827 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4226768.214 ops/s
[info]                  ·gc.alloc.rate:            257.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 125.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc":
[info]   3406556.139 ±(99.9%) 2790203.409 ops/s [Average]
[info]   (min, avg, max) = (2765684.516, 3406556.139, 4226768.214), stdev = 724606.965
[info]   CI (99.9%): [616352.730, 6196759.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate":
[info]   207.814 ±(99.9%) 170.204 MB/sec [Average]
[info]   (min, avg, max) = (168.729, 207.814, 257.845), stdev = 44.201
[info]   CI (99.9%): [37.611, 378.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen":
[info]   201.867 ±(99.9%) 709.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.867, 336.448), stdev = 184.278
[info]   CI (99.9%): [≈ 0, 911.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   97.144 ±(99.9%) 352.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97.144, 184.999), stdev = 91.537
[info]   CI (99.9%): [≈ 0, 449.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay
[info] # Run progress: 90.18% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71501.727 ops/s
[info] # Warmup Iteration   2: 177009.254 ops/s
[info] # Warmup Iteration   3: 178183.531 ops/s
[info] # Warmup Iteration   4: 177833.841 ops/s
[info] # Warmup Iteration   5: 177122.942 ops/s
[info] Iteration   1: 176537.528 ops/s
[info]                  ·gc.alloc.rate:                   925.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              8256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8997.008 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 180585.388 ops/s
[info]                  ·gc.alloc.rate:                                  947.299 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.218 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5927.569 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.806 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 179404.443 ops/s
[info]                  ·gc.alloc.rate:                                  941.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8958.442 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 180150.643 ops/s
[info]                  ·gc.alloc.rate:            945.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       8256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8921.550 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 180638.051 ops/s
[info]                  ·gc.alloc.rate:                                  947.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8897.205 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay":
[info]   179463.211 ±(99.9%) 6578.622 ops/s [Average]
[info]   (min, avg, max) = (176537.528, 179463.211, 180638.051), stdev = 1708.447
[info]   CI (99.9%): [172884.589, 186041.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate":
[info]   941.397 ±(99.9%) 34.712 MB/sec [Average]
[info]   (min, avg, max) = (925.928, 941.397, 947.482), stdev = 9.015
[info]   CI (99.9%): [906.684, 976.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm":
[info]   8256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8256.002, 8256.002, 8256.002), stdev = 0.001
[info]   CI (99.9%): [8256.002, 8256.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.126 ±(99.9%) 0.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.402), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   950.555 ±(99.9%) 582.456 MB/sec [Average]
[info]   (min, avg, max) = (680.133, 950.555, 1021.307), stdev = 151.262
[info]   CI (99.9%): [368.098, 1533.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8340.355 ±(99.9%) 5195.740 B/op [Average]
[info]   (min, avg, max) = (5927.569, 8340.355, 8997.008), stdev = 1349.317
[info]   CI (99.9%): [3144.615, 13536.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.100 ±(99.9%) 49.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.100, 29.693), stdev = 12.878
[info]   CI (99.9%): [≈ 0, 56.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 17.000), stdev = 5.805
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce
[info] # Run progress: 91.07% complete, ETA 00:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97749.499 ops/s
[info] # Warmup Iteration   2: 103448.431 ops/s
[info] # Warmup Iteration   3: 105500.473 ops/s
[info] # Warmup Iteration   4: 105045.805 ops/s
[info] # Warmup Iteration   5: 106427.608 ops/s
[info] Iteration   1: 105178.388 ops/s
[info]                  ·gc.alloc.rate:            533.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10067.414 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 105977.652 ops/s
[info]                  ·gc.alloc.rate:            538.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9991.526 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 106683.032 ops/s
[info]                  ·gc.alloc.rate:            541.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4962.569 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 104784.447 ops/s
[info]                  ·gc.alloc.rate:            532.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10105.358 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 105883.333 ops/s
[info]                  ·gc.alloc.rate:                   537.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5000.197 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.507 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce":
[info]   105701.371 ±(99.9%) 2847.498 ops/s [Average]
[info]   (min, avg, max) = (104784.447, 105701.371, 106683.032), stdev = 739.486
[info]   CI (99.9%): [102853.872, 108548.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate":
[info]   536.676 ±(99.9%) 14.490 MB/sec [Average]
[info]   (min, avg, max) = (532.051, 536.676, 541.675), stdev = 3.763
[info]   CI (99.9%): [522.186, 551.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate.norm":
[info]   7992.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7992.004, 7992.004, 7992.004), stdev = 0.001
[info]   CI (99.9%): [7992.003, 7992.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen":
[info]   538.158 ±(99.9%) 709.401 MB/sec [Average]
[info]   (min, avg, max) = (336.342, 538.158, 672.743), stdev = 184.229
[info]   CI (99.9%): [≈ 0, 1247.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8025.413 ±(99.9%) 10701.480 B/op [Average]
[info]   (min, avg, max) = (4962.569, 8025.413, 10105.358), stdev = 2779.140
[info]   CI (99.9%): [≈ 0, 18726.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.901 ±(99.9%) 85.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.901, 49.507), stdev = 22.140
[info]   CI (99.9%): [≈ 0, 95.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 11.000), stdev = 3.033
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson
[info] # Run progress: 91.96% complete, ETA 00:02:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209779.790 ops/s
[info] # Warmup Iteration   2: 200936.850 ops/s
[info] # Warmup Iteration   3: 196710.729 ops/s
[info] # Warmup Iteration   4: 202160.409 ops/s
[info] # Warmup Iteration   5: 203811.723 ops/s
[info] Iteration   1: 207860.317 ops/s
[info]                  ·gc.alloc.rate:      219.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 1664.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 206474.503 ops/s
[info]                  ·gc.alloc.rate:            218.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2564.240 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 204058.723 ops/s
[info]                  ·gc.alloc.rate:            215.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2594.379 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 202638.236 ops/s
[info]                  ·gc.alloc.rate:      214.208 MB/sec
[info]                  ·gc.alloc.rate.norm: 1664.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 203927.944 ops/s
[info]                  ·gc.alloc.rate:            215.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2596.300 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson":
[info]   204991.944 ±(99.9%) 8161.295 ops/s [Average]
[info]   (min, avg, max) = (202638.236, 204991.944, 207860.317), stdev = 2119.462
[info]   CI (99.9%): [196830.650, 213153.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate":
[info]   216.682 ±(99.9%) 8.551 MB/sec [Average]
[info]   (min, avg, max) = (214.208, 216.682, 219.673), stdev = 2.221
[info]   CI (99.9%): [208.132, 225.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate.norm":
[info]   1664.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.002, 1664.002, 1664.002), stdev = 0.001
[info]   CI (99.9%): [1664.002, 1664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen":
[info]   201.798 ±(99.9%) 709.350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.798, 336.383), stdev = 184.216
[info]   CI (99.9%): [≈ 0, 911.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1550.984 ±(99.9%) 5452.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1550.984, 2596.300), stdev = 1415.905
[info]   CI (99.9%): [≈ 0, 7003.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter
[info] # Run progress: 92.86% complete, ETA 00:02:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277087.931 ops/s
[info] # Warmup Iteration   2: 264576.128 ops/s
[info] # Warmup Iteration   3: 276755.911 ops/s
[info] # Warmup Iteration   4: 286306.858 ops/s
[info] # Warmup Iteration   5: 276831.554 ops/s
[info] Iteration   1: 264342.156 ops/s
[info]                  ·gc.alloc.rate:            222.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2002.893 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 243394.904 ops/s
[info]                  ·gc.alloc.rate:      205.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 1328.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 238367.865 ops/s
[info]                  ·gc.alloc.rate:            201.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2221.187 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 257509.969 ops/s
[info]                  ·gc.alloc.rate:            217.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2055.944 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 301821.309 ops/s
[info]                  ·gc.alloc.rate:      254.655 MB/sec
[info]                  ·gc.alloc.rate.norm: 1328.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter":
[info]   261087.241 ±(99.9%) 96493.873 ops/s [Average]
[info]   (min, avg, max) = (238367.865, 261087.241, 301821.309), stdev = 25059.152
[info]   CI (99.9%): [164593.367, 357581.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate":
[info]   220.293 ±(99.9%) 81.355 MB/sec [Average]
[info]   (min, avg, max) = (201.157, 220.293, 254.655), stdev = 21.128
[info]   CI (99.9%): [138.938, 301.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate.norm":
[info]   1328.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.001, 1328.002, 1328.002), stdev = 0.001
[info]   CI (99.9%): [1328.001, 1328.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.829 ±(99.9%) 709.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.829, 336.451), stdev = 184.243
[info]   CI (99.9%): [≈ 0, 911.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1256.005 ±(99.9%) 4425.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1256.005, 2221.187), stdev = 1149.393
[info]   CI (99.9%): [≈ 0, 5681.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc
[info] # Run progress: 93.75% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305829.560 ops/s
[info] # Warmup Iteration   2: 320819.899 ops/s
[info] # Warmup Iteration   3: 324433.771 ops/s
[info] # Warmup Iteration   4: 317043.008 ops/s
[info] # Warmup Iteration   5: 316699.541 ops/s
[info] Iteration   1: 314196.418 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 321321.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 315607.140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 319610.481 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 315883.400 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc":
[info]   317323.730 ±(99.9%) 11553.602 ops/s [Average]
[info]   (min, avg, max) = (314196.418, 317323.730, 321321.212), stdev = 3000.434
[info]   CI (99.9%): [305770.128, 328877.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay
[info] # Run progress: 94.64% complete, ETA 00:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265873.766 ops/s
[info] # Warmup Iteration   2: 285653.313 ops/s
[info] # Warmup Iteration   3: 288088.850 ops/s
[info] # Warmup Iteration   4: 285987.087 ops/s
[info] # Warmup Iteration   5: 283891.031 ops/s
[info] Iteration   1: 285373.686 ops/s
[info]                  ·gc.alloc.rate:            304.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1855.178 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 286304.315 ops/s
[info]                  ·gc.alloc.rate:            305.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1849.321 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 286720.241 ops/s
[info]                  ·gc.alloc.rate:            306.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1846.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 283822.158 ops/s
[info]                  ·gc.alloc.rate:            302.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1865.426 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 288038.269 ops/s
[info]                  ·gc.alloc.rate:            307.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1838.106 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay":
[info]   286051.734 ±(99.9%) 6054.143 ops/s [Average]
[info]   (min, avg, max) = (283822.158, 286051.734, 288038.269), stdev = 1572.242
[info]   CI (99.9%): [279997.590, 292105.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate":
[info]   305.339 ±(99.9%) 6.568 MB/sec [Average]
[info]   (min, avg, max) = (302.931, 305.339, 307.484), stdev = 1.706
[info]   CI (99.9%): [298.771, 311.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.002), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen":
[info]   336.392 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (336.329, 336.392, 336.426), stdev = 0.043
[info]   CI (99.9%): [336.228, 336.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen.norm":
[info]   1850.899 ±(99.9%) 39.228 B/op [Average]
[info]   (min, avg, max) = (1838.106, 1850.899, 1865.426), stdev = 10.187
[info]   CI (99.9%): [1811.671, 1890.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce
[info] # Run progress: 95.54% complete, ETA 00:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2963.409 ops/s
[info] # Warmup Iteration   2: 5067.099 ops/s
[info] # Warmup Iteration   3: 6284.746 ops/s
[info] # Warmup Iteration   4: 6379.859 ops/s
[info] # Warmup Iteration   5: 6442.930 ops/s
[info] Iteration   1: 6380.914 ops/s
[info]                  ·gc.alloc.rate:            851.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       209992.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248917.681 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 6392.836 ops/s
[info]                  ·gc.alloc.rate:                   852.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              209992.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        249231.512 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 983.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 6551.480 ops/s
[info]                  ·gc.alloc.rate:                                  874.168 MB/sec
[info]                  ·gc.alloc.rate.norm:                             209992.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.870 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       163534.972 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 6552.690 ops/s
[info]                  ·gc.alloc.rate:                                  874.234 MB/sec
[info]                  ·gc.alloc.rate.norm:                             209992.067 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.842 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245265.030 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 6543.258 ops/s
[info]                  ·gc.alloc.rate:                                  873.032 MB/sec
[info]                  ·gc.alloc.rate.norm:                             209992.067 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.674 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       163734.862 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce":
[info]   6484.236 ±(99.9%) 342.905 ops/s [Average]
[info]   (min, avg, max) = (6380.914, 6484.236, 6552.690), stdev = 89.051
[info]   CI (99.9%): [6141.331, 6827.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate":
[info]   865.104 ±(99.9%) 46.013 MB/sec [Average]
[info]   (min, avg, max) = (851.131, 865.104, 874.234), stdev = 11.949
[info]   CI (99.9%): [819.091, 911.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm":
[info]   209992.065 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (209992.062, 209992.065, 209992.067), stdev = 0.002
[info]   CI (99.9%): [209992.056, 209992.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.054), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.277 ±(99.9%) 21.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.277, 12.870), stdev = 5.472
[info]   CI (99.9%): [≈ 0, 24.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   880.764 ±(99.9%) 703.296 MB/sec [Average]
[info]   (min, avg, max) = (680.720, 880.764, 1021.081), stdev = 182.644
[info]   CI (99.9%): [177.468, 1584.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   214136.811 ±(99.9%) 177622.983 B/op [Average]
[info]   (min, avg, max) = (163534.972, 214136.811, 249231.512), stdev = 46128.125
[info]   CI (99.9%): [36513.828, 391759.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   196.762 ±(99.9%) 1694.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 196.762, 983.809), stdev = 439.973
[info]   CI (99.9%): [≈ 0, 1890.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 18.000), stdev = 7.335
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson
[info] # Run progress: 96.43% complete, ETA 00:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d8567e99/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 16357.542 ops/s
[info] # Warmup Iteration   2: 33582.709 ops/s
[info] # Warmup Iteration   3: 34133.049 ops/s
[info] # Warmup Iteration   4: 33576.651 ops/s
[info] # Warmup Iteration   5: 34475.894 ops/s
[info] Iteration   1: 33546.103 ops/s
[info]                  ·gc.alloc.rate:            428.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31471.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 34658.898 ops/s
[info]                  ·gc.alloc.rate:                   442.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.979 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15215.605 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34411.558 ops/s
[info]                  ·gc.alloc.rate:            439.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15354.377 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 34044.877 ops/s
[info]                  ·gc.alloc.rate:                   434.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.979 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31009.839 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 33914.741 ops/s
[info]                  ·gc.alloc.rate:                   433.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15548.885 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.912 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson":
[info]   34115.236 ±(99.9%) 1670.083 ops/s [Average]
[info]   (min, avg, max) = (33546.103, 34115.236, 34658.898), stdev = 433.715
[info]   CI (99.9%): [32445.152, 35785.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate":
[info]   435.692 ±(99.9%) 21.427 MB/sec [Average]
[info]   (min, avg, max) = (428.389, 435.692, 442.628), stdev = 5.565
[info]   CI (99.9%): [414.265, 457.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   20100.049 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (20099.979, 20100.049, 20100.153), stdev = 0.083
[info]   CI (99.9%): [20099.731, 20100.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   469.479 ±(99.9%) 707.540 MB/sec [Average]
[info]   (min, avg, max) = (335.033, 469.479, 670.791), stdev = 183.746
[info]   CI (99.9%): [≈ 0, 1177.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   21719.947 ±(99.9%) 33474.849 B/op [Average]
[info]   (min, avg, max) = (15215.605, 21719.947, 31471.031), stdev = 8693.312
[info]   CI (99.9%): [≈ 0, 55194.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   18.391 ±(99.9%) 64.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.391, 30.912), stdev = 16.791
[info]   CI (99.9%): [≈ 0, 83.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.200, 13.000), stdev = 3.493
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter
[info] # Run progress: 97.32% complete, ETA 00:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30947.275 ops/s
[info] # Warmup Iteration   2: 41728.034 ops/s
[info] # Warmup Iteration   3: 42043.978 ops/s
[info] # Warmup Iteration   4: 42297.988 ops/s
[info] # Warmup Iteration   5: 42156.615 ops/s
[info] Iteration   1: 42530.689 ops/s
[info]                  ·gc.alloc.rate:      285.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 10552.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 41765.559 ops/s
[info]                  ·gc.alloc.rate:            279.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       10552.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12677.301 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 42295.098 ops/s
[info]                  ·gc.alloc.rate:            283.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       10552.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12518.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 41912.246 ops/s
[info]                  ·gc.alloc.rate:            280.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       10552.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12631.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 42269.650 ops/s
[info]                  ·gc.alloc.rate:            283.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       10552.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12525.864 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter":
[info]   42154.648 ±(99.9%) 1193.867 ops/s [Average]
[info]   (min, avg, max) = (41765.559, 42154.648, 42530.689), stdev = 310.043
[info]   CI (99.9%): [40960.781, 43348.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate":
[info]   282.606 ±(99.9%) 8.009 MB/sec [Average]
[info]   (min, avg, max) = (279.986, 282.606, 285.110), stdev = 2.080
[info]   CI (99.9%): [274.598, 290.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   10552.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10552.010, 10552.010, 10552.010), stdev = 0.001
[info]   CI (99.9%): [10552.009, 10552.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.111 ±(99.9%) 579.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.111, 336.455), stdev = 150.438
[info]   CI (99.9%): [≈ 0, 848.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   10070.713 ±(99.9%) 21679.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10070.713, 12677.301), stdev = 5630.113
[info]   CI (99.9%): [≈ 0, 31750.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc
[info] # Run progress: 98.21% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30459.923 ops/s
[info] # Warmup Iteration   2: 42612.452 ops/s
[info] # Warmup Iteration   3: 42635.752 ops/s
[info] # Warmup Iteration   4: 43034.062 ops/s
[info] # Warmup Iteration   5: 42095.907 ops/s
[info] Iteration   1: 41815.421 ops/s
[info]                  ·gc.alloc.rate:      10.837 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 41984.395 ops/s
[info]                  ·gc.alloc.rate:      10.883 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42018.886 ops/s
[info]                  ·gc.alloc.rate:      10.894 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36085.972 ops/s
[info]                  ·gc.alloc.rate:      9.355 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 29694.971 ops/s
[info]                  ·gc.alloc.rate:      7.699 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc":
[info]   38319.929 ±(99.9%) 20977.133 ops/s [Average]
[info]   (min, avg, max) = (29694.971, 38319.929, 42018.886), stdev = 5447.695
[info]   CI (99.9%): [17342.796, 59297.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   9.934 ±(99.9%) 5.434 MB/sec [Average]
[info]   (min, avg, max) = (7.699, 9.934, 10.894), stdev = 1.411
[info]   CI (99.9%): [4.500, 15.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   408.011 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (408.010, 408.011, 408.014), stdev = 0.002
[info]   CI (99.9%): [408.004, 408.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay
[info] # Run progress: 99.11% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1925.311 ops/s
[info] # Warmup Iteration   2: 4098.813 ops/s
[info] # Warmup Iteration   3: 4241.045 ops/s
[info] # Warmup Iteration   4: 4393.738 ops/s
[info] # Warmup Iteration   5: 4427.923 ops/s
[info] Iteration   1: 4393.755 ops/s
[info]                  ·gc.alloc.rate:                   894.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              320477.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        361215.942 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 238.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 4414.231 ops/s
[info]                  ·gc.alloc.rate:                                  898.654 MB/sec
[info]                  ·gc.alloc.rate.norm:                             320478.523 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       362429.666 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1425.018 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 4412.158 ops/s
[info]                  ·gc.alloc.rate:                                  889.334 MB/sec
[info]                  ·gc.alloc.rate.norm:                             320476.996 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            673.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       242838.131 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4471.242 ops/s
[info]                  ·gc.alloc.rate:                                  910.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             320478.787 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.812 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       359451.478 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4459.034 ops/s
[info]                  ·gc.alloc.rate:            907.826 MB/sec
[info]                  ·gc.alloc.rate.norm:       320477.519 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 360418.612 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay":
[info]   4430.084 ±(99.9%) 128.067 ops/s [Average]
[info]   (min, avg, max) = (4393.755, 4430.084, 4471.242), stdev = 33.259
[info]   CI (99.9%): [4302.017, 4558.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate":
[info]   900.135 ±(99.9%) 34.016 MB/sec [Average]
[info]   (min, avg, max) = (889.334, 900.135, 910.292), stdev = 8.834
[info]   CI (99.9%): [866.119, 934.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   320477.795 ±(99.9%) 3.130 B/op [Average]
[info]   (min, avg, max) = (320476.996, 320477.795, 320478.787), stdev = 0.813
[info]   CI (99.9%): [320474.665, 320480.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.027), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.899 ±(99.9%) 15.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.899, 9.524), stdev = 4.017
[info]   CI (99.9%): [≈ 0, 18.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   948.083 ±(99.9%) 590.573 MB/sec [Average]
[info]   (min, avg, max) = (673.884, 948.083, 1020.990), stdev = 153.370
[info]   CI (99.9%): [357.510, 1538.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   337270.766 ±(99.9%) 203316.834 B/op [Average]
[info]   (min, avg, max) = (242838.131, 337270.766, 362429.666), stdev = 52800.736
[info]   CI (99.9%): [133953.931, 540587.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   332.720 ±(99.9%) 2384.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 332.720, 1425.018), stdev = 619.291
[info]   CI (99.9%): [≈ 0, 2717.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.504
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # Run complete. Total time: 00:30:36
[info] Benchmark                                                                                              Mode  Cnt         Score         Error   Units
[info] JsonCodecMakerBenchmark.missingReqFieldCirce                                                          thrpt    5   1338470.001 ±  289579.090   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate                                           thrpt    5      1972.698 ±     426.489  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm                                      thrpt    5      2320.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.001 ±       0.003  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.001 ±       0.003    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen                                     thrpt    5      2042.025 ±     926.997  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2398.666 ±     822.768    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count                                                thrpt    5        30.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time                                                 thrpt    5        50.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJackson                                                        thrpt    5    170903.051 ±    2803.837   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate                                         thrpt    5       310.112 ±       5.062  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm                                    thrpt    5      2856.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       268.966 ±     578.971  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      2473.508 ±    5324.518    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         1.226 ±      10.552    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count                                              thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time                                               thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter                                                       thrpt    5    311706.553 ±  112124.175   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate                                        thrpt    5       205.829 ±      74.028  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm                                   thrpt    5      1040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       201.768 ±     709.243  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5      1061.561 ±    3784.359    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count                                             thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time                                              thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless                                              thrpt    5    770586.254 ±   33599.904   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate                               thrpt    5       270.280 ±      11.495  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm                          thrpt    5       552.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen                         thrpt    5       268.955 ±     578.947  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm                    thrpt    5       551.434 ±    1187.123    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count                                    thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time                                     thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump                                        thrpt    5   2634859.270 ±  956745.669   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate                         thrpt    5       294.617 ±     107.006  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm                    thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                   thrpt    5       336.369 ±       0.159  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm              thrpt    5       202.477 ±      78.513    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count                              thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time                               thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldPlay                                                           thrpt    5    107142.410 ±    1714.520   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate                                            thrpt    5       686.620 ±      10.972  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm                                       thrpt    5     10088.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.039 ±       0.332  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.565 ±       4.867    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       743.005 ±     598.576  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     10913.047 ±    8691.249    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        11.816 ±     101.740    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count                                                 thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time                                                  thrpt    5        51.000                    ms
[info] JsonCodecMakerBenchmark.readAdtCirce                                                                  thrpt    5    504265.679 ±   28363.842   ops/s
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate                                                   thrpt    5      1300.558 ±      74.949  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm                                              thrpt    5      4064.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.001 ±       0.009  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.004 ±       0.029    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1292.268 ±     595.981  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      4037.518 ±    1834.463    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.count                                                        thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.time                                                         thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJackson                                                                thrpt    5   1072299.549 ±   18621.192   ops/s
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate                                                 thrpt    5       763.024 ±      13.085  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm                                            thrpt    5      1120.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±       0.066  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.017 ±       0.097    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen                                           thrpt    5       744.554 ±     568.261  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1093.452 ±     850.941    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.933 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.375 ±       9.874    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.count                                                      thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.time                                                       thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJsoniter                                                               thrpt    5   2700780.688 ±  351472.249   ops/s
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate                                                thrpt    5       178.445 ±      23.187  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm                                           thrpt    5       104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen                                          thrpt    5       201.814 ±     709.403  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       118.227 ±     416.099    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count                                                     thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time                                                      thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.readAdtPlay                                                                   thrpt    5    105470.289 ±    2947.260   ops/s
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate                                                    thrpt    5       893.615 ±      24.838  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm                                               thrpt    5     13336.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.012 ±       0.067  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.182 ±       0.992    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen                                              thrpt    5       949.697 ±     579.423  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     14184.805 ±    8917.697    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        11.926 ±     102.688    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.count                                                         thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.time                                                          thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsCirce                                                              thrpt    5   1167233.063 ±   51193.016   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate                                               thrpt    5      1821.271 ±      80.076  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm                                          thrpt    5      2456.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.001 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.001 ±       0.006    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1837.759 ±     717.616  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2480.056 ±    1048.172    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count                                                    thrpt    5        27.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time                                                     thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJackson                                                            thrpt    5   1613662.522 ±   34328.363   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate                                             thrpt    5      1131.694 ±      24.291  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm                                        thrpt    5      1104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.031 ±       0.265  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.030 ±       0.259    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1156.980 ±     718.239  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1129.196 ±     716.804    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.130 ±       1.120    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count                                                  thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time                                                   thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter                                                           thrpt    5   6480945.720 ± 2934683.214   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate                                            thrpt    5       823.533 ±     372.712  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       200.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.019 ±       0.157  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.006 ±       0.046    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       815.172 ±     724.048  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       199.896 ±     190.019    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.562  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.190 ±       1.258    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count                                                 thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time                                                  thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsPlay                                                               thrpt    5    332084.786 ±   11287.197   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate                                                thrpt    5       886.126 ±      30.273  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm                                           thrpt    5      4200.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.009 ±       0.073  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.040 ±       0.343    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       882.388 ±     722.907  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4186.423 ±    3509.697    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         3.808 ±      32.789    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count                                                     thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time                                                      thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.readArraysCirce                                                               thrpt    5    548806.048 ±    8256.758   ops/s
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate                                                thrpt    5      1776.813 ±      26.686  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm                                           thrpt    5      5096.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.005 ±       0.017    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1769.876 ±     586.021  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5076.411 ±    1697.476    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.count                                                     thrpt    5        26.000                counts
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.time                                                      thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJackson                                                             thrpt    5    965557.824 ±   43704.260   ops/s
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate                                              thrpt    5       907.920 ±      41.273  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm                                         thrpt    5      1480.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.010 ±       0.082  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.016 ±       0.133    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen                                        thrpt    5       882.436 ±     710.303  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1440.679 ±    1202.621    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.316 ±       9.195    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.count                                                   thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.time                                                    thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJsoniter                                                            thrpt    5   2689856.202 ±   77961.045   ops/s
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate                                             thrpt    5      1120.940 ±      32.501  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm                                        thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.030 ±       0.262  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.018 ±       0.154    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5      1156.966 ±     716.810  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       677.720 ±     438.805    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.078 ±       0.673    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count                                                  thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time                                                   thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.readArraysPlay                                                                thrpt    5    171447.442 ±   11181.095   ops/s
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate                                                 thrpt    5      1060.442 ±      69.386  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm                                            thrpt    5      9736.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±       0.106  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.112 ±       0.964    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1087.388 ±     590.123  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      9979.616 ±    5204.094    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         7.343 ±      63.223    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.count                                                      thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.time                                                       thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJackson                                                            thrpt    5   1549830.282 ±   31661.143   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate                                             thrpt    5       984.435 ±      20.323  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm                                        thrpt    5      1000.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.019 ±       0.167  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.020 ±       0.169    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5       950.824 ±     581.978  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       966.121 ±     597.112    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±       8.027  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.955 ±       8.223    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count                                                  thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time                                                   thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter                                                           thrpt    5   3935494.315 ±  312270.977   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate                                            thrpt    5       520.058 ±      41.229  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       208.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       538.187 ±     709.357  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       214.868 ±     278.452    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.263 ±       2.266    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count                                                 thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time                                                  thrpt    5        48.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsPlay                                                               thrpt    5    208816.169 ±    5736.286   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate                                                thrpt    5       956.201 ±      26.255  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm                                           thrpt    5      7208.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.011 ±       0.095  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.083 ±       0.715    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       950.440 ±     580.886  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      7166.476 ±    4420.064    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         6.078 ±      42.425    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count                                                     thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time                                                      thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce                                                        thrpt    5    498237.336 ±    6491.402   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate                                         thrpt    5      1628.451 ±      21.054  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm                                    thrpt    5      5144.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.003 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.010 ±       0.013    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1633.575 ±     585.881  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5      5159.204 ±    1804.611    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count                                              thrpt    5        24.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time                                               thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson                                                      thrpt    5    454024.015 ±   12565.839   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate                                       thrpt    5       563.075 ±      15.615  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm                                  thrpt    5      1952.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       605.959 ±     580.291  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5      2099.424 ±    1995.372    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space                          thrpt    5         0.933 ±       8.030  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         3.210 ±      27.639    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count                                            thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time                                             thrpt    5        50.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter                                                     thrpt    5   4079435.601 ± 3490665.492   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate                                      thrpt    5       186.636 ±     159.633  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       201.854 ±     709.544  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5        67.999 ±     240.954    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count                                           thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time                                            thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay                                                         thrpt    5    160563.112 ±    3610.717   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate                                          thrpt    5       887.077 ±      20.102  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm                                     thrpt    5      8696.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.014 ±       0.117  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.134 ±       1.148    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen                                    thrpt    5       881.613 ±     714.585  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5      8649.771 ±    7154.731    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         7.779 ±      66.976    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count                                               thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time                                                thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce                                                        thrpt    5      4592.480 ±     252.464   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate                                         thrpt    5      1105.723 ±      57.547  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm                                    thrpt    5    378808.092 ±       0.019    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.068 ±       0.267  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        23.314 ±      92.192    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1087.910 ±     577.527  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5    373266.032 ±  218938.399    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        45.849 ±     394.777    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count                                              thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time                                               thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson                                                      thrpt    5      9088.953 ±     176.339   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate                                       thrpt    5       230.282 ±       4.449  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm                                  thrpt    5     39872.046 ±       0.007    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       201.472 ±     708.201  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5     34951.730 ±  122862.366    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count                                            thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time                                             thrpt    5        19.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter                                                     thrpt    5     17368.721 ±     538.581   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate                                      thrpt    5       296.819 ±       9.231  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                 thrpt    5     26896.025 ±       0.009    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       269.122 ±     579.306  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5     24446.864 ±   52628.409    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count                                           thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time                                            thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay                                                         thrpt    5      1770.471 ±      28.806   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate                                          thrpt    5      1071.635 ±      17.593  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm                                     thrpt    5    952664.234 ±       0.029    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.041 ±       0.083  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5        36.076 ±      73.959    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                    thrpt    5      1019.848 ±       8.166  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5    906634.311 ±    8765.842    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       715.345 ±    6159.333    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count                                               thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time                                                thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter                                                    thrpt    5   3743436.445 ±   38928.982   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate                                     thrpt    5      1122.627 ±      12.007  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm                                thrpt    5       472.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.025 ±       0.212  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.011 ±       0.089    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5      1157.151 ±     717.458  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5       486.555 ±     302.841    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space                        thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         0.056 ±       0.483    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count                                          thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time                                           thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay                                                        thrpt    5    176013.871 ±    7331.058   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate                                         thrpt    5       993.795 ±      41.351  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm                                    thrpt    5      8888.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.012 ±       0.105  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.109 ±       0.936    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                   thrpt    5       951.177 ±     582.291  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5      8508.188 ±    5232.092    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         7.278 ±      62.669    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count                                              thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time                                               thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesCirce                                                            thrpt    5    471842.455 ±   10917.142   ops/s
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate                                             thrpt    5      1705.049 ±      39.720  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm                                        thrpt    5      5688.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.001 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.002 ±       0.015    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen                                       thrpt    5      1701.705 ±       0.488  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5677.010 ±     131.266    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.time                                                   thrpt    5        57.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJackson                                                          thrpt    5    461339.349 ±   28533.795   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate                                           thrpt    5       536.944 ±      33.335  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm                                      thrpt    5      1832.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen                                     thrpt    5       537.108 ±     708.041  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1830.084 ±    2382.058    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.710 ±      23.335    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.count                                                thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.time                                                 thrpt    5        51.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJsoniter                                                         thrpt    5   3048329.981 ±   40908.796   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate                                          thrpt    5      1208.560 ±      16.399  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm                                     thrpt    5       624.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.003 ±       0.017  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.001 ±       0.009    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen                                    thrpt    5      1157.303 ±     717.594  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                               thrpt    5       597.751 ±     377.179    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count                                               thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time                                                thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesPlay                                                             thrpt    5    127430.135 ±   30447.652   ops/s
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate                                              thrpt    5       885.380 ±     211.815  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm                                         thrpt    5     10936.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.015 ±       0.126  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.175 ±       1.511    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen                                        thrpt    5       881.625 ±     714.573  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     10971.758 ±   10247.726    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         9.646 ±      83.057    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.count                                                   thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.time                                                    thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readMapsCirce                                                                 thrpt    5    410564.279 ±    7630.187   ops/s
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate                                                  thrpt    5      1431.401 ±      26.454  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm                                             thrpt    5      5488.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.002 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.006 ±       0.014    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1497.495 ±     717.913  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5740.056 ±    2695.054    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.count                                                       thrpt    5        22.000                counts
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.time                                                        thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJackson                                                               thrpt    5    707361.113 ±   18275.991   ops/s
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate                                                thrpt    5       834.065 ±      21.473  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm                                           thrpt    5      1856.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.028 ±       0.239  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.062 ±       0.531    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       812.990 ±     714.234  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1810.691 ±    1624.520    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         2.100 ±      18.079    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.count                                                     thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.time                                                      thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJsoniter                                                              thrpt    5   3302855.444 ±  133382.002   ops/s
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate                                               thrpt    5       822.604 ±      33.226  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm                                          thrpt    5       392.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.027 ±       0.232  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.013 ±       0.110    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       881.659 ±     714.590  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       420.543 ±     348.507    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.379 ±       3.264    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count                                                    thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time                                                     thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readMapsPlay                                                                  thrpt    5    191628.601 ±    7303.068   ops/s
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate                                                   thrpt    5      1070.430 ±      40.615  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm                                              thrpt    5      8792.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.012 ±       0.071  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.101 ±       0.581    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen                                             thrpt    5      1088.296 ±     588.396  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      8937.062 ±    4747.435    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.669 ±      57.423    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.count                                                        thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.time                                                         thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce                                                     thrpt    5    463161.811 ±   10496.180   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate                                      thrpt    5      1770.311 ±      40.184  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm                                 thrpt    5      6016.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.002 ±       0.003  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.006 ±       0.012    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen                                thrpt    5      1769.901 ±     585.859  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                           thrpt    5      6015.670 ±    2050.611    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count                                           thrpt    5        26.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time                                            thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter                                                  thrpt    5   2536609.574 ±   65109.786   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate                                   thrpt    5      1637.237 ±      42.166  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm                              thrpt    5      1016.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.001 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         0.001 ±       0.002    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                             thrpt    5      1633.626 ±     586.358  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                        thrpt    5      1013.553 ±     353.722    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count                                        thrpt    5        24.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time                                         thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay                                                      thrpt    5    130903.510 ±    2227.593   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate                                       thrpt    5       943.375 ±      16.191  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm                                  thrpt    5     11344.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.042 ±       0.311  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.506 ±       3.752    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen                                 thrpt    5       949.579 ±     579.072  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                            thrpt    5     11422.593 ±    7054.581    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         9.627 ±      82.892    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count                                            thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time                                             thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJackson                                                        thrpt    5    696965.047 ±   20066.002   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate                                         thrpt    5       903.331 ±      26.046  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm                                    thrpt    5      2040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.062 ±       0.537  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.140 ±       1.207    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       880.960 ±     714.660  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      1990.303 ±    1630.084    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.933 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         2.103 ±      18.108    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count                                              thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time                                               thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter                                                       thrpt    5   2420927.517 ±   87855.200   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate                                        thrpt    5      1144.430 ±      41.404  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm                                   thrpt    5       744.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.032 ±       0.278  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.021 ±       0.180    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5      1157.363 ±     717.998  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       752.192 ±     458.895    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count                                             thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time                                              thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsPlay                                                           thrpt    5    167897.058 ±    4155.019   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate                                            thrpt    5       935.393 ±      23.299  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm                                       thrpt    5      8768.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.010 ±       0.086  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.095 ±       0.802    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       950.175 ±     580.388  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8908.117 ±    5472.949    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.559 ±      52.733    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time                                                  thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesCirce                                                           thrpt    5    411422.260 ±    8302.285   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate                                            thrpt    5      1273.641 ±      25.860  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm                                       thrpt    5      4872.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.028 ±       0.234  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.108 ±       0.896    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.490 ±     585.800  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      4949.975 ±    2308.568    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count                                                 thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time                                                  thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJackson                                                         thrpt    5    921495.950 ±   64008.525   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate                                          thrpt    5       697.709 ±      48.439  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm                                     thrpt    5      1192.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.012 ±       0.072  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.020 ±       0.121    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       743.724 ±     596.988  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1269.161 ±     970.330    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       5.558  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.363 ±       9.499    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count                                               thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time                                                thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter                                                        thrpt    5   4080723.498 ±  102907.925   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate                                         thrpt    5       124.428 ±       3.150  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm                                    thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       134.242 ±     707.820  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5        51.835 ±     273.310    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.266 ±       2.293  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.103 ±       0.885    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count                                              thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time                                               thrpt    5        11.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesPlay                                                            thrpt    5    129421.832 ±    5315.612   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate                                             thrpt    5       871.535 ±      35.808  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm                                        thrpt    5     10600.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.011 ±       0.091  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.128 ±       1.103    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       881.572 ±     720.391  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     10728.259 ±    8881.832    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         9.888 ±      85.142    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count                                                  thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time                                                   thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readStringCirce                                                               thrpt    5    122695.504 ±    2841.513   ops/s
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate                                                thrpt    5       910.419 ±      21.207  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate.norm                                           thrpt    5     11680.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.019 ±       0.136  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.238 ±       1.752    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       883.172 ±     725.887  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     11326.651 ±    9230.658    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        10.340 ±      72.032    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.count                                                     thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.time                                                      thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readStringJackson                                                             thrpt    5    539374.114 ±  239877.789   ops/s
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate                                              thrpt    5       707.216 ±     314.695  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate.norm                                         thrpt    5      2064.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.020 ±       0.175  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.056 ±       0.481    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen                                        thrpt    5       744.594 ±     595.224  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      2185.986 ±    1658.877    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         2.240 ±      19.286    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.count                                                   thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.time                                                    thrpt    5        48.000                    ms
[info] JsonCodecMakerBenchmark.readStringJsoniter                                                            thrpt    5    608757.994 ±   13167.989   ops/s
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate                                             thrpt    5       519.792 ±      11.213  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate.norm                                        thrpt    5      1344.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5       538.165 ±     709.306  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1392.492 ±    1845.862    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space                                thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         1.728 ±      14.876    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.count                                                  thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.time                                                   thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.readStringPlay                                                                thrpt    5    189117.961 ±   10275.016   ops/s
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate                                                 thrpt    5      1723.357 ±      93.003  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate.norm                                            thrpt    5     14344.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.002 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.014 ±       0.040    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1701.761 ±       0.765  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     14166.527 ±     780.562    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.count                                                      thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.time                                                       thrpt    5        50.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPICirce                                                           thrpt    5      7468.178 ±     280.754   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate                                            thrpt    5      1099.126 ±      41.658  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm                                       thrpt    5    231659.298 ±      27.915    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.038 ±       0.142  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         7.997 ±      29.914    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1154.603 ±     704.249  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    243546.253 ±  154270.124    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       171.219 ±    1474.250    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count                                                 thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time                                                  thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson                                                         thrpt    5     10147.723 ±    4720.638   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate                                          thrpt    5       143.362 ±      66.644  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm                                     thrpt    5     22234.283 ±      30.681    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       200.921 ±     706.279  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5     29597.245 ±  104043.231    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.533 ±       4.588  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5        78.398 ±     675.032    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count                                               thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time                                                thrpt    5        20.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter                                                        thrpt    5     20504.690 ±     437.416   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate                                         thrpt    5       184.468 ±       3.823  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm                                    thrpt    5     14160.022 ±       0.013    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       201.815 ±     709.408  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5     15470.467 ±   54381.639    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count                                              thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time                                               thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay                                                            thrpt    5      3176.103 ±      95.866   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate                                             thrpt    5       932.373 ±      28.176  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm                                        thrpt    5    462024.134 ±       0.034    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.032 ±       0.123  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5        15.782 ±      61.352    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       949.527 ±     578.968  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    470609.183 ±  288620.166    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       398.572 ±    3431.823    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count                                                  thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time                                                   thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtCirce                                                                 thrpt    5    338625.844 ±    3029.824   ops/s
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate                                                  thrpt    5      1117.083 ±      10.157  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm                                             thrpt    5      5192.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.022 ±       0.191  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.104 ±       0.890    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1089.149 ±     586.586  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5061.291 ±    2689.654    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.621 ±       5.349    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.count                                                       thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.time                                                        thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJackson                                                               thrpt    5   1373918.507 ±   60446.415   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate                                                thrpt    5       572.579 ±      25.068  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm                                           thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       605.031 ±     579.889  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       692.326 ±     652.996    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.055 ±       9.086    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.count                                                     thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.time                                                      thrpt    5        50.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJsoniter                                                              thrpt    5  11398770.834 ±  364372.305   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate                                               thrpt    5       579.375 ±      18.480  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm                                          thrpt    5        80.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       538.868 ±     705.962  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5        74.565 ±      99.406    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.111 ±       0.775    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count                                                    thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time                                                     thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtPlay                                                                  thrpt    5    204740.343 ±    8715.751   ops/s
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate                                                   thrpt    5       653.465 ±      27.666  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm                                              thrpt    5      5024.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.013 ±       0.112  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.099 ±       0.854    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen                                             thrpt    5       674.966 ±      13.594  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5189.647 ±     167.945    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.096 ±      52.489    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.count                                                        thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.time                                                         thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce                                                             thrpt    5   1264671.904 ±   16342.488   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate                                              thrpt    5      1272.962 ±      17.140  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm                                         thrpt    5      1584.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.002 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.003 ±       0.007    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen                                        thrpt    5      1293.208 ±     584.881  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1609.616 ±     742.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count                                                   thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time                                                    thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson                                                           thrpt    5   3550922.248 ±  105071.478   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate                                            thrpt    5       974.479 ±      28.908  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm                                       thrpt    5       432.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.013 ±       0.110  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.006 ±       0.049    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5       950.931 ±     581.934  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       421.765 ±     262.538    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.419 ±       3.606    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time                                                  thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter                                                          thrpt    5  16093672.983 ± 1092899.505   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate                                           thrpt    5       490.715 ±      33.232  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm                                      thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       470.862 ±     709.470  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5        46.278 ±      72.386    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count                                                thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time                                                 thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc                                                  thrpt    5  17731904.265 ±  744772.513   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                  B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count                                        thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay                                                              thrpt    5    754783.278 ±   13358.012   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate                                               thrpt    5      1100.946 ±      19.446  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm                                          thrpt    5      2296.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.036 ±       0.297  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.075 ±       0.623    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1156.242 ±     712.967  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2412.040 ±    1508.925    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.676 ±      14.429    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count                                                    thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time                                                     thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysCirce                                                              thrpt    5    627946.194 ±   12438.859   ops/s
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate                                               thrpt    5      1423.291 ±      28.060  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm                                          thrpt    5      3568.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.001 ±       0.007  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.003 ±       0.016    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1429.372 ±     585.831  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3584.253 ±    1517.769    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.count                                                    thrpt    5        21.000                counts
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.time                                                     thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJackson                                                            thrpt    5   2271505.690 ±   77328.018   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate                                             thrpt    5      1293.002 ±      44.131  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm                                        thrpt    5       896.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.021 ±       0.170  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.014 ±       0.118    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1293.326 ±     585.861  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       896.709 ±     421.595    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.count                                                  thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.time                                                   thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJsoniter                                                           thrpt    5   5012061.918 ±   95356.280   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate                                            thrpt    5      1324.707 ±      25.550  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm                                       thrpt    5       416.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.001 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5        ≈ 10⁻³                  B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5      1361.479 ±       0.901  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       427.556 ±       8.106    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count                                                 thrpt    5        20.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time                                                  thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysPlay                                                               thrpt    5    289183.290 ±    3761.997   ops/s
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate                                                thrpt    5      1005.440 ±      13.688  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm                                           thrpt    5      5472.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.013 ±       0.113  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.071 ±       0.614    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1019.462 ±      15.762  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5548.325 ±      62.648    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         4.368 ±      37.612    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.count                                                     thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.time                                                      thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJackson                                                           thrpt    5   1875362.363 ±   47872.951   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate                                            thrpt    5       991.406 ±      25.355  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm                                       thrpt    5       832.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.044 ±       0.378  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.037 ±       0.317    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5       951.120 ±     582.049  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       798.497 ±     495.299    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.933 ±       8.030  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.792 ±       6.816    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time                                                  thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter                                                          thrpt    5   4545142.820 ±  224371.516   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate                                           thrpt    5       831.802 ±      41.100  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm                                      thrpt    5       288.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.031 ±       0.263  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.011 ±       0.091    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       813.720 ±     708.822  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5       282.281 ±     257.211    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space                              thrpt    5         0.800 ±       6.884  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.277 ±       2.384    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count                                                thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time                                                 thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsPlay                                                              thrpt    5    382720.648 ±   97796.691   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate                                               thrpt    5      1108.836 ±     282.841  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm                                          thrpt    5      4560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.015 ±       0.120  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.060 ±       0.486    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1089.105 ±     586.062  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      4485.941 ±    2299.038    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.538 ±       4.628    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count                                                    thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time                                                     thrpt    5        21.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce                                                       thrpt    5      4466.078 ±      82.477   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate                                        thrpt    5      1086.341 ±      20.327  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm                                   thrpt    5    382880.096 ±       0.026    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.066 ±       0.255  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5        23.426 ±      90.908    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                  thrpt    5      1088.032 ±     577.408  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                             thrpt    5    383676.617 ±  211528.597    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.879  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                      thrpt    5       283.910 ±    2444.555    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count                                             thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time                                              thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson                                                     thrpt    5     25077.104 ±    5461.777   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate                                      thrpt    5       363.424 ±      79.121  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm                                 thrpt    5     22807.819 ±       0.253    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                thrpt    5       335.745 ±       0.167  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                           thrpt    5     21129.166 ±    4975.944    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count                                           thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time                                            thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter                                                    thrpt    5     35562.544 ±     980.978   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate                                     thrpt    5       272.587 ±       7.517  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                thrpt    5     12064.012 ±       0.002    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5       269.112 ±     579.284  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5     11923.977 ±   25670.183    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count                                          thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time                                           thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc                                            thrpt    5     57252.114 ±    2302.920   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate                             thrpt    5        17.168 ±       0.690  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm                        thrpt    5       472.007 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count                                  thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay                                                        thrpt    5      4306.220 ±     106.954   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate                                         thrpt    5      1234.746 ±      27.549  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm                                    thrpt    5    451520.006 ±       2.561    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.052 ±       0.072  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        19.127 ±      26.496    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1224.725 ±     719.869  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5    447967.254 ±  266374.437    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count                                              thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time                                               thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson                                                    thrpt    5    478598.829 ±   12772.397   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate                                     thrpt    5      1072.918 ±      28.732  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm                                thrpt    5      3528.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.057 ±       0.483  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.186 ±       1.574    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen                               thrpt    5      1087.220 ±     590.977  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3575.234 ±    1948.776    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space                        thrpt    5         0.933 ±       8.030  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         3.091 ±      26.613    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count                                          thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time                                           thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter                                                   thrpt    5   2339961.669 ±   43974.618   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate                                    thrpt    5       487.541 ±       9.118  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm                               thrpt    5       328.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                              thrpt    5       470.850 ±     709.394  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                         thrpt    5       317.091 ±     481.699    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count                                         thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time                                          thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay                                                       thrpt    5    223618.577 ±    8286.060   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate                                        thrpt    5       877.576 ±      33.457  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm                                   thrpt    5      6176.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.013 ±       0.112  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.093 ±       0.782    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                  thrpt    5       880.377 ±     705.333  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                             thrpt    5      6204.064 ±    5133.846    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         5.671 ±      48.825    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count                                             thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time                                              thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesCirce                                                           thrpt    5    531111.506 ±   10060.141   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate                                            thrpt    5      1292.946 ±      24.427  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm                                       thrpt    5      3832.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.003 ±       0.011  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.009 ±       0.032    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.323 ±     586.085  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3833.388 ±    1745.505    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count                                                 thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time                                                  thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJackson                                                         thrpt    5    973037.322 ±   14885.727   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate                                          thrpt    5       657.714 ±      10.198  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm                                     thrpt    5      1064.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.025 ±       0.216  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.040 ±       0.349    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       606.763 ±     583.670  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5       981.743 ±     946.363    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.518 ±      13.069    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count                                               thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time                                                thrpt    5        50.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter                                                        thrpt    5   4908181.735 ±  139619.076   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate                                         thrpt    5       947.859 ±      27.273  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm                                    thrpt    5       304.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.029 ±       0.252  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.009 ±       0.081    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       951.207 ±     582.509  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5       305.109 ±     187.504    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.260 ±       2.236    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count                                              thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time                                               thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesPlay                                                            thrpt    5    298504.192 ±    6863.549   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate                                             thrpt    5      1020.934 ±      23.605  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm                                        thrpt    5      5384.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.015 ±       0.126  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.079 ±       0.662    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5      1019.258 ±      15.177  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5375.222 ±      52.983    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         4.258 ±      36.665    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count                                                  thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time                                                   thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsCirce                                                                thrpt    5    299943.915 ±   25138.996   ops/s
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate                                                 thrpt    5       814.182 ±      68.377  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm                                            thrpt    5      4272.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±       0.104  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.063 ±       0.539    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       812.861 ±     710.511  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      4276.080 ±    3960.214    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       5.562  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.172 ±      29.061    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.count                                                      thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.time                                                       thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJackson                                                              thrpt    5    661238.874 ±   26105.479   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate                                               thrpt    5      1008.304 ±      39.796  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm                                          thrpt    5      2400.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.059 ±       0.512  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.141 ±       1.214    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen                                         thrpt    5      1018.102 ±      23.651  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2423.411 ±      42.763    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.933 ±       5.620  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         2.247 ±      13.602    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.count                                                    thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.time                                                     thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJsoniter                                                             thrpt    5   2358370.119 ±   33650.894   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate                                              thrpt    5       563.400 ±       7.988  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm                                         thrpt    5       376.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen                                        thrpt    5       538.900 ±     712.043  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       359.858 ±     477.723    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.884  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.532 ±       4.579    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count                                                   thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time                                                    thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsPlay                                                                 thrpt    5    229726.634 ±   46336.493   ops/s
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate                                                  thrpt    5       830.304 ±     167.489  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm                                             thrpt    5      5688.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.037 ±       0.314  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.243 ±       2.090    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen                                            thrpt    5       880.958 ±     718.139  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      6054.695 ±    5228.879    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         5.577 ±      39.178    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.count                                                       thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.time                                                        thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce                                                    thrpt    5    530085.912 ±   13957.821   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate                                     thrpt    5      1223.146 ±      31.613  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm                                thrpt    5      3632.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.035 ±       0.295  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.105 ±       0.872    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen                               thrpt    5      1225.279 ±     718.011  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3638.367 ±    2131.669    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count                                          thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time                                           thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson                                                  thrpt    5   1022170.560 ±   54849.289   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate                                   thrpt    5       587.030 ±      31.402  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm                              thrpt    5       904.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen                             thrpt    5       537.778 ±     704.637  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm                        thrpt    5       830.530 ±    1113.825    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space                      thrpt    5         0.932 ±       5.619  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm                 thrpt    5         1.455 ±       8.839    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count                                        thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time                                         thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter                                                 thrpt    5   4251839.549 ±  679644.278   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate                                  thrpt    5       583.516 ±      93.057  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm                             thrpt    5       216.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                            thrpt    5       606.954 ±     582.405  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                       thrpt    5       223.044 ±     190.733    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space                     thrpt    5         0.799 ±       5.562  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                thrpt    5         0.315 ±       2.225    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count                                       thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time                                        thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay                                                     thrpt    5    290952.170 ±    4727.454   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate                                      thrpt    5       983.404 ±      16.006  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm                                 thrpt    5      5320.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.009 ±       0.077  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.050 ±       0.416    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen                                thrpt    5      1018.577 ±      20.384  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                           thrpt    5      5510.264 ±      33.795    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space                         thrpt    5         0.799 ±       5.561  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                    thrpt    5         4.349 ±      30.305    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count                                           thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time                                            thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce                                                         thrpt    5    294573.838 ±    8756.188   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate                                          thrpt    5       788.972 ±      23.505  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm                                     thrpt    5      4216.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.008 ±       0.065  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.044 ±       0.347    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen                                    thrpt    5       812.675 ±     711.562  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm                               thrpt    5      4345.853 ±    3872.486    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         4.313 ±      30.077    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count                                               thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time                                                thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson                                                       thrpt    5    592231.739 ±   20548.712   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate                                        thrpt    5       963.106 ±      33.619  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm                                   thrpt    5      2560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.061 ±       0.410  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.161 ±       1.092    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen                                  thrpt    5      1016.985 ±      23.821  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2703.292 ±      54.811    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space                           thrpt    5         0.932 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         2.484 ±      21.392    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count                                             thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time                                              thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter                                                      thrpt    5   2055245.082 ±   56640.539   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate                                       thrpt    5       532.793 ±      14.906  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm                                  thrpt    5       408.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                 thrpt    5       538.234 ±     709.388  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                            thrpt    5       412.355 ±     545.445    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                          thrpt    5         0.666 ±       5.736  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         0.513 ±       4.421    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time                                             thrpt    5        49.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay                                                          thrpt    5    242825.424 ±    6008.598   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate                                           thrpt    5       928.061 ±      22.846  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm                                      thrpt    5      6016.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.014 ±       0.080  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.090 ±       0.522    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen                                     thrpt    5       882.380 ±     723.139  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                thrpt    5      5717.291 ±    4630.946    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         5.177 ±      44.575    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time                                                 thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesCirce                                                          thrpt    5    542824.173 ±   14732.175   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate                                           thrpt    5       949.164 ±      26.013  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm                                      thrpt    5      2752.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.010 ±       0.087  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.030 ±       0.254    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen                                     thrpt    5       951.080 ±     599.337  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2757.079 ±    1726.078    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.326 ±      16.167    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count                                                thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time                                                 thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJackson                                                        thrpt    5   1571833.585 ±   17085.043   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate                                         thrpt    5       647.089 ±       7.055  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm                                    thrpt    5       648.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.018 ±       0.159  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.018 ±       0.158    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       674.027 ±      15.897  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5       674.974 ±      12.967    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.932 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.937 ±       8.066    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count                                              thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time                                               thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter                                                       thrpt    5   4080457.590 ±   75980.955   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate                                        thrpt    5       456.237 ±       8.423  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       470.892 ±     709.464  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       181.908 ±     277.228    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count                                             thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time                                              thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc                                               thrpt    5   3406556.139 ± 2790203.409   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate                                thrpt    5       207.814 ±     170.204  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm                           thrpt    5        96.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen                          thrpt    5       201.867 ±     709.590  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm                     thrpt    5        97.144 ±     352.477    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count                                     thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time                                      thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesPlay                                                           thrpt    5    179463.211 ±    6578.622   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate                                            thrpt    5       941.397 ±      34.712  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm                                       thrpt    5      8256.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.014 ±       0.079  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.126 ±       0.693    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       950.555 ±     582.456  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8340.355 ±    5195.740    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.100 ±      49.588    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time                                                  thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writeStringCirce                                                              thrpt    5    105701.371 ±    2847.498   ops/s
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate                                               thrpt    5       536.676 ±      14.490  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate.norm                                          thrpt    5      7992.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen                                         thrpt    5       538.158 ±     709.401  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      8025.413 ±   10701.480    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         9.901 ±      85.254    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.count                                                    thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.time                                                     thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.writeStringJackson                                                            thrpt    5    204991.944 ±    8161.295   ops/s
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate                                             thrpt    5       216.682 ±       8.551  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate.norm                                        thrpt    5      1664.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen                                       thrpt    5       201.798 ±     709.350  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1550.984 ±    5452.146    B/op
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.count                                                  thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.time                                                   thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.writeStringJsoniter                                                           thrpt    5    261087.241 ±   96493.873   ops/s
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate                                            thrpt    5       220.293 ±      81.355  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate.norm                                       thrpt    5      1328.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       201.829 ±     709.456  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1256.005 ±    4425.903    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.count                                                 thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.time                                                  thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc                                                   thrpt    5    317323.730 ±   11553.602   ops/s
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate.norm                               thrpt    5         0.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.count                                         thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeStringPlay                                                               thrpt    5    286051.734 ±    6054.143   ops/s
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate                                                thrpt    5       305.339 ±       6.568  MB/sec
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate.norm                                           thrpt    5      1680.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       336.392 ±       0.164  MB/sec
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1850.899 ±      39.228    B/op
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.count                                                     thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.time                                                      thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce                                                          thrpt    5      6484.236 ±     342.905   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate                                           thrpt    5       865.104 ±      46.013  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm                                      thrpt    5    209992.065 ±       0.009    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.014 ±       0.088  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         3.277 ±      21.072    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen                                     thrpt    5       880.764 ±     703.296  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5    214136.811 ±  177622.983    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5       196.762 ±    1694.178    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time                                                 thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson                                                        thrpt    5     34115.236 ±    1670.083   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate                                         thrpt    5       435.692 ±      21.427  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm                                    thrpt    5     20100.049 ±       0.318    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       469.479 ±     707.540  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5     21719.947 ±   33474.849    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.400 ±       1.405  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        18.391 ±      64.655    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count                                              thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time                                               thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter                                                       thrpt    5     42154.648 ±    1193.867   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate                                        thrpt    5       282.606 ±       8.009  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm                                   thrpt    5     10552.010 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       269.111 ±     579.282  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5     10070.713 ±   21679.559    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count                                             thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time                                              thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc                                               thrpt    5     38319.929 ±   20977.133   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate                                thrpt    5         9.934 ±       5.434  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm                           thrpt    5       408.011 ±       0.007    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count                                     thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay                                                           thrpt    5      4430.084 ±     128.067   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate                                            thrpt    5       900.135 ±      34.016  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm                                       thrpt    5    320477.795 ±       3.130    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.008 ±       0.043  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         2.899 ±      15.470    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       948.083 ±     590.573  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    337270.766 ±  203316.834    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±       6.687  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       332.720 ±    2384.669    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time                                                  thrpt    5        38.000                    ms
[success] Total time: 1895 s, completed Dec 2, 2017, 8:09:44 PM
