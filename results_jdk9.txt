[info] Loading settings from build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Nov 27, 2017, 9:49:05 AM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonWriter.scala:208:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] one warning found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.1-SNAPSHOT.jar ...
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:63:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:65:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1868115770 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 135249149 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:67:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Array[Int]];
[info]             do 
[info]               x.+=(d2(in, v2))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[scala.math.BigInt];
[info]             do 
[info]               x.+=(in.readBigInt(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1396692260 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Arrays(aa = _aa, a = _a)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             e2(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeObjectField(c, "aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeObjectField(c, "a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:69:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -311899171 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 395882128 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:71:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:73:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:75:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsString(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Maps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:77:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readObjectFieldAsString(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readObjectFieldAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:79:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsInt(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readObjectFieldAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:81:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 255;
[info]           var _b: Byte = 0.toByte;
[info]           var _s: Short = 0.toShort;
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = 0.toChar;
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -986815646 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1128364876 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 977778859 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2108804597 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:83:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:85:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.A): com.github.plokhotnyuk.jsoniter_scala.A = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 1;
[info]           var _a: Int = 0;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.A(a = _a)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.B): com.github.plokhotnyuk.jsoniter_scala.B = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 1;
[info]           var _b: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.B(b = _b)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.C): com.github.plokhotnyuk.jsoniter_scala.C = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1283270383 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.C(l = _l, r = _r)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = {
[info]         in.setMark();
[info]         (in.nextToken(): @switch) match {
[info]           case '{' => {
[info]             in.scanToObjectField("type");
[info]             val l = in.readValueAsCharBuf();
[info]             ((in.charBufToHashCode(l): @switch) match {
[info]               case 1042714897 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 1249097774 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case -251352298 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             })
[info]           }
[info]           case 'n' => {
[info]             in.rollbackToMark();
[info]             in.readNull(default)
[info]           }
[info]           case _ => in.objectStartError()
[info]         }
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.A, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("A")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.B, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("B")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.C, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("C")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]         case _ => out.encodeError("unexpected type: ".+(x.getClass))
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:539:62: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -854843732 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 7;
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _status: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1882203379 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -739937554 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1690673754 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows(elements = _elements)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 1;
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]           var _status: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -553105946 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 14144516 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case -11755678 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:681:54: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 15;
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 7;
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1125392404 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -758822041 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1567327321 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -2118257363 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -560369018 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url(urls = _urls)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d11(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d11(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredObjectFieldError(r4, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1994874891 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d10(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -422319283 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1231204836 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1565337738 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -903425777 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1481771385 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1617333980 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1034472816 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1096575944 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1766340764 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 656981833 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1692587979 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -761280539 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1523152584 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1042811670 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1322051899 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 430342393 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1547487212 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -738485249 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -869817957 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1479864213 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 892046337 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1815398146 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1854913126 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1700955824 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2002464660 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 196017265 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1725122937 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1346866717 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1251129302 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1343246339 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 929396071 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 356376530 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredObjectFieldError(r3, req0, req1)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 16383;
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Option[Boolean] = None;
[info]           var _lang: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       _possibly_sensitive = Option(in.readBoolean())
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredObjectFieldError(r5, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 32767;
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Option[Boolean] = None;
[info]           var _lang: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -350359215 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d12(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       _possibly_sensitive = Option(in.readBoolean())
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e14(x: Option[Boolean], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             val v = x.possibly_sensitive;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "possibly_sensitive");
[info]                 e14(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             val v = x.possibly_sensitive;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "possibly_sensitive");
[info]                 e14(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:534:23: local val format3 in value format is never used
[warn]     implicit lazy val format3 = Json.format[Value]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:535:23: local val format2 in value format is never used
[warn]     implicit lazy val format2 = Json.format[Elements]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:536:23: local val format1 in value format is never used
[warn]     implicit lazy val format1 = Json.format[Rows]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:85:51: unreachable code
[warn]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[warn]                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CustomPlayJsonFormats.scala:74:50: Reference to uninitialized value format14
[warn]   implicit val format13: OFormat[C] = Json.format[C]
[warn]                                                  ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT.jar ...
Processing 289 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 101 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*JsonCodecMakerBenchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_8570d9a5/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce
[info] # Run progress: 0.00% complete, ETA 00:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 840937.366 ops/s
[info] # Warmup Iteration   2: 1207760.156 ops/s
[info] # Warmup Iteration   3: 1316301.872 ops/s
[info] # Warmup Iteration   4: 1409047.269 ops/s
[info] # Warmup Iteration   5: 1455431.008 ops/s
[info] Iteration   1: 1442667.742 ops/s
[info]                  ·gc.alloc.rate:                                  2170.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2599.324 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 1452065.774 ops/s
[info]                  ·gc.alloc.rate:                                  2184.543 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2213.707 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 1433471.985 ops/s
[info]                  ·gc.alloc.rate:                                  2156.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2616.114 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 1299253.112 ops/s
[info]                  ·gc.alloc.rate:                                  1954.481 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2061.513 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1311498.467 ops/s
[info]                  ·gc.alloc.rate:            1973.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       2368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2450.904 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce":
[info]   1387791.416 ±(99.9%) 291283.868 ops/s [Average]
[info]   (min, avg, max) = (1299253.112, 1387791.416, 1452065.774), stdev = 75645.496
[info]   CI (99.9%): [1096507.548, 1679075.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate":
[info]   2087.687 ±(99.9%) 437.915 MB/sec [Average]
[info]   (min, avg, max) = (1954.481, 2087.687, 2184.543), stdev = 113.725
[info]   CI (99.9%): [1649.772, 2525.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm":
[info]   2368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2368.000, 2368.000, 2368.000), stdev = 0.001
[info]   CI (99.9%): [2368.000, 2368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen":
[info]   2110.024 ±(99.9%) 1096.126 MB/sec [Average]
[info]   (min, avg, max) = (1701.515, 2110.024, 2382.122), stdev = 284.661
[info]   CI (99.9%): [1013.897, 3206.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2388.312 ±(99.9%) 938.526 B/op [Average]
[info]   (min, avg, max) = (2061.513, 2388.312, 2616.114), stdev = 243.732
[info]   CI (99.9%): [1449.787, 3326.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 14.000), stdev = 2.966
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson
[info] # Run progress: 1.03% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63786.459 ops/s
[info] # Warmup Iteration   2: 172530.419 ops/s
[info] # Warmup Iteration   3: 173289.104 ops/s
[info] # Warmup Iteration   4: 174382.533 ops/s
[info] # Warmup Iteration   5: 172284.161 ops/s
[info] Iteration   1: 161885.995 ops/s
[info]                  ·gc.alloc.rate:            292.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       2848.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3270.566 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 175166.962 ops/s
[info]                  ·gc.alloc.rate:      316.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 2848.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 172803.229 ops/s
[info]                  ·gc.alloc.rate:            312.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       2848.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3063.865 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 174386.746 ops/s
[info]                  ·gc.alloc.rate:            315.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       2848.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3036.075 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 173498.959 ops/s
[info]                  ·gc.alloc.rate:            313.941 MB/sec
[info]                  ·gc.alloc.rate.norm:       2848.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3051.629 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson":
[info]   171548.378 ±(99.9%) 21081.313 ops/s [Average]
[info]   (min, avg, max) = (161885.995, 171548.378, 175166.962), stdev = 5474.750
[info]   CI (99.9%): [150467.065, 192629.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate":
[info]   310.406 ±(99.9%) 38.176 MB/sec [Average]
[info]   (min, avg, max) = (292.911, 310.406, 316.979), stdev = 9.914
[info]   CI (99.9%): [272.230, 348.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm":
[info]   2848.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2848.002, 2848.002, 2848.003), stdev = 0.001
[info]   CI (99.9%): [2848.002, 2848.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen":
[info]   269.098 ±(99.9%) 579.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.098, 336.387), stdev = 150.431
[info]   CI (99.9%): [≈ 0, 848.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2484.427 ±(99.9%) 5360.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2484.427, 3270.566), stdev = 1392.136
[info]   CI (99.9%): [≈ 0, 7845.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter
[info] # Run progress: 2.06% complete, ETA 00:26:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287899.397 ops/s
[info] # Warmup Iteration   2: 290058.862 ops/s
[info] # Warmup Iteration   3: 286184.674 ops/s
[info] # Warmup Iteration   4: 294466.437 ops/s
[info] # Warmup Iteration   5: 304280.880 ops/s
[info] Iteration   1: 301216.279 ops/s
[info]                  ·gc.alloc.rate:            195.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1757.621 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 295847.711 ops/s
[info]                  ·gc.alloc.rate:            192.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      334.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1776.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 305792.082 ops/s
[info]                  ·gc.alloc.rate:      198.932 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 298127.350 ops/s
[info]                  ·gc.alloc.rate:            193.969 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1775.847 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 292680.923 ops/s
[info]                  ·gc.alloc.rate:      190.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter":
[info]   298732.869 ±(99.9%) 19379.555 ops/s [Average]
[info]   (min, avg, max) = (292680.923, 298732.869, 305792.082), stdev = 5032.809
[info]   CI (99.9%): [279353.314, 318112.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate":
[info]   194.427 ±(99.9%) 12.311 MB/sec [Average]
[info]   (min, avg, max) = (190.416, 194.427, 198.932), stdev = 3.197
[info]   CI (99.9%): [182.116, 206.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.002), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.482 ±(99.9%) 708.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.482, 336.386), stdev = 183.928
[info]   CI (99.9%): [≈ 0, 909.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1062.089 ±(99.9%) 3733.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1062.089, 1776.979), stdev = 969.581
[info]   CI (99.9%): [≈ 0, 4795.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless
[info] # Run progress: 3.09% complete, ETA 00:25:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 748651.569 ops/s
[info] # Warmup Iteration   2: 769936.624 ops/s
[info] # Warmup Iteration   3: 763445.820 ops/s
[info] # Warmup Iteration   4: 756667.559 ops/s
[info] # Warmup Iteration   5: 736623.573 ops/s
[info] Iteration   1: 765308.510 ops/s
[info]                  ·gc.alloc.rate:            268.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 691.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 717608.014 ops/s
[info]                  ·gc.alloc.rate:            251.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 737.747 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 725013.726 ops/s
[info]                  ·gc.alloc.rate:            254.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730.246 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 767647.449 ops/s
[info]                  ·gc.alloc.rate:            269.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 689.704 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 770038.748 ops/s
[info]                  ·gc.alloc.rate:      270.058 MB/sec
[info]                  ·gc.alloc.rate.norm: 552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless":
[info]   749123.290 ±(99.9%) 98493.832 ops/s [Average]
[info]   (min, avg, max) = (717608.014, 749123.290, 770038.748), stdev = 25578.535
[info]   CI (99.9%): [650629.457, 847617.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate":
[info]   262.693 ±(99.9%) 34.440 MB/sec [Average]
[info]   (min, avg, max) = (251.674, 262.693, 270.058), stdev = 8.944
[info]   CI (99.9%): [228.253, 297.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm":
[info]   552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (552.001, 552.001, 552.001), stdev = 0.001
[info]   CI (99.9%): [552.000, 552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   269.060 ±(99.9%) 579.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.060, 336.373), stdev = 150.409
[info]   CI (99.9%): [≈ 0, 848.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   569.901 ±(99.9%) 1229.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 569.901, 737.747), stdev = 319.329
[info]   CI (99.9%): [≈ 0, 1799.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump
[info] # Run progress: 4.12% complete, ETA 00:25:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1990600.805 ops/s
[info] # Warmup Iteration   2: 2594945.820 ops/s
[info] # Warmup Iteration   3: 2637994.705 ops/s
[info] # Warmup Iteration   4: 2740518.191 ops/s
[info] # Warmup Iteration   5: 2634188.539 ops/s
[info] Iteration   1: 2744143.068 ops/s
[info]                  ·gc.alloc.rate:            306.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 192.928 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2727635.301 ops/s
[info]                  ·gc.alloc.rate:            304.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194.104 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2520220.010 ops/s
[info]                  ·gc.alloc.rate:      281.831 MB/sec
[info]                  ·gc.alloc.rate.norm: 176.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2480960.761 ops/s
[info]                  ·gc.alloc.rate:            277.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 213.402 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2665293.199 ops/s
[info]                  ·gc.alloc.rate:            298.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 198.640 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump":
[info]   2627650.468 ±(99.9%) 463853.342 ops/s [Average]
[info]   (min, avg, max) = (2480960.761, 2627650.468, 2744143.068), stdev = 120461.240
[info]   CI (99.9%): [2163797.126, 3091503.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   293.802 ±(99.9%) 51.789 MB/sec [Average]
[info]   (min, avg, max) = (277.402, 293.802, 306.774), stdev = 13.449
[info]   CI (99.9%): [242.013, 345.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   269.068 ±(99.9%) 579.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.068, 336.370), stdev = 150.414
[info]   CI (99.9%): [≈ 0, 848.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   159.815 ±(99.9%) 345.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.815, 213.402), stdev = 89.711
[info]   CI (99.9%): [≈ 0, 505.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay
[info] # Run progress: 5.15% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36073.070 ops/s
[info] # Warmup Iteration   2: 106494.513 ops/s
[info] # Warmup Iteration   3: 107388.190 ops/s
[info] # Warmup Iteration   4: 112251.144 ops/s
[info] # Warmup Iteration   5: 109635.220 ops/s
[info] Iteration   1: 109123.032 ops/s
[info]                  ·gc.alloc.rate:            699.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       10096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9703.966 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 108100.286 ops/s
[info]                  ·gc.alloc.rate:            693.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       10096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9795.516 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 108215.985 ops/s
[info]                  ·gc.alloc.rate:                   694.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              10096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9784.836 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 110074.515 ops/s
[info]                  ·gc.alloc.rate:                                  706.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10096.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.996 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9724.382 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.524 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 109937.336 ops/s
[info]                  ·gc.alloc.rate:                                  705.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10096.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9746.034 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay":
[info]   109090.231 ±(99.9%) 3566.668 ops/s [Average]
[info]   (min, avg, max) = (108100.286, 109090.231, 110074.515), stdev = 926.252
[info]   CI (99.9%): [105523.563, 112656.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate":
[info]   699.690 ±(99.9%) 23.179 MB/sec [Average]
[info]   (min, avg, max) = (693.221, 699.690, 706.117), stdev = 6.020
[info]   CI (99.9%): [676.510, 722.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm":
[info]   10096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10096.004, 10096.004, 10096.004), stdev = 0.001
[info]   CI (99.9%): [10096.003, 10096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.234 ±(99.9%) 1.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.234, 0.996), stdev = 0.433
[info]   CI (99.9%): [≈ 0, 1.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen":
[info]   675.762 ±(99.9%) 16.446 MB/sec [Average]
[info]   (min, avg, max) = (672.588, 675.762, 680.744), stdev = 4.271
[info]   CI (99.9%): [659.317, 692.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9750.947 ±(99.9%) 150.026 B/op [Average]
[info]   (min, avg, max) = (9703.966, 9750.947, 9795.516), stdev = 38.961
[info]   CI (99.9%): [9600.921, 9900.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   11.593 ±(99.9%) 80.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.593, 48.440), stdev = 21.007
[info]   CI (99.9%): [≈ 0, 92.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 12.000), stdev = 4.506
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce
[info] # Run progress: 6.19% complete, ETA 00:24:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 332952.864 ops/s
[info] # Warmup Iteration   2: 468998.680 ops/s
[info] # Warmup Iteration   3: 481570.777 ops/s
[info] # Warmup Iteration   4: 482769.751 ops/s
[info] # Warmup Iteration   5: 480485.213 ops/s
[info] Iteration   1: 492783.464 ops/s
[info]                  ·gc.alloc.rate:                                  1272.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4348.395 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 489774.220 ops/s
[info]                  ·gc.alloc.rate:            1264.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3281.590 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 487791.829 ops/s
[info]                  ·gc.alloc.rate:                                  1259.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4393.211 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 482065.594 ops/s
[info]                  ·gc.alloc.rate:            1244.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4445.423 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 476823.268 ops/s
[info]                  ·gc.alloc.rate:                                  1231.149 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3370.630 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce":
[info]   485847.675 ±(99.9%) 24584.388 ops/s [Average]
[info]   (min, avg, max) = (476823.268, 485847.675, 492783.464), stdev = 6384.487
[info]   CI (99.9%): [461263.287, 510432.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate":
[info]   1254.490 ±(99.9%) 63.550 MB/sec [Average]
[info]   (min, avg, max) = (1231.149, 1254.490, 1272.383), stdev = 16.504
[info]   CI (99.9%): [1190.940, 1318.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm":
[info]   4064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4064.001, 4064.001, 4064.001), stdev = 0.001
[info]   CI (99.9%): [4064.001, 4064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1225.371 ±(99.9%) 718.109 MB/sec [Average]
[info]   (min, avg, max) = (1021.063, 1225.371, 1361.793), stdev = 186.491
[info]   CI (99.9%): [507.262, 1943.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3967.850 ±(99.9%) 2262.927 B/op [Average]
[info]   (min, avg, max) = (3281.590, 3967.850, 4445.423), stdev = 587.675
[info]   CI (99.9%): [1704.923, 6230.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson
[info] # Run progress: 7.22% complete, ETA 00:24:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 652490.813 ops/s
[info] # Warmup Iteration   2: 1123546.973 ops/s
[info] # Warmup Iteration   3: 1126785.660 ops/s
[info] # Warmup Iteration   4: 1132119.241 ops/s
[info] # Warmup Iteration   5: 1136654.331 ops/s
[info] Iteration   1: 1150724.512 ops/s
[info]                  ·gc.alloc.rate:            817.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 920.178 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1118976.773 ops/s
[info]                  ·gc.alloc.rate:                   796.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        946.328 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 1150202.244 ops/s
[info]                  ·gc.alloc.rate:                                  818.322 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1396.434 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.912 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1152942.775 ops/s
[info]                  ·gc.alloc.rate:            820.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 929.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1153034.225 ops/s
[info]                  ·gc.alloc.rate:            820.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1393.886 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson":
[info]   1145176.106 ±(99.9%) 56609.807 ops/s [Average]
[info]   (min, avg, max) = (1118976.773, 1145176.106, 1153034.225), stdev = 14701.387
[info]   CI (99.9%): [1088566.299, 1201785.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate":
[info]   814.518 ±(99.9%) 39.696 MB/sec [Average]
[info]   (min, avg, max) = (796.236, 814.518, 820.450), stdev = 10.309
[info]   CI (99.9%): [774.823, 854.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen":
[info]   813.254 ±(99.9%) 729.294 MB/sec [Average]
[info]   (min, avg, max) = (671.451, 813.254, 1021.083), stdev = 189.395
[info]   CI (99.9%): [83.960, 1542.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1117.231 ±(99.9%) 977.634 B/op [Average]
[info]   (min, avg, max) = (920.178, 1117.231, 1396.434), stdev = 253.888
[info]   CI (99.9%): [139.597, 2094.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.119 ±(99.9%) 7.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.119, 4.685), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 12.000), stdev = 4.183
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter
[info] # Run progress: 8.25% complete, ETA 00:24:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1807051.440 ops/s
[info] # Warmup Iteration   2: 2185881.074 ops/s
[info] # Warmup Iteration   3: 2179701.501 ops/s
[info] # Warmup Iteration   4: 2475075.507 ops/s
[info] # Warmup Iteration   5: 2447199.332 ops/s
[info] Iteration   1: 2478210.456 ops/s
[info]                  ·gc.alloc.rate:      163.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2445461.978 ops/s
[info]                  ·gc.alloc.rate:            161.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 216.506 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2482089.495 ops/s
[info]                  ·gc.alloc.rate:      164.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2446830.676 ops/s
[info]                  ·gc.alloc.rate:            161.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 216.387 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2485042.570 ops/s
[info]                  ·gc.alloc.rate:      164.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter":
[info]   2467527.035 ±(99.9%) 75755.993 ops/s [Average]
[info]   (min, avg, max) = (2445461.978, 2467527.035, 2485042.570), stdev = 19673.591
[info]   CI (99.9%): [2391771.042, 2543283.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate":
[info]   163.079 ±(99.9%) 5.020 MB/sec [Average]
[info]   (min, avg, max) = (161.610, 163.079, 164.196), stdev = 1.304
[info]   CI (99.9%): [158.058, 168.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.584 ±(99.9%) 709.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.584, 336.481), stdev = 184.286
[info]   CI (99.9%): [≈ 0, 844.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   86.579 ±(99.9%) 456.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.579, 216.506), stdev = 118.553
[info]   CI (99.9%): [≈ 0, 543.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay
[info] # Run progress: 9.28% complete, ETA 00:24:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52586.953 ops/s
[info] # Warmup Iteration   2: 108482.682 ops/s
[info] # Warmup Iteration   3: 110790.281 ops/s
[info] # Warmup Iteration   4: 110114.159 ops/s
[info] # Warmup Iteration   5: 111603.566 ops/s
[info] Iteration   1: 109792.053 ops/s
[info]                  ·gc.alloc.rate:                   919.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14466.608 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 47.745 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 112929.774 ops/s
[info]                  ·gc.alloc.rate:                   945.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9478.915 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 112499.910 ops/s
[info]                  ·gc.alloc.rate:                                  942.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13184.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.504 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14286.310 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 112538.406 ops/s
[info]                  ·gc.alloc.rate:            942.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       13184.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14281.614 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 112061.145 ops/s
[info]                  ·gc.alloc.rate:                                  938.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13184.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14342.140 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay":
[info]   111964.258 ±(99.9%) 4823.556 ops/s [Average]
[info]   (min, avg, max) = (109792.053, 111964.258, 112929.774), stdev = 1252.662
[info]   CI (99.9%): [107140.702, 116787.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate":
[info]   937.928 ±(99.9%) 40.573 MB/sec [Average]
[info]   (min, avg, max) = (919.608, 937.928, 945.889), stdev = 10.537
[info]   CI (99.9%): [897.355, 978.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm":
[info]   13184.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.004, 13184.004, 13184.004), stdev = 0.001
[info]   CI (99.9%): [13184.003, 13184.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.107 ±(99.9%) 0.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.107, 0.504), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 0.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen":
[info]   950.609 ±(99.9%) 582.720 MB/sec [Average]
[info]   (min, avg, max) = (680.067, 950.609, 1021.376), stdev = 151.330
[info]   CI (99.9%): [367.889, 1533.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   13371.117 ±(99.9%) 8383.180 B/op [Average]
[info]   (min, avg, max) = (9478.915, 13371.117, 14466.608), stdev = 2177.085
[info]   CI (99.9%): [4987.937, 21754.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   11.406 ±(99.9%) 79.739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.406, 47.745), stdev = 20.708
[info]   CI (99.9%): [≈ 0, 91.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 17.000), stdev = 5.639
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce
[info] # Run progress: 10.31% complete, ETA 00:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 758148.494 ops/s
[info] # Warmup Iteration   2: 1069970.510 ops/s
[info] # Warmup Iteration   3: 1065171.893 ops/s
[info] # Warmup Iteration   4: 1088917.119 ops/s
[info] # Warmup Iteration   5: 1083369.710 ops/s
[info] Iteration   1: 1111873.540 ops/s
[info]                  ·gc.alloc.rate:            1734.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2409.065 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1111121.756 ops/s
[info]                  ·gc.alloc.rate:                                  1733.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2410.710 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1116170.626 ops/s
[info]                  ·gc.alloc.rate:                                  1741.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2399.939 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 1109806.910 ops/s
[info]                  ·gc.alloc.rate:                                  1731.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2413.664 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1075466.029 ops/s
[info]                  ·gc.alloc.rate:            1678.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2490.712 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce":
[info]   1104887.772 ±(99.9%) 63994.967 ops/s [Average]
[info]   (min, avg, max) = (1075466.029, 1104887.772, 1116170.626), stdev = 16619.290
[info]   CI (99.9%): [1040892.805, 1168882.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate":
[info]   1723.943 ±(99.9%) 99.665 MB/sec [Average]
[info]   (min, avg, max) = (1678.129, 1723.943, 1741.621), stdev = 25.883
[info]   CI (99.9%): [1624.278, 1823.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1701.742 ±(99.9%) 0.743 MB/sec [Average]
[info]   (min, avg, max) = (1701.410, 1701.742, 1701.867), stdev = 0.193
[info]   CI (99.9%): [1700.999, 1702.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2424.818 ±(99.9%) 143.208 B/op [Average]
[info]   (min, avg, max) = (2399.939, 2424.818, 2490.712), stdev = 37.191
[info]   CI (99.9%): [2281.610, 2568.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson
[info] # Run progress: 11.34% complete, ETA 00:23:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1059433.888 ops/s
[info] # Warmup Iteration   2: 1618516.019 ops/s
[info] # Warmup Iteration   3: 1612535.920 ops/s
[info] # Warmup Iteration   4: 1618573.552 ops/s
[info] # Warmup Iteration   5: 1620631.284 ops/s
[info] Iteration   1: 1638842.799 ops/s
[info]                  ·gc.alloc.rate:                                  1149.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.184 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1306.931 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.640 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1654337.046 ops/s
[info]                  ·gc.alloc.rate:                                  1160.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       971.520 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1646875.395 ops/s
[info]                  ·gc.alloc.rate:                                  1155.172 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       975.769 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1580997.511 ops/s
[info]                  ·gc.alloc.rate:            1108.831 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1355.362 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1655479.839 ops/s
[info]                  ·gc.alloc.rate:            1161.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 970.741 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson":
[info]   1635306.518 ±(99.9%) 119694.595 ops/s [Average]
[info]   (min, avg, max) = (1580997.511, 1635306.518, 1655479.839), stdev = 31084.306
[info]   CI (99.9%): [1515611.923, 1755001.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate":
[info]   1146.989 ±(99.9%) 84.131 MB/sec [Average]
[info]   (min, avg, max) = (1108.831, 1146.989, 1161.260), stdev = 21.849
[info]   CI (99.9%): [1062.858, 1231.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.176), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1157.020 ±(99.9%) 716.941 MB/sec [Average]
[info]   (min, avg, max) = (1020.997, 1157.020, 1361.292), stdev = 186.187
[info]   CI (99.9%): [440.079, 1873.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1116.065 ±(99.9%) 758.948 B/op [Average]
[info]   (min, avg, max) = (970.741, 1116.065, 1355.362), stdev = 197.096
[info]   CI (99.9%): [357.116, 1875.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.128 ±(99.9%) 1.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.128, 0.640), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter
[info] # Run progress: 12.37% complete, ETA 00:23:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6099484.310 ops/s
[info] # Warmup Iteration   2: 6435431.320 ops/s
[info] # Warmup Iteration   3: 6383418.594 ops/s
[info] # Warmup Iteration   4: 6417271.113 ops/s
[info] # Warmup Iteration   5: 6339620.552 ops/s
[info] Iteration   1: 6370134.967 ops/s
[info]                  ·gc.alloc.rate:            808.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166.215 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 6311292.622 ops/s
[info]                  ·gc.alloc.rate:                   801.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        168.762 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6569129.347 ops/s
[info]                  ·gc.alloc.rate:                                  834.578 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       244.653 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 6515928.701 ops/s
[info]                  ·gc.alloc.rate:            827.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 164.437 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 6558979.003 ops/s
[info]                  ·gc.alloc.rate:            833.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245.037 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter":
[info]   6465092.928 ±(99.9%) 451092.688 ops/s [Average]
[info]   (min, avg, max) = (6311292.622, 6465092.928, 6569129.347), stdev = 117147.339
[info]   CI (99.9%): [6014000.239, 6916185.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate":
[info]   821.338 ±(99.9%) 57.486 MB/sec [Average]
[info]   (min, avg, max) = (801.957, 821.338, 834.578), stdev = 14.929
[info]   CI (99.9%): [763.852, 878.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   814.316 ±(99.9%) 726.550 MB/sec [Average]
[info]   (min, avg, max) = (672.300, 814.316, 1021.057), stdev = 188.683
[info]   CI (99.9%): [87.766, 1540.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   197.821 ±(99.9%) 165.403 B/op [Average]
[info]   (min, avg, max) = (164.437, 197.821, 245.037), stdev = 42.955
[info]   CI (99.9%): [32.418, 363.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.199 ±(99.9%) 1.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.997), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 1.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 3.421
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay
[info] # Run progress: 13.40% complete, ETA 00:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180340.067 ops/s
[info] # Warmup Iteration   2: 314091.531 ops/s
[info] # Warmup Iteration   3: 319173.874 ops/s
[info] # Warmup Iteration   4: 323684.493 ops/s
[info] # Warmup Iteration   5: 317987.817 ops/s
[info] Iteration   1: 322723.094 ops/s
[info]                  ·gc.alloc.rate:            829.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3281.104 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 323009.321 ops/s
[info]                  ·gc.alloc.rate:                   830.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4933.452 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.474 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 323557.331 ops/s
[info]                  ·gc.alloc.rate:                                  832.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.396 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3311.603 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 328255.624 ops/s
[info]                  ·gc.alloc.rate:            844.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4896.351 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 328514.182 ops/s
[info]                  ·gc.alloc.rate:            844.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3261.631 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay":
[info]   325211.910 ±(99.9%) 11218.604 ops/s [Average]
[info]   (min, avg, max) = (322723.094, 325211.910, 328514.182), stdev = 2913.436
[info]   CI (99.9%): [313993.307, 336430.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate":
[info]   836.357 ±(99.9%) 28.799 MB/sec [Average]
[info]   (min, avg, max) = (829.870, 836.357, 844.861), stdev = 7.479
[info]   CI (99.9%): [807.558, 865.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.079 ±(99.9%) 0.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.396), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   813.524 ±(99.9%) 714.286 MB/sec [Average]
[info]   (min, avg, max) = (672.651, 813.524, 1021.016), stdev = 185.498
[info]   CI (99.9%): [99.238, 1527.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   3936.828 ±(99.9%) 3439.120 B/op [Average]
[info]   (min, avg, max) = (3261.631, 3936.828, 4933.452), stdev = 893.128
[info]   CI (99.9%): [497.708, 7375.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.895 ±(99.9%) 33.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.895, 19.474), stdev = 8.709
[info]   CI (99.9%): [≈ 0, 37.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 14.000), stdev = 5.177
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce
[info] # Run progress: 14.43% complete, ETA 00:22:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360069.678 ops/s
[info] # Warmup Iteration   2: 556684.912 ops/s
[info] # Warmup Iteration   3: 552393.636 ops/s
[info] # Warmup Iteration   4: 559178.877 ops/s
[info] # Warmup Iteration   5: 557663.798 ops/s
[info] Iteration   1: 571904.321 ops/s
[info]                  ·gc.alloc.rate:                                  1851.155 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5620.573 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 570647.027 ops/s
[info]                  ·gc.alloc.rate:            1847.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4694.044 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 557710.109 ops/s
[info]                  ·gc.alloc.rate:                                  1805.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5763.245 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 538626.806 ops/s
[info]                  ·gc.alloc.rate:            1743.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4973.088 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 542549.031 ops/s
[info]                  ·gc.alloc.rate:            1756.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4937.035 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce":
[info]   556287.459 ±(99.9%) 59428.254 ops/s [Average]
[info]   (min, avg, max) = (538626.806, 556287.459, 571904.321), stdev = 15433.329
[info]   CI (99.9%): [496859.204, 615715.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate":
[info]   1800.898 ±(99.9%) 192.174 MB/sec [Average]
[info]   (min, avg, max) = (1743.788, 1800.898, 1851.155), stdev = 49.907
[info]   CI (99.9%): [1608.724, 1993.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm":
[info]   5096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.001, 5096.001, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.001, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1837.769 ±(99.9%) 717.023 MB/sec [Average]
[info]   (min, avg, max) = (1701.715, 1837.769, 2041.791), stdev = 186.209
[info]   CI (99.9%): [1120.747, 2554.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5197.597 ±(99.9%) 1796.573 B/op [Average]
[info]   (min, avg, max) = (4694.044, 5197.597, 5763.245), stdev = 466.564
[info]   CI (99.9%): [3401.024, 6994.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson
[info] # Run progress: 15.46% complete, ETA 00:22:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 549016.769 ops/s
[info] # Warmup Iteration   2: 855245.491 ops/s
[info] # Warmup Iteration   3: 882955.718 ops/s
[info] # Warmup Iteration   4: 952012.020 ops/s
[info] # Warmup Iteration   5: 960097.708 ops/s
[info] Iteration   1: 991636.045 ops/s
[info]                  ·gc.alloc.rate:            932.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1601.740 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 991472.061 ops/s
[info]                  ·gc.alloc.rate:                                  932.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1613.667 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.345 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 997972.098 ops/s
[info]                  ·gc.alloc.rate:                                  938.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1610.408 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1008963.478 ops/s
[info]                  ·gc.alloc.rate:            948.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1061.874 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1009135.909 ops/s
[info]                  ·gc.alloc.rate:            948.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1592.627 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson":
[info]   999835.918 ±(99.9%) 33924.371 ops/s [Average]
[info]   (min, avg, max) = (991472.061, 999835.918, 1009135.909), stdev = 8810.052
[info]   CI (99.9%): [965911.547, 1033760.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate":
[info]   940.052 ±(99.9%) 32.214 MB/sec [Average]
[info]   (min, avg, max) = (932.033, 940.052, 948.845), stdev = 8.366
[info]   CI (99.9%): [907.838, 972.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.068), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen":
[info]   949.595 ±(99.9%) 579.126 MB/sec [Average]
[info]   (min, avg, max) = (680.701, 949.595, 1021.051), stdev = 150.397
[info]   CI (99.9%): [370.469, 1528.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1496.063 ±(99.9%) 935.154 B/op [Average]
[info]   (min, avg, max) = (1061.874, 1496.063, 1613.667), stdev = 242.857
[info]   CI (99.9%): [560.909, 2431.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.269 ±(99.9%) 10.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.269, 6.345), stdev = 2.837
[info]   CI (99.9%): [≈ 0, 12.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 18.000), stdev = 6.340
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter
[info] # Run progress: 16.49% complete, ETA 00:22:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2220449.602 ops/s
[info] # Warmup Iteration   2: 2536182.631 ops/s
[info] # Warmup Iteration   3: 2542293.690 ops/s
[info] # Warmup Iteration   4: 2549380.566 ops/s
[info] # Warmup Iteration   5: 2555300.294 ops/s
[info] Iteration   1: 2554356.873 ops/s
[info]                  ·gc.alloc.rate:                                  1064.544 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.132 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       629.200 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2553651.897 ops/s
[info]                  ·gc.alloc.rate:                                  1064.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       629.328 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 2563627.628 ops/s
[info]                  ·gc.alloc.rate:                                  1068.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       626.910 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2576592.515 ops/s
[info]                  ·gc.alloc.rate:            1073.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 831.717 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2580204.722 ops/s
[info]                  ·gc.alloc.rate:                                  1075.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       622.873 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter":
[info]   2565686.727 ±(99.9%) 47440.768 ops/s [Average]
[info]   (min, avg, max) = (2553651.897, 2565686.727, 2580204.722), stdev = 12320.217
[info]   CI (99.9%): [2518245.959, 2613127.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate":
[info]   1069.327 ±(99.9%) 20.052 MB/sec [Average]
[info]   (min, avg, max) = (1064.250, 1069.327, 1075.601), stdev = 5.207
[info]   CI (99.9%): [1049.275, 1089.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.132), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1089.159 ±(99.9%) 585.991 MB/sec [Average]
[info]   (min, avg, max) = (1020.979, 1089.159, 1361.387), stdev = 152.180
[info]   CI (99.9%): [503.168, 1675.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   668.006 ±(99.9%) 352.543 B/op [Average]
[info]   (min, avg, max) = (622.873, 668.006, 831.717), stdev = 91.554
[info]   CI (99.9%): [315.463, 1020.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay
[info] # Run progress: 17.53% complete, ETA 00:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73223.036 ops/s
[info] # Warmup Iteration   2: 160713.699 ops/s
[info] # Warmup Iteration   3: 166084.420 ops/s
[info] # Warmup Iteration   4: 164360.813 ops/s
[info] # Warmup Iteration   5: 164231.606 ops/s
[info] Iteration   1: 164843.596 ops/s
[info]                  ·gc.alloc.rate:                   1014.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              9688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9666.815 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 167158.398 ops/s
[info]                  ·gc.alloc.rate:                                  1028.858 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9614.785 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 165531.209 ops/s
[info]                  ·gc.alloc.rate:                                  1018.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9708.861 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 167219.861 ops/s
[info]                  ·gc.alloc.rate:                                  1029.239 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9610.818 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 167795.397 ops/s
[info]                  ·gc.alloc.rate:                                  1032.594 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9578.062 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay":
[info]   166509.692 ±(99.9%) 4836.929 ops/s [Average]
[info]   (min, avg, max) = (164843.596, 166509.692, 167795.397), stdev = 1256.135
[info]   CI (99.9%): [161672.764, 171346.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate":
[info]   1024.805 ±(99.9%) 29.761 MB/sec [Average]
[info]   (min, avg, max) = (1014.459, 1024.805, 1032.594), stdev = 7.729
[info]   CI (99.9%): [995.045, 1054.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm":
[info]   9688.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9688.002, 9688.002, 9688.002), stdev = 0.001
[info]   CI (99.9%): [9688.002, 9688.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.168 ±(99.9%) 1.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.168, 0.780), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1019.262 ±(99.9%) 15.118 MB/sec [Average]
[info]   (min, avg, max) = (1012.240, 1019.262, 1021.082), stdev = 3.926
[info]   CI (99.9%): [1004.144, 1034.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9635.868 ±(99.9%) 199.150 B/op [Average]
[info]   (min, avg, max) = (9578.062, 9635.868, 9708.861), stdev = 51.719
[info]   CI (99.9%): [9436.718, 9835.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.632 ±(99.9%) 65.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.632, 38.158), stdev = 17.065
[info]   CI (99.9%): [≈ 0, 73.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 14.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson
[info] # Run progress: 18.56% complete, ETA 00:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 871680.513 ops/s
[info] # Warmup Iteration   2: 1362593.965 ops/s
[info] # Warmup Iteration   3: 1374675.594 ops/s
[info] # Warmup Iteration   4: 1364733.204 ops/s
[info] # Warmup Iteration   5: 1364142.589 ops/s
[info] Iteration   1: 1376118.083 ops/s
[info]                  ·gc.alloc.rate:            874.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 769.467 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1363544.549 ops/s
[info]                  ·gc.alloc.rate:                                  866.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1173.217 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.613 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 1355131.168 ops/s
[info]                  ·gc.alloc.rate:                                  861.021 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       790.606 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1380571.010 ops/s
[info]                  ·gc.alloc.rate:            877.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1164.177 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1386487.337 ops/s
[info]                  ·gc.alloc.rate:            880.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 772.808 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson":
[info]   1372370.430 ±(99.9%) 49299.891 ops/s [Average]
[info]   (min, avg, max) = (1355131.168, 1372370.430, 1386487.337), stdev = 12803.025
[info]   CI (99.9%): [1323070.539, 1421670.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate":
[info]   871.907 ±(99.9%) 31.396 MB/sec [Average]
[info]   (min, avg, max) = (861.021, 871.907, 880.878), stdev = 8.154
[info]   CI (99.9%): [840.510, 903.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.053), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   814.334 ±(99.9%) 718.837 MB/sec [Average]
[info]   (min, avg, max) = (672.614, 814.334, 1021.353), stdev = 186.680
[info]   CI (99.9%): [95.497, 1533.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   934.055 ±(99.9%) 825.471 B/op [Average]
[info]   (min, avg, max) = (769.467, 934.055, 1173.217), stdev = 214.372
[info]   CI (99.9%): [108.584, 1759.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.923 ±(99.9%) 7.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.923, 4.613), stdev = 2.063
[info]   CI (99.9%): [≈ 0, 8.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter
[info] # Run progress: 19.59% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3068428.374 ops/s
[info] # Warmup Iteration   2: 3673308.384 ops/s
[info] # Warmup Iteration   3: 3660471.733 ops/s
[info] # Warmup Iteration   4: 3683784.085 ops/s
[info] # Warmup Iteration   5: 3653130.661 ops/s
[info] Iteration   1: 3689473.507 ops/s
[info]                  ·gc.alloc.rate:            487.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 143.506 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 3673274.156 ops/s
[info]                  ·gc.alloc.rate:            485.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 3634875.269 ops/s
[info]                  ·gc.alloc.rate:            480.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 291.311 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 3637377.571 ops/s
[info]                  ·gc.alloc.rate:            480.664 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.562 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3656387.886 ops/s
[info]                  ·gc.alloc.rate:            483.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 289.606 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter":
[info]   3658277.678 ±(99.9%) 90020.541 ops/s [Average]
[info]   (min, avg, max) = (3634875.269, 3658277.678, 3689473.507), stdev = 23378.049
[info]   CI (99.9%): [3568257.137, 3748298.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate":
[info]   483.444 ±(99.9%) 11.838 MB/sec [Average]
[info]   (min, avg, max) = (480.354, 483.444, 487.531), stdev = 3.074
[info]   CI (99.9%): [471.605, 495.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.947 ±(99.9%) 709.607 MB/sec [Average]
[info]   (min, avg, max) = (336.361, 470.947, 672.886), stdev = 184.283
[info]   CI (99.9%): [≈ 0, 1180.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   202.824 ±(99.9%) 308.070 B/op [Average]
[info]   (min, avg, max) = (143.506, 202.824, 291.311), stdev = 80.005
[info]   CI (99.9%): [≈ 0, 510.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay
[info] # Run progress: 20.62% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95571.529 ops/s
[info] # Warmup Iteration   2: 206020.708 ops/s
[info] # Warmup Iteration   3: 206367.392 ops/s
[info] # Warmup Iteration   4: 207856.851 ops/s
[info] # Warmup Iteration   5: 205459.660 ops/s
[info] Iteration   1: 207438.576 ops/s
[info]                  ·gc.alloc.rate:                   956.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7656.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 210986.674 ops/s
[info]                  ·gc.alloc.rate:                                  972.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7612.636 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.969 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 211539.531 ops/s
[info]                  ·gc.alloc.rate:            975.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7597.551 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 208939.576 ops/s
[info]                  ·gc.alloc.rate:                                  963.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7691.708 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 210055.680 ops/s
[info]                  ·gc.alloc.rate:            968.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5101.005 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay":
[info]   209792.008 ±(99.9%) 6331.901 ops/s [Average]
[info]   (min, avg, max) = (207438.576, 209792.008, 211539.531), stdev = 1644.375
[info]   CI (99.9%): [203460.106, 216123.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate":
[info]   966.975 ±(99.9%) 29.230 MB/sec [Average]
[info]   (min, avg, max) = (956.073, 966.975, 975.125), stdev = 7.591
[info]   CI (99.9%): [937.745, 996.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm":
[info]   7256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7256.002, 7256.002, 7256.002), stdev = 0.001
[info]   CI (99.9%): [7256.002, 7256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.331), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   950.336 ±(99.9%) 580.859 MB/sec [Average]
[info]   (min, avg, max) = (680.648, 950.336, 1021.025), stdev = 150.847
[info]   CI (99.9%): [369.477, 1531.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   7131.968 ±(99.9%) 4374.136 B/op [Average]
[info]   (min, avg, max) = (5101.005, 7131.968, 7691.708), stdev = 1135.949
[info]   CI (99.9%): [2757.832, 11506.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.048 ±(99.9%) 42.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.048, 25.270), stdev = 10.959
[info]   CI (99.9%): [≈ 0, 48.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 18.000), stdev = 6.465
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce
[info] # Run progress: 21.65% complete, ETA 00:20:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331643.654 ops/s
[info] # Warmup Iteration   2: 466994.044 ops/s
[info] # Warmup Iteration   3: 485532.164 ops/s
[info] # Warmup Iteration   4: 489003.036 ops/s
[info] # Warmup Iteration   5: 500955.458 ops/s
[info] Iteration   1: 498129.367 ops/s
[info]                  ·gc.alloc.rate:                                  1627.686 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4301.876 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 503326.092 ops/s
[info]                  ·gc.alloc.rate:            1644.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5321.780 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 506314.815 ops/s
[info]                  ·gc.alloc.rate:                                  1654.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5290.484 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 502532.998 ops/s
[info]                  ·gc.alloc.rate:            1642.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5330.388 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 501182.107 ops/s
[info]                  ·gc.alloc.rate:                                  1637.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5344.669 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce":
[info]   502297.076 ±(99.9%) 11531.009 ops/s [Average]
[info]   (min, avg, max) = (498129.367, 502297.076, 506314.815), stdev = 2994.566
[info]   CI (99.9%): [490766.067, 513828.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate":
[info]   1641.400 ±(99.9%) 37.868 MB/sec [Average]
[info]   (min, avg, max) = (1627.686, 1641.400, 1654.533), stdev = 9.834
[info]   CI (99.9%): [1603.532, 1679.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.001, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.001, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen":
[info]   1633.577 ±(99.9%) 586.275 MB/sec [Average]
[info]   (min, avg, max) = (1361.217, 1633.577, 1701.770), stdev = 152.254
[info]   CI (99.9%): [1047.302, 2219.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5117.839 ±(99.9%) 1758.086 B/op [Average]
[info]   (min, avg, max) = (4301.876, 5117.839, 5344.669), stdev = 456.569
[info]   CI (99.9%): [3359.753, 6875.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 9.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson
[info] # Run progress: 22.68% complete, ETA 00:20:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249645.438 ops/s
[info] # Warmup Iteration   2: 455477.043 ops/s
[info] # Warmup Iteration   3: 464942.607 ops/s
[info] # Warmup Iteration   4: 465046.645 ops/s
[info] # Warmup Iteration   5: 467372.339 ops/s
[info] Iteration   1: 464801.090 ops/s
[info]                  ·gc.alloc.rate:            576.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2278.209 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 464927.581 ops/s
[info]                  ·gc.alloc.rate:            576.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2277.567 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 467868.889 ops/s
[info]                  ·gc.alloc.rate:            580.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1131.561 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 463271.140 ops/s
[info]                  ·gc.alloc.rate:            574.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2285.663 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 464247.274 ops/s
[info]                  ·gc.alloc.rate:                   575.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2292.219 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson":
[info]   465023.195 ±(99.9%) 6621.595 ops/s [Average]
[info]   (min, avg, max) = (463271.140, 465023.195, 467868.889), stdev = 1719.607
[info]   CI (99.9%): [458401.600, 471644.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate":
[info]   576.697 ±(99.9%) 8.198 MB/sec [Average]
[info]   (min, avg, max) = (574.567, 576.697, 580.240), stdev = 2.129
[info]   CI (99.9%): [568.499, 584.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen":
[info]   606.129 ±(99.9%) 580.724 MB/sec [Average]
[info]   (min, avg, max) = (336.361, 606.129, 676.108), stdev = 150.812
[info]   CI (99.9%): [25.406, 1186.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2053.044 ±(99.9%) 1983.695 B/op [Average]
[info]   (min, avg, max) = (1131.561, 2053.044, 2292.219), stdev = 515.159
[info]   CI (99.9%): [69.348, 4036.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.710 ±(99.9%) 23.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.710, 13.550), stdev = 6.060
[info]   CI (99.9%): [≈ 0, 26.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 12.000), stdev = 2.550
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter
[info] # Run progress: 23.71% complete, ETA 00:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4293744.226 ops/s
[info] # Warmup Iteration   2: 4495775.635 ops/s
[info] # Warmup Iteration   3: 4576698.694 ops/s
[info] # Warmup Iteration   4: 4576019.718 ops/s
[info] # Warmup Iteration   5: 4602212.216 ops/s
[info] Iteration   1: 4604009.172 ops/s
[info]                  ·gc.alloc.rate:      210.499 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 4583355.234 ops/s
[info]                  ·gc.alloc.rate:            209.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115.514 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4628578.086 ops/s
[info]                  ·gc.alloc.rate:      211.744 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4616820.164 ops/s
[info]                  ·gc.alloc.rate:            211.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114.679 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 4570295.245 ops/s
[info]                  ·gc.alloc.rate:            209.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115.842 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter":
[info]   4600611.580 ±(99.9%) 91796.656 ops/s [Average]
[info]   (min, avg, max) = (4570295.245, 4600611.580, 4628578.086), stdev = 23839.300
[info]   CI (99.9%): [4508814.924, 4692408.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate":
[info]   210.422 ±(99.9%) 4.213 MB/sec [Average]
[info]   (min, avg, max) = (209.064, 210.422, 211.744), stdev = 1.094
[info]   CI (99.9%): [206.209, 214.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.807 ±(99.9%) 709.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.807, 336.367), stdev = 184.223
[info]   CI (99.9%): [≈ 0, 911.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   69.207 ±(99.9%) 243.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.207, 115.842), stdev = 63.179
[info]   CI (99.9%): [≈ 0, 312.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 8.000), stdev = 3.633
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay
[info] # Run progress: 24.74% complete, ETA 00:19:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61119.428 ops/s
[info] # Warmup Iteration   2: 152918.556 ops/s
[info] # Warmup Iteration   3: 155757.311 ops/s
[info] # Warmup Iteration   4: 154355.024 ops/s
[info] # Warmup Iteration   5: 156254.712 ops/s
[info] Iteration   1: 157600.244 ops/s
[info]                  ·gc.alloc.rate:            868.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       8680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6718.954 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 156108.540 ops/s
[info]                  ·gc.alloc.rate:                   860.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10208.191 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 157016.921 ops/s
[info]                  ·gc.alloc.rate:                                  865.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.809 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6823.459 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 158694.509 ops/s
[info]                  ·gc.alloc.rate:            875.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       8680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10127.818 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 159898.588 ops/s
[info]                  ·gc.alloc.rate:            881.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       8680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10051.569 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay":
[info]   157863.760 ±(99.9%) 5678.245 ops/s [Average]
[info]   (min, avg, max) = (156108.540, 157863.760, 159898.588), stdev = 1474.622
[info]   CI (99.9%): [152185.516, 163542.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate":
[info]   870.557 ±(99.9%) 31.361 MB/sec [Average]
[info]   (min, avg, max) = (860.842, 870.557, 881.754), stdev = 8.144
[info]   CI (99.9%): [839.196, 901.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm":
[info]   8680.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.003, 8680.003, 8680.003), stdev = 0.001
[info]   CI (99.9%): [8680.002, 8680.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.162 ±(99.9%) 1.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.809), stdev = 0.362
[info]   CI (99.9%): [≈ 0, 1.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen":
[info]   881.624 ±(99.9%) 720.560 MB/sec [Average]
[info]   (min, avg, max) = (672.643, 881.624, 1021.239), stdev = 187.127
[info]   CI (99.9%): [161.064, 1602.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8785.998 ±(99.9%) 7086.915 B/op [Average]
[info]   (min, avg, max) = (6718.954, 8785.998, 10208.191), stdev = 1840.449
[info]   CI (99.9%): [1699.084, 15872.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   8.059 ±(99.9%) 69.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.059, 40.295), stdev = 18.021
[info]   CI (99.9%): [≈ 0, 77.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 15.000), stdev = 5.495
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce
[info] # Run progress: 25.77% complete, ETA 00:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2958.849 ops/s
[info] # Warmup Iteration   2: 4379.159 ops/s
[info] # Warmup Iteration   3: 4518.737 ops/s
[info] # Warmup Iteration   4: 4550.418 ops/s
[info] # Warmup Iteration   5: 4522.740 ops/s
[info] Iteration   1: 4624.923 ops/s
[info]                  ·gc.alloc.rate:                                  1113.348 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.743 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       347183.582 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                226.621 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4656.741 ops/s
[info]                  ·gc.alloc.rate:                                  1120.599 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.094 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       345098.112 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4668.372 ops/s
[info]                  ·gc.alloc.rate:                                  1123.594 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.094 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.396 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       344211.351 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4563.173 ops/s
[info]                  ·gc.alloc.rate:                                  1098.209 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.089 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.859 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       469607.656 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4635.926 ops/s
[info]                  ·gc.alloc.rate:            1116.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       378808.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 346660.989 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce":
[info]   4629.827 ±(99.9%) 157.760 ops/s [Average]
[info]   (min, avg, max) = (4563.173, 4629.827, 4668.372), stdev = 40.970
[info]   CI (99.9%): [4472.067, 4787.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1114.366 ±(99.9%) 37.976 MB/sec [Average]
[info]   (min, avg, max) = (1098.209, 1114.366, 1123.594), stdev = 9.862
[info]   CI (99.9%): [1076.391, 1152.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   378808.091 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (378808.088, 378808.091, 378808.094), stdev = 0.003
[info]   CI (99.9%): [378808.078, 378808.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.072), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   13.109 ±(99.9%) 35.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.109, 24.859), stdev = 9.217
[info]   CI (99.9%): [≈ 0, 48.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1089.014 ±(99.9%) 586.435 MB/sec [Average]
[info]   (min, avg, max) = (1020.401, 1089.014, 1361.447), stdev = 152.295
[info]   CI (99.9%): [502.579, 1675.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   370552.338 ±(99.9%) 213273.335 B/op [Average]
[info]   (min, avg, max) = (344211.351, 370552.338, 469607.656), stdev = 55386.408
[info]   CI (99.9%): [157279.004, 583825.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   45.324 ±(99.9%) 390.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.324, 226.621), stdev = 101.348
[info]   CI (99.9%): [≈ 0, 435.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson
[info] # Run progress: 26.80% complete, ETA 00:19:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5415.588 ops/s
[info] # Warmup Iteration   2: 9063.686 ops/s
[info] # Warmup Iteration   3: 9232.301 ops/s
[info] # Warmup Iteration   4: 9211.402 ops/s
[info] # Warmup Iteration   5: 9229.663 ops/s
[info] Iteration   1: 9209.356 ops/s
[info]                  ·gc.alloc.rate:            320.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       54800.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57482.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 9182.084 ops/s
[info]                  ·gc.alloc.rate:            319.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       54800.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57543.805 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 9219.583 ops/s
[info]                  ·gc.alloc.rate:                   321.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              54800.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57306.691 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 113.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9225.394 ops/s
[info]                  ·gc.alloc.rate:            321.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       54800.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57389.279 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 9209.309 ops/s
[info]                  ·gc.alloc.rate:            320.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       54800.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57488.968 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson":
[info]   9209.145 ±(99.9%) 64.011 ops/s [Average]
[info]   (min, avg, max) = (9182.084, 9209.145, 9225.394), stdev = 16.624
[info]   CI (99.9%): [9145.134, 9273.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   320.641 ±(99.9%) 2.214 MB/sec [Average]
[info]   (min, avg, max) = (319.702, 320.641, 321.198), stdev = 0.575
[info]   CI (99.9%): [318.427, 322.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   54800.045 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (54800.044, 54800.045, 54800.048), stdev = 0.002
[info]   CI (99.9%): [54800.039, 54800.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   336.100 ±(99.9%) 1.419 MB/sec [Average]
[info]   (min, avg, max) = (335.685, 336.100, 336.396), stdev = 0.368
[info]   CI (99.9%): [334.681, 337.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   57442.294 ±(99.9%) 361.819 B/op [Average]
[info]   (min, avg, max) = (57306.691, 57442.294, 57543.805), stdev = 93.963
[info]   CI (99.9%): [57080.475, 57804.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.741 ±(99.9%) 195.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.741, 113.704), stdev = 50.850
[info]   CI (99.9%): [≈ 0, 218.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter
[info] # Run progress: 27.84% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12723.850 ops/s
[info] # Warmup Iteration   2: 15376.809 ops/s
[info] # Warmup Iteration   3: 15322.824 ops/s
[info] # Warmup Iteration   4: 15353.588 ops/s
[info] # Warmup Iteration   5: 15496.659 ops/s
[info] Iteration   1: 15363.479 ops/s
[info]                  ·gc.alloc.rate:            262.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34461.205 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 15123.602 ops/s
[info]                  ·gc.alloc.rate:            258.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35005.677 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 15237.056 ops/s
[info]                  ·gc.alloc.rate:            260.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34746.121 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 15542.571 ops/s
[info]                  ·gc.alloc.rate:      265.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 26896.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15436.942 ops/s
[info]                  ·gc.alloc.rate:            263.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34298.263 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter":
[info]   15340.730 ±(99.9%) 633.916 ops/s [Average]
[info]   (min, avg, max) = (15123.602, 15340.730, 15542.571), stdev = 164.626
[info]   CI (99.9%): [14706.814, 15974.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   262.124 ±(99.9%) 10.869 MB/sec [Average]
[info]   (min, avg, max) = (258.444, 262.124, 265.633), stdev = 2.823
[info]   CI (99.9%): [251.256, 272.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   26896.029 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (26896.026, 26896.029, 26896.036), stdev = 0.004
[info]   CI (99.9%): [26896.013, 26896.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.062 ±(99.9%) 579.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.062, 336.369), stdev = 150.410
[info]   CI (99.9%): [≈ 0, 848.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   27702.253 ±(99.9%) 59640.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27702.253, 35005.677), stdev = 15488.396
[info]   CI (99.9%): [≈ 0, 87342.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay
[info] # Run progress: 28.87% complete, ETA 00:18:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 754.139 ops/s
[info] # Warmup Iteration   2: 1639.404 ops/s
[info] # Warmup Iteration   3: 1650.984 ops/s
[info] # Warmup Iteration   4: 1654.774 ops/s
[info] # Warmup Iteration   5: 1673.212 ops/s
[info] Iteration   1: 1674.776 ops/s
[info]                  ·gc.alloc.rate:                   1045.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.263 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        950975.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3753.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 1676.427 ops/s
[info]                  ·gc.alloc.rate:                                  1047.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.243 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 99.590 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1275767.467 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1710.415 ops/s
[info]                  ·gc.alloc.rate:            1067.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       982976.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 939489.777 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1712.848 ops/s
[info]                  ·gc.alloc.rate:                                  1069.839 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.257 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 50.768 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       937845.396 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1694.240 ops/s
[info]                  ·gc.alloc.rate:            1058.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       982976.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 948358.117 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay":
[info]   1693.741 ±(99.9%) 69.493 ops/s [Average]
[info]   (min, avg, max) = (1674.776, 1693.741, 1712.848), stdev = 18.047
[info]   CI (99.9%): [1624.248, 1763.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1057.825 ±(99.9%) 42.962 MB/sec [Average]
[info]   (min, avg, max) = (1045.847, 1057.825, 1069.839), stdev = 11.157
[info]   CI (99.9%): [1014.863, 1100.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   982976.256 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (982976.241, 982976.256, 982976.276), stdev = 0.015
[info]   CI (99.9%): [982976.200, 982976.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.106), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   30.072 ±(99.9%) 171.927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.072, 99.590), stdev = 44.649
[info]   CI (99.9%): [≈ 0, 201.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1086.688 ±(99.9%) 587.251 MB/sec [Average]
[info]   (min, avg, max) = (1011.800, 1086.688, 1359.413), stdev = 152.507
[info]   CI (99.9%): [499.437, 1673.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   1010487.321 ±(99.9%) 571443.570 B/op [Average]
[info]   (min, avg, max) = (937845.396, 1010487.321, 1275767.467), stdev = 148402.080
[info]   CI (99.9%): [439043.751, 1581930.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.878 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.994), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   750.770 ±(99.9%) 6464.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 750.770, 3753.852), stdev = 1678.774
[info]   CI (99.9%): [≈ 0, 7215.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 15.000), stdev = 4.930
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter
[info] # Run progress: 29.90% complete, ETA 00:18:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2719175.521 ops/s
[info] # Warmup Iteration   2: 2991657.777 ops/s
[info] # Warmup Iteration   3: 3022687.883 ops/s
[info] # Warmup Iteration   4: 3000146.984 ops/s
[info] # Warmup Iteration   5: 3004601.238 ops/s
[info] Iteration   1: 3060250.616 ops/s
[info]                  ·gc.alloc.rate:                   917.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        345.997 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3116283.688 ops/s
[info]                  ·gc.alloc.rate:                                  934.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       515.738 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3095794.778 ops/s
[info]                  ·gc.alloc.rate:                                  928.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       519.089 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 3085212.985 ops/s
[info]                  ·gc.alloc.rate:            925.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 520.919 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3101935.817 ops/s
[info]                  ·gc.alloc.rate:            930.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 345.424 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter":
[info]   3091895.577 ±(99.9%) 80699.491 ops/s [Average]
[info]   (min, avg, max) = (3060250.616, 3091895.577, 3116283.688), stdev = 20957.402
[info]   CI (99.9%): [3011196.085, 3172595.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   927.031 ±(99.9%) 24.489 MB/sec [Average]
[info]   (min, avg, max) = (917.377, 927.031, 934.310), stdev = 6.360
[info]   CI (99.9%): [902.542, 951.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.140), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   883.173 ±(99.9%) 726.194 MB/sec [Average]
[info]   (min, avg, max) = (672.478, 883.173, 1020.888), stdev = 188.590
[info]   CI (99.9%): [156.980, 1609.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   449.433 ±(99.9%) 364.671 B/op [Average]
[info]   (min, avg, max) = (345.424, 449.433, 520.919), stdev = 94.704
[info]   CI (99.9%): [84.762, 814.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.411 ±(99.9%) 3.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.411, 2.055), stdev = 0.919
[info]   CI (99.9%): [≈ 0, 3.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.286
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay
[info] # Run progress: 30.93% complete, ETA 00:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96135.969 ops/s
[info] # Warmup Iteration   2: 180514.425 ops/s
[info] # Warmup Iteration   3: 183215.990 ops/s
[info] # Warmup Iteration   4: 183058.824 ops/s
[info] # Warmup Iteration   5: 183670.233 ops/s
[info] Iteration   1: 181291.654 ops/s
[info]                  ·gc.alloc.rate:                   1010.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              8776.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8789.405 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 34.695 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 185092.847 ops/s
[info]                  ·gc.alloc.rate:                                  1031.861 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8776.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.563 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8683.191 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 185748.497 ops/s
[info]                  ·gc.alloc.rate:                                  1035.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8776.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8652.390 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 185133.294 ops/s
[info]                  ·gc.alloc.rate:                                  1032.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8776.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8681.081 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 186570.074 ops/s
[info]                  ·gc.alloc.rate:            1040.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       8776.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8614.415 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay":
[info]   184767.273 ±(99.9%) 7828.461 ops/s [Average]
[info]   (min, avg, max) = (181291.654, 184767.273, 186570.074), stdev = 2033.026
[info]   CI (99.9%): [176938.812, 192595.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate":
[info]   1030.068 ±(99.9%) 43.764 MB/sec [Average]
[info]   (min, avg, max) = (1010.645, 1030.068, 1040.147), stdev = 11.365
[info]   CI (99.9%): [986.304, 1073.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   8776.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8776.002, 8776.002, 8776.002), stdev = 0.001
[info]   CI (99.9%): [8776.002, 8776.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.116 ±(99.9%) 0.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.563), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1019.214 ±(99.9%) 15.122 MB/sec [Average]
[info]   (min, avg, max) = (1012.189, 1019.214, 1021.010), stdev = 3.927
[info]   CI (99.9%): [1004.092, 1034.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8684.096 ±(99.9%) 250.740 B/op [Average]
[info]   (min, avg, max) = (8614.415, 8684.096, 8789.405), stdev = 65.116
[info]   CI (99.9%): [8433.356, 8934.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.939 ±(99.9%) 59.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.939, 34.695), stdev = 15.516
[info]   CI (99.9%): [≈ 0, 66.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 14.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce
[info] # Run progress: 31.96% complete, ETA 00:18:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291395.715 ops/s
[info] # Warmup Iteration   2: 452660.042 ops/s
[info] # Warmup Iteration   3: 465062.379 ops/s
[info] # Warmup Iteration   4: 463318.307 ops/s
[info] # Warmup Iteration   5: 475497.392 ops/s
[info] Iteration   1: 467351.879 ops/s
[info]                  ·gc.alloc.rate:            1688.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5731.517 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 476187.812 ops/s
[info]                  ·gc.alloc.rate:                                  1721.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5625.148 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 476116.645 ops/s
[info]                  ·gc.alloc.rate:                                  1720.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5626.010 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 478204.479 ops/s
[info]                  ·gc.alloc.rate:                                  1727.880 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5601.649 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 476715.368 ops/s
[info]                  ·gc.alloc.rate:                                  1722.986 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5619.037 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce":
[info]   474915.237 ±(99.9%) 16598.776 ops/s [Average]
[info]   (min, avg, max) = (467351.879, 474915.237, 478204.479), stdev = 4310.650
[info]   CI (99.9%): [458316.460, 491514.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate":
[info]   1716.239 ±(99.9%) 59.883 MB/sec [Average]
[info]   (min, avg, max) = (1688.921, 1716.239, 1727.880), stdev = 15.551
[info]   CI (99.9%): [1656.356, 1776.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1701.846 ±(99.9%) 0.784 MB/sec [Average]
[info]   (min, avg, max) = (1701.643, 1701.846, 1702.096), stdev = 0.204
[info]   CI (99.9%): [1701.062, 1702.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5640.672 ±(99.9%) 199.154 B/op [Average]
[info]   (min, avg, max) = (5601.649, 5640.672, 5731.517), stdev = 51.720
[info]   CI (99.9%): [5441.518, 5839.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson
[info] # Run progress: 32.99% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248042.245 ops/s
[info] # Warmup Iteration   2: 450454.557 ops/s
[info] # Warmup Iteration   3: 455535.124 ops/s
[info] # Warmup Iteration   4: 462133.766 ops/s
[info] # Warmup Iteration   5: 459366.547 ops/s
[info] Iteration   1: 463994.119 ops/s
[info]                  ·gc.alloc.rate:            539.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1138.796 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 458447.224 ops/s
[info]                  ·gc.alloc.rate:            533.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2305.055 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 454916.194 ops/s
[info]                  ·gc.alloc.rate:                   529.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2323.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 462987.083 ops/s
[info]                  ·gc.alloc.rate:            538.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1143.535 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 454478.664 ops/s
[info]                  ·gc.alloc.rate:                   528.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2325.263 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson":
[info]   458964.657 ±(99.9%) 17032.009 ops/s [Average]
[info]   (min, avg, max) = (454478.664, 458964.657, 463994.119), stdev = 4423.159
[info]   CI (99.9%): [441932.648, 475996.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate":
[info]   534.135 ±(99.9%) 19.716 MB/sec [Average]
[info]   (min, avg, max) = (528.987, 534.135, 539.876), stdev = 5.120
[info]   CI (99.9%): [514.419, 553.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   537.196 ±(99.9%) 707.304 MB/sec [Average]
[info]   (min, avg, max) = (335.594, 537.196, 671.416), stdev = 183.685
[info]   CI (99.9%): [≈ 0, 1244.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1847.140 ±(99.9%) 2481.791 B/op [Average]
[info]   (min, avg, max) = (1138.796, 1847.140, 2325.263), stdev = 644.513
[info]   CI (99.9%): [≈ 0, 4328.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.229 ±(99.9%) 23.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.229, 13.841), stdev = 6.016
[info]   CI (99.9%): [≈ 0, 26.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 13.000), stdev = 3.421
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter
[info] # Run progress: 34.02% complete, ETA 00:17:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2406019.612 ops/s
[info] # Warmup Iteration   2: 2765241.336 ops/s
[info] # Warmup Iteration   3: 2802938.944 ops/s
[info] # Warmup Iteration   4: 2804235.224 ops/s
[info] # Warmup Iteration   5: 2770721.070 ops/s
[info] Iteration   1: 2853685.622 ops/s
[info]                  ·gc.alloc.rate:                                  1130.995 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       563.170 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2865441.112 ops/s
[info]                  ·gc.alloc.rate:                                  1135.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       560.898 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2834103.818 ops/s
[info]                  ·gc.alloc.rate:                                  1123.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       756.054 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2849111.634 ops/s
[info]                  ·gc.alloc.rate:                                  1129.675 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       564.073 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2841951.966 ops/s
[info]                  ·gc.alloc.rate:            1126.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 565.519 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter":
[info]   2848858.830 ±(99.9%) 45713.690 ops/s [Average]
[info]   (min, avg, max) = (2834103.818, 2848858.830, 2865441.112), stdev = 11871.700
[info]   CI (99.9%): [2803145.140, 2894572.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate":
[info]   1129.317 ±(99.9%) 17.944 MB/sec [Average]
[info]   (min, avg, max) = (1123.466, 1129.317, 1135.829), stdev = 4.660
[info]   CI (99.9%): [1111.373, 1147.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1089.029 ±(99.9%) 585.910 MB/sec [Average]
[info]   (min, avg, max) = (1020.741, 1089.029, 1361.219), stdev = 152.159
[info]   CI (99.9%): [503.119, 1674.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   601.943 ±(99.9%) 331.799 B/op [Average]
[info]   (min, avg, max) = (560.898, 601.943, 756.054), stdev = 86.167
[info]   CI (99.9%): [270.144, 933.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay
[info] # Run progress: 35.05% complete, ETA 00:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47847.448 ops/s
[info] # Warmup Iteration   2: 124928.612 ops/s
[info] # Warmup Iteration   3: 123459.394 ops/s
[info] # Warmup Iteration   4: 125785.251 ops/s
[info] # Warmup Iteration   5: 124579.057 ops/s
[info] Iteration   1: 126208.548 ops/s
[info]                  ·gc.alloc.rate:            876.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8390.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 126048.326 ops/s
[info]                  ·gc.alloc.rate:                   875.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12642.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.905 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 126783.349 ops/s
[info]                  ·gc.alloc.rate:                                  880.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10936.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.858 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12675.885 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 128327.632 ops/s
[info]                  ·gc.alloc.rate:            891.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8349.394 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 127896.087 ops/s
[info]                  ·gc.alloc.rate:            888.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12566.386 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay":
[info]   127052.788 ±(99.9%) 3913.030 ops/s [Average]
[info]   (min, avg, max) = (126048.326, 127052.788, 128327.632), stdev = 1016.201
[info]   CI (99.9%): [123139.759, 130965.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate":
[info]   882.737 ±(99.9%) 27.226 MB/sec [Average]
[info]   (min, avg, max) = (875.850, 882.737, 891.641), stdev = 7.070
[info]   CI (99.9%): [855.511, 909.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm":
[info]   10936.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10936.003, 10936.003, 10936.003), stdev = 0.001
[info]   CI (99.9%): [10936.003, 10936.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.172 ±(99.9%) 1.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.172, 0.858), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   881.593 ±(99.9%) 720.424 MB/sec [Average]
[info]   (min, avg, max) = (672.658, 881.593, 1021.050), stdev = 187.092
[info]   CI (99.9%): [161.169, 1602.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10924.860 ±(99.9%) 8983.106 B/op [Average]
[info]   (min, avg, max) = (8349.394, 10924.860, 12675.885), stdev = 2332.884
[info]   CI (99.9%): [1941.754, 19907.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.981 ±(99.9%) 85.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.981, 49.905), stdev = 22.318
[info]   CI (99.9%): [≈ 0, 95.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 17.000), stdev = 5.975
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce
[info] # Run progress: 36.08% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205514.157 ops/s
[info] # Warmup Iteration   2: 388194.804 ops/s
[info] # Warmup Iteration   3: 398621.192 ops/s
[info] # Warmup Iteration   4: 398488.806 ops/s
[info] # Warmup Iteration   5: 400372.694 ops/s
[info] Iteration   1: 403945.680 ops/s
[info]                  ·gc.alloc.rate:                                  1408.198 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5305.001 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 407289.774 ops/s
[info]                  ·gc.alloc.rate:                                  1420.001 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5261.142 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 408162.355 ops/s
[info]                  ·gc.alloc.rate:                                  1423.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6562.767 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 405812.516 ops/s
[info]                  ·gc.alloc.rate:                                  1414.755 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5280.481 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 404944.522 ops/s
[info]                  ·gc.alloc.rate:                                  1411.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5488.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5292.046 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce":
[info]   406030.970 ±(99.9%) 6586.716 ops/s [Average]
[info]   (min, avg, max) = (403945.680, 406030.970, 408162.355), stdev = 1710.549
[info]   CI (99.9%): [399444.254, 412617.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate":
[info]   1415.594 ±(99.9%) 23.081 MB/sec [Average]
[info]   (min, avg, max) = (1408.198, 1415.594, 1423.056), stdev = 5.994
[info]   CI (99.9%): [1392.513, 1438.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm":
[info]   5488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5488.001, 5488.001, 5488.001), stdev = 0.001
[info]   CI (99.9%): [5488.001, 5488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.003, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.010, 0.025), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen":
[info]   1429.418 ±(99.9%) 586.207 MB/sec [Average]
[info]   (min, avg, max) = (1361.241, 1429.418, 1701.746), stdev = 152.236
[info]   CI (99.9%): [843.212, 2015.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5540.288 ±(99.9%) 2201.838 B/op [Average]
[info]   (min, avg, max) = (5261.142, 5540.288, 6562.767), stdev = 571.810
[info]   CI (99.9%): [3338.449, 7742.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 12.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson
[info] # Run progress: 37.11% complete, ETA 00:16:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343652.938 ops/s
[info] # Warmup Iteration   2: 713997.537 ops/s
[info] # Warmup Iteration   3: 724917.919 ops/s
[info] # Warmup Iteration   4: 716996.897 ops/s
[info] # Warmup Iteration   5: 716185.001 ops/s
[info] Iteration   1: 721385.715 ops/s
[info]                  ·gc.alloc.rate:                   850.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1464.900 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 722803.805 ops/s
[info]                  ·gc.alloc.rate:                   852.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2203.333 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 728340.369 ops/s
[info]                  ·gc.alloc.rate:                                  859.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1471.122 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 728414.596 ops/s
[info]                  ·gc.alloc.rate:            858.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2206.368 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 721094.204 ops/s
[info]                  ·gc.alloc.rate:            850.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1485.838 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson":
[info]   724407.738 ±(99.9%) 14175.029 ops/s [Average]
[info]   (min, avg, max) = (721094.204, 724407.738, 728414.596), stdev = 3681.210
[info]   CI (99.9%): [710232.709, 738582.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate":
[info]   854.266 ±(99.9%) 16.620 MB/sec [Average]
[info]   (min, avg, max) = (850.400, 854.266, 859.017), stdev = 4.316
[info]   CI (99.9%): [837.647, 870.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.000, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.118), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.051 ±(99.9%) 0.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.256), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen":
[info]   813.190 ±(99.9%) 714.556 MB/sec [Average]
[info]   (min, avg, max) = (671.481, 813.190, 1020.963), stdev = 185.568
[info]   CI (99.9%): [98.634, 1527.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1766.312 ±(99.9%) 1541.807 B/op [Average]
[info]   (min, avg, max) = (1464.900, 1766.312, 2206.368), stdev = 400.402
[info]   CI (99.9%): [224.505, 3308.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.321 ±(99.9%) 17.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.321, 10.154), stdev = 4.423
[info]   CI (99.9%): [≈ 0, 19.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter
[info] # Run progress: 38.14% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2679668.975 ops/s
[info] # Warmup Iteration   2: 3067136.652 ops/s
[info] # Warmup Iteration   3: 3090743.844 ops/s
[info] # Warmup Iteration   4: 3108012.653 ops/s
[info] # Warmup Iteration   5: 3084666.999 ops/s
[info] Iteration   1: 3102082.904 ops/s
[info]                  ·gc.alloc.rate:            772.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 341.347 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3105451.249 ops/s
[info]                  ·gc.alloc.rate:                   773.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        340.963 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 3125151.903 ops/s
[info]                  ·gc.alloc.rate:                                  778.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       514.290 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 3137911.616 ops/s
[info]                  ·gc.alloc.rate:                                  781.699 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       341.458 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3121151.822 ops/s
[info]                  ·gc.alloc.rate:            777.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 343.294 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter":
[info]   3118349.899 ±(99.9%) 56715.982 ops/s [Average]
[info]   (min, avg, max) = (3102082.904, 3118349.899, 3137911.616), stdev = 14728.961
[info]   CI (99.9%): [3061633.916, 3175065.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate":
[info]   776.663 ±(99.9%) 14.696 MB/sec [Average]
[info]   (min, avg, max) = (772.438, 776.663, 781.699), stdev = 3.817
[info]   CI (99.9%): [761.966, 791.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   745.662 ±(99.9%) 593.695 MB/sec [Average]
[info]   (min, avg, max) = (672.626, 745.662, 1021.370), stdev = 154.181
[info]   CI (99.9%): [151.967, 1339.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   376.270 ±(99.9%) 297.117 B/op [Average]
[info]   (min, avg, max) = (340.963, 376.270, 514.290), stdev = 77.160
[info]   CI (99.9%): [79.153, 673.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.405 ±(99.9%) 3.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.405, 2.026), stdev = 0.906
[info]   CI (99.9%): [≈ 0, 3.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 11.000), stdev = 4.336
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay
[info] # Run progress: 39.18% complete, ETA 00:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111431.118 ops/s
[info] # Warmup Iteration   2: 190185.421 ops/s
[info] # Warmup Iteration   3: 193352.177 ops/s
[info] # Warmup Iteration   4: 192525.284 ops/s
[info] # Warmup Iteration   5: 192588.918 ops/s
[info] Iteration   1: 195222.364 ops/s
[info]                  ·gc.alloc.rate:                                  1086.362 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8195.273 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                32.223 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 195918.195 ops/s
[info]                  ·gc.alloc.rate:                                  1090.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10936.377 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 196340.037 ops/s
[info]                  ·gc.alloc.rate:            1092.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       8760.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8185.034 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 196472.795 ops/s
[info]                  ·gc.alloc.rate:            1093.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       8760.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8180.202 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 195531.401 ops/s
[info]                  ·gc.alloc.rate:                                  1088.276 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8219.395 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay":
[info]   195896.958 ±(99.9%) 2034.900 ops/s [Average]
[info]   (min, avg, max) = (195222.364, 195896.958, 196472.795), stdev = 528.457
[info]   CI (99.9%): [193862.059, 197931.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate":
[info]   1090.263 ±(99.9%) 11.644 MB/sec [Average]
[info]   (min, avg, max) = (1086.362, 1090.263, 1093.573), stdev = 3.024
[info]   CI (99.9%): [1078.620, 1101.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm":
[info]   8760.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8760.002, 8760.002, 8760.002), stdev = 0.001
[info]   CI (99.9%): [8760.002, 8760.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.099 ±(99.9%) 0.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.099, 0.347), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1088.179 ±(99.9%) 587.721 MB/sec [Average]
[info]   (min, avg, max) = (1016.328, 1088.179, 1361.185), stdev = 152.629
[info]   CI (99.9%): [500.458, 1675.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8743.256 ±(99.9%) 4721.217 B/op [Average]
[info]   (min, avg, max) = (8180.202, 8743.256, 10936.377), stdev = 1226.085
[info]   CI (99.9%): [4022.039, 13464.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.445 ±(99.9%) 55.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.445, 32.223), stdev = 14.410
[info]   CI (99.9%): [≈ 0, 61.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce
[info] # Run progress: 40.21% complete, ETA 00:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283666.838 ops/s
[info] # Warmup Iteration   2: 454818.713 ops/s
[info] # Warmup Iteration   3: 467647.236 ops/s
[info] # Warmup Iteration   4: 470692.643 ops/s
[info] # Warmup Iteration   5: 475910.715 ops/s
[info] Iteration   1: 477590.876 ops/s
[info]                  ·gc.alloc.rate:            1825.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5608.673 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 476828.389 ops/s
[info]                  ·gc.alloc.rate:                                  1822.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6741.161 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 475595.433 ops/s
[info]                  ·gc.alloc.rate:                                  1817.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5631.900 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 477931.567 ops/s
[info]                  ·gc.alloc.rate:                                  1826.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5604.344 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 483686.635 ops/s
[info]                  ·gc.alloc.rate:            1848.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6645.639 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce":
[info]   478326.580 ±(99.9%) 12043.843 ops/s [Average]
[info]   (min, avg, max) = (475595.433, 478326.580, 483686.635), stdev = 3127.748
[info]   CI (99.9%): [466282.737, 490370.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate":
[info]   1828.140 ±(99.9%) 46.329 MB/sec [Average]
[info]   (min, avg, max) = (1817.423, 1828.140, 1848.692), stdev = 12.032
[info]   CI (99.9%): [1781.810, 1874.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1837.848 ±(99.9%) 718.221 MB/sec [Average]
[info]   (min, avg, max) = (1701.387, 1837.848, 2042.177), stdev = 186.520
[info]   CI (99.9%): [1119.627, 2556.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6046.343 ±(99.9%) 2278.567 B/op [Average]
[info]   (min, avg, max) = (5604.344, 6046.343, 6741.161), stdev = 591.737
[info]   CI (99.9%): [3767.776, 8324.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.200, 10.000), stdev = 1.483
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter
[info] # Run progress: 41.24% complete, ETA 00:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1986322.438 ops/s
[info] # Warmup Iteration   2: 2051403.527 ops/s
[info] # Warmup Iteration   3: 2038911.913 ops/s
[info] # Warmup Iteration   4: 2054966.278 ops/s
[info] # Warmup Iteration   5: 2099610.551 ops/s
[info] Iteration   1: 2100028.508 ops/s
[info]                  ·gc.alloc.rate:                                  1355.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1020.442 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2102151.297 ops/s
[info]                  ·gc.alloc.rate:            1356.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1019.429 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2090225.510 ops/s
[info]                  ·gc.alloc.rate:            1349.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1025.211 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2100280.037 ops/s
[info]                  ·gc.alloc.rate:                                  1355.444 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1020.257 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2099638.945 ops/s
[info]                  ·gc.alloc.rate:                                  1355.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1020.534 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter":
[info]   2098464.859 ±(99.9%) 18122.082 ops/s [Average]
[info]   (min, avg, max) = (2090225.510, 2098464.859, 2102151.297), stdev = 4706.247
[info]   CI (99.9%): [2080342.777, 2116586.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate":
[info]   1354.474 ±(99.9%) 11.686 MB/sec [Average]
[info]   (min, avg, max) = (1349.184, 1354.474, 1356.978), stdev = 3.035
[info]   CI (99.9%): [1342.788, 1366.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1361.367 ±(99.9%) 0.620 MB/sec [Average]
[info]   (min, avg, max) = (1361.123, 1361.367, 1361.558), stdev = 0.161
[info]   CI (99.9%): [1360.747, 1361.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1021.175 ±(99.9%) 8.849 B/op [Average]
[info]   (min, avg, max) = (1019.429, 1021.175, 1025.211), stdev = 2.298
[info]   CI (99.9%): [1012.325, 1030.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 10.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay
[info] # Run progress: 42.27% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46193.215 ops/s
[info] # Warmup Iteration   2: 130799.416 ops/s
[info] # Warmup Iteration   3: 132773.774 ops/s
[info] # Warmup Iteration   4: 133109.659 ops/s
[info] # Warmup Iteration   5: 132036.395 ops/s
[info] Iteration   1: 133144.823 ops/s
[info]                  ·gc.alloc.rate:                   948.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11928.431 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 136611.314 ops/s
[info]                  ·gc.alloc.rate:                   973.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             679.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7835.273 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 136409.175 ops/s
[info]                  ·gc.alloc.rate:                                  971.867 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11216.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.328 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11782.530 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 133985.561 ops/s
[info]                  ·gc.alloc.rate:            954.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       11216.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11994.859 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 135245.929 ops/s
[info]                  ·gc.alloc.rate:            963.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       11216.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11883.923 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay":
[info]   135079.361 ±(99.9%) 5802.176 ops/s [Average]
[info]   (min, avg, max) = (133144.823, 135079.361, 136611.314), stdev = 1506.807
[info]   CI (99.9%): [129277.184, 140881.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate":
[info]   962.524 ±(99.9%) 41.211 MB/sec [Average]
[info]   (min, avg, max) = (948.654, 962.524, 973.340), stdev = 10.702
[info]   CI (99.9%): [921.313, 1003.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   11216.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11216.003, 11216.003, 11216.003), stdev = 0.001
[info]   CI (99.9%): [11216.003, 11216.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.328), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   950.458 ±(99.9%) 582.635 MB/sec [Average]
[info]   (min, avg, max) = (679.956, 950.458, 1021.353), stdev = 151.308
[info]   CI (99.9%): [367.824, 1533.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   11085.003 ±(99.9%) 7001.602 B/op [Average]
[info]   (min, avg, max) = (7835.273, 11085.003, 11994.859), stdev = 1818.294
[info]   CI (99.9%): [4083.402, 18086.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.408 ±(99.9%) 65.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.408, 39.368), stdev = 17.074
[info]   CI (99.9%): [≈ 0, 75.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 18.000), stdev = 6.066
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson
[info] # Run progress: 43.30% complete, ETA 00:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160427.775 ops/s
[info] # Warmup Iteration   2: 623361.493 ops/s
[info] # Warmup Iteration   3: 629550.703 ops/s
[info] # Warmup Iteration   4: 633019.753 ops/s
[info] # Warmup Iteration   5: 627543.284 ops/s
[info] Iteration   1: 629686.020 ops/s
[info]                  ·gc.alloc.rate:            816.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1679.986 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 622437.431 ops/s
[info]                  ·gc.alloc.rate:                   806.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2548.460 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 633735.169 ops/s
[info]                  ·gc.alloc.rate:                                  821.410 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.235 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1688.997 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.654 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 630717.477 ops/s
[info]                  ·gc.alloc.rate:                                  817.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2548.186 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 633261.187 ops/s
[info]                  ·gc.alloc.rate:            820.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1691.997 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson":
[info]   629967.457 ±(99.9%) 17475.660 ops/s [Average]
[info]   (min, avg, max) = (622437.431, 629967.457, 633735.169), stdev = 4538.373
[info]   CI (99.9%): [612491.796, 647443.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate":
[info]   816.462 ±(99.9%) 22.645 MB/sec [Average]
[info]   (min, avg, max) = (806.702, 816.462, 821.410), stdev = 5.881
[info]   CI (99.9%): [793.817, 839.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2040.001, 2040.001, 2040.001), stdev = 0.001
[info]   CI (99.9%): [2040.001, 2040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.057 ±(99.9%) 0.393 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.235), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.142 ±(99.9%) 0.975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.585), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   812.328 ±(99.9%) 710.627 MB/sec [Average]
[info]   (min, avg, max) = (672.114, 812.328, 1021.012), stdev = 184.548
[info]   CI (99.9%): [101.701, 1522.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2031.525 ±(99.9%) 1816.697 B/op [Average]
[info]   (min, avg, max) = (1679.986, 2031.525, 2548.460), stdev = 471.790
[info]   CI (99.9%): [214.828, 3848.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.352 ±(99.9%) 16.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.352, 10.106), stdev = 4.393
[info]   CI (99.9%): [≈ 0, 19.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 19.000), stdev = 7.092
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter
[info] # Run progress: 44.33% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2000926.326 ops/s
[info] # Warmup Iteration   2: 2109563.725 ops/s
[info] # Warmup Iteration   3: 2115014.290 ops/s
[info] # Warmup Iteration   4: 2122472.963 ops/s
[info] # Warmup Iteration   5: 2122152.803 ops/s
[info] Iteration   1: 2147510.451 ops/s
[info]                  ·gc.alloc.rate:                                  1014.886 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       745.474 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.929 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 2159252.607 ops/s
[info]                  ·gc.alloc.rate:                                  1020.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       744.343 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2162570.499 ops/s
[info]                  ·gc.alloc.rate:            1022.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 743.130 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2165377.224 ops/s
[info]                  ·gc.alloc.rate:            1023.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 742.251 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2155723.774 ops/s
[info]                  ·gc.alloc.rate:            1018.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 745.575 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter":
[info]   2158086.911 ±(99.9%) 26681.933 ops/s [Average]
[info]   (min, avg, max) = (2147510.451, 2158086.911, 2165377.224), stdev = 6929.213
[info]   CI (99.9%): [2131404.978, 2184768.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate":
[info]   1020.047 ±(99.9%) 13.060 MB/sec [Average]
[info]   (min, avg, max) = (1014.886, 1020.047, 1023.712), stdev = 3.392
[info]   CI (99.9%): [1006.987, 1033.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.127), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.093), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   1020.255 ±(99.9%) 7.245 MB/sec [Average]
[info]   (min, avg, max) = (1016.897, 1020.255, 1021.305), stdev = 1.882
[info]   CI (99.9%): [1013.010, 1027.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   744.155 ±(99.9%) 5.603 B/op [Average]
[info]   (min, avg, max) = (742.251, 744.155, 745.575), stdev = 1.455
[info]   CI (99.9%): [738.552, 749.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.586 ±(99.9%) 5.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.586, 2.929), stdev = 1.310
[info]   CI (99.9%): [≈ 0, 5.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 11.000), stdev = 3.209
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay
[info] # Run progress: 45.36% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85175.601 ops/s
[info] # Warmup Iteration   2: 152613.093 ops/s
[info] # Warmup Iteration   3: 156357.146 ops/s
[info] # Warmup Iteration   4: 154066.224 ops/s
[info] # Warmup Iteration   5: 156249.278 ops/s
[info] Iteration   1: 154843.255 ops/s
[info]                  ·gc.alloc.rate:            861.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       8752.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10257.720 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 156811.355 ops/s
[info]                  ·gc.alloc.rate:                   871.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              8752.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6786.229 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 155927.334 ops/s
[info]                  ·gc.alloc.rate:                                  866.876 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.584 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10307.447 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 155766.367 ops/s
[info]                  ·gc.alloc.rate:            866.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       8752.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6878.821 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 155283.354 ops/s
[info]                  ·gc.alloc.rate:                                  863.388 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10349.722 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay":
[info]   155726.333 ±(99.9%) 2852.683 ops/s [Average]
[info]   (min, avg, max) = (154843.255, 155726.333, 156811.355), stdev = 740.833
[info]   CI (99.9%): [152873.650, 158579.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate":
[info]   865.868 ±(99.9%) 15.554 MB/sec [Average]
[info]   (min, avg, max) = (861.139, 865.868, 871.842), stdev = 4.039
[info]   CI (99.9%): [850.314, 881.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm":
[info]   8752.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8752.003, 8752.003, 8752.003), stdev = 0.001
[info]   CI (99.9%): [8752.002, 8752.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.118 ±(99.9%) 1.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.118, 0.584), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.596 ±(99.9%) 714.626 MB/sec [Average]
[info]   (min, avg, max) = (676.019, 881.596, 1021.003), stdev = 185.586
[info]   CI (99.9%): [166.971, 1596.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8915.988 ±(99.9%) 7325.823 B/op [Average]
[info]   (min, avg, max) = (6786.229, 8915.988, 10349.722), stdev = 1902.493
[info]   CI (99.9%): [1590.165, 16241.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   8.023 ±(99.9%) 69.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.023, 40.116), stdev = 17.940
[info]   CI (99.9%): [≈ 0, 77.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 17.000), stdev = 5.805
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce
[info] # Run progress: 46.39% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195672.918 ops/s
[info] # Warmup Iteration   2: 390675.555 ops/s
[info] # Warmup Iteration   3: 395722.312 ops/s
[info] # Warmup Iteration   4: 398247.233 ops/s
[info] # Warmup Iteration   5: 395723.885 ops/s
[info] Iteration   1: 404573.940 ops/s
[info]                  ·gc.alloc.rate:                                  1252.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5296.768 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 403683.554 ops/s
[info]                  ·gc.alloc.rate:            1249.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3981.293 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 405429.214 ops/s
[info]                  ·gc.alloc.rate:                                  1254.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5285.612 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 403613.349 ops/s
[info]                  ·gc.alloc.rate:                                  1249.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5309.351 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 405754.455 ops/s
[info]                  ·gc.alloc.rate:                                  1255.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3961.015 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce":
[info]   404610.902 ±(99.9%) 3769.799 ops/s [Average]
[info]   (min, avg, max) = (403613.349, 404610.902, 405754.455), stdev = 979.005
[info]   CI (99.9%): [400841.103, 408380.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate":
[info]   1252.359 ±(99.9%) 11.582 MB/sec [Average]
[info]   (min, avg, max) = (1249.316, 1252.359, 1255.843), stdev = 3.008
[info]   CI (99.9%): [1240.777, 1263.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.042 ±(99.9%) 0.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.195), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   1225.281 ±(99.9%) 717.966 MB/sec [Average]
[info]   (min, avg, max) = (1021.021, 1225.281, 1361.465), stdev = 186.453
[info]   CI (99.9%): [507.315, 1943.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4766.808 ±(99.9%) 2797.158 B/op [Average]
[info]   (min, avg, max) = (3961.015, 4766.808, 5309.351), stdev = 726.413
[info]   CI (99.9%): [1969.650, 7563.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson
[info] # Run progress: 47.42% complete, ETA 00:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542657.813 ops/s
[info] # Warmup Iteration   2: 904572.359 ops/s
[info] # Warmup Iteration   3: 884677.471 ops/s
[info] # Warmup Iteration   4: 874108.984 ops/s
[info] # Warmup Iteration   5: 876713.786 ops/s
[info] Iteration   1: 879651.860 ops/s
[info]                  ·gc.alloc.rate:            666.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1203.706 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 884073.617 ops/s
[info]                  ·gc.alloc.rate:            669.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1197.764 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 881777.167 ops/s
[info]                  ·gc.alloc.rate:                   667.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1200.809 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 892914.911 ops/s
[info]                  ·gc.alloc.rate:                   676.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1198.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 887683.886 ops/s
[info]                  ·gc.alloc.rate:                                  672.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1207.030 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson":
[info]   885220.288 ±(99.9%) 20142.757 ops/s [Average]
[info]   (min, avg, max) = (879651.860, 885220.288, 892914.911), stdev = 5231.010
[info]   CI (99.9%): [865077.531, 905363.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate":
[info]   670.465 ±(99.9%) 14.966 MB/sec [Average]
[info]   (min, avg, max) = (666.333, 670.465, 676.206), stdev = 3.887
[info]   CI (99.9%): [655.499, 685.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   675.877 ±(99.9%) 15.850 MB/sec [Average]
[info]   (min, avg, max) = (672.797, 675.877, 680.687), stdev = 4.116
[info]   CI (99.9%): [660.027, 691.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1201.624 ±(99.9%) 14.539 B/op [Average]
[info]   (min, avg, max) = (1197.764, 1201.624, 1207.030), stdev = 3.776
[info]   CI (99.9%): [1187.085, 1216.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.424 ±(99.9%) 9.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.424, 5.945), stdev = 2.578
[info]   CI (99.9%): [≈ 0, 11.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 12.000), stdev = 4.817
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter
[info] # Run progress: 48.45% complete, ETA 00:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3259865.866 ops/s
[info] # Warmup Iteration   2: 3543835.947 ops/s
[info] # Warmup Iteration   3: 3557190.983 ops/s
[info] # Warmup Iteration   4: 3513041.636 ops/s
[info] # Warmup Iteration   5: 3541613.865 ops/s
[info] Iteration   1: 3558861.608 ops/s
[info]                  ·gc.alloc.rate:      108.505 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3509305.731 ops/s
[info]                  ·gc.alloc.rate:                   107.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        150.274 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.598 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3573698.216 ops/s
[info]                  ·gc.alloc.rate:      109.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3545738.301 ops/s
[info]                  ·gc.alloc.rate:      108.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3505065.722 ops/s
[info]                  ·gc.alloc.rate:            106.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151.048 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter":
[info]   3538533.915 ±(99.9%) 116733.162 ops/s [Average]
[info]   (min, avg, max) = (3505065.722, 3538533.915, 3573698.216), stdev = 30315.231
[info]   CI (99.9%): [3421800.754, 3655267.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate":
[info]   107.899 ±(99.9%) 3.585 MB/sec [Average]
[info]   (min, avg, max) = (106.875, 107.899, 109.003), stdev = 0.931
[info]   CI (99.9%): [104.314, 111.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.267 ±(99.9%) 707.951 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.267, 336.316), stdev = 183.853
[info]   CI (99.9%): [≈ 0, 842.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   60.264 ±(99.9%) 317.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.264, 151.048), stdev = 82.521
[info]   CI (99.9%): [≈ 0, 378.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.120 ±(99.9%) 1.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.598), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay
[info] # Run progress: 49.48% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66353.162 ops/s
[info] # Warmup Iteration   2: 133187.917 ops/s
[info] # Warmup Iteration   3: 133290.348 ops/s
[info] # Warmup Iteration   4: 133284.935 ops/s
[info] # Warmup Iteration   5: 135114.290 ops/s
[info] Iteration   1: 133821.413 ops/s
[info]                  ·gc.alloc.rate:            881.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       10368.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11869.164 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 134075.479 ops/s
[info]                  ·gc.alloc.rate:                                  883.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10368.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11931.985 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                46.915 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 136531.553 ops/s
[info]                  ·gc.alloc.rate:                                  899.403 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10368.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.358 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7847.715 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 130202.281 ops/s
[info]                  ·gc.alloc.rate:            857.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       10368.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12344.241 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 134490.958 ops/s
[info]                  ·gc.alloc.rate:                                  885.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10368.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7966.611 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay":
[info]   133824.337 ±(99.9%) 8813.637 ops/s [Average]
[info]   (min, avg, max) = (130202.281, 133824.337, 136531.553), stdev = 2288.874
[info]   CI (99.9%): [125010.699, 142637.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate":
[info]   881.466 ±(99.9%) 58.105 MB/sec [Average]
[info]   (min, avg, max) = (857.641, 881.466, 899.403), stdev = 15.090
[info]   CI (99.9%): [823.361, 939.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm":
[info]   10368.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10368.003, 10368.003, 10368.003), stdev = 0.001
[info]   CI (99.9%): [10368.003, 10368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.124 ±(99.9%) 0.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.358), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   881.568 ±(99.9%) 706.281 MB/sec [Average]
[info]   (min, avg, max) = (680.624, 881.568, 1021.116), stdev = 183.419
[info]   CI (99.9%): [175.287, 1587.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10391.943 ±(99.9%) 8764.067 B/op [Average]
[info]   (min, avg, max) = (7847.715, 10391.943, 12344.241), stdev = 2276.000
[info]   CI (99.9%): [1627.876, 19156.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.383 ±(99.9%) 80.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.383, 46.915), stdev = 20.981
[info]   CI (99.9%): [≈ 0, 90.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 18.000), stdev = 6.573
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce
[info] # Run progress: 50.52% complete, ETA 00:13:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2726.130 ops/s
[info] # Warmup Iteration   2: 3063.128 ops/s
[info] # Warmup Iteration   3: 4037.783 ops/s
[info] # Warmup Iteration   4: 7268.337 ops/s
[info] # Warmup Iteration   5: 7520.966 ops/s
[info] Iteration   1: 7482.814 ops/s
[info]                  ·gc.alloc.rate:            1093.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       230032.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 283020.246 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  27.000 ms
[info] Iteration   2: 7577.541 ops/s
[info]                  ·gc.alloc.rate:                                  1107.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230032.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       211098.546 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                830.007 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 7691.748 ops/s
[info]                  ·gc.alloc.rate:                                  1124.008 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230032.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.822 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       208951.905 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7603.190 ops/s
[info]                  ·gc.alloc.rate:                                  1112.018 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230032.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.607 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1019.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       210981.363 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 7677.680 ops/s
[info]                  ·gc.alloc.rate:                                  1122.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230035.988 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.689 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       279110.476 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce":
[info]   7606.595 ±(99.9%) 324.926 ops/s [Average]
[info]   (min, avg, max) = (7482.814, 7606.595, 7691.748), stdev = 84.382
[info]   CI (99.9%): [7281.669, 7931.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate":
[info]   1111.820 ±(99.9%) 47.809 MB/sec [Average]
[info]   (min, avg, max) = (1093.317, 1111.820, 1124.008), stdev = 12.416
[info]   CI (99.9%): [1064.011, 1159.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm":
[info]   230032.842 ±(99.9%) 6.771 B/op [Average]
[info]   (min, avg, max) = (230032.053, 230032.842, 230035.988), stdev = 1.759
[info]   CI (99.9%): [230026.071, 230039.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.061), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.127 ±(99.9%) 18.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.127, 12.607), stdev = 4.754
[info]   CI (99.9%): [≈ 0, 24.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   1152.817 ±(99.9%) 705.383 MB/sec [Average]
[info]   (min, avg, max) = (1016.403, 1152.817, 1361.591), stdev = 183.186
[info]   CI (99.9%): [447.434, 1858.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   238632.507 ±(99.9%) 149288.579 B/op [Average]
[info]   (min, avg, max) = (208951.905, 238632.507, 283020.246), stdev = 38769.770
[info]   CI (99.9%): [89343.929, 387921.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   166.001 ±(99.9%) 1429.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 166.001, 830.007), stdev = 371.191
[info]   CI (99.9%): [≈ 0, 1595.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.200, 27.000), stdev = 9.149
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson
[info] # Run progress: 51.55% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4158.698 ops/s
[info] # Warmup Iteration   2: 10055.349 ops/s
[info] # Warmup Iteration   3: 10497.575 ops/s
[info] # Warmup Iteration   4: 10497.211 ops/s
[info] # Warmup Iteration   5: 10499.532 ops/s
[info] Iteration   1: 10650.424 ops/s
[info]                  ·gc.alloc.rate:      150.698 MB/sec
[info]                  ·gc.alloc.rate.norm: 22272.041 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10578.626 ops/s
[info]                  ·gc.alloc.rate:      149.738 MB/sec
[info]                  ·gc.alloc.rate.norm: 22280.370 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10420.123 ops/s
[info]                  ·gc.alloc.rate:            147.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       22288.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50703.473 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 10505.253 ops/s
[info]                  ·gc.alloc.rate:      148.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 22288.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10409.008 ops/s
[info]                  ·gc.alloc.rate:            147.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       22288.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50761.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson":
[info]   10512.687 ±(99.9%) 397.812 ops/s [Average]
[info]   (min, avg, max) = (10409.008, 10512.687, 10650.424), stdev = 103.311
[info]   CI (99.9%): [10114.875, 10910.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate":
[info]   148.828 ±(99.9%) 5.461 MB/sec [Average]
[info]   (min, avg, max) = (147.398, 148.828, 150.698), stdev = 1.418
[info]   CI (99.9%): [143.367, 154.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   22283.306 ±(99.9%) 27.412 B/op [Average]
[info]   (min, avg, max) = (22272.041, 22283.306, 22288.039), stdev = 7.119
[info]   CI (99.9%): [22255.893, 22310.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   134.267 ±(99.9%) 707.951 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.267, 335.706), stdev = 183.853
[info]   CI (99.9%): [≈ 0, 842.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   20293.078 ±(99.9%) 106999.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20293.078, 50761.916), stdev = 27787.449
[info]   CI (99.9%): [≈ 0, 127292.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 7.000), stdev = 3.578
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter
[info] # Run progress: 52.58% complete, ETA 00:12:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7919.252 ops/s
[info] # Warmup Iteration   2: 11991.254 ops/s
[info] # Warmup Iteration   3: 20113.012 ops/s
[info] # Warmup Iteration   4: 20074.071 ops/s
[info] # Warmup Iteration   5: 20102.745 ops/s
[info] Iteration   1: 20296.422 ops/s
[info]                  ·gc.alloc.rate:      183.185 MB/sec
[info]                  ·gc.alloc.rate.norm: 14208.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19837.528 ops/s
[info]                  ·gc.alloc.rate:            179.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       14208.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26687.374 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 20185.559 ops/s
[info]                  ·gc.alloc.rate:      182.182 MB/sec
[info]                  ·gc.alloc.rate.norm: 14208.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19996.122 ops/s
[info]                  ·gc.alloc.rate:            180.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       14208.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26476.544 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 20159.178 ops/s
[info]                  ·gc.alloc.rate:      181.968 MB/sec
[info]                  ·gc.alloc.rate.norm: 14208.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter":
[info]   20094.962 ±(99.9%) 691.401 ops/s [Average]
[info]   (min, avg, max) = (19837.528, 20094.962, 20296.422), stdev = 179.555
[info]   CI (99.9%): [19403.561, 20786.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate":
[info]   181.385 ±(99.9%) 6.183 MB/sec [Average]
[info]   (min, avg, max) = (179.074, 181.385, 183.185), stdev = 1.606
[info]   CI (99.9%): [175.202, 187.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   14208.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (14208.020, 14208.022, 14208.026), stdev = 0.002
[info]   CI (99.9%): [14208.013, 14208.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.550 ±(99.9%) 709.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.550, 336.391), stdev = 184.240
[info]   CI (99.9%): [≈ 0, 843.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   10632.784 ±(99.9%) 56064.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10632.784, 26687.374), stdev = 14559.729
[info]   CI (99.9%): [≈ 0, 66697.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 7.000), stdev = 3.362
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce
[info] # Run progress: 53.61% complete, ETA 00:12:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188670.464 ops/s
[info] # Warmup Iteration   2: 316651.783 ops/s
[info] # Warmup Iteration   3: 325411.503 ops/s
[info] # Warmup Iteration   4: 328555.905 ops/s
[info] # Warmup Iteration   5: 326557.253 ops/s
[info] Iteration   1: 328294.707 ops/s
[info]                  ·gc.alloc.rate:                                  1082.707 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4873.191 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.161 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 327733.952 ops/s
[info]                  ·gc.alloc.rate:                                  1080.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.237 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6538.505 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 332619.596 ops/s
[info]                  ·gc.alloc.rate:            1097.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4831.915 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 331909.992 ops/s
[info]                  ·gc.alloc.rate:                                  1095.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4842.322 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 327869.722 ops/s
[info]                  ·gc.alloc.rate:            1081.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4901.576 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce":
[info]   329685.594 ±(99.9%) 9152.304 ops/s [Average]
[info]   (min, avg, max) = (327733.952, 329685.594, 332619.596), stdev = 2376.824
[info]   CI (99.9%): [320533.290, 338837.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate":
[info]   1087.482 ±(99.9%) 30.633 MB/sec [Average]
[info]   (min, avg, max) = (1080.998, 1087.482, 1097.240), stdev = 7.955
[info]   CI (99.9%): [1056.849, 1118.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm":
[info]   5192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5192.001, 5192.001, 5192.001), stdev = 0.001
[info]   CI (99.9%): [5192.001, 5192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.237), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1088.187 ±(99.9%) 588.053 MB/sec [Average]
[info]   (min, avg, max) = (1016.224, 1088.187, 1361.347), stdev = 152.715
[info]   CI (99.9%): [500.135, 1676.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5197.502 ±(99.9%) 2888.526 B/op [Average]
[info]   (min, avg, max) = (4831.915, 5197.502, 6538.505), stdev = 750.141
[info]   CI (99.9%): [2308.976, 8086.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.832 ±(99.9%) 32.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.832, 19.161), stdev = 8.569
[info]   CI (99.9%): [≈ 0, 36.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson
[info] # Run progress: 54.64% complete, ETA 00:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245304.374 ops/s
[info] # Warmup Iteration   2: 1170327.198 ops/s
[info] # Warmup Iteration   3: 1156777.779 ops/s
[info] # Warmup Iteration   4: 1181116.066 ops/s
[info] # Warmup Iteration   5: 1158975.048 ops/s
[info] Iteration   1: 1174565.997 ops/s
[info]                  ·gc.alloc.rate:            489.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 450.767 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1155721.950 ops/s
[info]                  ·gc.alloc.rate:            481.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 916.218 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 1175250.540 ops/s
[info]                  ·gc.alloc.rate:            489.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 450.495 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1183671.947 ops/s
[info]                  ·gc.alloc.rate:            493.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 447.286 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1166442.267 ops/s
[info]                  ·gc.alloc.rate:            486.259 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 907.769 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson":
[info]   1171130.540 ±(99.9%) 40636.072 ops/s [Average]
[info]   (min, avg, max) = (1155721.950, 1171130.540, 1183671.947), stdev = 10553.059
[info]   CI (99.9%): [1130494.469, 1211766.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate":
[info]   488.084 ±(99.9%) 16.847 MB/sec [Average]
[info]   (min, avg, max) = (481.661, 488.084, 493.316), stdev = 4.375
[info]   CI (99.9%): [471.237, 504.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen":
[info]   470.921 ±(99.9%) 709.642 MB/sec [Average]
[info]   (min, avg, max) = (336.299, 470.921, 672.883), stdev = 184.292
[info]   CI (99.9%): [≈ 0, 1180.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   634.507 ±(99.9%) 975.486 B/op [Average]
[info]   (min, avg, max) = (447.286, 634.507, 916.218), stdev = 253.331
[info]   CI (99.9%): [≈ 0, 1609.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 16.000), stdev = 4.472
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter
[info] # Run progress: 55.67% complete, ETA 00:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10462407.711 ops/s
[info] # Warmup Iteration   2: 10951590.716 ops/s
[info] # Warmup Iteration   3: 11467755.410 ops/s
[info] # Warmup Iteration   4: 11331765.664 ops/s
[info] # Warmup Iteration   5: 11271709.441 ops/s
[info] Iteration   1: 11440649.115 ops/s
[info]                  ·gc.alloc.rate:            581.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92.543 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 11656787.847 ops/s
[info]                  ·gc.alloc.rate:            592.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45.421 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11408085.526 ops/s
[info]                  ·gc.alloc.rate:            579.776 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92.815 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 11448289.932 ops/s
[info]                  ·gc.alloc.rate:                   581.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        92.497 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 11431075.169 ops/s
[info]                  ·gc.alloc.rate:            581.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.735 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter":
[info]   11476977.518 ±(99.9%) 391402.457 ops/s [Average]
[info]   (min, avg, max) = (11408085.526, 11476977.518, 11656787.847), stdev = 101645.975
[info]   CI (99.9%): [11085575.061, 11868379.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate":
[info]   583.287 ±(99.9%) 19.932 MB/sec [Average]
[info]   (min, avg, max) = (579.776, 583.287, 592.443), stdev = 5.176
[info]   CI (99.9%): [563.355, 603.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   607.005 ±(99.9%) 582.729 MB/sec [Average]
[info]   (min, avg, max) = (336.365, 607.005, 680.760), stdev = 151.333
[info]   CI (99.9%): [24.275, 1189.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   83.402 ±(99.9%) 81.780 B/op [Average]
[info]   (min, avg, max) = (45.421, 83.402, 93.735), stdev = 21.238
[info]   CI (99.9%): [1.622, 165.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.549), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 11.000), stdev = 3.899
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay
[info] # Run progress: 56.70% complete, ETA 00:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123850.527 ops/s
[info] # Warmup Iteration   2: 201574.052 ops/s
[info] # Warmup Iteration   3: 201427.465 ops/s
[info] # Warmup Iteration   4: 204225.080 ops/s
[info] # Warmup Iteration   5: 203574.046 ops/s
[info] Iteration   1: 205464.607 ops/s
[info]                  ·gc.alloc.rate:            665.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5153.711 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 201001.859 ops/s
[info]                  ·gc.alloc.rate:            651.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5239.586 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 203513.867 ops/s
[info]                  ·gc.alloc.rate:            658.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2601.465 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 204937.722 ops/s
[info]                  ·gc.alloc.rate:                   663.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5192.439 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 205904.057 ops/s
[info]                  ·gc.alloc.rate:                                  666.648 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.503 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5203.876 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay":
[info]   204164.422 ±(99.9%) 7638.418 ops/s [Average]
[info]   (min, avg, max) = (201001.859, 204164.422, 205904.057), stdev = 1983.673
[info]   CI (99.9%): [196526.004, 211802.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate":
[info]   661.225 ±(99.9%) 23.008 MB/sec [Average]
[info]   (min, avg, max) = (651.920, 661.225, 666.648), stdev = 5.975
[info]   CI (99.9%): [638.217, 684.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm":
[info]   5096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.002, 5096.002, 5096.002), stdev = 0.001
[info]   CI (99.9%): [5096.002, 5096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.101 ±(99.9%) 0.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.503), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 0.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen":
[info]   607.238 ±(99.9%) 583.353 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 607.238, 680.760), stdev = 151.495
[info]   CI (99.9%): [23.886, 1190.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4678.215 ±(99.9%) 4471.918 B/op [Average]
[info]   (min, avg, max) = (2601.465, 4678.215, 5239.586), stdev = 1161.343
[info]   CI (99.9%): [206.298, 9150.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.139 ±(99.9%) 52.857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.139, 30.694), stdev = 13.727
[info]   CI (99.9%): [≈ 0, 58.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 4.062
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce
[info] # Run progress: 57.73% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 896765.776 ops/s
[info] # Warmup Iteration   2: 1212940.069 ops/s
[info] # Warmup Iteration   3: 1169602.404 ops/s
[info] # Warmup Iteration   4: 1194298.143 ops/s
[info] # Warmup Iteration   5: 1185586.392 ops/s
[info] Iteration   1: 1204851.330 ops/s
[info]                  ·gc.alloc.rate:                                  1230.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1333.911 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   2: 1197584.824 ops/s
[info]                  ·gc.alloc.rate:                                  1223.299 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1789.415 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1209561.307 ops/s
[info]                  ·gc.alloc.rate:                                  1235.574 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1771.661 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1222805.357 ops/s
[info]                  ·gc.alloc.rate:            1249.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       1608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1314.393 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1228206.480 ops/s
[info]                  ·gc.alloc.rate:                                  1254.515 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1744.715 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce":
[info]   1212601.860 ±(99.9%) 48800.078 ops/s [Average]
[info]   (min, avg, max) = (1197584.824, 1212601.860, 1228206.480), stdev = 12673.225
[info]   CI (99.9%): [1163801.782, 1261401.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate":
[info]   1238.619 ±(99.9%) 49.966 MB/sec [Average]
[info]   (min, avg, max) = (1223.299, 1238.619, 1254.515), stdev = 12.976
[info]   CI (99.9%): [1188.652, 1288.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm":
[info]   1608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.000, 1608.000, 1608.000), stdev = 0.001
[info]   CI (99.9%): [1608.000, 1608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1225.137 ±(99.9%) 717.799 MB/sec [Average]
[info]   (min, avg, max) = (1020.783, 1225.137, 1361.329), stdev = 186.410
[info]   CI (99.9%): [507.338, 1942.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1590.819 ±(99.9%) 939.748 B/op [Average]
[info]   (min, avg, max) = (1314.393, 1590.819, 1789.415), stdev = 244.050
[info]   CI (99.9%): [651.071, 2530.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson
[info] # Run progress: 58.76% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2062004.169 ops/s
[info] # Warmup Iteration   2: 3181820.978 ops/s
[info] # Warmup Iteration   3: 3211377.593 ops/s
[info] # Warmup Iteration   4: 3179662.106 ops/s
[info] # Warmup Iteration   5: 3158878.346 ops/s
[info] Iteration   1: 3220873.486 ops/s
[info]                  ·gc.alloc.rate:            883.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 328.759 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 3222858.296 ops/s
[info]                  ·gc.alloc.rate:                                  884.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       496.386 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.952 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 3273418.962 ops/s
[info]                  ·gc.alloc.rate:                                  898.478 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       490.982 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3216475.773 ops/s
[info]                  ·gc.alloc.rate:            882.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 333.096 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3250724.145 ops/s
[info]                  ·gc.alloc.rate:            892.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 494.413 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson":
[info]   3236870.132 ±(99.9%) 94240.621 ops/s [Average]
[info]   (min, avg, max) = (3216475.773, 3236870.132, 3273418.962), stdev = 24473.990
[info]   CI (99.9%): [3142629.512, 3331110.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate":
[info]   888.432 ±(99.9%) 25.882 MB/sec [Average]
[info]   (min, avg, max) = (882.962, 888.432, 898.478), stdev = 6.721
[info]   CI (99.9%): [862.550, 914.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   882.439 ±(99.9%) 723.231 MB/sec [Average]
[info]   (min, avg, max) = (672.641, 882.439, 1021.149), stdev = 187.821
[info]   CI (99.9%): [159.208, 1605.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   428.727 ±(99.9%) 343.911 B/op [Average]
[info]   (min, avg, max) = (328.759, 428.727, 496.386), stdev = 89.313
[info]   CI (99.9%): [84.816, 772.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.390 ±(99.9%) 3.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.952), stdev = 0.873
[info]   CI (99.9%): [≈ 0, 3.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 12.000), stdev = 3.847
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter
[info] # Run progress: 59.79% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15178139.318 ops/s
[info] # Warmup Iteration   2: 15161790.991 ops/s
[info] # Warmup Iteration   3: 14907229.405 ops/s
[info] # Warmup Iteration   4: 15423588.325 ops/s
[info] # Warmup Iteration   5: 15092158.581 ops/s
[info] Iteration   1: 15277872.201 ops/s
[info]                  ·gc.alloc.rate:            465.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.308 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 14692714.752 ops/s
[info]                  ·gc.alloc.rate:            448.044 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 15443720.950 ops/s
[info]                  ·gc.alloc.rate:            470.950 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.560 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 15259898.995 ops/s
[info]                  ·gc.alloc.rate:            465.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 15594239.011 ops/s
[info]                  ·gc.alloc.rate:            475.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33.952 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter":
[info]   15253689.182 ±(99.9%) 1316281.039 ops/s [Average]
[info]   (min, avg, max) = (14692714.752, 15253689.182, 15594239.011), stdev = 341834.006
[info]   CI (99.9%): [13937408.142, 16569970.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate":
[info]   465.145 ±(99.9%) 40.180 MB/sec [Average]
[info]   (min, avg, max) = (448.044, 465.145, 475.582), stdev = 10.435
[info]   CI (99.9%): [424.965, 505.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.866 ±(99.9%) 709.152 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 470.866, 672.677), stdev = 184.165
[info]   CI (99.9%): [≈ 0, 1180.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   48.510 ±(99.9%) 71.860 B/op [Average]
[info]   (min, avg, max) = (33.952, 48.510, 69.308), stdev = 18.662
[info]   CI (99.9%): [≈ 0, 120.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay
[info] # Run progress: 60.82% complete, ETA 00:10:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 521462.510 ops/s
[info] # Warmup Iteration   2: 821867.941 ops/s
[info] # Warmup Iteration   3: 824985.572 ops/s
[info] # Warmup Iteration   4: 820195.668 ops/s
[info] # Warmup Iteration   5: 831852.946 ops/s
[info] Iteration   1: 847273.919 ops/s
[info]                  ·gc.alloc.rate:                                  1253.012 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2529.227 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 853827.830 ops/s
[info]                  ·gc.alloc.rate:                                  1262.683 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2509.783 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 853072.804 ops/s
[info]                  ·gc.alloc.rate:            1261.664 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1884.085 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 845382.532 ops/s
[info]                  ·gc.alloc.rate:                                  1250.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2534.877 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 845057.245 ops/s
[info]                  ·gc.alloc.rate:            1250.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2535.162 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay":
[info]   848922.866 ±(99.9%) 16277.419 ops/s [Average]
[info]   (min, avg, max) = (845057.245, 848922.866, 853827.830), stdev = 4227.194
[info]   CI (99.9%): [832645.447, 865200.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate":
[info]   1255.532 ±(99.9%) 23.814 MB/sec [Average]
[info]   (min, avg, max) = (1250.098, 1255.532, 1262.683), stdev = 6.184
[info]   CI (99.9%): [1231.718, 1279.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.312 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.182), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.069 ±(99.9%) 0.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.338), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   1293.265 ±(99.9%) 585.893 MB/sec [Average]
[info]   (min, avg, max) = (1021.083, 1293.265, 1361.340), stdev = 152.155
[info]   CI (99.9%): [707.372, 1879.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   2398.627 ±(99.9%) 1108.310 B/op [Average]
[info]   (min, avg, max) = (1884.085, 2398.627, 2535.162), stdev = 287.824
[info]   CI (99.9%): [1290.317, 3506.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce
[info] # Run progress: 61.86% complete, ETA 00:10:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 408149.491 ops/s
[info] # Warmup Iteration   2: 609660.897 ops/s
[info] # Warmup Iteration   3: 625655.783 ops/s
[info] # Warmup Iteration   4: 633885.094 ops/s
[info] # Warmup Iteration   5: 650904.337 ops/s
[info] Iteration   1: 651714.656 ops/s
[info]                  ·gc.alloc.rate:            1477.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4110.183 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 645685.497 ops/s
[info]                  ·gc.alloc.rate:            1463.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3318.808 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 639775.671 ops/s
[info]                  ·gc.alloc.rate:                                  1450.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3349.455 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 649225.740 ops/s
[info]                  ·gc.alloc.rate:                                  1471.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4125.703 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 651374.089 ops/s
[info]                  ·gc.alloc.rate:            1476.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3289.913 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce":
[info]   647555.131 ±(99.9%) 19126.943 ops/s [Average]
[info]   (min, avg, max) = (639775.671, 647555.131, 651714.656), stdev = 4967.206
[info]   CI (99.9%): [628428.188, 666682.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate":
[info]   1467.868 ±(99.9%) 43.040 MB/sec [Average]
[info]   (min, avg, max) = (1450.368, 1467.868, 1477.369), stdev = 11.177
[info]   CI (99.9%): [1424.828, 1510.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1497.534 ±(99.9%) 717.312 MB/sec [Average]
[info]   (min, avg, max) = (1361.410, 1497.534, 1701.865), stdev = 186.284
[info]   CI (99.9%): [780.222, 2214.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3638.812 ±(99.9%) 1686.294 B/op [Average]
[info]   (min, avg, max) = (3289.913, 3638.812, 4125.703), stdev = 437.925
[info]   CI (99.9%): [1952.518, 5325.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.673
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson
[info] # Run progress: 62.89% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1225757.220 ops/s
[info] # Warmup Iteration   2: 2265461.744 ops/s
[info] # Warmup Iteration   3: 2269145.234 ops/s
[info] # Warmup Iteration   4: 2246183.695 ops/s
[info] # Warmup Iteration   5: 2262730.865 ops/s
[info] Iteration   1: 2310475.866 ops/s
[info]                  ·gc.alloc.rate:                                  1315.182 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       927.483 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2270543.201 ops/s
[info]                  ·gc.alloc.rate:            1292.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 943.757 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2276356.358 ops/s
[info]                  ·gc.alloc.rate:                                  1295.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       706.043 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 2274295.604 ops/s
[info]                  ·gc.alloc.rate:                                  1294.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       942.248 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2295141.371 ops/s
[info]                  ·gc.alloc.rate:                                  1306.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       933.611 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson":
[info]   2285362.480 ±(99.9%) 65276.816 ops/s [Average]
[info]   (min, avg, max) = (2270543.201, 2285362.480, 2310475.866), stdev = 16952.182
[info]   CI (99.9%): [2220085.664, 2350639.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate":
[info]   1300.854 ±(99.9%) 37.330 MB/sec [Average]
[info]   (min, avg, max) = (1292.286, 1300.854, 1315.182), stdev = 9.694
[info]   CI (99.9%): [1263.524, 1338.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen":
[info]   1293.269 ±(99.9%) 586.196 MB/sec [Average]
[info]   (min, avg, max) = (1020.946, 1293.269, 1361.507), stdev = 152.233
[info]   CI (99.9%): [707.074, 1879.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   890.628 ±(99.9%) 398.149 B/op [Average]
[info]   (min, avg, max) = (706.043, 890.628, 943.757), stdev = 103.398
[info]   CI (99.9%): [492.479, 1288.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter
[info] # Run progress: 63.92% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4417288.098 ops/s
[info] # Warmup Iteration   2: 4854865.303 ops/s
[info] # Warmup Iteration   3: 4809578.127 ops/s
[info] # Warmup Iteration   4: 4892909.455 ops/s
[info] # Warmup Iteration   5: 4949082.296 ops/s
[info] Iteration   1: 4953186.675 ops/s
[info]                  ·gc.alloc.rate:                                  1308.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       432.607 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 4886469.091 ops/s
[info]                  ·gc.alloc.rate:                                  1291.287 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       438.512 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4907157.880 ops/s
[info]                  ·gc.alloc.rate:                                  1297.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       436.676 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4929980.486 ops/s
[info]                  ·gc.alloc.rate:                                  1302.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       434.674 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4914361.924 ops/s
[info]                  ·gc.alloc.rate:                                  1298.686 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       327.044 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter":
[info]   4918231.211 ±(99.9%) 96388.322 ops/s [Average]
[info]   (min, avg, max) = (4886469.091, 4918231.211, 4953186.675), stdev = 25031.741
[info]   CI (99.9%): [4821842.889, 5014619.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate":
[info]   1299.693 ±(99.9%) 25.048 MB/sec [Average]
[info]   (min, avg, max) = (1291.287, 1299.693, 1308.708), stdev = 6.505
[info]   CI (99.9%): [1274.645, 1324.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1293.165 ±(99.9%) 585.898 MB/sec [Average]
[info]   (min, avg, max) = (1020.981, 1293.165, 1361.509), stdev = 152.156
[info]   CI (99.9%): [707.267, 1879.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   413.903 ±(99.9%) 187.161 B/op [Average]
[info]   (min, avg, max) = (327.044, 413.903, 438.512), stdev = 48.605
[info]   CI (99.9%): [226.741, 601.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay
[info] # Run progress: 64.95% complete, ETA 00:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122920.067 ops/s
[info] # Warmup Iteration   2: 300145.310 ops/s
[info] # Warmup Iteration   3: 302885.180 ops/s
[info] # Warmup Iteration   4: 301302.973 ops/s
[info] # Warmup Iteration   5: 302037.062 ops/s
[info] Iteration   1: 304597.157 ops/s
[info]                  ·gc.alloc.rate:                   1049.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              5424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5231.659 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.651 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 306397.014 ops/s
[info]                  ·gc.alloc.rate:                                  1055.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5424.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5245.275 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 307757.652 ops/s
[info]                  ·gc.alloc.rate:                                  1060.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5424.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6963.231 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 295010.267 ops/s
[info]                  ·gc.alloc.rate:            1016.642 MB/sec
[info]                  ·gc.alloc.rate.norm:       5424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5447.822 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 303670.647 ops/s
[info]                  ·gc.alloc.rate:            1046.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       5424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5292.682 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay":
[info]   303486.547 ±(99.9%) 19236.638 ops/s [Average]
[info]   (min, avg, max) = (295010.267, 303486.547, 307757.652), stdev = 4995.694
[info]   CI (99.9%): [284249.909, 322723.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate":
[info]   1045.697 ±(99.9%) 65.990 MB/sec [Average]
[info]   (min, avg, max) = (1016.642, 1045.697, 1060.423), stdev = 17.137
[info]   CI (99.9%): [979.707, 1111.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm":
[info]   5424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5424.001, 5424.001, 5424.001), stdev = 0.001
[info]   CI (99.9%): [5424.001, 5424.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.349), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1087.310 ±(99.9%) 590.079 MB/sec [Average]
[info]   (min, avg, max) = (1012.173, 1087.310, 1361.351), stdev = 153.242
[info]   CI (99.9%): [497.230, 1677.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5636.134 ±(99.9%) 2875.748 B/op [Average]
[info]   (min, avg, max) = (5231.659, 5636.134, 6963.231), stdev = 746.823
[info]   CI (99.9%): [2760.386, 8511.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.130 ±(99.9%) 35.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.130, 20.651), stdev = 9.236
[info]   CI (99.9%): [≈ 0, 39.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 3.962
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson
[info] # Run progress: 65.98% complete, ETA 00:09:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1254751.863 ops/s
[info] # Warmup Iteration   2: 1824175.349 ops/s
[info] # Warmup Iteration   3: 1828324.627 ops/s
[info] # Warmup Iteration   4: 1834144.218 ops/s
[info] # Warmup Iteration   5: 1827311.574 ops/s
[info] Iteration   1: 1830015.348 ops/s
[info]                  ·gc.alloc.rate:                   967.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        870.809 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 1841369.122 ops/s
[info]                  ·gc.alloc.rate:                                  973.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       872.762 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1854404.834 ops/s
[info]                  ·gc.alloc.rate:                                  980.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       866.669 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 1861645.954 ops/s
[info]                  ·gc.alloc.rate:            984.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 863.328 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1861256.922 ops/s
[info]                  ·gc.alloc.rate:            983.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 575.671 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson":
[info]   1849738.436 ±(99.9%) 52912.576 ops/s [Average]
[info]   (min, avg, max) = (1830015.348, 1849738.436, 1861645.954), stdev = 13741.228
[info]   CI (99.9%): [1796825.860, 1902651.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate":
[info]   977.606 ±(99.9%) 28.025 MB/sec [Average]
[info]   (min, avg, max) = (967.158, 977.606, 984.051), stdev = 7.278
[info]   CI (99.9%): [949.581, 1005.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   951.135 ±(99.9%) 582.587 MB/sec [Average]
[info]   (min, avg, max) = (680.572, 951.135, 1021.104), stdev = 151.296
[info]   CI (99.9%): [368.548, 1533.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   809.848 ±(99.9%) 504.281 B/op [Average]
[info]   (min, avg, max) = (575.671, 809.848, 872.762), stdev = 130.960
[info]   CI (99.9%): [305.567, 1314.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.687 ±(99.9%) 5.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.437), stdev = 1.537
[info]   CI (99.9%): [≈ 0, 6.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 15.000), stdev = 5.541
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter
[info] # Run progress: 67.01% complete, ETA 00:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3932381.317 ops/s
[info] # Warmup Iteration   2: 4433372.378 ops/s
[info] # Warmup Iteration   3: 4417154.512 ops/s
[info] # Warmup Iteration   4: 4448098.844 ops/s
[info] # Warmup Iteration   5: 4426684.057 ops/s
[info] Iteration   1: 4445097.512 ops/s
[info]                  ·gc.alloc.rate:            813.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 357.323 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 4443929.636 ops/s
[info]                  ·gc.alloc.rate:                   813.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        239.680 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4455825.017 ops/s
[info]                  ·gc.alloc.rate:                                  815.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       360.710 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4451160.536 ops/s
[info]                  ·gc.alloc.rate:                                  814.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       240.721 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 4474810.803 ops/s
[info]                  ·gc.alloc.rate:            818.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 239.449 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter":
[info]   4454164.701 ±(99.9%) 48133.576 ops/s [Average]
[info]   (min, avg, max) = (4443929.636, 4454164.701, 4474810.803), stdev = 12500.137
[info]   CI (99.9%): [4406031.125, 4502298.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate":
[info]   814.971 ±(99.9%) 8.901 MB/sec [Average]
[info]   (min, avg, max) = (813.081, 814.971, 818.817), stdev = 2.311
[info]   CI (99.9%): [806.071, 823.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (288.000, 288.000, 288.000), stdev = 0.001
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   813.652 ±(99.9%) 708.034 MB/sec [Average]
[info]   (min, avg, max) = (676.664, 813.652, 1020.949), stdev = 183.874
[info]   CI (99.9%): [105.618, 1521.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   287.577 ±(99.9%) 251.170 B/op [Average]
[info]   (min, avg, max) = (239.449, 287.577, 360.710), stdev = 65.228
[info]   CI (99.9%): [36.407, 538.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.283 ±(99.9%) 2.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.283, 1.415), stdev = 0.633
[info]   CI (99.9%): [≈ 0, 2.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 16.000), stdev = 5.899
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay
[info] # Run progress: 68.04% complete, ETA 00:08:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182931.326 ops/s
[info] # Warmup Iteration   2: 350314.886 ops/s
[info] # Warmup Iteration   3: 357703.831 ops/s
[info] # Warmup Iteration   4: 361276.627 ops/s
[info] # Warmup Iteration   5: 358119.649 ops/s
[info] Iteration   1: 363655.291 ops/s
[info]                  ·gc.alloc.rate:                                  1053.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4399.434 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                17.298 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 358872.232 ops/s
[info]                  ·gc.alloc.rate:                                  1039.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4478.198 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 367352.137 ops/s
[info]                  ·gc.alloc.rate:            1064.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4374.857 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 366896.486 ops/s
[info]                  ·gc.alloc.rate:                                  1062.909 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4380.485 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 366161.866 ops/s
[info]                  ·gc.alloc.rate:                                  1060.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4389.216 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay":
[info]   364587.602 ±(99.9%) 13475.406 ops/s [Average]
[info]   (min, avg, max) = (358872.232, 364587.602, 367352.137), stdev = 3499.520
[info]   CI (99.9%): [351112.196, 378063.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate":
[info]   1056.079 ±(99.9%) 39.014 MB/sec [Average]
[info]   (min, avg, max) = (1039.541, 1056.079, 1064.035), stdev = 10.132
[info]   CI (99.9%): [1017.065, 1095.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.046), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.200), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   1019.978 ±(99.9%) 7.958 MB/sec [Average]
[info]   (min, avg, max) = (1016.285, 1019.978, 1021.065), stdev = 2.067
[info]   CI (99.9%): [1012.020, 1027.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4404.438 ±(99.9%) 162.755 B/op [Average]
[info]   (min, avg, max) = (4374.857, 4404.438, 4478.198), stdev = 42.267
[info]   CI (99.9%): [4241.683, 4567.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.460 ±(99.9%) 29.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.460, 17.298), stdev = 7.736
[info]   CI (99.9%): [≈ 0, 33.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce
[info] # Run progress: 69.07% complete, ETA 00:08:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3374.943 ops/s
[info] # Warmup Iteration   2: 4278.211 ops/s
[info] # Warmup Iteration   3: 4487.788 ops/s
[info] # Warmup Iteration   4: 4537.982 ops/s
[info] # Warmup Iteration   5: 4332.160 ops/s
[info] Iteration   1: 4299.818 ops/s
[info]                  ·gc.alloc.rate:                                  1012.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370872.102 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 50.651 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       372036.033 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1462.789 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 4401.945 ops/s
[info]                  ·gc.alloc.rate:                                  1037.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370872.093 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       365084.490 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4490.771 ops/s
[info]                  ·gc.alloc.rate:                                  1058.137 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370872.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.881 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       477134.760 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 4508.028 ops/s
[info]                  ·gc.alloc.rate:                                  1062.210 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370872.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.423 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       356422.840 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4535.660 ops/s
[info]                  ·gc.alloc.rate:                                  1068.800 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370872.097 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       354301.743 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce":
[info]   4447.244 ±(99.9%) 371.309 ops/s [Average]
[info]   (min, avg, max) = (4299.818, 4447.244, 4535.660), stdev = 96.428
[info]   CI (99.9%): [4075.935, 4818.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1047.895 ±(99.9%) 87.808 MB/sec [Average]
[info]   (min, avg, max) = (1012.922, 1047.895, 1068.800), stdev = 22.803
[info]   CI (99.9%): [960.086, 1135.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   370872.096 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (370872.090, 370872.096, 370872.102), stdev = 0.005
[info]   CI (99.9%): [370872.078, 370872.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.030, 0.138), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   11.043 ±(99.9%) 85.350 B/op [Average]
[info]   (min, avg, max) = (0.065, 11.043, 50.651), stdev = 22.165
[info]   CI (99.9%): [≈ 0, 96.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1088.101 ±(99.9%) 588.172 MB/sec [Average]
[info]   (min, avg, max) = (1016.101, 1088.101, 1361.315), stdev = 152.746
[info]   CI (99.9%): [499.929, 1676.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   384995.973 ±(99.9%) 200201.483 B/op [Average]
[info]   (min, avg, max) = (354301.743, 384995.973, 477134.760), stdev = 51991.689
[info]   CI (99.9%): [184794.490, 585197.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   292.558 ±(99.9%) 2519.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 292.558, 1462.789), stdev = 654.179
[info]   CI (99.9%): [≈ 0, 2811.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 11.000), stdev = 3.578
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson
[info] # Run progress: 70.10% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14103.115 ops/s
[info] # Warmup Iteration   2: 19986.637 ops/s
[info] # Warmup Iteration   3: 19843.922 ops/s
[info] # Warmup Iteration   4: 20123.554 ops/s
[info] # Warmup Iteration   5: 19834.088 ops/s
[info] Iteration   1: 20143.022 ops/s
[info]                  ·gc.alloc.rate:            332.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       25999.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26283.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 20153.813 ops/s
[info]                  ·gc.alloc.rate:            332.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       25999.839 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26267.716 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 20006.045 ops/s
[info]                  ·gc.alloc.rate:            330.497 MB/sec
[info]                  ·gc.alloc.rate.norm:       25999.426 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26463.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 19946.521 ops/s
[info]                  ·gc.alloc.rate:            329.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       26000.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26542.901 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 19896.341 ops/s
[info]                  ·gc.alloc.rate:            328.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       25999.996 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26609.592 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson":
[info]   20029.148 ±(99.9%) 445.359 ops/s [Average]
[info]   (min, avg, max) = (19896.341, 20029.148, 20153.813), stdev = 115.658
[info]   CI (99.9%): [19583.790, 20474.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   330.855 ±(99.9%) 7.254 MB/sec [Average]
[info]   (min, avg, max) = (328.668, 330.855, 332.883), stdev = 1.884
[info]   CI (99.9%): [323.600, 338.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   25999.877 ±(99.9%) 1.109 B/op [Average]
[info]   (min, avg, max) = (25999.426, 25999.877, 26000.211), stdev = 0.288
[info]   CI (99.9%): [25998.768, 26000.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   336.362 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (336.312, 336.362, 336.403), stdev = 0.041
[info]   CI (99.9%): [336.206, 336.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   26433.377 ±(99.9%) 589.953 B/op [Average]
[info]   (min, avg, max) = (26267.716, 26433.377, 26609.592), stdev = 153.209
[info]   CI (99.9%): [25843.424, 27023.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter
[info] # Run progress: 71.13% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44475.470 ops/s
[info] # Warmup Iteration   2: 51838.757 ops/s
[info] # Warmup Iteration   3: 51867.917 ops/s
[info] # Warmup Iteration   4: 52029.093 ops/s
[info] # Warmup Iteration   5: 51614.079 ops/s
[info] Iteration   1: 51105.097 ops/s
[info]                  ·gc.alloc.rate:            391.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20719.197 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 50704.978 ops/s
[info]                  ·gc.alloc.rate:            388.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10441.925 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 51493.455 ops/s
[info]                  ·gc.alloc.rate:            394.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10281.754 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 51208.886 ops/s
[info]                  ·gc.alloc.rate:            392.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10338.765 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 50186.797 ops/s
[info]                  ·gc.alloc.rate:            384.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10549.475 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter":
[info]   50939.842 ±(99.9%) 1952.488 ops/s [Average]
[info]   (min, avg, max) = (50186.797, 50939.842, 51493.455), stdev = 507.055
[info]   CI (99.9%): [48987.355, 52892.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   390.431 ±(99.9%) 14.825 MB/sec [Average]
[info]   (min, avg, max) = (384.721, 390.431, 394.668), stdev = 3.850
[info]   CI (99.9%): [375.607, 405.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   12064.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12064.008, 12064.008, 12064.009), stdev = 0.001
[info]   CI (99.9%): [12064.007, 12064.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   403.631 ±(99.9%) 579.045 MB/sec [Average]
[info]   (min, avg, max) = (336.335, 403.631, 672.632), stdev = 150.376
[info]   CI (99.9%): [≈ 0, 982.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   12466.223 ±(99.9%) 17769.509 B/op [Average]
[info]   (min, avg, max) = (10281.754, 12466.223, 20719.197), stdev = 4614.685
[info]   CI (99.9%): [≈ 0, 30235.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay
[info] # Run progress: 72.16% complete, ETA 00:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2278.380 ops/s
[info] # Warmup Iteration   2: 4079.845 ops/s
[info] # Warmup Iteration   3: 4030.062 ops/s
[info] # Warmup Iteration   4: 4163.405 ops/s
[info] # Warmup Iteration   5: 4144.511 ops/s
[info] Iteration   1: 4208.109 ops/s
[info]                  ·gc.alloc.rate:                                  1206.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451471.572 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 28.617 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       381911.857 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4203.481 ops/s
[info]                  ·gc.alloc.rate:                                  1205.753 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451472.082 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       509700.201 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4192.193 ops/s
[info]                  ·gc.alloc.rate:                                  1202.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451472.166 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       383369.189 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4269.266 ops/s
[info]                  ·gc.alloc.rate:                                  1224.513 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451471.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 26.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       501941.298 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4276.580 ops/s
[info]                  ·gc.alloc.rate:                                  1226.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             451472.481 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.964 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       375751.989 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay":
[info]   4229.926 ±(99.9%) 153.100 ops/s [Average]
[info]   (min, avg, max) = (4192.193, 4229.926, 4276.580), stdev = 39.760
[info]   CI (99.9%): [4076.826, 4383.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1213.221 ±(99.9%) 44.040 MB/sec [Average]
[info]   (min, avg, max) = (1202.285, 1213.221, 1226.652), stdev = 11.437
[info]   CI (99.9%): [1169.181, 1257.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   451471.878 ±(99.9%) 2.109 B/op [Average]
[info]   (min, avg, max) = (451471.091, 451471.878, 451472.481), stdev = 0.548
[info]   CI (99.9%): [451469.769, 451473.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.059 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (0.036, 0.059, 0.077), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   21.897 ±(99.9%) 29.012 B/op [Average]
[info]   (min, avg, max) = (13.449, 21.897, 28.617), stdev = 7.534
[info]   CI (99.9%): [≈ 0, 50.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1157.092 ±(99.9%) 717.936 MB/sec [Average]
[info]   (min, avg, max) = (1020.920, 1157.092, 1361.402), stdev = 186.446
[info]   CI (99.9%): [439.156, 1875.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   430534.907 ±(99.9%) 265079.783 B/op [Average]
[info]   (min, avg, max) = (375751.989, 430534.907, 509700.201), stdev = 68840.378
[info]   CI (99.9%): [165455.124, 695614.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson
[info] # Run progress: 73.20% complete, ETA 00:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101745.543 ops/s
[info] # Warmup Iteration   2: 471394.517 ops/s
[info] # Warmup Iteration   3: 462369.494 ops/s
[info] # Warmup Iteration   4: 468403.233 ops/s
[info] # Warmup Iteration   5: 469821.416 ops/s
[info] Iteration   1: 465367.037 ops/s
[info]                  ·gc.alloc.rate:                   1042.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3417.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 467500.061 ops/s
[info]                  ·gc.alloc.rate:                                  1047.861 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.299 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3437.704 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 472162.503 ops/s
[info]                  ·gc.alloc.rate:                                  1058.396 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3403.711 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 476881.191 ops/s
[info]                  ·gc.alloc.rate:                                  1068.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3370.284 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 477395.516 ops/s
[info]                  ·gc.alloc.rate:            1070.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3366.578 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson":
[info]   471861.261 ±(99.9%) 20835.634 ops/s [Average]
[info]   (min, avg, max) = (465367.037, 471861.261, 477395.516), stdev = 5410.948
[info]   CI (99.9%): [451025.627, 492696.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate":
[info]   1057.644 ±(99.9%) 46.863 MB/sec [Average]
[info]   (min, avg, max) = (1042.983, 1057.644, 1070.025), stdev = 12.170
[info]   CI (99.9%): [1010.781, 1104.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm":
[info]   3528.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3528.001, 3528.001, 3528.001), stdev = 0.001
[info]   CI (99.9%): [3528.001, 3528.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.060 ±(99.9%) 0.514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.299), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.203 ±(99.9%) 1.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 1.007), stdev = 0.450
[info]   CI (99.9%): [≈ 0, 1.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen":
[info]   1018.939 ±(99.9%) 18.581 MB/sec [Average]
[info]   (min, avg, max) = (1010.307, 1018.939, 1021.168), stdev = 4.825
[info]   CI (99.9%): [1000.358, 1037.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3399.150 ±(99.9%) 117.698 B/op [Average]
[info]   (min, avg, max) = (3366.578, 3399.150, 3437.704), stdev = 30.566
[info]   CI (99.9%): [3281.451, 3516.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.154 ±(99.9%) 27.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.154, 15.769), stdev = 7.052
[info]   CI (99.9%): [≈ 0, 30.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 16.000), stdev = 5.367
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter
[info] # Run progress: 74.23% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2093135.014 ops/s
[info] # Warmup Iteration   2: 2323616.486 ops/s
[info] # Warmup Iteration   3: 2309435.550 ops/s
[info] # Warmup Iteration   4: 2346738.658 ops/s
[info] # Warmup Iteration   5: 2320776.872 ops/s
[info] Iteration   1: 2313872.279 ops/s
[info]                  ·gc.alloc.rate:            482.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 228.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2200496.267 ops/s
[info]                  ·gc.alloc.rate:            458.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 240.599 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2288863.102 ops/s
[info]                  ·gc.alloc.rate:            476.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 462.628 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2280374.586 ops/s
[info]                  ·gc.alloc.rate:            475.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232.165 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2229233.720 ops/s
[info]                  ·gc.alloc.rate:            464.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 475.017 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter":
[info]   2262567.991 ±(99.9%) 178595.902 ops/s [Average]
[info]   (min, avg, max) = (2200496.267, 2262567.991, 2313872.279), stdev = 46380.789
[info]   CI (99.9%): [2083972.089, 2441163.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   471.508 ±(99.9%) 37.172 MB/sec [Average]
[info]   (min, avg, max) = (458.611, 471.508, 482.187), stdev = 9.653
[info]   CI (99.9%): [434.336, 508.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (328.000, 328.000, 328.000), stdev = 0.001
[info]   CI (99.9%): [328.000, 328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.923 ±(99.9%) 709.303 MB/sec [Average]
[info]   (min, avg, max) = (336.373, 470.923, 672.738), stdev = 184.204
[info]   CI (99.9%): [≈ 0, 1180.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   327.844 ±(99.9%) 496.121 B/op [Average]
[info]   (min, avg, max) = (228.812, 327.844, 475.017), stdev = 128.841
[info]   CI (99.9%): [≈ 0, 823.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay
[info] # Run progress: 75.26% complete, ETA 00:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74870.340 ops/s
[info] # Warmup Iteration   2: 200011.425 ops/s
[info] # Warmup Iteration   3: 206174.783 ops/s
[info] # Warmup Iteration   4: 205274.897 ops/s
[info] # Warmup Iteration   5: 208862.513 ops/s
[info] Iteration   1: 207787.336 ops/s
[info]                  ·gc.alloc.rate:            821.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       6224.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7643.933 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 208054.271 ops/s
[info]                  ·gc.alloc.rate:                   822.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              6224.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5089.441 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 208242.321 ops/s
[info]                  ·gc.alloc.rate:                                  823.570 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6224.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.131 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.993 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5140.177 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.034 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 211138.159 ops/s
[info]                  ·gc.alloc.rate:                                  834.928 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6224.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7612.158 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 210698.518 ops/s
[info]                  ·gc.alloc.rate:                                  833.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6224.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5085.513 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay":
[info]   209184.121 ±(99.9%) 6156.882 ops/s [Average]
[info]   (min, avg, max) = (207787.336, 209184.121, 211138.159), stdev = 1598.923
[info]   CI (99.9%): [203027.239, 215341.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate":
[info]   827.201 ±(99.9%) 24.159 MB/sec [Average]
[info]   (min, avg, max) = (821.744, 827.201, 834.928), stdev = 6.274
[info]   CI (99.9%): [803.042, 851.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   6224.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6224.002, 6224.002, 6224.002), stdev = 0.001
[info]   CI (99.9%): [6224.002, 6224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.131), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.240 ±(99.9%) 1.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 0.993), stdev = 0.429
[info]   CI (99.9%): [≈ 0, 1.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   812.785 ±(99.9%) 711.733 MB/sec [Average]
[info]   (min, avg, max) = (672.724, 812.785, 1021.144), stdev = 184.835
[info]   CI (99.9%): [101.052, 1524.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6114.244 ±(99.9%) 5322.047 B/op [Average]
[info]   (min, avg, max) = (5085.513, 6114.244, 7643.933), stdev = 1382.119
[info]   CI (99.9%): [792.197, 11436.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.046 ±(99.9%) 42.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.046, 25.195), stdev = 10.925
[info]   CI (99.9%): [≈ 0, 48.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 17.000), stdev = 6.058
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce
[info] # Run progress: 76.29% complete, ETA 00:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354525.829 ops/s
[info] # Warmup Iteration   2: 491920.423 ops/s
[info] # Warmup Iteration   3: 509571.363 ops/s
[info] # Warmup Iteration   4: 509486.059 ops/s
[info] # Warmup Iteration   5: 504343.593 ops/s
[info] Iteration   1: 520035.096 ops/s
[info]                  ·gc.alloc.rate:            1257.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3090.593 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 519395.412 ops/s
[info]                  ·gc.alloc.rate:                                  1256.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4125.852 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 519842.687 ops/s
[info]                  ·gc.alloc.rate:            1257.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4122.376 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 520192.478 ops/s
[info]                  ·gc.alloc.rate:            1258.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3089.613 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 516257.470 ops/s
[info]                  ·gc.alloc.rate:            1248.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4150.991 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce":
[info]   519144.629 ±(99.9%) 6320.448 ops/s [Average]
[info]   (min, avg, max) = (516257.470, 519144.629, 520192.478), stdev = 1641.400
[info]   CI (99.9%): [512824.180, 525465.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate":
[info]   1255.823 ±(99.9%) 15.101 MB/sec [Average]
[info]   (min, avg, max) = (1248.931, 1255.823, 1258.482), stdev = 3.922
[info]   CI (99.9%): [1240.722, 1270.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm":
[info]   3808.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3808.001, 3808.001, 3808.001), stdev = 0.001
[info]   CI (99.9%): [3808.001, 3808.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1225.186 ±(99.9%) 718.003 MB/sec [Average]
[info]   (min, avg, max) = (1020.786, 1225.186, 1361.423), stdev = 186.463
[info]   CI (99.9%): [507.184, 1943.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3715.885 ±(99.9%) 2200.123 B/op [Average]
[info]   (min, avg, max) = (3089.613, 3715.885, 4150.991), stdev = 571.365
[info]   CI (99.9%): [1515.762, 5916.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson
[info] # Run progress: 77.32% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 577880.018 ops/s
[info] # Warmup Iteration   2: 940451.344 ops/s
[info] # Warmup Iteration   3: 959285.003 ops/s
[info] # Warmup Iteration   4: 961992.119 ops/s
[info] # Warmup Iteration   5: 973855.856 ops/s
[info] Iteration   1: 973332.746 ops/s
[info]                  ·gc.alloc.rate:                   657.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1086.741 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 967381.335 ops/s
[info]                  ·gc.alloc.rate:                   653.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1092.419 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 961759.177 ops/s
[info]                  ·gc.alloc.rate:            650.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1099.908 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 959162.849 ops/s
[info]                  ·gc.alloc.rate:                   648.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1108.361 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 977383.924 ops/s
[info]                  ·gc.alloc.rate:                                  660.667 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1096.216 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson":
[info]   967804.006 ±(99.9%) 29434.766 ops/s [Average]
[info]   (min, avg, max) = (959162.849, 967804.006, 977383.924), stdev = 7644.115
[info]   CI (99.9%): [938369.240, 997238.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate":
[info]   654.164 ±(99.9%) 19.749 MB/sec [Average]
[info]   (min, avg, max) = (648.413, 654.164, 660.667), stdev = 5.129
[info]   CI (99.9%): [634.414, 673.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.040 ±(99.9%) 0.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.202), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   674.264 ±(99.9%) 15.151 MB/sec [Average]
[info]   (min, avg, max) = (671.319, 674.264, 680.671), stdev = 3.935
[info]   CI (99.9%): [659.113, 689.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1096.729 ±(99.9%) 31.283 B/op [Average]
[info]   (min, avg, max) = (1086.741, 1096.729, 1108.361), stdev = 8.124
[info]   CI (99.9%): [1065.446, 1128.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.962 ±(99.9%) 12.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.962, 7.651), stdev = 3.226
[info]   CI (99.9%): [≈ 0, 14.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.000, 13.000), stdev = 3.674
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter
[info] # Run progress: 78.35% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3757735.346 ops/s
[info] # Warmup Iteration   2: 4395484.562 ops/s
[info] # Warmup Iteration   3: 4396504.918 ops/s
[info] # Warmup Iteration   4: 4330019.521 ops/s
[info] # Warmup Iteration   5: 4321805.504 ops/s
[info] Iteration   1: 4356371.150 ops/s
[info]                  ·gc.alloc.rate:            774.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243.065 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4221107.549 ops/s
[info]                  ·gc.alloc.rate:                   751.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        250.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 4385988.483 ops/s
[info]                  ·gc.alloc.rate:                                  780.214 MB/sec
[info]                  ·gc.alloc.rate.norm:                             280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       366.444 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 4453632.107 ops/s
[info]                  ·gc.alloc.rate:            792.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 240.560 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 4434894.900 ops/s
[info]                  ·gc.alloc.rate:            788.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241.584 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter":
[info]   4370398.838 ±(99.9%) 354045.828 ops/s [Average]
[info]   (min, avg, max) = (4221107.549, 4370398.838, 4453632.107), stdev = 91944.577
[info]   CI (99.9%): [4016353.009, 4724444.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate":
[info]   777.461 ±(99.9%) 62.719 MB/sec [Average]
[info]   (min, avg, max) = (751.031, 777.461, 792.214), stdev = 16.288
[info]   CI (99.9%): [714.741, 840.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm":
[info]   280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (280.000, 280.000, 280.000), stdev = 0.001
[info]   CI (99.9%): [280.000, 280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.123), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   745.582 ±(99.9%) 593.244 MB/sec [Average]
[info]   (min, avg, max) = (672.715, 745.582, 1021.089), stdev = 154.064
[info]   CI (99.9%): [152.337, 1338.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   268.498 ±(99.9%) 211.410 B/op [Average]
[info]   (min, avg, max) = (240.560, 268.498, 366.444), stdev = 54.902
[info]   CI (99.9%): [57.089, 479.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.298 ±(99.9%) 2.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.298, 1.490), stdev = 0.666
[info]   CI (99.9%): [≈ 0, 2.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 11.000), stdev = 4.266
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay
[info] # Run progress: 79.38% complete, ETA 00:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140700.712 ops/s
[info] # Warmup Iteration   2: 286473.900 ops/s
[info] # Warmup Iteration   3: 284673.495 ops/s
[info] # Warmup Iteration   4: 293400.051 ops/s
[info] # Warmup Iteration   5: 290188.729 ops/s
[info] Iteration   1: 293076.758 ops/s
[info]                  ·gc.alloc.rate:                   1002.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5437.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 297023.769 ops/s
[info]                  ·gc.alloc.rate:                                  1015.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5410.944 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 293205.538 ops/s
[info]                  ·gc.alloc.rate:            1003.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5481.652 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 297440.981 ops/s
[info]                  ·gc.alloc.rate:                                  1017.410 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5403.414 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 296562.177 ops/s
[info]                  ·gc.alloc.rate:                                  1014.162 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5419.335 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay":
[info]   295461.844 ±(99.9%) 8246.780 ops/s [Average]
[info]   (min, avg, max) = (293076.758, 295461.844, 297440.981), stdev = 2141.662
[info]   CI (99.9%): [287215.065, 303708.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate":
[info]   1010.566 ±(99.9%) 28.163 MB/sec [Average]
[info]   (min, avg, max) = (1002.297, 1010.566, 1017.410), stdev = 7.314
[info]   CI (99.9%): [982.404, 1038.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.002), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.070 ±(99.9%) 0.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.338), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.273 ±(99.9%) 15.172 MB/sec [Average]
[info]   (min, avg, max) = (1012.229, 1019.273, 1021.214), stdev = 3.940
[info]   CI (99.9%): [1004.101, 1034.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5430.540 ±(99.9%) 120.302 B/op [Average]
[info]   (min, avg, max) = (5403.414, 5430.540, 5481.652), stdev = 31.242
[info]   CI (99.9%): [5310.238, 5550.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.293 ±(99.9%) 36.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.293, 21.463), stdev = 9.599
[info]   CI (99.9%): [≈ 0, 41.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce
[info] # Run progress: 80.41% complete, ETA 00:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130493.377 ops/s
[info] # Warmup Iteration   2: 281324.172 ops/s
[info] # Warmup Iteration   3: 289574.579 ops/s
[info] # Warmup Iteration   4: 287538.259 ops/s
[info] # Warmup Iteration   5: 290613.446 ops/s
[info] Iteration   1: 289949.962 ops/s
[info]                  ·gc.alloc.rate:            798.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3651.975 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 289613.823 ops/s
[info]                  ·gc.alloc.rate:                   797.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5484.241 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 294893.309 ops/s
[info]                  ·gc.alloc.rate:                                  812.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3629.939 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.555 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 297012.653 ops/s
[info]                  ·gc.alloc.rate:                                  818.268 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5410.470 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 298710.077 ops/s
[info]                  ·gc.alloc.rate:            822.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3586.915 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce":
[info]   294035.965 ±(99.9%) 15840.825 ops/s [Average]
[info]   (min, avg, max) = (289613.823, 294035.965, 298710.077), stdev = 4113.812
[info]   CI (99.9%): [278195.140, 309876.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate":
[info]   809.972 ±(99.9%) 43.728 MB/sec [Average]
[info]   (min, avg, max) = (797.811, 809.972, 822.844), stdev = 11.356
[info]   CI (99.9%): [766.244, 853.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.235), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen":
[info]   812.697 ±(99.9%) 711.625 MB/sec [Average]
[info]   (min, avg, max) = (672.662, 812.697, 1021.037), stdev = 184.807
[info]   CI (99.9%): [101.072, 1524.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4352.708 ±(99.9%) 3850.205 B/op [Average]
[info]   (min, avg, max) = (3586.915, 4352.708, 5484.241), stdev = 999.886
[info]   CI (99.9%): [502.503, 8202.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.331 ±(99.9%) 30.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.331, 18.100), stdev = 7.849
[info]   CI (99.9%): [≈ 0, 34.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.380
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson
[info] # Run progress: 81.44% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94968.270 ops/s
[info] # Warmup Iteration   2: 542074.997 ops/s
[info] # Warmup Iteration   3: 546767.432 ops/s
[info] # Warmup Iteration   4: 538813.759 ops/s
[info] # Warmup Iteration   5: 543632.056 ops/s
[info] Iteration   1: 540963.039 ops/s
[info]                  ·gc.alloc.rate:                   849.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2932.269 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.938 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 541787.418 ops/s
[info]                  ·gc.alloc.rate:                   850.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1950.547 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 550596.130 ops/s
[info]                  ·gc.alloc.rate:                                  864.701 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.245 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.700 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2917.091 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.904 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 549387.693 ops/s
[info]                  ·gc.alloc.rate:                                  862.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1950.278 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 549894.393 ops/s
[info]                  ·gc.alloc.rate:                                  863.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2922.758 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson":
[info]   546525.734 ±(99.9%) 18214.606 ops/s [Average]
[info]   (min, avg, max) = (540963.039, 546525.734, 550596.130), stdev = 4730.275
[info]   CI (99.9%): [528311.129, 564740.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate":
[info]   858.272 ±(99.9%) 28.873 MB/sec [Average]
[info]   (min, avg, max) = (849.511, 858.272, 864.701), stdev = 7.498
[info]   CI (99.9%): [829.399, 887.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.050 ±(99.9%) 0.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.245), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.142 ±(99.9%) 1.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.700), stdev = 0.312
[info]   CI (99.9%): [≈ 0, 1.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen":
[info]   880.239 ±(99.9%) 718.536 MB/sec [Average]
[info]   (min, avg, max) = (671.253, 880.239, 1021.229), stdev = 186.601
[info]   CI (99.9%): [161.703, 1598.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2534.589 ±(99.9%) 2053.567 B/op [Average]
[info]   (min, avg, max) = (1950.278, 2534.589, 2932.269), stdev = 533.305
[info]   CI (99.9%): [481.022, 4588.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.436 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.091 ±(99.9%) 18.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.091, 11.610), stdev = 4.859
[info]   CI (99.9%): [≈ 0, 21.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 6.656
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter
[info] # Run progress: 82.47% complete, ETA 00:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2296369.099 ops/s
[info] # Warmup Iteration   2: 2555469.151 ops/s
[info] # Warmup Iteration   3: 2546950.036 ops/s
[info] # Warmup Iteration   4: 2541215.158 ops/s
[info] # Warmup Iteration   5: 2557965.429 ops/s
[info] Iteration   1: 2530520.090 ops/s
[info]                  ·gc.alloc.rate:            527.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 418.444 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2566609.817 ops/s
[info]                  ·gc.alloc.rate:            534.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 206.280 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2523593.450 ops/s
[info]                  ·gc.alloc.rate:            525.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 419.582 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 2542293.841 ops/s
[info]                  ·gc.alloc.rate:            529.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 416.494 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 2532573.665 ops/s
[info]                  ·gc.alloc.rate:                   527.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        209.059 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.484 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter":
[info]   2539118.172 ±(99.9%) 64538.503 ops/s [Average]
[info]   (min, avg, max) = (2523593.450, 2539118.172, 2566609.817), stdev = 16760.444
[info]   CI (99.9%): [2474579.669, 2603656.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate":
[info]   529.108 ±(99.9%) 13.592 MB/sec [Average]
[info]   (min, avg, max) = (525.814, 529.108, 534.881), stdev = 3.530
[info]   CI (99.9%): [515.516, 542.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm":
[info]   328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (328.000, 328.000, 328.000), stdev = 0.001
[info]   CI (99.9%): [328.000, 328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.161 ±(99.9%) 709.241 MB/sec [Average]
[info]   (min, avg, max) = (336.388, 538.161, 672.746), stdev = 184.188
[info]   CI (99.9%): [≈ 0, 1247.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   333.972 ±(99.9%) 444.007 B/op [Average]
[info]   (min, avg, max) = (206.280, 333.972, 419.582), stdev = 115.307
[info]   CI (99.9%): [≈ 0, 777.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.497 ±(99.9%) 4.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.497, 2.484), stdev = 1.111
[info]   CI (99.9%): [≈ 0, 4.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.600, 14.000), stdev = 3.507
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay
[info] # Run progress: 83.51% complete, ETA 00:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83388.136 ops/s
[info] # Warmup Iteration   2: 240105.307 ops/s
[info] # Warmup Iteration   3: 242631.880 ops/s
[info] # Warmup Iteration   4: 242974.117 ops/s
[info] # Warmup Iteration   5: 241265.608 ops/s
[info] Iteration   1: 242392.194 ops/s
[info]                  ·gc.alloc.rate:            875.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6552.681 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 242931.989 ops/s
[info]                  ·gc.alloc.rate:                   878.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4380.467 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 247214.258 ops/s
[info]                  ·gc.alloc.rate:                                  893.420 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.203 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6501.252 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 246729.148 ops/s
[info]                  ·gc.alloc.rate:            891.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4342.792 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 247355.275 ops/s
[info]                  ·gc.alloc.rate:            893.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6497.520 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay":
[info]   245324.573 ±(99.9%) 9430.304 ops/s [Average]
[info]   (min, avg, max) = (242392.194, 245324.573, 247355.275), stdev = 2449.020
[info]   CI (99.9%): [235894.269, 254754.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate":
[info]   886.545 ±(99.9%) 33.941 MB/sec [Average]
[info]   (min, avg, max) = (875.928, 886.545, 893.807), stdev = 8.814
[info]   CI (99.9%): [852.604, 920.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm":
[info]   5688.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.002, 5688.002, 5688.002), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.203), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.258 ±(99.9%) 2.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.290), stdev = 0.577
[info]   CI (99.9%): [≈ 0, 2.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.628 ±(99.9%) 714.506 MB/sec [Average]
[info]   (min, avg, max) = (676.175, 881.628, 1021.158), stdev = 185.555
[info]   CI (99.9%): [167.123, 1596.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5654.942 ±(99.9%) 4547.241 B/op [Average]
[info]   (min, avg, max) = (4342.792, 5654.942, 6552.681), stdev = 1180.904
[info]   CI (99.9%): [1107.702, 10202.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.179 ±(99.9%) 44.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.179, 25.894), stdev = 11.580
[info]   CI (99.9%): [≈ 0, 49.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.958
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce
[info] # Run progress: 84.54% complete, ETA 00:04:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362358.876 ops/s
[info] # Warmup Iteration   2: 487013.130 ops/s
[info] # Warmup Iteration   3: 483032.206 ops/s
[info] # Warmup Iteration   4: 489217.171 ops/s
[info] # Warmup Iteration   5: 490074.226 ops/s
[info] Iteration   1: 504555.997 ops/s
[info]                  ·gc.alloc.rate:                                  1169.226 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3648.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.175 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3185.342 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 501255.063 ops/s
[info]                  ·gc.alloc.rate:            1161.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       3648.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3206.322 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 495405.177 ops/s
[info]                  ·gc.alloc.rate:            1148.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       3648.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4325.578 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 490464.632 ops/s
[info]                  ·gc.alloc.rate:            1136.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       3648.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3276.894 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 494222.900 ops/s
[info]                  ·gc.alloc.rate:            1145.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       3648.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3251.829 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce":
[info]   497180.754 ±(99.9%) 21782.707 ops/s [Average]
[info]   (min, avg, max) = (490464.632, 497180.754, 504555.997), stdev = 5656.900
[info]   CI (99.9%): [475398.047, 518963.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate":
[info]   1152.296 ±(99.9%) 50.100 MB/sec [Average]
[info]   (min, avg, max) = (1136.900, 1152.296, 1169.226), stdev = 13.011
[info]   CI (99.9%): [1102.197, 1202.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   3648.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3648.001, 3648.001, 3648.001), stdev = 0.001
[info]   CI (99.9%): [3648.001, 3648.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.175), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.109 ±(99.9%) 0.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.546), stdev = 0.244
[info]   CI (99.9%): [≈ 0, 1.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1089.156 ±(99.9%) 586.370 MB/sec [Average]
[info]   (min, avg, max) = (1020.939, 1089.156, 1361.559), stdev = 152.278
[info]   CI (99.9%): [502.786, 1675.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3449.193 ±(99.9%) 1891.617 B/op [Average]
[info]   (min, avg, max) = (3185.342, 3449.193, 4325.578), stdev = 491.247
[info]   CI (99.9%): [1557.576, 5340.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson
[info] # Run progress: 85.57% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 641868.005 ops/s
[info] # Warmup Iteration   2: 1135552.431 ops/s
[info] # Warmup Iteration   3: 1123133.191 ops/s
[info] # Warmup Iteration   4: 1126804.377 ops/s
[info] # Warmup Iteration   5: 1133220.797 ops/s
[info] Iteration   1: 1133596.654 ops/s
[info]                  ·gc.alloc.rate:            564.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 933.163 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1132681.193 ops/s
[info]                  ·gc.alloc.rate:            564.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1112118.230 ops/s
[info]                  ·gc.alloc.rate:            553.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 475.103 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1123336.828 ops/s
[info]                  ·gc.alloc.rate:            559.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 940.731 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   5: 1114432.282 ops/s
[info]                  ·gc.alloc.rate:                   555.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        952.991 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson":
[info]   1123233.037 ±(99.9%) 38394.377 ops/s [Average]
[info]   (min, avg, max) = (1112118.230, 1123233.037, 1133596.654), stdev = 9970.898
[info]   CI (99.9%): [1084838.660, 1161627.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate":
[info]   559.448 ±(99.9%) 19.005 MB/sec [Average]
[info]   (min, avg, max) = (553.970, 559.448, 564.561), stdev = 4.935
[info]   CI (99.9%): [540.443, 578.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm":
[info]   784.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (784.000, 784.000, 784.000), stdev = 0.001
[info]   CI (99.9%): [784.000, 784.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   605.019 ±(99.9%) 579.742 MB/sec [Average]
[info]   (min, avg, max) = (335.705, 605.019, 674.695), stdev = 150.557
[info]   CI (99.9%): [25.276, 1184.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   846.997 ±(99.9%) 801.143 B/op [Average]
[info]   (min, avg, max) = (475.103, 846.997, 952.991), stdev = 208.054
[info]   CI (99.9%): [45.853, 1648.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.317 ±(99.9%) 11.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.317, 6.585), stdev = 2.945
[info]   CI (99.9%): [≈ 0, 12.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.600, 13.000), stdev = 3.050
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter
[info] # Run progress: 86.60% complete, ETA 00:03:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4077270.552 ops/s
[info] # Warmup Iteration   2: 4375827.348 ops/s
[info] # Warmup Iteration   3: 4348466.316 ops/s
[info] # Warmup Iteration   4: 4346924.359 ops/s
[info] # Warmup Iteration   5: 4373003.715 ops/s
[info] Iteration   1: 4404668.826 ops/s
[info]                  ·gc.alloc.rate:            604.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 240.394 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4324200.244 ops/s
[info]                  ·gc.alloc.rate:            593.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244.872 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4368274.022 ops/s
[info]                  ·gc.alloc.rate:            599.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242.390 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4329603.492 ops/s
[info]                  ·gc.alloc.rate:                   594.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        122.274 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.453 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4376412.328 ops/s
[info]                  ·gc.alloc.rate:            600.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244.821 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter":
[info]   4360631.783 ±(99.9%) 129680.152 ops/s [Average]
[info]   (min, avg, max) = (4324200.244, 4360631.783, 4404668.826), stdev = 33677.524
[info]   CI (99.9%): [4230951.630, 4490311.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate":
[info]   598.380 ±(99.9%) 17.559 MB/sec [Average]
[info]   (min, avg, max) = (593.437, 598.380, 604.302), stdev = 4.560
[info]   CI (99.9%): [580.821, 615.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   216.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (216.000, 216.000, 216.000), stdev = 0.001
[info]   CI (99.9%): [216.000, 216.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   607.004 ±(99.9%) 582.761 MB/sec [Average]
[info]   (min, avg, max) = (336.349, 607.004, 680.724), stdev = 151.341
[info]   CI (99.9%): [24.243, 1189.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   218.950 ±(99.9%) 208.226 B/op [Average]
[info]   (min, avg, max) = (122.274, 218.950, 244.872), stdev = 54.076
[info]   CI (99.9%): [10.724, 427.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.291 ±(99.9%) 2.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.453), stdev = 0.650
[info]   CI (99.9%): [≈ 0, 2.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 11.000), stdev = 3.362
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay
[info] # Run progress: 87.63% complete, ETA 00:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118136.098 ops/s
[info] # Warmup Iteration   2: 275894.389 ops/s
[info] # Warmup Iteration   3: 273240.585 ops/s
[info] # Warmup Iteration   4: 277525.797 ops/s
[info] # Warmup Iteration   5: 278745.924 ops/s
[info] Iteration   1: 281375.718 ops/s
[info]                  ·gc.alloc.rate:                   950.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5644.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 286126.757 ops/s
[info]                  ·gc.alloc.rate:                                  966.996 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5613.393 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.664 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 286401.493 ops/s
[info]                  ·gc.alloc.rate:            967.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3740.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 287285.166 ops/s
[info]                  ·gc.alloc.rate:            971.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5594.400 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 285763.732 ops/s
[info]                  ·gc.alloc.rate:            965.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5624.191 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay":
[info]   285390.573 ±(99.9%) 8909.002 ops/s [Average]
[info]   (min, avg, max) = (281375.718, 285390.573, 287285.166), stdev = 2313.640
[info]   CI (99.9%): [276481.571, 294299.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate":
[info]   964.562 ±(99.9%) 30.245 MB/sec [Average]
[info]   (min, avg, max) = (950.940, 964.562, 971.053), stdev = 7.855
[info]   CI (99.9%): [934.317, 994.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   5320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5320.001, 5320.001, 5320.002), stdev = 0.001
[info]   CI (99.9%): [5320.001, 5320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.232), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   950.448 ±(99.9%) 581.096 MB/sec [Average]
[info]   (min, avg, max) = (680.651, 950.448, 1021.138), stdev = 150.909
[info]   CI (99.9%): [369.352, 1531.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5243.579 ±(99.9%) 3235.196 B/op [Average]
[info]   (min, avg, max) = (3740.992, 5243.579, 5644.917), stdev = 840.170
[info]   CI (99.9%): [2008.383, 8478.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.459 ±(99.9%) 31.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.459, 18.630), stdev = 8.079
[info]   CI (99.9%): [≈ 0, 35.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 5.550
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce
[info] # Run progress: 88.66% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116067.246 ops/s
[info] # Warmup Iteration   2: 271033.904 ops/s
[info] # Warmup Iteration   3: 286898.861 ops/s
[info] # Warmup Iteration   4: 289641.216 ops/s
[info] # Warmup Iteration   5: 286928.389 ops/s
[info] Iteration   1: 288133.867 ops/s
[info]                  ·gc.alloc.rate:            784.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       4288.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3674.963 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 287796.026 ops/s
[info]                  ·gc.alloc.rate:            784.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       4288.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3679.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 289080.844 ops/s
[info]                  ·gc.alloc.rate:                                  787.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4288.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5534.282 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.760 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 291095.608 ops/s
[info]                  ·gc.alloc.rate:                                  793.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4288.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3680.730 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 288963.237 ops/s
[info]                  ·gc.alloc.rate:            787.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       4288.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3708.036 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce":
[info]   289013.916 ±(99.9%) 4945.579 ops/s [Average]
[info]   (min, avg, max) = (287796.026, 289013.916, 291095.608), stdev = 1284.351
[info]   CI (99.9%): [284068.337, 293959.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate":
[info]   787.377 ±(99.9%) 13.482 MB/sec [Average]
[info]   (min, avg, max) = (784.191, 787.377, 793.087), stdev = 3.501
[info]   CI (99.9%): [773.895, 800.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm":
[info]   4288.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4288.001, 4288.001, 4288.002), stdev = 0.001
[info]   CI (99.9%): [4288.001, 4288.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.070 ±(99.9%) 0.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.228), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen":
[info]   744.685 ±(99.9%) 585.124 MB/sec [Average]
[info]   (min, avg, max) = (672.669, 744.685, 1016.416), stdev = 151.955
[info]   CI (99.9%): [159.562, 1329.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4055.430 ±(99.9%) 3183.738 B/op [Average]
[info]   (min, avg, max) = (3674.963, 4055.430, 5534.282), stdev = 826.807
[info]   CI (99.9%): [871.691, 7239.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.352 ±(99.9%) 37.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.352, 21.760), stdev = 9.731
[info]   CI (99.9%): [≈ 0, 41.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.722
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson
[info] # Run progress: 89.69% complete, ETA 00:02:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111917.634 ops/s
[info] # Warmup Iteration   2: 560461.201 ops/s
[info] # Warmup Iteration   3: 561676.128 ops/s
[info] # Warmup Iteration   4: 572788.494 ops/s
[info] # Warmup Iteration   5: 565201.284 ops/s
[info] Iteration   1: 568046.435 ops/s
[info]                  ·gc.alloc.rate:            923.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2790.641 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 562324.928 ops/s
[info]                  ·gc.alloc.rate:                                  914.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.238 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.666 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2843.180 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.051 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 563040.486 ops/s
[info]                  ·gc.alloc.rate:                                  915.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1902.893 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 560296.517 ops/s
[info]                  ·gc.alloc.rate:            911.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2868.469 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 571874.173 ops/s
[info]                  ·gc.alloc.rate:            929.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2810.390 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson":
[info]   565116.508 ±(99.9%) 18223.109 ops/s [Average]
[info]   (min, avg, max) = (560296.517, 565116.508, 571874.173), stdev = 4732.484
[info]   CI (99.9%): [546893.399, 583339.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate":
[info]   918.991 ±(99.9%) 29.699 MB/sec [Average]
[info]   (min, avg, max) = (911.101, 918.991, 929.957), stdev = 7.713
[info]   CI (99.9%): [889.291, 948.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2560.001, 2560.001, 2560.001), stdev = 0.001
[info]   CI (99.9%): [2560.001, 2560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.058 ±(99.9%) 0.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.238), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.163 ±(99.9%) 1.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.163, 0.666), stdev = 0.288
[info]   CI (99.9%): [≈ 0, 1.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   948.998 ±(99.9%) 577.891 MB/sec [Average]
[info]   (min, avg, max) = (680.725, 948.998, 1020.915), stdev = 150.076
[info]   CI (99.9%): [371.108, 1526.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2643.115 ±(99.9%) 1597.534 B/op [Average]
[info]   (min, avg, max) = (1902.893, 2643.115, 2868.469), stdev = 414.875
[info]   CI (99.9%): [1045.580, 4240.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.610 ±(99.9%) 22.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.610, 13.051), stdev = 5.836
[info]   CI (99.9%): [≈ 0, 25.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 19.000), stdev = 6.943
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter
[info] # Run progress: 90.72% complete, ETA 00:02:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1750902.635 ops/s
[info] # Warmup Iteration   2: 1959046.924 ops/s
[info] # Warmup Iteration   3: 1992369.780 ops/s
[info] # Warmup Iteration   4: 1994107.125 ops/s
[info] # Warmup Iteration   5: 2005087.517 ops/s
[info] Iteration   1: 1974686.380 ops/s
[info]                  ·gc.alloc.rate:            511.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 536.210 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 1984991.231 ops/s
[info]                  ·gc.alloc.rate:            514.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 266.722 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1797340.518 ops/s
[info]                  ·gc.alloc.rate:            465.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 294.563 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1985602.163 ops/s
[info]                  ·gc.alloc.rate:            515.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.051 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 1980233.563 ops/s
[info]                  ·gc.alloc.rate:                   513.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        534.730 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter":
[info]   1944570.771 ±(99.9%) 317374.132 ops/s [Average]
[info]   (min, avg, max) = (1797340.518, 1944570.771, 1985602.163), stdev = 82421.054
[info]   CI (99.9%): [1627196.639, 2261944.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate":
[info]   504.139 ±(99.9%) 82.557 MB/sec [Average]
[info]   (min, avg, max) = (465.857, 504.139, 515.140), stdev = 21.440
[info]   CI (99.9%): [421.582, 586.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   537.978 ±(99.9%) 708.702 MB/sec [Average]
[info]   (min, avg, max) = (336.334, 537.978, 672.845), stdev = 184.048
[info]   CI (99.9%): [≈ 0, 1246.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   432.855 ±(99.9%) 536.420 B/op [Average]
[info]   (min, avg, max) = (266.722, 432.855, 536.210), stdev = 139.307
[info]   CI (99.9%): [≈ 0, 969.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.529 ±(99.9%) 4.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.529, 2.647), stdev = 1.184
[info]   CI (99.9%): [≈ 0, 5.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 12.000), stdev = 3.421
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay
[info] # Run progress: 91.75% complete, ETA 00:02:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78726.734 ops/s
[info] # Warmup Iteration   2: 224137.358 ops/s
[info] # Warmup Iteration   3: 224750.285 ops/s
[info] # Warmup Iteration   4: 228332.661 ops/s
[info] # Warmup Iteration   5: 220698.696 ops/s
[info] Iteration   1: 228484.254 ops/s
[info]                  ·gc.alloc.rate:            862.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       5944.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4634.539 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 227499.875 ops/s
[info]                  ·gc.alloc.rate:                   859.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              5944.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7004.516 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 228180.837 ops/s
[info]                  ·gc.alloc.rate:                                  861.653 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5944.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.170 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4695.603 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 230705.211 ops/s
[info]                  ·gc.alloc.rate:                                  871.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5944.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6964.490 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 229529.219 ops/s
[info]                  ·gc.alloc.rate:            866.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       5944.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4668.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay":
[info]   228879.879 ±(99.9%) 4833.697 ops/s [Average]
[info]   (min, avg, max) = (227499.875, 228879.879, 230705.211), stdev = 1255.296
[info]   CI (99.9%): [224046.182, 233713.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate":
[info]   864.287 ±(99.9%) 18.521 MB/sec [Average]
[info]   (min, avg, max) = (859.029, 864.287, 871.277), stdev = 4.810
[info]   CI (99.9%): [845.766, 882.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm":
[info]   5944.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5944.002, 5944.002, 5944.002), stdev = 0.001
[info]   CI (99.9%): [5944.002, 5944.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.238 ±(99.9%) 2.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.238, 1.171), stdev = 0.522
[info]   CI (99.9%): [≈ 0, 2.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   813.445 ±(99.9%) 714.251 MB/sec [Average]
[info]   (min, avg, max) = (672.610, 813.445, 1020.861), stdev = 185.489
[info]   CI (99.9%): [99.193, 1527.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5593.477 ±(99.9%) 4890.666 B/op [Average]
[info]   (min, avg, max) = (4634.539, 5593.477, 7004.516), stdev = 1270.090
[info]   CI (99.9%): [702.811, 10484.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.530 ±(99.9%) 47.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.530, 27.649), stdev = 12.365
[info]   CI (99.9%): [≈ 0, 53.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 14.000), stdev = 5.568
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce
[info] # Run progress: 92.78% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342619.933 ops/s
[info] # Warmup Iteration   2: 508772.837 ops/s
[info] # Warmup Iteration   3: 518283.927 ops/s
[info] # Warmup Iteration   4: 521894.288 ops/s
[info] # Warmup Iteration   5: 519674.433 ops/s
[info] Iteration   1: 513653.454 ops/s
[info]                  ·gc.alloc.rate:                   897.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3092.314 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 517208.076 ops/s
[info]                  ·gc.alloc.rate:            904.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2071.656 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 525586.880 ops/s
[info]                  ·gc.alloc.rate:                                  918.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3057.771 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 519106.719 ops/s
[info]                  ·gc.alloc.rate:                                  907.737 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3095.974 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 521601.761 ops/s
[info]                  ·gc.alloc.rate:            911.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3081.257 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce":
[info]   519431.378 ±(99.9%) 17331.496 ops/s [Average]
[info]   (min, avg, max) = (513653.454, 519431.378, 525586.880), stdev = 4500.935
[info]   CI (99.9%): [502099.882, 536762.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate":
[info]   908.075 ±(99.9%) 30.417 MB/sec [Average]
[info]   (min, avg, max) = (897.822, 908.075, 918.772), stdev = 7.899
[info]   CI (99.9%): [877.658, 938.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm":
[info]   2752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2752.001, 2752.001, 2752.001), stdev = 0.001
[info]   CI (99.9%): [2752.001, 2752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.123), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   950.504 ±(99.9%) 581.276 MB/sec [Average]
[info]   (min, avg, max) = (680.631, 950.504, 1021.196), stdev = 150.956
[info]   CI (99.9%): [369.227, 1531.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2879.794 ±(99.9%) 1740.526 B/op [Average]
[info]   (min, avg, max) = (2071.656, 2879.794, 3095.974), stdev = 452.009
[info]   CI (99.9%): [1139.268, 4620.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.449 ±(99.9%) 21.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.449, 12.247), stdev = 5.477
[info]   CI (99.9%): [≈ 0, 23.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 17.000), stdev = 5.814
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson
[info] # Run progress: 93.81% complete, ETA 00:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 882706.522 ops/s
[info] # Warmup Iteration   2: 1328217.850 ops/s
[info] # Warmup Iteration   3: 1293751.281 ops/s
[info] # Warmup Iteration   4: 1319829.047 ops/s
[info] # Warmup Iteration   5: 1282297.435 ops/s
[info] Iteration   1: 1312926.060 ops/s
[info]                  ·gc.alloc.rate:            540.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 806.445 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 1316029.325 ops/s
[info]                  ·gc.alloc.rate:            541.888 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 402.300 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1339948.451 ops/s
[info]                  ·gc.alloc.rate:            551.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 790.230 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1322495.190 ops/s
[info]                  ·gc.alloc.rate:            544.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 800.663 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 1328481.674 ops/s
[info]                  ·gc.alloc.rate:                   546.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        398.530 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.946 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson":
[info]   1323976.140 ±(99.9%) 41421.900 ops/s [Average]
[info]   (min, avg, max) = (1312926.060, 1323976.140, 1339948.451), stdev = 10757.136
[info]   CI (99.9%): [1282554.240, 1365398.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate":
[info]   545.063 ±(99.9%) 16.937 MB/sec [Average]
[info]   (min, avg, max) = (540.485, 545.063, 551.579), stdev = 4.398
[info]   CI (99.9%): [528.126, 562.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   538.155 ±(99.9%) 709.211 MB/sec [Average]
[info]   (min, avg, max) = (336.371, 538.155, 672.698), stdev = 184.180
[info]   CI (99.9%): [≈ 0, 1247.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   639.633 ±(99.9%) 841.201 B/op [Average]
[info]   (min, avg, max) = (398.530, 639.633, 806.445), stdev = 218.457
[info]   CI (99.9%): [≈ 0, 1480.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.789 ±(99.9%) 6.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.789, 3.946), stdev = 1.765
[info]   CI (99.9%): [≈ 0, 7.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 12.000), stdev = 3.130
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter
[info] # Run progress: 94.85% complete, ETA 00:01:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3607247.461 ops/s
[info] # Warmup Iteration   2: 4097082.809 ops/s
[info] # Warmup Iteration   3: 4114146.174 ops/s
[info] # Warmup Iteration   4: 4086565.907 ops/s
[info] # Warmup Iteration   5: 4113450.535 ops/s
[info] Iteration   1: 4086498.260 ops/s
[info]                  ·gc.alloc.rate:            456.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 259.111 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4141761.067 ops/s
[info]                  ·gc.alloc.rate:            463.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 127.831 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4064133.592 ops/s
[info]                  ·gc.alloc.rate:            454.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.270 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4020921.841 ops/s
[info]                  ·gc.alloc.rate:            449.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 263.353 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 4108700.042 ops/s
[info]                  ·gc.alloc.rate:            459.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.860 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter":
[info]   4084402.960 ±(99.9%) 175673.267 ops/s [Average]
[info]   (min, avg, max) = (4020921.841, 4084402.960, 4141761.067), stdev = 45621.790
[info]   CI (99.9%): [3908729.694, 4260076.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate":
[info]   456.686 ±(99.9%) 19.607 MB/sec [Average]
[info]   (min, avg, max) = (449.605, 456.686, 463.089), stdev = 5.092
[info]   CI (99.9%): [437.078, 476.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.877 ±(99.9%) 709.161 MB/sec [Average]
[info]   (min, avg, max) = (336.346, 470.877, 672.754), stdev = 184.167
[info]   CI (99.9%): [≈ 0, 1180.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   181.885 ±(99.9%) 278.996 B/op [Average]
[info]   (min, avg, max) = (127.831, 181.885, 263.353), stdev = 72.454
[info]   CI (99.9%): [≈ 0, 460.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay
[info] # Run progress: 95.88% complete, ETA 00:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82356.803 ops/s
[info] # Warmup Iteration   2: 165509.467 ops/s
[info] # Warmup Iteration   3: 168067.632 ops/s
[info] # Warmup Iteration   4: 166307.632 ops/s
[info] # Warmup Iteration   5: 166672.367 ops/s
[info] Iteration   1: 168780.095 ops/s
[info]                  ·gc.alloc.rate:                   1004.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              9368.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9441.594 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 170625.626 ops/s
[info]                  ·gc.alloc.rate:                                  1015.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9368.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.795 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9419.341 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 170456.848 ops/s
[info]                  ·gc.alloc.rate:            1014.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       9368.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9428.180 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 165909.878 ops/s
[info]                  ·gc.alloc.rate:                                  987.459 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9368.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9686.921 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 169476.388 ops/s
[info]                  ·gc.alloc.rate:            1008.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       9368.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9483.581 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay":
[info]   169049.767 ±(99.9%) 7350.807 ops/s [Average]
[info]   (min, avg, max) = (165909.878, 169049.767, 170625.626), stdev = 1908.981
[info]   CI (99.9%): [161698.960, 176400.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate":
[info]   1006.009 ±(99.9%) 43.533 MB/sec [Average]
[info]   (min, avg, max) = (987.459, 1006.009, 1015.285), stdev = 11.305
[info]   CI (99.9%): [962.476, 1049.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm":
[info]   9368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9368.002, 9368.002, 9368.003), stdev = 0.001
[info]   CI (99.9%): [9368.002, 9368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.161 ±(99.9%) 1.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.795), stdev = 0.355
[info]   CI (99.9%): [≈ 0, 1.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.215 ±(99.9%) 15.262 MB/sec [Average]
[info]   (min, avg, max) = (1012.126, 1019.215, 1021.076), stdev = 3.964
[info]   CI (99.9%): [1003.952, 1034.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9491.923 ±(99.9%) 430.334 B/op [Average]
[info]   (min, avg, max) = (9419.341, 9491.923, 9686.921), stdev = 111.756
[info]   CI (99.9%): [9061.589, 9922.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.454 ±(99.9%) 64.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.454, 37.269), stdev = 16.667
[info]   CI (99.9%): [≈ 0, 71.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce
[info] # Run progress: 96.91% complete, ETA 00:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3159.461 ops/s
[info] # Warmup Iteration   2: 5172.430 ops/s
[info] # Warmup Iteration   3: 6330.405 ops/s
[info] # Warmup Iteration   4: 6316.667 ops/s
[info] # Warmup Iteration   5: 6432.693 ops/s
[info] Iteration   1: 6402.346 ops/s
[info]                  ·gc.alloc.rate:            850.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       208992.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248062.561 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 6359.080 ops/s
[info]                  ·gc.alloc.rate:                   844.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              208992.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        250563.672 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 989.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 6477.573 ops/s
[info]                  ·gc.alloc.rate:                                  860.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208992.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       165402.789 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 6480.770 ops/s
[info]                  ·gc.alloc.rate:                                  860.461 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208992.068 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.281 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247989.356 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 6358.288 ops/s
[info]                  ·gc.alloc.rate:                                  844.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208992.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       168497.590 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce":
[info]   6415.611 ±(99.9%) 233.770 ops/s [Average]
[info]   (min, avg, max) = (6358.288, 6415.611, 6480.770), stdev = 60.709
[info]   CI (99.9%): [6181.842, 6649.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate":
[info]   851.864 ±(99.9%) 30.849 MB/sec [Average]
[info]   (min, avg, max) = (844.326, 851.864, 860.461), stdev = 8.011
[info]   CI (99.9%): [821.015, 882.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm":
[info]   208992.067 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (208992.063, 208992.067, 208992.069), stdev = 0.003
[info]   CI (99.9%): [208992.056, 208992.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.070 ±(99.9%) 11.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.070, 6.942), stdev = 3.026
[info]   CI (99.9%): [≈ 0, 13.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   880.756 ±(99.9%) 703.413 MB/sec [Average]
[info]   (min, avg, max) = (680.680, 880.756, 1021.020), stdev = 182.674
[info]   CI (99.9%): [177.343, 1584.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   216103.194 ±(99.9%) 172877.163 B/op [Average]
[info]   (min, avg, max) = (165402.789, 216103.194, 250563.672), stdev = 44895.650
[info]   CI (99.9%): [43226.031, 388980.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   197.813 ±(99.9%) 1703.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 197.813, 989.067), stdev = 442.324
[info]   CI (99.9%): [≈ 0, 1901.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 18.000), stdev = 6.760
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson
[info] # Run progress: 97.94% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11143.684 ops/s
[info] # Warmup Iteration   2: 23557.496 ops/s
[info] # Warmup Iteration   3: 23660.709 ops/s
[info] # Warmup Iteration   4: 23732.557 ops/s
[info] # Warmup Iteration   5: 24171.542 ops/s
[info] Iteration   1: 24070.568 ops/s
[info]                  ·gc.alloc.rate:            323.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       21181.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21952.409 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 24142.417 ops/s
[info]                  ·gc.alloc.rate:            324.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       21180.953 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21885.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 24159.906 ops/s
[info]                  ·gc.alloc.rate:            325.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       21181.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21870.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 24118.952 ops/s
[info]                  ·gc.alloc.rate:            324.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       21181.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21906.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 24112.276 ops/s
[info]                  ·gc.alloc.rate:            324.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       21180.948 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21912.360 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson":
[info]   24120.824 ±(99.9%) 130.523 ops/s [Average]
[info]   (min, avg, max) = (24070.568, 24120.824, 24159.906), stdev = 33.896
[info]   CI (99.9%): [23990.301, 24251.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate":
[info]   324.584 ±(99.9%) 1.801 MB/sec [Average]
[info]   (min, avg, max) = (323.882, 324.584, 325.111), stdev = 0.468
[info]   CI (99.9%): [322.783, 326.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   21181.051 ±(99.9%) 0.419 B/op [Average]
[info]   (min, avg, max) = (21180.948, 21181.051, 21181.189), stdev = 0.109
[info]   CI (99.9%): [21180.632, 21181.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   335.685 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (335.662, 335.685, 335.701), stdev = 0.016
[info]   CI (99.9%): [335.623, 335.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   21905.493 ±(99.9%) 119.911 B/op [Average]
[info]   (min, avg, max) = (21870.647, 21905.493, 21952.409), stdev = 31.141
[info]   CI (99.9%): [21785.582, 22025.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter
[info] # Run progress: 98.97% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27006.802 ops/s
[info] # Warmup Iteration   2: 37699.914 ops/s
[info] # Warmup Iteration   3: 38145.239 ops/s
[info] # Warmup Iteration   4: 38655.677 ops/s
[info] # Warmup Iteration   5: 38037.381 ops/s
[info] Iteration   1: 38331.320 ops/s
[info]                  ·gc.alloc.rate:            257.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       10568.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13812.168 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 38047.259 ops/s
[info]                  ·gc.alloc.rate:            255.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       10568.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13914.883 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 38210.217 ops/s
[info]                  ·gc.alloc.rate:            256.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       10568.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13807.126 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 38226.365 ops/s
[info]                  ·gc.alloc.rate:      256.668 MB/sec
[info]                  ·gc.alloc.rate.norm: 10568.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38042.629 ops/s
[info]                  ·gc.alloc.rate:            255.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       10568.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13917.077 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter":
[info]   38171.558 ±(99.9%) 479.769 ops/s [Average]
[info]   (min, avg, max) = (38042.629, 38171.558, 38331.320), stdev = 124.594
[info]   CI (99.9%): [37691.789, 38651.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate":
[info]   256.336 ±(99.9%) 3.300 MB/sec [Average]
[info]   (min, avg, max) = (255.418, 256.336, 257.304), stdev = 0.857
[info]   CI (99.9%): [253.036, 259.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   10568.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10568.011, 10568.011, 10568.011), stdev = 0.001
[info]   CI (99.9%): [10568.009, 10568.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   268.913 ±(99.9%) 578.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.913, 336.362), stdev = 150.327
[info]   CI (99.9%): [≈ 0, 847.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   11090.251 ±(99.9%) 23873.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11090.251, 13917.077), stdev = 6199.867
[info]   CI (99.9%): [≈ 0, 34963.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # Run complete. Total time: 00:26:31
[info] Benchmark                                                                                              Mode  Cnt         Score         Error   Units
[info] JsonCodecMakerBenchmark.missingReqFieldCirce                                                          thrpt    5   1387791.416 ±  291283.868   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate                                           thrpt    5      2087.687 ±     437.915  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm                                      thrpt    5      2368.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.002 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.002 ±       0.005    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen                                     thrpt    5      2110.024 ±    1096.126  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2388.312 ±     938.526    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count                                                thrpt    5        31.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time                                                 thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJackson                                                        thrpt    5    171548.378 ±   21081.313   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate                                         thrpt    5       310.406 ±      38.176  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm                                    thrpt    5      2848.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       269.098 ±     579.255  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      2484.427 ±    5360.621    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count                                              thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time                                               thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter                                                       thrpt    5    298732.869 ±   19379.555   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate                                        thrpt    5       194.427 ±      12.311  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm                                   thrpt    5      1024.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       201.482 ±     708.243  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5      1062.089 ±    3733.511    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count                                             thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time                                              thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless                                              thrpt    5    749123.290 ±   98493.832   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate                               thrpt    5       262.693 ±      34.440  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm                          thrpt    5       552.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen                         thrpt    5       269.060 ±     579.173  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm                    thrpt    5       569.901 ±    1229.623    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count                                    thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time                                     thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump                                        thrpt    5   2627650.468 ±  463853.342   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate                         thrpt    5       293.802 ±      51.789  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm                    thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                   thrpt    5       269.068 ±     579.190  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm              thrpt    5       159.815 ±     345.444    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count                              thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time                               thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldPlay                                                           thrpt    5    109090.231 ±    3566.668   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate                                            thrpt    5       699.690 ±      23.179  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm                                       thrpt    5     10096.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.016 ±       0.117  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.234 ±       1.667    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       675.762 ±      16.446  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      9750.947 ±     150.026    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        11.593 ±      80.890    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count                                                 thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time                                                  thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.readAdtCirce                                                                  thrpt    5    485847.675 ±   24584.388   ops/s
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate                                                   thrpt    5      1254.490 ±      63.550  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm                                              thrpt    5      4064.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.002 ±       0.011  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.006 ±       0.036    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1225.371 ±     718.109  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      3967.850 ±    2262.927    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.count                                                        thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.time                                                         thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJackson                                                                thrpt    5   1145176.106 ±   56609.807   ops/s
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate                                                 thrpt    5       814.518 ±      39.696  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm                                            thrpt    5      1120.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±       0.105  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.017 ±       0.144    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen                                           thrpt    5       813.254 ±     729.294  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1117.231 ±     977.634    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       5.561  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.119 ±       7.824    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.count                                                      thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.time                                                       thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJsoniter                                                               thrpt    5   2467527.035 ±   75755.993   ops/s
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate                                                thrpt    5       163.079 ±       5.020  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm                                           thrpt    5       104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen                                          thrpt    5       134.584 ±     709.620  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                     thrpt    5        86.579 ±     456.504    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count                                                     thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time                                                      thrpt    5        11.000                    ms
[info] JsonCodecMakerBenchmark.readAdtPlay                                                                   thrpt    5    111964.258 ±    4823.556   ops/s
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate                                                    thrpt    5       937.928 ±      40.573  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm                                               thrpt    5     13184.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.008 ±       0.061  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.107 ±       0.856    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen                                              thrpt    5       950.609 ±     582.720  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     13371.117 ±    8383.180    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        11.406 ±      79.739    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.count                                                         thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.time                                                          thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsCirce                                                              thrpt    5   1104887.772 ±   63994.967   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate                                               thrpt    5      1723.943 ±      99.665  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm                                          thrpt    5      2456.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.001 ±       0.003  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.001 ±       0.004    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1701.742 ±       0.743  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2424.818 ±     143.208    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count                                                    thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time                                                     thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJackson                                                            thrpt    5   1635306.518 ±  119694.595   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate                                             thrpt    5      1146.989 ±      84.131  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm                                        thrpt    5      1104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.037 ±       0.315  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.036 ±       0.303    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1157.020 ±     716.941  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1116.065 ±     758.948    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.128 ±       1.102    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count                                                  thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time                                                   thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter                                                           thrpt    5   6465092.928 ±  451092.688   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate                                            thrpt    5       821.338 ±      57.486  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       200.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.030 ±       0.258  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.007 ±       0.062    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       814.316 ±     726.550  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       197.821 ±     165.403    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.199 ±       1.716    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count                                                 thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time                                                  thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsPlay                                                               thrpt    5    325211.910 ±   11218.604   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate                                                thrpt    5       836.357 ±      28.799  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm                                           thrpt    5      4048.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.016 ±       0.140  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.079 ±       0.682    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       813.524 ±     714.286  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      3936.828 ±    3439.120    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         3.895 ±      33.536    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count                                                     thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time                                                      thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.readArraysCirce                                                               thrpt    5    556287.459 ±   59428.254   ops/s
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate                                                thrpt    5      1800.898 ±     192.174  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm                                           thrpt    5      5096.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.001 ±       0.007  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.004 ±       0.019    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1837.769 ±     717.023  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5197.597 ±    1796.573    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.count                                                     thrpt    5        27.000                counts
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.time                                                      thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJackson                                                             thrpt    5    999835.918 ±   33924.371   ops/s
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate                                              thrpt    5       940.052 ±      32.214  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm                                         thrpt    5      1480.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.013 ±       0.075  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.021 ±       0.118    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen                                        thrpt    5       949.595 ±     579.126  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1496.063 ±     935.154    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.269 ±      10.926    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.count                                                   thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.time                                                    thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJsoniter                                                            thrpt    5   2565686.727 ±   47440.768   ops/s
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate                                             thrpt    5      1069.327 ±      20.052  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm                                        thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.028 ±       0.225  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.017 ±       0.138    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5      1089.159 ±     585.991  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       668.006 ±     352.543    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count                                                  thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time                                                   thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.readArraysPlay                                                                thrpt    5    166509.692 ±    4836.929   ops/s
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate                                                 thrpt    5      1024.805 ±      29.761  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm                                            thrpt    5      9688.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.018 ±       0.140  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.168 ±       1.319    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1019.262 ±      15.118  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      9635.868 ±     199.150    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         7.632 ±      65.711    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.count                                                      thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.time                                                       thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJackson                                                            thrpt    5   1372370.430 ±   49299.891   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate                                             thrpt    5       871.907 ±      31.396  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm                                        thrpt    5      1000.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.015 ±       0.090  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.018 ±       0.104    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5       814.334 ±     718.837  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       934.055 ±     825.471    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.923 ±       7.944    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count                                                  thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time                                                   thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter                                                           thrpt    5   3658277.678 ±   90020.541   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate                                            thrpt    5       483.444 ±      11.838  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       208.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       470.947 ±     709.607  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       202.824 ±     308.070    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count                                                 thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time                                                  thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsPlay                                                               thrpt    5    209792.008 ±    6331.901   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate                                                thrpt    5       966.975 ±      29.230  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm                                           thrpt    5      7256.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.009 ±       0.076  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.068 ±       0.565    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       950.336 ±     580.859  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      7131.968 ±    4374.136    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       5.559  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         6.048 ±      42.199    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count                                                     thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time                                                      thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce                                                        thrpt    5    502297.076 ±   11531.009   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate                                         thrpt    5      1641.400 ±      37.868  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm                                    thrpt    5      5144.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.001 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.004 ±       0.015    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1633.577 ±     586.275  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5      5117.839 ±    1758.086    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count                                              thrpt    5        24.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time                                               thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson                                                      thrpt    5    465023.195 ±    6621.595   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate                                       thrpt    5       576.697 ±       8.198  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm                                  thrpt    5      1952.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       606.129 ±     580.724  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5      2053.044 ±    1983.695    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.710 ±      23.334    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count                                            thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time                                             thrpt    5        50.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter                                                     thrpt    5   4600611.580 ±   91796.656   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate                                      thrpt    5       210.422 ±       4.213  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       201.807 ±     709.379  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5        69.207 ±     243.278    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count                                           thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time                                            thrpt    5        19.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay                                                         thrpt    5    157863.760 ±    5678.245   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate                                          thrpt    5       870.557 ±      31.361  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm                                     thrpt    5      8680.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.016 ±       0.139  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.162 ±       1.392    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen                                    thrpt    5       881.624 ±     720.560  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5      8785.998 ±    7086.915    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         8.059 ±      69.391    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count                                               thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time                                                thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce                                                        thrpt    5      4629.827 ±     157.760   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate                                         thrpt    5      1114.366 ±      37.976  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm                                    thrpt    5    378808.091 ±       0.012    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.038 ±       0.103  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        13.109 ±      35.491    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1089.014 ±     586.435  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5    370552.338 ±  213273.335    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        45.324 ±     390.255    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count                                              thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time                                               thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson                                                      thrpt    5      9209.145 ±      64.011   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate                                       thrpt    5       320.641 ±       2.214  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm                                  thrpt    5     54800.045 ±       0.006    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       336.100 ±       1.419  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5     57442.294 ±     361.819    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space                          thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space.norm                     thrpt    5        22.741 ±     195.805    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count                                            thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time                                             thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter                                                     thrpt    5     15340.730 ±     633.916   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate                                      thrpt    5       262.124 ±      10.869  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                 thrpt    5     26896.029 ±       0.016    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       269.062 ±     579.176  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5     27702.253 ±   59640.299    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count                                           thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time                                            thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay                                                         thrpt    5      1693.741 ±      69.493   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate                                          thrpt    5      1057.825 ±      42.962  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm                                     thrpt    5    982976.256 ±       0.056    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.032 ±       0.184  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5        30.072 ±     171.927    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                    thrpt    5      1086.688 ±     587.251  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5   1010487.321 ±  571443.570    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.878  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       750.770 ±    6464.360    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count                                               thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time                                                thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter                                                    thrpt    5   3091895.577 ±   80699.491   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate                                     thrpt    5       927.031 ±      24.489  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm                                thrpt    5       472.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.029 ±       0.240  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.015 ±       0.121    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5       883.173 ±     726.194  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5       449.433 ±     364.671    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space                        thrpt    5         0.799 ±       6.879  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         0.411 ±       3.540    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count                                          thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time                                           thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay                                                        thrpt    5    184767.273 ±    7828.461   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate                                         thrpt    5      1030.068 ±      43.764  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm                                    thrpt    5      8776.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.014 ±       0.113  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.116 ±       0.962    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1019.214 ±      15.122  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5      8684.096 ±     250.740    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         6.939 ±      59.747    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count                                              thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time                                               thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesCirce                                                            thrpt    5    474915.237 ±   16598.776   ops/s
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate                                             thrpt    5      1716.239 ±      59.883  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm                                        thrpt    5      5688.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.007 ±       0.019    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen                                       thrpt    5      1701.846 ±       0.784  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5640.672 ±     199.154    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.time                                                   thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJackson                                                          thrpt    5    458964.657 ±   17032.009   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate                                           thrpt    5       534.135 ±      19.716  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm                                      thrpt    5      1832.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen                                     thrpt    5       537.196 ±     707.304  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1847.140 ±    2481.791    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space                              thrpt    5         0.932 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         3.229 ±      23.164    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.count                                                thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.time                                                 thrpt    5        51.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJsoniter                                                         thrpt    5   2848858.830 ±   45713.690   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate                                          thrpt    5      1129.317 ±      17.944  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm                                     thrpt    5       624.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.029 ±       0.246  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.016 ±       0.136    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen                                    thrpt    5      1089.029 ±     585.910  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                               thrpt    5       601.943 ±     331.799    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count                                               thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time                                                thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesPlay                                                             thrpt    5    127052.788 ±    3913.030   ops/s
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate                                              thrpt    5       882.737 ±      27.226  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm                                         thrpt    5     10936.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.014 ±       0.119  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.172 ±       1.478    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen                                        thrpt    5       881.593 ±     720.424  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     10924.860 ±    8983.106    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         9.981 ±      85.939    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.count                                                   thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.time                                                    thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.readMapsCirce                                                                 thrpt    5    406030.970 ±    6586.716   ops/s
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate                                                  thrpt    5      1415.594 ±      23.081  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm                                             thrpt    5      5488.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.003 ±       0.009  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.010 ±       0.035    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1429.418 ±     586.207  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5540.288 ±    2201.838    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.count                                                       thrpt    5        21.000                counts
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.time                                                        thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJackson                                                               thrpt    5    724407.738 ±   14175.029   ops/s
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate                                                thrpt    5       854.266 ±      16.620  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm                                           thrpt    5      1856.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.024 ±       0.204  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.051 ±       0.441    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       813.190 ±     714.556  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1766.312 ±    1541.807    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.066 ±       7.822  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         2.321 ±      17.033    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.count                                                     thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.time                                                      thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJsoniter                                                              thrpt    5   3118349.899 ±   56715.982   ops/s
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate                                               thrpt    5       776.663 ±      14.696  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm                                          thrpt    5       392.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.022 ±       0.186  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.011 ±       0.094    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       745.662 ±     593.695  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       376.270 ±     297.117    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.405 ±       3.488    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count                                                    thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time                                                     thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readMapsPlay                                                                  thrpt    5    195896.958 ±    2034.900   ops/s
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate                                                   thrpt    5      1090.263 ±      11.644  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm                                              thrpt    5      8760.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.012 ±       0.073  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.099 ±       0.584    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen                                             thrpt    5      1088.179 ±     587.721  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      8743.256 ±    4721.217    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.445 ±      55.489    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.count                                                        thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.time                                                         thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce                                                     thrpt    5    478326.580 ±   12043.843   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate                                      thrpt    5      1828.140 ±      46.329  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm                                 thrpt    5      6016.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.005 ±       0.019    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen                                thrpt    5      1837.848 ±     718.221  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                           thrpt    5      6046.343 ±    2278.567    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count                                           thrpt    5        27.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time                                            thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter                                                  thrpt    5   2098464.859 ±   18122.082   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate                                   thrpt    5      1354.474 ±      11.686  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm                              thrpt    5      1016.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.001 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         0.001 ±       0.004    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                             thrpt    5      1361.367 ±       0.620  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                        thrpt    5      1021.175 ±       8.849    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count                                        thrpt    5        20.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time                                         thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay                                                      thrpt    5    135079.361 ±    5802.176   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate                                       thrpt    5       962.524 ±      41.211  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm                                  thrpt    5     11216.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.006 ±       0.049  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.066 ±       0.565    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen                                 thrpt    5       950.458 ±     582.635  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                            thrpt    5     11085.003 ±    7001.602    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       5.559  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         9.408 ±      65.747    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count                                            thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time                                             thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJackson                                                        thrpt    5    629967.457 ±   17475.660   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate                                         thrpt    5       816.462 ±      22.645  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm                                    thrpt    5      2040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.057 ±       0.393  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.142 ±       0.975    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       812.328 ±     710.627  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      2031.525 ±    1816.697    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.933 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         2.352 ±      16.918    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count                                              thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time                                               thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter                                                       thrpt    5   2158086.911 ±   26681.933   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate                                        thrpt    5      1020.047 ±      13.060  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm                                   thrpt    5       744.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.028 ±       0.213  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.021 ±       0.156    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5      1020.255 ±       7.245  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       744.155 ±       5.603    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         0.586 ±       5.044    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count                                             thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time                                              thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsPlay                                                           thrpt    5    155726.333 ±    2852.683   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate                                            thrpt    5       865.868 ±      15.554  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm                                       thrpt    5      8752.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.012 ±       0.099  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.118 ±       1.004    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       881.596 ±     714.626  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8915.988 ±    7325.823    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         8.023 ±      69.082    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count                                                 thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time                                                  thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesCirce                                                           thrpt    5    404610.902 ±    3769.799   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate                                            thrpt    5      1252.359 ±      11.582  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm                                       thrpt    5      4872.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.011 ±       0.085  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.042 ±       0.330    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1225.281 ±     717.966  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      4766.808 ±    2797.158    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count                                                 thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time                                                  thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJackson                                                         thrpt    5    885220.288 ±   20142.757   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate                                          thrpt    5       670.465 ±      14.966  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm                                     thrpt    5      1192.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.009 ±       0.075  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.016 ±       0.134    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       675.877 ±      15.850  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1201.624 ±      14.539    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       5.561  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.424 ±       9.926    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count                                               thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time                                                thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter                                                        thrpt    5   3538533.915 ±  116733.162   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate                                         thrpt    5       107.899 ±       3.585  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm                                    thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       134.267 ±     707.951  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5        60.264 ±     317.758    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.266 ±       2.294  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.120 ±       1.029    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count                                              thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time                                               thrpt    5        11.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesPlay                                                            thrpt    5    133824.337 ±    8813.637   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate                                             thrpt    5       881.466 ±      58.105  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm                                        thrpt    5     10368.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.011 ±       0.056  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.124 ±       0.645    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       881.568 ±     706.281  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     10391.943 ±    8764.067    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         9.383 ±      80.790    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count                                                  thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time                                                   thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPICirce                                                           thrpt    5      7606.595 ±     324.926   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate                                            thrpt    5      1111.820 ±      47.809  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm                                       thrpt    5    230032.842 ±       6.771    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.030 ±       0.089  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         6.127 ±      18.305    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1152.817 ±     705.383  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    238632.507 ±  149288.579    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       166.001 ±    1429.323    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count                                                 thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time                                                  thrpt    5        56.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson                                                         thrpt    5     10512.687 ±     397.812   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate                                          thrpt    5       148.828 ±       5.461  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm                                     thrpt    5     22283.306 ±      27.412    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       134.267 ±     707.951  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5     20293.078 ±  106999.571    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count                                               thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time                                                thrpt    5        13.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter                                                        thrpt    5     20094.962 ±     691.401   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate                                         thrpt    5       181.385 ±       6.183  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm                                    thrpt    5     14208.022 ±       0.009    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       134.550 ±     709.444  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5     10632.784 ±   56064.334    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count                                              thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time                                               thrpt    5        12.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtCirce                                                                 thrpt    5    329685.594 ±    9152.304   ops/s
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate                                                  thrpt    5      1087.482 ±      30.633  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm                                             thrpt    5      5192.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.015 ±       0.084  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.071 ±       0.405    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1088.187 ±     588.053  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5197.502 ±    2888.526    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.832 ±      32.996    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.count                                                       thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.time                                                        thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJackson                                                               thrpt    5   1171130.540 ±   40636.072   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate                                                thrpt    5       488.084 ±      16.847  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm                                           thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       470.921 ±     709.642  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       634.507 ±     975.486    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.count                                                     thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.time                                                      thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJsoniter                                                              thrpt    5  11476977.518 ±  391402.457   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate                                               thrpt    5       583.287 ±      19.932  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm                                          thrpt    5        80.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       607.005 ±     582.729  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5        83.402 ±      81.780    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.110 ±       0.946    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count                                                    thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time                                                     thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtPlay                                                                  thrpt    5    204164.422 ±    7638.418   ops/s
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate                                                   thrpt    5       661.225 ±      23.008  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm                                              thrpt    5      5096.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.013 ±       0.113  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.101 ±       0.865    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen                                             thrpt    5       607.238 ±     583.353  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      4678.215 ±    4471.918    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.139 ±      52.857    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.count                                                        thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.time                                                         thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce                                                             thrpt    5   1212601.860 ±   48800.078   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate                                              thrpt    5      1238.619 ±      49.966  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm                                         thrpt    5      1608.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.002 ±       0.008  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.003 ±       0.011    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen                                        thrpt    5      1225.137 ±     717.799  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1590.819 ±     939.748    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count                                                   thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time                                                    thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson                                                           thrpt    5   3236870.132 ±   94240.621   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate                                            thrpt    5       888.432 ±      25.882  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm                                       thrpt    5       432.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.015 ±       0.087  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.007 ±       0.042    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5       882.439 ±     723.231  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       428.727 ±     343.911    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.390 ±       3.361    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count                                                 thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time                                                  thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter                                                          thrpt    5  15253689.182 ± 1316281.039   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate                                           thrpt    5       465.145 ±      40.180  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm                                      thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       470.866 ±     709.152  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5        48.510 ±      71.860    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count                                                thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time                                                 thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay                                                              thrpt    5    848922.866 ±   16277.419   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate                                               thrpt    5      1255.532 ±      23.814  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm                                          thrpt    5      2328.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.037 ±       0.312  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.069 ±       0.579    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1293.265 ±     585.893  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2398.627 ±    1108.310    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count                                                    thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time                                                     thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysCirce                                                              thrpt    5    647555.131 ±   19126.943   ops/s
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate                                               thrpt    5      1467.868 ±      43.040  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm                                          thrpt    5      3568.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.001 ±       0.007  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.003 ±       0.016    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1497.534 ±     717.312  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3638.812 ±    1686.294    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.count                                                    thrpt    5        22.000                counts
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.time                                                     thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJackson                                                            thrpt    5   2285362.480 ±   65276.816   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate                                             thrpt    5      1300.854 ±      37.330  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm                                        thrpt    5       896.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.004 ±       0.027  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.003 ±       0.018    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1293.269 ±     586.196  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       890.628 ±     398.149    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.count                                                  thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.time                                                   thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJsoniter                                                           thrpt    5   4918231.211 ±   96388.322   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate                                            thrpt    5      1299.693 ±      25.048  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm                                       thrpt    5       416.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.001 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5        ≈ 10⁻³                  B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.165 ±     585.898  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       413.903 ±     187.161    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count                                                 thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time                                                  thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysPlay                                                               thrpt    5    303486.547 ±   19236.638   ops/s
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate                                                thrpt    5      1045.697 ±      65.990  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm                                           thrpt    5      5424.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.014 ±       0.116  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.071 ±       0.598    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1087.310 ±     590.079  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5636.134 ±    2875.748    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         4.130 ±      35.563    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.count                                                     thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.time                                                      thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJackson                                                           thrpt    5   1849738.436 ±   52912.576   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate                                            thrpt    5       977.606 ±      28.025  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm                                       thrpt    5       832.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.019 ±       0.165  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.017 ±       0.141    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5       951.135 ±     582.587  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       809.848 ±     504.281    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.687 ±       5.919    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time                                                  thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter                                                          thrpt    5   4454164.701 ±   48133.576   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate                                           thrpt    5       814.971 ±       8.901  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm                                      thrpt    5       288.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.031 ±       0.266  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.011 ±       0.094    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       813.652 ±     708.034  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5       287.577 ±     251.170    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.283 ±       2.437    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count                                                thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time                                                 thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsPlay                                                              thrpt    5    364587.602 ±   13475.406   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate                                               thrpt    5      1056.079 ±      39.014  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm                                          thrpt    5      4560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.013 ±       0.075  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.057 ±       0.327    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1019.978 ±       7.958  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      4404.438 ±     162.755    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         3.460 ±      29.788    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count                                                    thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time                                                     thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce                                                       thrpt    5      4447.244 ±     371.309   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate                                        thrpt    5      1047.895 ±      87.808  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm                                   thrpt    5    370872.096 ±       0.018    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.030 ±       0.233  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5        11.043 ±      85.350    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                  thrpt    5      1088.101 ±     588.172  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                             thrpt    5    384995.973 ±  200201.483    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                      thrpt    5       292.558 ±    2519.011    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count                                             thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time                                              thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson                                                     thrpt    5     20029.148 ±     445.359   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate                                      thrpt    5       330.855 ±       7.254  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm                                 thrpt    5     25999.877 ±       1.109    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                thrpt    5       336.362 ±       0.156  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                           thrpt    5     26433.377 ±     589.953    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count                                           thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time                                            thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter                                                    thrpt    5     50939.842 ±    1952.488   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate                                     thrpt    5       390.431 ±      14.825  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                thrpt    5     12064.008 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5       403.631 ±     579.045  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5     12466.223 ±   17769.509    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count                                          thrpt    5         6.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time                                           thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay                                                        thrpt    5      4229.926 ±     153.100   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate                                         thrpt    5      1213.221 ±      44.040  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm                                    thrpt    5    451471.878 ±       2.109    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.059 ±       0.078  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        21.897 ±      29.012    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1157.092 ±     717.936  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5    430534.907 ±  265079.783    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count                                              thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time                                               thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson                                                    thrpt    5    471861.261 ±   20835.634   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate                                     thrpt    5      1057.644 ±      46.863  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm                                thrpt    5      3528.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.060 ±       0.514  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.203 ±       1.731    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen                               thrpt    5      1018.939 ±      18.581  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3399.150 ±     117.698    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space                        thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         3.154 ±      27.156    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count                                          thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time                                           thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter                                                   thrpt    5   2262567.991 ±  178595.902   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate                                    thrpt    5       471.508 ±      37.172  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm                               thrpt    5       328.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                              thrpt    5       470.923 ±     709.303  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                         thrpt    5       327.844 ±     496.121    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count                                         thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time                                          thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay                                                       thrpt    5    209184.121 ±    6156.882   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate                                        thrpt    5       827.201 ±      24.159  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm                                   thrpt    5      6224.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.032 ±       0.219  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.240 ±       1.653    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                  thrpt    5       812.785 ±     711.733  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                             thrpt    5      6114.244 ±    5322.047    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         6.046 ±      42.066    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count                                             thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time                                              thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesCirce                                                           thrpt    5    519144.629 ±    6320.448   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate                                            thrpt    5      1255.823 ±      15.101  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm                                       thrpt    5      3808.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5        ≈ 10⁻³                MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.001 ±       0.009    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1225.186 ±     718.003  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3715.885 ±    2200.123    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count                                                 thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time                                                  thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJackson                                                         thrpt    5    967804.006 ±   29434.766   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate                                          thrpt    5       654.164 ±      19.749  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm                                     thrpt    5      1064.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.025 ±       0.216  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.040 ±       0.347    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       674.264 ±      15.151  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1096.729 ±      31.283    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         1.199 ±       7.566  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.962 ±      12.421    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count                                               thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time                                                thrpt    5        50.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter                                                        thrpt    5   4370398.838 ±  354045.828   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate                                         thrpt    5       777.461 ±      62.719  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm                                    thrpt    5       280.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.025 ±       0.212  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.009 ±       0.076    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       745.582 ±     593.244  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5       268.498 ±     211.410    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.298 ±       2.566    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count                                              thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time                                               thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesPlay                                                            thrpt    5    295461.844 ±    8246.780   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate                                             thrpt    5      1010.566 ±      28.163  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm                                        thrpt    5      5384.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.013 ±       0.109  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.070 ±       0.576    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5      1019.273 ±      15.172  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5430.540 ±     120.302    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         4.293 ±      36.961    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count                                                  thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time                                                   thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsCirce                                                                thrpt    5    294035.965 ±   15840.825   ops/s
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate                                                 thrpt    5       809.972 ±      43.728  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm                                            thrpt    5      4336.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±       0.074  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.064 ±       0.395    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       812.697 ±     711.625  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      4352.708 ±    3850.205    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.331 ±      30.225    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.count                                                      thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.time                                                       thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJackson                                                              thrpt    5    546525.734 ±   18214.606   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate                                               thrpt    5       858.272 ±      28.873  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm                                          thrpt    5      2472.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.050 ±       0.421  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.142 ±       1.202    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen                                         thrpt    5       880.239 ±     718.536  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2534.589 ±    2053.567    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space                                  thrpt    5         1.066 ±       6.436  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         3.091 ±      18.709    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.count                                                    thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.time                                                     thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJsoniter                                                             thrpt    5   2539118.172 ±   64538.503   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate                                              thrpt    5       529.108 ±      13.592  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm                                         thrpt    5       328.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen                                        thrpt    5       538.161 ±     709.241  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       333.972 ±     444.007    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.497 ±       4.277    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count                                                   thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time                                                    thrpt    5        48.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsPlay                                                                 thrpt    5    245324.573 ±    9430.304   ops/s
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate                                                  thrpt    5       886.545 ±      33.941  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm                                             thrpt    5      5688.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.041 ±       0.349  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.258 ±       2.222    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen                                            thrpt    5       881.628 ±     714.506  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5654.942 ±    4547.241    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         5.179 ±      44.592    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.count                                                       thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.time                                                        thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce                                                    thrpt    5    497180.754 ±   21782.707   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate                                     thrpt    5      1152.296 ±      50.100  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm                                thrpt    5      3648.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.035 ±       0.301  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.109 ±       0.940    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen                               thrpt    5      1089.156 ±     586.370  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3449.193 ±    1891.617    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count                                          thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time                                           thrpt    5        21.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson                                                  thrpt    5   1123233.037 ±   38394.377   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate                                   thrpt    5       559.448 ±      19.005  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm                              thrpt    5       784.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen                             thrpt    5       605.019 ±     579.742  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm                        thrpt    5       846.997 ±     801.143    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space                      thrpt    5         0.932 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm                 thrpt    5         1.317 ±      11.340    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count                                        thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time                                         thrpt    5        53.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter                                                 thrpt    5   4360631.783 ±  129680.152   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate                                  thrpt    5       598.380 ±      17.559  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm                             thrpt    5       216.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                            thrpt    5       607.004 ±     582.761  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                       thrpt    5       218.950 ±     208.226    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space                     thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                thrpt    5         0.291 ±       2.502    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count                                       thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time                                        thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay                                                     thrpt    5    285390.573 ±    8909.002   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate                                      thrpt    5       964.562 ±      30.245  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm                                 thrpt    5      5320.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.008 ±       0.072  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.046 ±       0.399    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen                                thrpt    5       950.448 ±     581.096  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                           thrpt    5      5243.579 ±    3235.196    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space                         thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                    thrpt    5         4.459 ±      31.110    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count                                           thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time                                            thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce                                                         thrpt    5    289013.916 ±    4945.579   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate                                          thrpt    5       787.377 ±      13.482  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm                                     thrpt    5      4288.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.013 ±       0.073  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.070 ±       0.396    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen                                    thrpt    5       744.685 ±     585.124  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm                               thrpt    5      4055.430 ±    3183.738    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         4.352 ±      37.472    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count                                               thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time                                                thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson                                                       thrpt    5    565116.508 ±   18223.109   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate                                        thrpt    5       918.991 ±      29.699  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm                                   thrpt    5      2560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.058 ±       0.397  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.163 ±       1.110    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen                                  thrpt    5       948.998 ±     577.891  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2643.115 ±    1597.534    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space                           thrpt    5         0.932 ±       8.027  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         2.610 ±      22.474    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count                                             thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time                                              thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter                                                      thrpt    5   1944570.771 ±  317374.132   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate                                       thrpt    5       504.139 ±      82.557  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm                                  thrpt    5       408.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                 thrpt    5       537.978 ±     708.702  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                            thrpt    5       432.855 ±     536.420    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                          thrpt    5         0.666 ±       5.736  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         0.529 ±       4.559    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time                                             thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay                                                          thrpt    5    228879.879 ±    4833.697   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate                                           thrpt    5       864.287 ±      18.521  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm                                      thrpt    5      5944.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.034 ±       0.291  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.238 ±       2.008    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen                                     thrpt    5       813.445 ±     714.251  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                thrpt    5      5593.477 ±    4890.666    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         5.530 ±      47.614    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count                                                thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time                                                 thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesCirce                                                          thrpt    5    519431.378 ±   17331.496   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate                                           thrpt    5       908.075 ±      30.417  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm                                      thrpt    5      2752.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.009 ±       0.070  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.026 ±       0.210    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen                                     thrpt    5       950.504 ±     581.276  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2879.794 ±    1740.526    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.449 ±      21.090    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count                                                thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time                                                 thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJackson                                                        thrpt    5   1323976.140 ±   41421.900   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate                                         thrpt    5       545.063 ±      16.937  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm                                    thrpt    5       648.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       538.155 ±     709.211  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5       639.633 ±     841.201    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.789 ±       6.795    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count                                              thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time                                               thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter                                                       thrpt    5   4084402.960 ±  175673.267   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate                                        thrpt    5       456.686 ±      19.607  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       470.877 ±     709.161  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       181.885 ±     278.996    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count                                             thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time                                              thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesPlay                                                           thrpt    5    169049.767 ±    7350.807   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate                                            thrpt    5      1006.009 ±      43.533  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm                                       thrpt    5      9368.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.017 ±       0.148  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.161 ±       1.366    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen                                      thrpt    5      1019.215 ±      15.262  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      9491.923 ±     430.334    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.454 ±      64.180    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count                                                 thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time                                                  thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce                                                          thrpt    5      6415.611 ±     233.770   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate                                           thrpt    5       851.864 ±      30.849  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm                                      thrpt    5    208992.067 ±       0.011    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.008 ±       0.048  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         2.070 ±      11.650    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen                                     thrpt    5       880.756 ±     703.413  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5    216103.194 ±  172877.163    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5       197.813 ±    1703.233    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time                                                 thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson                                                        thrpt    5     24120.824 ±     130.523   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate                                         thrpt    5       324.584 ±       1.801  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm                                    thrpt    5     21181.051 ±       0.419    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       335.685 ±       0.062  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5     21905.493 ±     119.911    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count                                              thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time                                               thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter                                                       thrpt    5     38171.558 ±     479.769   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate                                        thrpt    5       256.336 ±       3.300  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm                                   thrpt    5     10568.011 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       268.913 ±     578.856  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5     11090.251 ±   23873.480    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count                                             thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time                                              thrpt    5        23.000                    ms
[success] Total time: 1652 s, completed Nov 27, 2017, 10:16:38 AM
