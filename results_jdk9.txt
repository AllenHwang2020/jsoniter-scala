[info] Loading settings from build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Nov 29, 2017, 12:35:52 AM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonWriter.scala:208:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] one warning found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.1-SNAPSHOT.jar ...
[info] Compiling 6 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:32:62: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -854843732 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 7;
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _status: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1882203379 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -739937554 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1690673754 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows(elements = _elements)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 1;
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]           var _status: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -553105946 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 14144516 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case -11755678 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:27:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:28:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:29:18: local val v3 in value format is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:59:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:61:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1868115770 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 135249149 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:63:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Array[Int]];
[info]             do 
[info]               x.+=(d2(in, v2))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[scala.math.BigInt];
[info]             do 
[info]               x.+=(in.readBigInt(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1396692260 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Arrays(aa = _aa, a = _a)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             e2(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeObjectField(c, "aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeObjectField(c, "a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:65:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -311899171 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 395882128 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:67:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:69:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:71:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsString(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Maps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:73:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readObjectFieldAsString(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readObjectFieldAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:75:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsInt(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readObjectFieldAsLong(), in.readDouble())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = (in.nextToken(): @switch) match {
[info]         case '{' => if (in.nextToken().==('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readObjectFieldAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeObjectField(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:77:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 255;
[info]           var _b: Byte = 0.toByte;
[info]           var _s: Short = 0.toShort;
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = 0.toChar;
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -986815646 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1128364876 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 977778859 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2108804597 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:79:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:81:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.A): com.github.plokhotnyuk.jsoniter_scala.A = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 1;
[info]           var _a: Int = 0;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.A(a = _a)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.B): com.github.plokhotnyuk.jsoniter_scala.B = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 1;
[info]           var _b: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.B(b = _b)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.C): com.github.plokhotnyuk.jsoniter_scala.C = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1283270383 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.C(l = _l, r = _r)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = {
[info]         in.setMark();
[info]         (in.nextToken(): @switch) match {
[info]           case '{' => {
[info]             in.scanToObjectField("type");
[info]             val l = in.readValueAsCharBuf();
[info]             ((in.charBufToHashCode(l): @switch) match {
[info]               case 1042714897 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 1249097774 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case -251352298 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             })
[info]           }
[info]           case 'n' => {
[info]             in.rollbackToMark();
[info]             in.readNull(default)
[info]           }
[info]           case _ => in.objectStartError()
[info]         }
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.A, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("A")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.B, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("B")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.C, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "type");
[info]             out.writeVal("C")
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]         case _ => out.encodeError("unexpected type: ".+(x.getClass))
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:284:54: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 15;
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredObjectFieldError(r1, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 7;
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1125392404 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -758822041 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredObjectFieldError(r2, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1567327321 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -2118257363 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -560369018 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url(urls = _urls)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 3;
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d11(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d11(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredObjectFieldError(r4, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1994874891 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d10(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -422319283 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1231204836 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1565337738 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -903425777 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1481771385 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1617333980 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1034472816 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1096575944 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1766340764 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 656981833 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1692587979 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -761280539 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1523152584 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1042811670 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1322051899 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 430342393 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1547487212 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -738485249 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -869817957 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1479864213 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 892046337 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1815398146 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1854913126 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1700955824 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2002464660 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 196017265 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1725122937 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1346866717 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1251129302 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1343246339 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 929396071 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 356376530 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredObjectFieldError(r3, req0, req1)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 32767;
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredObjectFieldError(r5, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet = (in.nextToken(): @switch) match {
[info]         case '{' => {
[info]           var req0 = 65535;
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           if (in.nextToken().!=('}'))
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readObjectFieldAsCharBuf();
[info]                   ((in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -350359215 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d12(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   })
[info]                 }
[info]                while (in.nextToken().==(',')) ;
[info]               in.rollbackToken();
[info]               if (in.nextToken().!=('}'))
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredObjectFieldError(r0, req0)
[info]         }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.objectStartError()
[info]       };
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = (in.nextToken(): @switch) match {
[info]         case '[' => if (in.nextToken().==(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.nextToken().==(',')) ;
[info]             in.rollbackToken();
[info]             if (in.nextToken().==(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]         case 'n' => {
[info]           in.rollbackToken();
[info]           in.readNull(default)
[info]         }
[info]         case _ => in.arrayStartError()
[info]       };
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeObjectField(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeObjectField(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             c = out.writeObjectField(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:134:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:135:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:137:18: local val v4 in value format is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:81:51: unreachable code
[warn]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[warn]                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CustomPlayJsonFormats.scala:65:45: Reference to uninitialized value v14
[warn]   implicit val v13: OFormat[C] = Json.format[C]
[warn]                                             ^
[warn] 8 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT.jar ...
Processing 290 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 107 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*JsonCodecMakerBenchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_a850296a/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce
[info] # Run progress: 0.00% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 831571.716 ops/s
[info] # Warmup Iteration   2: 1228275.551 ops/s
[info] # Warmup Iteration   3: 1379753.310 ops/s
[info] # Warmup Iteration   4: 1429135.997 ops/s
[info] # Warmup Iteration   5: 1402911.557 ops/s
[info] Iteration   1: 1275523.158 ops/s
[info]                  ·gc.alloc.rate:                                  1905.810 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2352.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2520.035 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 1286609.721 ops/s
[info]                  ·gc.alloc.rate:            1922.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2498.361 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1382457.926 ops/s
[info]                  ·gc.alloc.rate:            2065.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2325.083 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1421216.224 ops/s
[info]                  ·gc.alloc.rate:                                  2123.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2352.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2261.721 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   5: 1437556.647 ops/s
[info]                  ·gc.alloc.rate:                                  2148.134 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2352.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2236.037 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce":
[info]   1360672.735 ±(99.9%) 290634.510 ops/s [Average]
[info]   (min, avg, max) = (1275523.158, 1360672.735, 1437556.647), stdev = 75476.859
[info]   CI (99.9%): [1070038.226, 1651307.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate":
[info]   2033.172 ±(99.9%) 434.514 MB/sec [Average]
[info]   (min, avg, max) = (1905.810, 2033.172, 2148.134), stdev = 112.842
[info]   CI (99.9%): [1598.658, 2467.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen":
[info]   2042.117 ±(99.9%) 0.616 MB/sec [Average]
[info]   (min, avg, max) = (2041.924, 2042.117, 2042.274), stdev = 0.160
[info]   CI (99.9%): [2041.501, 2042.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2368.247 ±(99.9%) 511.787 B/op [Average]
[info]   (min, avg, max) = (2236.037, 2368.247, 2520.035), stdev = 132.909
[info]   CI (99.9%): [1856.460, 2880.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.800, 17.000), stdev = 4.087
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson
[info] # Run progress: 0.97% complete, ETA 00:28:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65323.041 ops/s
[info] # Warmup Iteration   2: 172162.531 ops/s
[info] # Warmup Iteration   3: 175086.396 ops/s
[info] # Warmup Iteration   4: 175976.662 ops/s
[info] # Warmup Iteration   5: 176708.627 ops/s
[info] Iteration   1: 175222.129 ops/s
[info]                  ·gc.alloc.rate:            312.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3021.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 178616.811 ops/s
[info]                  ·gc.alloc.rate:            318.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2964.119 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 179244.358 ops/s
[info]                  ·gc.alloc.rate:      319.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 2808.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 175079.474 ops/s
[info]                  ·gc.alloc.rate:            312.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3023.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 176668.022 ops/s
[info]                  ·gc.alloc.rate:            315.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2996.796 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson":
[info]   176966.159 ±(99.9%) 7357.892 ops/s [Average]
[info]   (min, avg, max) = (175079.474, 176966.159, 179244.358), stdev = 1910.821
[info]   CI (99.9%): [169608.267, 184324.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate":
[info]   315.716 ±(99.9%) 13.057 MB/sec [Average]
[info]   (min, avg, max) = (312.337, 315.716, 319.770), stdev = 3.391
[info]   CI (99.9%): [302.659, 328.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm":
[info]   2808.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2808.002, 2808.002, 2808.002), stdev = 0.001
[info]   CI (99.9%): [2808.002, 2808.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen":
[info]   269.103 ±(99.9%) 579.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.103, 336.441), stdev = 150.433
[info]   CI (99.9%): [≈ 0, 848.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2401.279 ±(99.9%) 5169.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2401.279, 3023.973), stdev = 1342.572
[info]   CI (99.9%): [≈ 0, 7571.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 6.000), stdev = 2.683
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter
[info] # Run progress: 1.94% complete, ETA 00:27:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287916.545 ops/s
[info] # Warmup Iteration   2: 293578.638 ops/s
[info] # Warmup Iteration   3: 283032.949 ops/s
[info] # Warmup Iteration   4: 273471.103 ops/s
[info] # Warmup Iteration   5: 301056.182 ops/s
[info] Iteration   1: 307986.790 ops/s
[info]                  ·gc.alloc.rate:            203.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1719.011 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 313418.167 ops/s
[info]                  ·gc.alloc.rate:            207.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1684.698 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 324140.904 ops/s
[info]                  ·gc.alloc.rate:      214.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 306471.411 ops/s
[info]                  ·gc.alloc.rate:            202.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1727.552 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 286502.421 ops/s
[info]                  ·gc.alloc.rate:      189.285 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter":
[info]   307703.939 ±(99.9%) 52865.069 ops/s [Average]
[info]   (min, avg, max) = (286502.421, 307703.939, 324140.904), stdev = 13728.891
[info]   CI (99.9%): [254838.869, 360569.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate":
[info]   203.350 ±(99.9%) 35.044 MB/sec [Average]
[info]   (min, avg, max) = (189.285, 203.350, 214.180), stdev = 9.101
[info]   CI (99.9%): [168.306, 238.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm":
[info]   1040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1040.001, 1040.001, 1040.001), stdev = 0.001
[info]   CI (99.9%): [1040.001, 1040.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.703 ±(99.9%) 709.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.703, 336.405), stdev = 184.129
[info]   CI (99.9%): [≈ 0, 910.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1026.252 ±(99.9%) 3607.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1026.252, 1727.552), stdev = 936.973
[info]   CI (99.9%): [≈ 0, 4634.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless
[info] # Run progress: 2.91% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 564662.432 ops/s
[info] # Warmup Iteration   2: 709470.626 ops/s
[info] # Warmup Iteration   3: 752889.210 ops/s
[info] # Warmup Iteration   4: 733312.038 ops/s
[info] # Warmup Iteration   5: 728898.903 ops/s
[info] Iteration   1: 682715.284 ops/s
[info]                  ·gc.alloc.rate:            239.427 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 775.270 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 629946.805 ops/s
[info]                  ·gc.alloc.rate:            220.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 840.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 644775.387 ops/s
[info]                  ·gc.alloc.rate:      226.126 MB/sec
[info]                  ·gc.alloc.rate.norm: 552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 640460.289 ops/s
[info]                  ·gc.alloc.rate:            224.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 826.680 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 712199.731 ops/s
[info]                  ·gc.alloc.rate:            249.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 743.411 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless":
[info]   662019.499 ±(99.9%) 132514.580 ops/s [Average]
[info]   (min, avg, max) = (629946.805, 662019.499, 712199.731), stdev = 34413.616
[info]   CI (99.9%): [529504.919, 794534.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate":
[info]   232.176 ±(99.9%) 46.429 MB/sec [Average]
[info]   (min, avg, max) = (220.972, 232.176, 249.763), stdev = 12.057
[info]   CI (99.9%): [185.747, 278.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm":
[info]   552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (552.001, 552.001, 552.001), stdev = 0.001
[info]   CI (99.9%): [552.000, 552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   269.088 ±(99.9%) 579.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.088, 336.453), stdev = 150.425
[info]   CI (99.9%): [≈ 0, 848.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   637.168 ±(99.9%) 1379.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 637.168, 840.480), stdev = 358.327
[info]   CI (99.9%): [≈ 0, 2016.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump
[info] # Run progress: 3.88% complete, ETA 00:27:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2662412.384 ops/s
[info] # Warmup Iteration   2: 2650972.726 ops/s
[info] # Warmup Iteration   3: 2731163.270 ops/s
[info] # Warmup Iteration   4: 2740415.529 ops/s
[info] # Warmup Iteration   5: 2512584.437 ops/s
[info] Iteration   1: 2513985.444 ops/s
[info]                  ·gc.alloc.rate:            281.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 210.603 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2599038.022 ops/s
[info]                  ·gc.alloc.rate:            290.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 203.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2254575.639 ops/s
[info]                  ·gc.alloc.rate:      252.173 MB/sec
[info]                  ·gc.alloc.rate.norm: 176.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2761457.129 ops/s
[info]                  ·gc.alloc.rate:            308.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191.732 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2785261.609 ops/s
[info]                  ·gc.alloc.rate:            311.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.086 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump":
[info]   2582863.569 ±(99.9%) 829542.123 ops/s [Average]
[info]   (min, avg, max) = (2254575.639, 2582863.569, 2785261.609), stdev = 215429.455
[info]   CI (99.9%): [1753321.446, 3412405.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   288.844 ±(99.9%) 92.738 MB/sec [Average]
[info]   (min, avg, max) = (252.173, 288.844, 311.500), stdev = 24.084
[info]   CI (99.9%): [196.107, 381.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   269.122 ±(99.9%) 579.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.122, 336.457), stdev = 150.444
[info]   CI (99.9%): [≈ 0, 848.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   159.227 ±(99.9%) 344.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.227, 210.603), stdev = 89.416
[info]   CI (99.9%): [≈ 0, 503.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay
[info] # Run progress: 4.85% complete, ETA 00:26:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32455.334 ops/s
[info] # Warmup Iteration   2: 93425.637 ops/s
[info] # Warmup Iteration   3: 93175.591 ops/s
[info] # Warmup Iteration   4: 105206.675 ops/s
[info] # Warmup Iteration   5: 109714.201 ops/s
[info] Iteration   1: 108747.085 ops/s
[info]                  ·gc.alloc.rate:            697.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       10104.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9737.424 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 100309.141 ops/s
[info]                  ·gc.alloc.rate:            643.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       10104.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10555.889 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 109373.254 ops/s
[info]                  ·gc.alloc.rate:            702.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       10104.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9681.169 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 107005.153 ops/s
[info]                  ·gc.alloc.rate:                   686.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              10104.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9944.821 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 58.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 109539.277 ops/s
[info]                  ·gc.alloc.rate:                                  703.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10104.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.187 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9781.796 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay":
[info]   106994.782 ±(99.9%) 14901.053 ops/s [Average]
[info]   (min, avg, max) = (100309.141, 106994.782, 109539.277), stdev = 3869.756
[info]   CI (99.9%): [92093.729, 121895.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate":
[info]   686.839 ±(99.9%) 95.757 MB/sec [Average]
[info]   (min, avg, max) = (643.862, 686.839, 703.236), stdev = 24.868
[info]   CI (99.9%): [591.082, 782.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm":
[info]   10104.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10104.004, 10104.004, 10104.004), stdev = 0.001
[info]   CI (99.9%): [10104.003, 10104.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.187), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.536 ±(99.9%) 4.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.536, 2.682), stdev = 1.200
[info]   CI (99.9%): [≈ 0, 5.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen":
[info]   675.007 ±(99.9%) 13.774 MB/sec [Average]
[info]   (min, avg, max) = (672.658, 675.007, 680.811), stdev = 3.577
[info]   CI (99.9%): [661.233, 688.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9940.220 ±(99.9%) 1378.188 B/op [Average]
[info]   (min, avg, max) = (9681.169, 9940.220, 10555.889), stdev = 357.911
[info]   CI (99.9%): [8562.032, 11318.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   11.757 ±(99.9%) 101.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.757, 58.787), stdev = 26.290
[info]   CI (99.9%): [≈ 0, 112.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.600, 12.000), stdev = 3.050
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce
[info] # Run progress: 5.83% complete, ETA 00:26:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303589.965 ops/s
[info] # Warmup Iteration   2: 434980.353 ops/s
[info] # Warmup Iteration   3: 437880.514 ops/s
[info] # Warmup Iteration   4: 492984.924 ops/s
[info] # Warmup Iteration   5: 492197.065 ops/s
[info] Iteration   1: 494317.645 ops/s
[info]                  ·gc.alloc.rate:                                  1276.163 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.193 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.615 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4335.088 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 495845.106 ops/s
[info]                  ·gc.alloc.rate:            1280.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4321.723 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 490913.068 ops/s
[info]                  ·gc.alloc.rate:            1267.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3273.910 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 496412.533 ops/s
[info]                  ·gc.alloc.rate:                                  1281.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4316.918 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 494059.510 ops/s
[info]                  ·gc.alloc.rate:                                  1275.487 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4337.457 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce":
[info]   494309.572 ±(99.9%) 8254.030 ops/s [Average]
[info]   (min, avg, max) = (490913.068, 494309.572, 496412.533), stdev = 2143.545
[info]   CI (99.9%): [486055.542, 502563.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate":
[info]   1276.197 ±(99.9%) 21.085 MB/sec [Average]
[info]   (min, avg, max) = (1267.569, 1276.197, 1281.616), stdev = 5.476
[info]   CI (99.9%): [1255.112, 1297.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm":
[info]   4064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4064.001, 4064.001, 4064.001), stdev = 0.001
[info]   CI (99.9%): [4064.001, 4064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.126 ±(99.9%) 1.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.615), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1293.289 ±(99.9%) 585.825 MB/sec [Average]
[info]   (min, avg, max) = (1021.138, 1293.289, 1361.376), stdev = 152.137
[info]   CI (99.9%): [707.464, 1879.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4117.019 ±(99.9%) 1815.164 B/op [Average]
[info]   (min, avg, max) = (3273.910, 4117.019, 4337.457), stdev = 471.392
[info]   CI (99.9%): [2301.855, 5932.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.280
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson
[info] # Run progress: 6.80% complete, ETA 00:26:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676831.288 ops/s
[info] # Warmup Iteration   2: 1098937.688 ops/s
[info] # Warmup Iteration   3: 1124966.632 ops/s
[info] # Warmup Iteration   4: 1139275.280 ops/s
[info] # Warmup Iteration   5: 1125501.258 ops/s
[info] Iteration   1: 1133872.333 ops/s
[info]                  ·gc.alloc.rate:            806.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 933.867 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1123570.469 ops/s
[info]                  ·gc.alloc.rate:                   799.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        942.389 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1037882.124 ops/s
[info]                  ·gc.alloc.rate:                                  738.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1031.340 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.010 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1141013.272 ops/s
[info]                  ·gc.alloc.rate:                                  811.875 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1408.529 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1120877.338 ops/s
[info]                  ·gc.alloc.rate:            797.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 955.938 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson":
[info]   1111443.107 ±(99.9%) 161368.637 ops/s [Average]
[info]   (min, avg, max) = (1037882.124, 1111443.107, 1141013.272), stdev = 41906.923
[info]   CI (99.9%): [950074.470, 1272811.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate":
[info]   790.855 ±(99.9%) 114.900 MB/sec [Average]
[info]   (min, avg, max) = (738.477, 790.855, 811.875), stdev = 29.839
[info]   CI (99.9%): [675.955, 905.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen":
[info]   745.451 ±(99.9%) 593.376 MB/sec [Average]
[info]   (min, avg, max) = (672.722, 745.451, 1021.026), stdev = 154.098
[info]   CI (99.9%): [152.075, 1338.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1054.413 ±(99.9%) 776.620 B/op [Average]
[info]   (min, avg, max) = (933.867, 1054.413, 1408.529), stdev = 201.686
[info]   CI (99.9%): [277.792, 1831.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.135 ±(99.9%) 7.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.135, 4.665), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 12.000), stdev = 4.583
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter
[info] # Run progress: 7.77% complete, ETA 00:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2021867.986 ops/s
[info] # Warmup Iteration   2: 2492911.591 ops/s
[info] # Warmup Iteration   3: 2407814.023 ops/s
[info] # Warmup Iteration   4: 2231087.807 ops/s
[info] # Warmup Iteration   5: 2216154.245 ops/s
[info] Iteration   1: 2450899.769 ops/s
[info]                  ·gc.alloc.rate:      161.955 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2489540.550 ops/s
[info]                  ·gc.alloc.rate:            164.492 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 212.660 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2506477.304 ops/s
[info]                  ·gc.alloc.rate:      165.599 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2489600.725 ops/s
[info]                  ·gc.alloc.rate:            164.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 212.662 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2511920.966 ops/s
[info]                  ·gc.alloc.rate:      165.966 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter":
[info]   2489687.863 ±(99.9%) 91947.816 ops/s [Average]
[info]   (min, avg, max) = (2450899.769, 2489687.863, 2511920.966), stdev = 23878.556
[info]   CI (99.9%): [2397740.046, 2581635.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate":
[info]   164.498 ±(99.9%) 6.037 MB/sec [Average]
[info]   (min, avg, max) = (161.955, 164.498, 165.966), stdev = 1.568
[info]   CI (99.9%): [158.461, 170.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.537 ±(99.9%) 709.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.537, 336.354), stdev = 184.222
[info]   CI (99.9%): [≈ 0, 843.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   85.064 ±(99.9%) 448.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 85.064, 212.662), stdev = 116.479
[info]   CI (99.9%): [≈ 0, 533.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay
[info] # Run progress: 8.74% complete, ETA 00:25:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49399.532 ops/s
[info] # Warmup Iteration   2: 98353.345 ops/s
[info] # Warmup Iteration   3: 97971.247 ops/s
[info] # Warmup Iteration   4: 100563.982 ops/s
[info] # Warmup Iteration   5: 100220.611 ops/s
[info] Iteration   1: 100159.959 ops/s
[info]                  ·gc.alloc.rate:            837.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       13160.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10572.116 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 99749.878 ops/s
[info]                  ·gc.alloc.rate:                   833.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              13160.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15975.738 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 100077.927 ops/s
[info]                  ·gc.alloc.rate:                                  836.701 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13160.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.784 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10705.634 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 90808.099 ops/s
[info]                  ·gc.alloc.rate:                                  759.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13160.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11799.135 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 90730.126 ops/s
[info]                  ·gc.alloc.rate:            758.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       13160.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17713.916 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay":
[info]   96305.198 ±(99.9%) 19469.376 ops/s [Average]
[info]   (min, avg, max) = (90730.126, 96305.198, 100159.959), stdev = 5056.135
[info]   CI (99.9%): [76835.822, 115774.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate":
[info]   805.178 ±(99.9%) 162.708 MB/sec [Average]
[info]   (min, avg, max) = (758.565, 805.178, 837.372), stdev = 42.255
[info]   CI (99.9%): [642.470, 967.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm":
[info]   13160.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13160.004, 13160.004, 13160.004), stdev = 0.001
[info]   CI (99.9%): [13160.003, 13160.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.164 ±(99.9%) 1.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.784), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen":
[info]   813.520 ±(99.9%) 714.585 MB/sec [Average]
[info]   (min, avg, max) = (672.704, 813.520, 1021.060), stdev = 185.576
[info]   CI (99.9%): [98.935, 1528.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   13353.308 ±(99.9%) 12632.914 B/op [Average]
[info]   (min, avg, max) = (10572.116, 13353.308, 17713.916), stdev = 3280.728
[info]   CI (99.9%): [720.394, 25986.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   12.612 ±(99.9%) 108.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.612, 63.062), stdev = 28.202
[info]   CI (99.9%): [≈ 0, 121.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 14.000), stdev = 5.568
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce
[info] # Run progress: 9.71% complete, ETA 00:25:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 727397.089 ops/s
[info] # Warmup Iteration   2: 1046836.308 ops/s
[info] # Warmup Iteration   3: 1024468.546 ops/s
[info] # Warmup Iteration   4: 1062848.034 ops/s
[info] # Warmup Iteration   5: 1061490.903 ops/s
[info] Iteration   1: 1062911.059 ops/s
[info]                  ·gc.alloc.rate:            1669.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2016.029 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1061379.631 ops/s
[info]                  ·gc.alloc.rate:                                  1666.905 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2523.735 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1064073.246 ops/s
[info]                  ·gc.alloc.rate:                                  1671.058 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2517.359 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1046130.121 ops/s
[info]                  ·gc.alloc.rate:                                  1642.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2560.524 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1067442.848 ops/s
[info]                  ·gc.alloc.rate:                                  1676.399 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2509.443 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce":
[info]   1060387.381 ±(99.9%) 31869.062 ops/s [Average]
[info]   (min, avg, max) = (1046130.121, 1060387.381, 1067442.848), stdev = 8276.294
[info]   CI (99.9%): [1028518.318, 1092256.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate":
[info]   1665.278 ±(99.9%) 50.045 MB/sec [Average]
[info]   (min, avg, max) = (1642.894, 1665.278, 1676.399), stdev = 12.997
[info]   CI (99.9%): [1615.233, 1715.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm":
[info]   2472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.000, 2472.000, 2472.000), stdev = 0.001
[info]   CI (99.9%): [2472.000, 2472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1633.657 ±(99.9%) 586.362 MB/sec [Average]
[info]   (min, avg, max) = (1361.257, 1633.657, 1701.791), stdev = 152.276
[info]   CI (99.9%): [1047.295, 2220.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2425.418 ±(99.9%) 884.459 B/op [Average]
[info]   (min, avg, max) = (2016.029, 2425.418, 2560.524), stdev = 229.691
[info]   CI (99.9%): [1540.959, 3309.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson
[info] # Run progress: 10.68% complete, ETA 00:25:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002037.164 ops/s
[info] # Warmup Iteration   2: 1615738.941 ops/s
[info] # Warmup Iteration   3: 1624081.093 ops/s
[info] # Warmup Iteration   4: 1610271.769 ops/s
[info] # Warmup Iteration   5: 1633220.759 ops/s
[info] Iteration   1: 1631817.879 ops/s
[info]                  ·gc.alloc.rate:                                  1144.530 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1312.604 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.642 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1650132.000 ops/s
[info]                  ·gc.alloc.rate:            1157.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 973.992 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1642776.747 ops/s
[info]                  ·gc.alloc.rate:            1152.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 978.348 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1611585.000 ops/s
[info]                  ·gc.alloc.rate:            1130.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1329.727 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1548215.292 ops/s
[info]                  ·gc.alloc.rate:                                  1086.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1038.100 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson":
[info]   1616905.384 ±(99.9%) 158091.717 ops/s [Average]
[info]   (min, avg, max) = (1548215.292, 1616905.384, 1650132.000), stdev = 41055.917
[info]   CI (99.9%): [1458813.667, 1774997.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate":
[info]   1134.112 ±(99.9%) 110.753 MB/sec [Average]
[info]   (min, avg, max) = (1086.000, 1134.112, 1157.374), stdev = 28.762
[info]   CI (99.9%): [1023.359, 1244.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.186), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.180), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1157.134 ±(99.9%) 717.094 MB/sec [Average]
[info]   (min, avg, max) = (1021.080, 1157.134, 1361.478), stdev = 186.227
[info]   CI (99.9%): [440.039, 1874.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1126.554 ±(99.9%) 691.398 B/op [Average]
[info]   (min, avg, max) = (973.992, 1126.554, 1329.727), stdev = 179.554
[info]   CI (99.9%): [435.156, 1817.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.128 ±(99.9%) 1.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.128, 0.642), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter
[info] # Run progress: 11.65% complete, ETA 00:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6017006.968 ops/s
[info] # Warmup Iteration   2: 6297377.754 ops/s
[info] # Warmup Iteration   3: 5893453.158 ops/s
[info] # Warmup Iteration   4: 5822294.605 ops/s
[info] # Warmup Iteration   5: 6393625.163 ops/s
[info] Iteration   1: 6421761.139 ops/s
[info]                  ·gc.alloc.rate:            816.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246.627 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 6565423.839 ops/s
[info]                  ·gc.alloc.rate:                   834.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        162.078 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 6556738.435 ops/s
[info]                  ·gc.alloc.rate:                                  833.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       163.415 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 6598847.670 ops/s
[info]                  ·gc.alloc.rate:            838.492 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243.553 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 6637929.201 ops/s
[info]                  ·gc.alloc.rate:            843.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161.405 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter":
[info]   6556140.057 ±(99.9%) 314350.569 ops/s [Average]
[info]   (min, avg, max) = (6421761.139, 6556140.057, 6637929.201), stdev = 81635.845
[info]   CI (99.9%): [6241789.487, 6870490.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate":
[info]   833.243 ±(99.9%) 38.791 MB/sec [Average]
[info]   (min, avg, max) = (816.695, 833.243, 843.408), stdev = 10.074
[info]   CI (99.9%): [794.452, 872.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   813.165 ±(99.9%) 706.572 MB/sec [Average]
[info]   (min, avg, max) = (676.154, 813.165, 1021.086), stdev = 183.494
[info]   CI (99.9%): [106.593, 1519.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   195.416 ±(99.9%) 174.684 B/op [Average]
[info]   (min, avg, max) = (161.405, 195.416, 246.627), stdev = 45.365
[info]   CI (99.9%): [20.732, 370.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 1.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.958), stdev = 0.428
[info]   CI (99.9%): [≈ 0, 1.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.541
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay
[info] # Run progress: 12.62% complete, ETA 00:24:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184919.901 ops/s
[info] # Warmup Iteration   2: 325330.697 ops/s
[info] # Warmup Iteration   3: 329231.424 ops/s
[info] # Warmup Iteration   4: 328433.545 ops/s
[info] # Warmup Iteration   5: 331281.659 ops/s
[info] Iteration   1: 330006.142 ops/s
[info]                  ·gc.alloc.rate:            848.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4813.027 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 332966.015 ops/s
[info]                  ·gc.alloc.rate:                   856.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3195.851 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 333749.924 ops/s
[info]                  ·gc.alloc.rate:                                  858.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4815.558 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 334284.241 ops/s
[info]                  ·gc.alloc.rate:            859.694 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3205.331 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 334133.295 ops/s
[info]                  ·gc.alloc.rate:                                  859.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4810.198 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay":
[info]   333027.923 ±(99.9%) 6795.175 ops/s [Average]
[info]   (min, avg, max) = (330006.142, 333027.923, 334284.241), stdev = 1764.685
[info]   CI (99.9%): [326232.749, 339823.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate":
[info]   856.440 ±(99.9%) 17.584 MB/sec [Average]
[info]   (min, avg, max) = (848.616, 856.440, 859.694), stdev = 4.567
[info]   CI (99.9%): [838.856, 874.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.078 ±(99.9%) 0.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.382), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   881.579 ±(99.9%) 714.528 MB/sec [Average]
[info]   (min, avg, max) = (676.042, 881.579, 1021.107), stdev = 185.561
[info]   CI (99.9%): [167.051, 1596.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4167.993 ±(99.9%) 3400.587 B/op [Average]
[info]   (min, avg, max) = (3195.851, 4167.993, 4815.558), stdev = 883.122
[info]   CI (99.9%): [767.406, 7568.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.778 ±(99.9%) 32.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.778, 18.892), stdev = 8.449
[info]   CI (99.9%): [≈ 0, 36.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 17.000), stdev = 5.805
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce
[info] # Run progress: 13.59% complete, ETA 00:24:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359429.296 ops/s
[info] # Warmup Iteration   2: 536943.595 ops/s
[info] # Warmup Iteration   3: 534923.114 ops/s
[info] # Warmup Iteration   4: 540640.383 ops/s
[info] # Warmup Iteration   5: 551791.500 ops/s
[info] Iteration   1: 554931.010 ops/s
[info]                  ·gc.alloc.rate:                                  1796.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4826.950 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 550903.430 ops/s
[info]                  ·gc.alloc.rate:            1783.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4862.289 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 546250.330 ops/s
[info]                  ·gc.alloc.rate:                                  1768.235 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5884.170 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 549752.599 ops/s
[info]                  ·gc.alloc.rate:            1779.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4872.326 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 543069.502 ops/s
[info]                  ·gc.alloc.rate:            1758.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4932.381 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce":
[info]   548981.374 ±(99.9%) 17444.744 ops/s [Average]
[info]   (min, avg, max) = (543069.502, 548981.374, 554931.010), stdev = 4530.344
[info]   CI (99.9%): [531536.631, 566426.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate":
[info]   1777.334 ±(99.9%) 56.624 MB/sec [Average]
[info]   (min, avg, max) = (1758.335, 1777.334, 1796.752), stdev = 14.705
[info]   CI (99.9%): [1720.710, 1833.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm":
[info]   5096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.001, 5096.001, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.001, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1769.784 ±(99.9%) 585.359 MB/sec [Average]
[info]   (min, avg, max) = (1701.681, 1769.784, 2041.718), stdev = 152.016
[info]   CI (99.9%): [1184.425, 2355.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5075.623 ±(99.9%) 1746.582 B/op [Average]
[info]   (min, avg, max) = (4826.950, 5075.623, 5884.170), stdev = 453.582
[info]   CI (99.9%): [3329.041, 6822.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 11.000), stdev = 2.168
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson
[info] # Run progress: 14.56% complete, ETA 00:24:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 619722.782 ops/s
[info] # Warmup Iteration   2: 965533.177 ops/s
[info] # Warmup Iteration   3: 1001858.063 ops/s
[info] # Warmup Iteration   4: 1009439.534 ops/s
[info] # Warmup Iteration   5: 1015770.881 ops/s
[info] Iteration   1: 1000485.102 ops/s
[info]                  ·gc.alloc.rate:                   940.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1587.539 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.239 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 1023059.286 ops/s
[info]                  ·gc.alloc.rate:                                  962.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1569.852 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.025 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1026972.493 ops/s
[info]                  ·gc.alloc.rate:            965.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1564.944 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1021828.111 ops/s
[info]                  ·gc.alloc.rate:                                  960.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1572.822 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1023399.375 ops/s
[info]                  ·gc.alloc.rate:            962.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1570.419 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson":
[info]   1019148.874 ±(99.9%) 40845.958 ops/s [Average]
[info]   (min, avg, max) = (1000485.102, 1019148.874, 1026972.493), stdev = 10607.566
[info]   CI (99.9%): [978302.916, 1059994.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate":
[info]   958.296 ±(99.9%) 38.665 MB/sec [Average]
[info]   (min, avg, max) = (940.607, 958.296, 965.601), stdev = 10.041
[info]   CI (99.9%): [919.631, 996.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen":
[info]   1018.541 ±(99.9%) 20.667 MB/sec [Average]
[info]   (min, avg, max) = (1008.952, 1018.541, 1021.173), stdev = 5.367
[info]   CI (99.9%): [997.874, 1039.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1573.115 ±(99.9%) 32.945 B/op [Average]
[info]   (min, avg, max) = (1564.944, 1573.115, 1587.539), stdev = 8.556
[info]   CI (99.9%): [1540.170, 1606.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.253 ±(99.9%) 8.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.253, 5.239), stdev = 2.272
[info]   CI (99.9%): [≈ 0, 10.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 19.000), stdev = 6.611
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter
[info] # Run progress: 15.53% complete, ETA 00:23:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2185497.872 ops/s
[info] # Warmup Iteration   2: 2325595.398 ops/s
[info] # Warmup Iteration   3: 2339790.522 ops/s
[info] # Warmup Iteration   4: 2555752.922 ops/s
[info] # Warmup Iteration   5: 2592790.447 ops/s
[info] Iteration   1: 2643809.699 ops/s
[info]                  ·gc.alloc.rate:                                  1101.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       807.784 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.379 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 2643131.037 ops/s
[info]                  ·gc.alloc.rate:                                  1101.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       608.055 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 2648519.007 ops/s
[info]                  ·gc.alloc.rate:            1103.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 606.841 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2637169.926 ops/s
[info]                  ·gc.alloc.rate:            1099.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 609.448 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2608426.551 ops/s
[info]                  ·gc.alloc.rate:                                  1087.436 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       821.560 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter":
[info]   2636211.244 ±(99.9%) 61790.817 ops/s [Average]
[info]   (min, avg, max) = (2608426.551, 2636211.244, 2648519.007), stdev = 16046.879
[info]   CI (99.9%): [2574420.427, 2698002.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate":
[info]   1098.689 ±(99.9%) 25.021 MB/sec [Average]
[info]   (min, avg, max) = (1087.436, 1098.689, 1103.717), stdev = 6.498
[info]   CI (99.9%): [1073.669, 1123.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1156.313 ±(99.9%) 713.192 MB/sec [Average]
[info]   (min, avg, max) = (1021.007, 1156.313, 1361.881), stdev = 185.214
[info]   CI (99.9%): [443.121, 1869.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   690.738 ±(99.9%) 436.065 B/op [Average]
[info]   (min, avg, max) = (606.841, 690.738, 821.560), stdev = 113.245
[info]   CI (99.9%): [254.673, 1126.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.476 ±(99.9%) 4.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.476, 2.379), stdev = 1.064
[info]   CI (99.9%): [≈ 0, 4.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay
[info] # Run progress: 16.50% complete, ETA 00:23:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70272.401 ops/s
[info] # Warmup Iteration   2: 170110.963 ops/s
[info] # Warmup Iteration   3: 172926.935 ops/s
[info] # Warmup Iteration   4: 172345.126 ops/s
[info] # Warmup Iteration   5: 171708.277 ops/s
[info] Iteration   1: 174250.289 ops/s
[info]                  ·gc.alloc.rate:                                  1076.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9720.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9181.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                36.099 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 175554.554 ops/s
[info]                  ·gc.alloc.rate:                                  1084.224 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.383 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9154.870 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 175523.459 ops/s
[info]                  ·gc.alloc.rate:            1084.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       9720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9156.174 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 175502.291 ops/s
[info]                  ·gc.alloc.rate:                                  1083.999 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9720.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9157.686 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 173344.002 ops/s
[info]                  ·gc.alloc.rate:                                  1070.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9271.726 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay":
[info]   174834.919 ±(99.9%) 3851.593 ops/s [Average]
[info]   (min, avg, max) = (173344.002, 174834.919, 175554.554), stdev = 1000.246
[info]   CI (99.9%): [170983.326, 178686.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate":
[info]   1079.802 ±(99.9%) 23.879 MB/sec [Average]
[info]   (min, avg, max) = (1070.597, 1079.802, 1084.224), stdev = 6.201
[info]   CI (99.9%): [1055.923, 1103.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm":
[info]   9720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9720.002, 9720.002, 9720.003), stdev = 0.001
[info]   CI (99.9%): [9720.002, 9720.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.043), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.111 ±(99.9%) 0.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.383), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1020.271 ±(99.9%) 8.203 MB/sec [Average]
[info]   (min, avg, max) = (1016.460, 1020.271, 1021.288), stdev = 2.130
[info]   CI (99.9%): [1012.068, 1028.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9184.331 ±(99.9%) 192.710 B/op [Average]
[info]   (min, avg, max) = (9154.870, 9184.331, 9271.726), stdev = 50.046
[info]   CI (99.9%): [8991.621, 9377.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.220 ±(99.9%) 62.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.220, 36.099), stdev = 16.144
[info]   CI (99.9%): [≈ 0, 69.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson
[info] # Run progress: 17.48% complete, ETA 00:23:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 868790.602 ops/s
[info] # Warmup Iteration   2: 1320503.741 ops/s
[info] # Warmup Iteration   3: 1342483.283 ops/s
[info] # Warmup Iteration   4: 1193658.119 ops/s
[info] # Warmup Iteration   5: 1206001.699 ops/s
[info] Iteration   1: 1277324.602 ops/s
[info]                  ·gc.alloc.rate:                   811.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        828.148 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1329176.749 ops/s
[info]                  ·gc.alloc.rate:                   844.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1198.940 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 1345850.992 ops/s
[info]                  ·gc.alloc.rate:                                  854.995 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       796.068 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 1361187.534 ops/s
[info]                  ·gc.alloc.rate:                                  864.720 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1180.648 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1352257.276 ops/s
[info]                  ·gc.alloc.rate:            859.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 792.355 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson":
[info]   1333159.430 ±(99.9%) 128359.467 ops/s [Average]
[info]   (min, avg, max) = (1277324.602, 1333159.430, 1361187.534), stdev = 33334.546
[info]   CI (99.9%): [1204799.964, 1461518.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate":
[info]   846.935 ±(99.9%) 81.578 MB/sec [Average]
[info]   (min, avg, max) = (811.433, 846.935, 864.720), stdev = 21.186
[info]   CI (99.9%): [765.357, 928.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.093), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.023 ±(99.9%) 0.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   813.338 ±(99.9%) 715.022 MB/sec [Average]
[info]   (min, avg, max) = (671.986, 813.338, 1020.930), stdev = 185.689
[info]   CI (99.9%): [98.315, 1528.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   959.232 ±(99.9%) 812.611 B/op [Average]
[info]   (min, avg, max) = (792.355, 959.232, 1198.940), stdev = 211.032
[info]   CI (99.9%): [146.621, 1771.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.111 ±(99.9%) 7.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.111, 4.733), stdev = 2.056
[info]   CI (99.9%): [≈ 0, 9.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 14.000), stdev = 4.919
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter
[info] # Run progress: 18.45% complete, ETA 00:22:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5068845.396 ops/s
[info] # Warmup Iteration   2: 3658546.842 ops/s
[info] # Warmup Iteration   3: 3480958.847 ops/s
[info] # Warmup Iteration   4: 3237949.415 ops/s
[info] # Warmup Iteration   5: 3264265.213 ops/s
[info] Iteration   1: 3648878.804 ops/s
[info]                  ·gc.alloc.rate:            482.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.098 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 3627656.712 ops/s
[info]                  ·gc.alloc.rate:            479.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 291.893 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3667545.974 ops/s
[info]                  ·gc.alloc.rate:            484.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 3625839.092 ops/s
[info]                  ·gc.alloc.rate:            479.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 292.029 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 3649589.645 ops/s
[info]                  ·gc.alloc.rate:            482.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter":
[info]   3643902.046 ±(99.9%) 66870.881 ops/s [Average]
[info]   (min, avg, max) = (3625839.092, 3643902.046, 3667545.974), stdev = 17366.156
[info]   CI (99.9%): [3577031.164, 3710772.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate":
[info]   481.538 ±(99.9%) 8.783 MB/sec [Average]
[info]   (min, avg, max) = (479.090, 481.538, 484.630), stdev = 2.281
[info]   CI (99.9%): [472.755, 490.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.922 ±(99.9%) 709.450 MB/sec [Average]
[info]   (min, avg, max) = (336.353, 470.922, 672.863), stdev = 184.242
[info]   CI (99.9%): [≈ 0, 1180.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   203.691 ±(99.9%) 310.284 B/op [Average]
[info]   (min, avg, max) = (144.361, 203.691, 292.029), stdev = 80.580
[info]   CI (99.9%): [≈ 0, 513.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay
[info] # Run progress: 19.42% complete, ETA 00:22:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96285.168 ops/s
[info] # Warmup Iteration   2: 207594.549 ops/s
[info] # Warmup Iteration   3: 208563.546 ops/s
[info] # Warmup Iteration   4: 210191.723 ops/s
[info] # Warmup Iteration   5: 210580.184 ops/s
[info] Iteration   1: 207182.945 ops/s
[info]                  ·gc.alloc.rate:                   955.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7665.769 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.300 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 212638.029 ops/s
[info]                  ·gc.alloc.rate:                                  980.168 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7553.396 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.930 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 213155.960 ops/s
[info]                  ·gc.alloc.rate:            982.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7539.997 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 213200.979 ops/s
[info]                  ·gc.alloc.rate:            982.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7538.653 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 212780.928 ops/s
[info]                  ·gc.alloc.rate:                                  980.863 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7553.212 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay":
[info]   211791.768 ±(99.9%) 9963.934 ops/s [Average]
[info]   (min, avg, max) = (207182.945, 211791.768, 213200.979), stdev = 2587.602
[info]   CI (99.9%): [201827.834, 221755.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate":
[info]   976.287 ±(99.9%) 45.980 MB/sec [Average]
[info]   (min, avg, max) = (955.021, 976.287, 982.806), stdev = 11.941
[info]   CI (99.9%): [930.307, 1022.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm":
[info]   7256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7256.002, 7256.002, 7256.002), stdev = 0.001
[info]   CI (99.9%): [7256.002, 7256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.070 ±(99.9%) 0.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.347), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   1018.492 ±(99.9%) 20.568 MB/sec [Average]
[info]   (min, avg, max) = (1008.953, 1018.492, 1021.090), stdev = 5.341
[info]   CI (99.9%): [997.924, 1039.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   7570.205 ±(99.9%) 207.469 B/op [Average]
[info]   (min, avg, max) = (7538.653, 7570.205, 7665.769), stdev = 53.879
[info]   CI (99.9%): [7362.736, 7777.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.046 ±(99.9%) 42.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.046, 25.300), stdev = 10.973
[info]   CI (99.9%): [≈ 0, 48.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 17.000), stdev = 5.805
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce
[info] # Run progress: 20.39% complete, ETA 00:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352163.277 ops/s
[info] # Warmup Iteration   2: 472242.530 ops/s
[info] # Warmup Iteration   3: 493039.248 ops/s
[info] # Warmup Iteration   4: 496243.657 ops/s
[info] # Warmup Iteration   5: 499693.183 ops/s
[info] Iteration   1: 502250.016 ops/s
[info]                  ·gc.alloc.rate:            1641.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5333.455 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 499644.761 ops/s
[info]                  ·gc.alloc.rate:                                  1632.799 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5361.097 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 501960.969 ops/s
[info]                  ·gc.alloc.rate:            1640.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4269.075 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 502065.952 ops/s
[info]                  ·gc.alloc.rate:                                  1640.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5335.356 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 504379.047 ops/s
[info]                  ·gc.alloc.rate:            1648.164 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5310.819 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce":
[info]   502060.149 ±(99.9%) 6459.823 ops/s [Average]
[info]   (min, avg, max) = (499644.761, 502060.149, 504379.047), stdev = 1677.596
[info]   CI (99.9%): [495600.326, 508519.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate":
[info]   1640.630 ±(99.9%) 20.962 MB/sec [Average]
[info]   (min, avg, max) = (1632.799, 1640.630, 1648.164), stdev = 5.444
[info]   CI (99.9%): [1619.667, 1661.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.001, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.001, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen":
[info]   1633.599 ±(99.9%) 586.123 MB/sec [Average]
[info]   (min, avg, max) = (1361.310, 1633.599, 1701.709), stdev = 152.214
[info]   CI (99.9%): [1047.476, 2219.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5121.960 ±(99.9%) 1837.179 B/op [Average]
[info]   (min, avg, max) = (4269.075, 5121.960, 5361.097), stdev = 477.110
[info]   CI (99.9%): [3284.781, 6959.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 12.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson
[info] # Run progress: 21.36% complete, ETA 00:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273694.940 ops/s
[info] # Warmup Iteration   2: 494721.287 ops/s
[info] # Warmup Iteration   3: 495133.493 ops/s
[info] # Warmup Iteration   4: 496350.115 ops/s
[info] # Warmup Iteration   5: 495817.113 ops/s
[info] Iteration   1: 495099.953 ops/s
[info]                  ·gc.alloc.rate:            613.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2138.715 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 493808.232 ops/s
[info]                  ·gc.alloc.rate:            612.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2144.358 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 496218.047 ops/s
[info]                  ·gc.alloc.rate:            615.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1066.938 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 492902.761 ops/s
[info]                  ·gc.alloc.rate:                   611.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2148.290 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 497231.701 ops/s
[info]                  ·gc.alloc.rate:                   616.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2152.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson":
[info]   495052.139 ±(99.9%) 6746.667 ops/s [Average]
[info]   (min, avg, max) = (492902.761, 495052.139, 497231.701), stdev = 1752.088
[info]   CI (99.9%): [488305.471, 501798.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate":
[info]   613.993 ±(99.9%) 8.365 MB/sec [Average]
[info]   (min, avg, max) = (611.342, 613.993, 616.656), stdev = 2.172
[info]   CI (99.9%): [605.628, 622.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen":
[info]   606.974 ±(99.9%) 582.465 MB/sec [Average]
[info]   (min, avg, max) = (336.443, 606.974, 680.094), stdev = 151.264
[info]   CI (99.9%): [24.509, 1189.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1930.223 ±(99.9%) 1858.393 B/op [Average]
[info]   (min, avg, max) = (1066.938, 1930.223, 2152.813), stdev = 482.619
[info]   CI (99.9%): [71.830, 3788.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.549 ±(99.9%) 17.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.549, 10.635), stdev = 4.612
[info]   CI (99.9%): [≈ 0, 20.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 12.000), stdev = 3.421
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter
[info] # Run progress: 22.33% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4440202.049 ops/s
[info] # Warmup Iteration   2: 4268569.281 ops/s
[info] # Warmup Iteration   3: 4033447.015 ops/s
[info] # Warmup Iteration   4: 4031930.275 ops/s
[info] # Warmup Iteration   5: 4569302.712 ops/s
[info] Iteration   1: 4437168.810 ops/s
[info]                  ·gc.alloc.rate:            202.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 119.320 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4525582.411 ops/s
[info]                  ·gc.alloc.rate:            207.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116.990 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4567541.485 ops/s
[info]                  ·gc.alloc.rate:      208.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4513397.831 ops/s
[info]                  ·gc.alloc.rate:            206.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117.306 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4524206.266 ops/s
[info]                  ·gc.alloc.rate:            206.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117.027 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter":
[info]   4513579.361 ±(99.9%) 182728.375 ops/s [Average]
[info]   (min, avg, max) = (4437168.810, 4513579.361, 4567541.485), stdev = 47453.979
[info]   CI (99.9%): [4330850.985, 4696307.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate":
[info]   206.454 ±(99.9%) 8.468 MB/sec [Average]
[info]   (min, avg, max) = (202.907, 206.454, 208.941), stdev = 2.199
[info]   CI (99.9%): [197.986, 214.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.073 ±(99.9%) 579.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.073, 336.387), stdev = 150.416
[info]   CI (99.9%): [≈ 0, 848.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   94.128 ±(99.9%) 202.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.128, 119.320), stdev = 52.628
[info]   CI (99.9%): [≈ 0, 296.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay
[info] # Run progress: 23.30% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58434.718 ops/s
[info] # Warmup Iteration   2: 159586.230 ops/s
[info] # Warmup Iteration   3: 160047.131 ops/s
[info] # Warmup Iteration   4: 160824.204 ops/s
[info] # Warmup Iteration   5: 161745.222 ops/s
[info] Iteration   1: 159480.397 ops/s
[info]                  ·gc.alloc.rate:            821.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       8112.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9959.704 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 160663.624 ops/s
[info]                  ·gc.alloc.rate:                   828.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              8112.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6590.755 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 161962.132 ops/s
[info]                  ·gc.alloc.rate:                                  834.789 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.188 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.827 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.552 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9917.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.473 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 162333.468 ops/s
[info]                  ·gc.alloc.rate:                                  836.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6600.382 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 161770.238 ops/s
[info]                  ·gc.alloc.rate:            833.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       8112.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9934.656 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay":
[info]   161241.972 ±(99.9%) 4485.088 ops/s [Average]
[info]   (min, avg, max) = (159480.397, 161241.972, 162333.468), stdev = 1164.763
[info]   CI (99.9%): [156756.884, 165727.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate":
[info]   831.018 ±(99.9%) 23.269 MB/sec [Average]
[info]   (min, avg, max) = (821.857, 831.018, 836.596), stdev = 6.043
[info]   CI (99.9%): [807.748, 854.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm":
[info]   8112.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8112.003, 8112.003, 8112.003), stdev = 0.001
[info]   CI (99.9%): [8112.002, 8112.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.188), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.368 ±(99.9%) 3.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.827), stdev = 0.816
[info]   CI (99.9%): [≈ 0, 3.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen":
[info]   880.844 ±(99.9%) 717.837 MB/sec [Average]
[info]   (min, avg, max) = (672.745, 880.844, 1021.169), stdev = 186.420
[info]   CI (99.9%): [163.007, 1598.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8600.528 ±(99.9%) 7047.967 B/op [Average]
[info]   (min, avg, max) = (6590.755, 8600.528, 9959.704), stdev = 1830.335
[info]   CI (99.9%): [1552.560, 15648.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.820 ±(99.9%) 54.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.820, 32.627), stdev = 14.148
[info]   CI (99.9%): [≈ 0, 62.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 6.058
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce
[info] # Run progress: 24.27% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2939.401 ops/s
[info] # Warmup Iteration   2: 4352.590 ops/s
[info] # Warmup Iteration   3: 4485.332 ops/s
[info] # Warmup Iteration   4: 4370.571 ops/s
[info] # Warmup Iteration   5: 4021.695 ops/s
[info] Iteration   1: 4044.907 ops/s
[info]                  ·gc.alloc.rate:                                  973.598 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.101 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 48.263 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       395224.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1814.145 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 4425.417 ops/s
[info]                  ·gc.alloc.rate:                                  1065.227 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.107 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       363105.265 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 4583.239 ops/s
[info]                  ·gc.alloc.rate:            1103.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       378808.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 350669.068 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 4515.059 ops/s
[info]                  ·gc.alloc.rate:                                  1086.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.097 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 28.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       474599.058 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4530.447 ops/s
[info]                  ·gc.alloc.rate:                                  1090.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.950 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       354692.632 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce":
[info]   4419.814 ±(99.9%) 836.143 ops/s [Average]
[info]   (min, avg, max) = (4044.907, 4419.814, 4583.239), stdev = 217.144
[info]   CI (99.9%): [3583.671, 5255.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1063.814 ±(99.9%) 201.216 MB/sec [Average]
[info]   (min, avg, max) = (973.598, 1063.814, 1103.268), stdev = 52.255
[info]   CI (99.9%): [862.598, 1265.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   378808.097 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (378808.089, 378808.097, 378808.107), stdev = 0.007
[info]   CI (99.9%): [378808.068, 378808.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.057 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.124), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   20.922 ±(99.9%) 78.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.922, 48.263), stdev = 20.472
[info]   CI (99.9%): [≈ 0, 99.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1088.100 ±(99.9%) 588.256 MB/sec [Average]
[info]   (min, avg, max) = (1015.791, 1088.100, 1361.349), stdev = 152.768
[info]   CI (99.9%): [499.844, 1676.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   387658.108 ±(99.9%) 198912.252 B/op [Average]
[info]   (min, avg, max) = (350669.068, 387658.108, 474599.058), stdev = 51656.880
[info]   CI (99.9%): [188745.856, 586570.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   362.829 ±(99.9%) 3124.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 362.829, 1814.145), stdev = 811.310
[info]   CI (99.9%): [≈ 0, 3486.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson
[info] # Run progress: 25.24% complete, ETA 00:21:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5179.709 ops/s
[info] # Warmup Iteration   2: 8239.581 ops/s
[info] # Warmup Iteration   3: 8291.161 ops/s
[info] # Warmup Iteration   4: 8999.114 ops/s
[info] # Warmup Iteration   5: 9342.925 ops/s
[info] Iteration   1: 9330.046 ops/s
[info]                  ·gc.alloc.rate:            324.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       54800.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56631.194 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 9289.560 ops/s
[info]                  ·gc.alloc.rate:            323.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       54800.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56874.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 9315.921 ops/s
[info]                  ·gc.alloc.rate:            324.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       54800.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56716.281 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 9310.073 ops/s
[info]                  ·gc.alloc.rate:            324.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       54800.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56752.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 9278.127 ops/s
[info]                  ·gc.alloc.rate:                   322.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              54800.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56948.524 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 112.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson":
[info]   9304.745 ±(99.9%) 80.138 ops/s [Average]
[info]   (min, avg, max) = (9278.127, 9304.745, 9330.046), stdev = 20.812
[info]   CI (99.9%): [9224.607, 9384.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   323.961 ±(99.9%) 2.839 MB/sec [Average]
[info]   (min, avg, max) = (322.996, 323.961, 324.830), stdev = 0.737
[info]   CI (99.9%): [321.121, 326.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   54800.046 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (54800.044, 54800.046, 54800.051), stdev = 0.003
[info]   CI (99.9%): [54800.034, 54800.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   335.692 ±(99.9%) 0.202 MB/sec [Average]
[info]   (min, avg, max) = (335.659, 335.692, 335.784), stdev = 0.052
[info]   CI (99.9%): [335.491, 335.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   56784.761 ±(99.9%) 488.022 B/op [Average]
[info]   (min, avg, max) = (56631.194, 56784.761, 56948.524), stdev = 126.738
[info]   CI (99.9%): [56296.738, 57272.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.599 ±(99.9%) 194.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.599, 112.993), stdev = 50.532
[info]   CI (99.9%): [≈ 0, 217.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter
[info] # Run progress: 26.21% complete, ETA 00:20:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11086.225 ops/s
[info] # Warmup Iteration   2: 13503.332 ops/s
[info] # Warmup Iteration   3: 13557.293 ops/s
[info] # Warmup Iteration   4: 15169.250 ops/s
[info] # Warmup Iteration   5: 15217.447 ops/s
[info] Iteration   1: 14957.583 ops/s
[info]                  ·gc.alloc.rate:            255.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35394.083 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 13636.308 ops/s
[info]                  ·gc.alloc.rate:      233.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 26896.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 13564.445 ops/s
[info]                  ·gc.alloc.rate:            231.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39030.801 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 14271.311 ops/s
[info]                  ·gc.alloc.rate:            243.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37097.582 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 15239.589 ops/s
[info]                  ·gc.alloc.rate:            260.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34739.282 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter":
[info]   14333.847 ±(99.9%) 2914.728 ops/s [Average]
[info]   (min, avg, max) = (13564.445, 14333.847, 15239.589), stdev = 756.946
[info]   CI (99.9%): [11419.119, 17248.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   244.970 ±(99.9%) 49.814 MB/sec [Average]
[info]   (min, avg, max) = (231.817, 244.970, 260.479), stdev = 12.937
[info]   CI (99.9%): [195.156, 294.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   26896.031 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (26896.027, 26896.031, 26896.038), stdev = 0.005
[info]   CI (99.9%): [26896.013, 26896.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.123 ±(99.9%) 579.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.123, 336.438), stdev = 150.444
[info]   CI (99.9%): [≈ 0, 848.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   29252.350 ±(99.9%) 63292.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29252.350, 39030.801), stdev = 16436.948
[info]   CI (99.9%): [≈ 0, 92545.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 7.000), stdev = 2.775
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay
[info] # Run progress: 27.18% complete, ETA 00:20:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 756.504 ops/s
[info] # Warmup Iteration   2: 1678.047 ops/s
[info] # Warmup Iteration   3: 1655.696 ops/s
[info] # Warmup Iteration   4: 1642.621 ops/s
[info] # Warmup Iteration   5: 1685.876 ops/s
[info] Iteration   1: 1703.772 ops/s
[info]                  ·gc.alloc.rate:                                  1064.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.277 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 50.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1248451.191 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4305.004 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 1725.922 ops/s
[info]                  ·gc.alloc.rate:                                  1077.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.255 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 34.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       930785.760 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 1734.569 ops/s
[info]                  ·gc.alloc.rate:            1083.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       982976.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 926493.953 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1729.065 ops/s
[info]                  ·gc.alloc.rate:                                  1079.967 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.254 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 63.912 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       929171.681 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1733.263 ops/s
[info]                  ·gc.alloc.rate:            1082.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       982976.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 927028.263 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay":
[info]   1725.318 ±(99.9%) 48.224 ops/s [Average]
[info]   (min, avg, max) = (1703.772, 1725.318, 1734.569), stdev = 12.524
[info]   CI (99.9%): [1677.095, 1773.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1077.528 ±(99.9%) 29.959 MB/sec [Average]
[info]   (min, avg, max) = (1064.103, 1077.528, 1083.154), stdev = 7.780
[info]   CI (99.9%): [1047.569, 1107.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   982976.251 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (982976.235, 982976.251, 982976.277), stdev = 0.017
[info]   CI (99.9%): [982976.185, 982976.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.070), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   29.644 ±(99.9%) 111.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.644, 63.912), stdev = 29.037
[info]   CI (99.9%): [≈ 0, 141.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1086.966 ±(99.9%) 569.403 MB/sec [Average]
[info]   (min, avg, max) = (1020.746, 1086.966, 1351.488), stdev = 147.872
[info]   CI (99.9%): [517.563, 1656.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   992386.170 ±(99.9%) 551238.935 B/op [Average]
[info]   (min, avg, max) = (926493.953, 992386.170, 1248451.191), stdev = 143155.001
[info]   CI (99.9%): [441147.234, 1543625.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.660), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 8.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   861.001 ±(99.9%) 7413.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 861.001, 4305.004), stdev = 1925.256
[info]   CI (99.9%): [≈ 0, 8274.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 16.000), stdev = 5.385
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter
[info] # Run progress: 28.16% complete, ETA 00:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2763135.995 ops/s
[info] # Warmup Iteration   2: 3192486.539 ops/s
[info] # Warmup Iteration   3: 3242467.996 ops/s
[info] # Warmup Iteration   4: 3201312.774 ops/s
[info] # Warmup Iteration   5: 3235583.356 ops/s
[info] Iteration   1: 3272007.048 ops/s
[info]                  ·gc.alloc.rate:                   981.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        325.219 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3280946.935 ops/s
[info]                  ·gc.alloc.rate:                                  983.888 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       489.825 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3297241.184 ops/s
[info]                  ·gc.alloc.rate:                                  988.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       487.432 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 3292846.972 ops/s
[info]                  ·gc.alloc.rate:            987.394 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 488.091 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 3295286.889 ops/s
[info]                  ·gc.alloc.rate:            988.077 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.713 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter":
[info]   3287665.806 ±(99.9%) 41604.474 ops/s [Average]
[info]   (min, avg, max) = (3272007.048, 3287665.806, 3297241.184), stdev = 10804.550
[info]   CI (99.9%): [3246061.331, 3329270.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   985.859 ±(99.9%) 12.341 MB/sec [Average]
[info]   (min, avg, max) = (981.203, 985.859, 988.732), stdev = 3.205
[info]   CI (99.9%): [973.517, 998.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   952.039 ±(99.9%) 594.041 MB/sec [Average]
[info]   (min, avg, max) = (676.072, 952.039, 1021.058), stdev = 154.271
[info]   CI (99.9%): [357.998, 1546.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   455.656 ±(99.9%) 280.798 B/op [Average]
[info]   (min, avg, max) = (325.219, 455.656, 489.825), stdev = 72.922
[info]   CI (99.9%): [174.858, 736.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.384 ±(99.9%) 3.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 1.922), stdev = 0.860
[info]   CI (99.9%): [≈ 0, 3.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay
[info] # Run progress: 29.13% complete, ETA 00:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97126.144 ops/s
[info] # Warmup Iteration   2: 180908.244 ops/s
[info] # Warmup Iteration   3: 180869.651 ops/s
[info] # Warmup Iteration   4: 181473.727 ops/s
[info] # Warmup Iteration   5: 170280.933 ops/s
[info] Iteration   1: 182316.874 ops/s
[info]                  ·gc.alloc.rate:                   990.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              8552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8740.865 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 34.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 186427.293 ops/s
[info]                  ·gc.alloc.rate:                                  1012.929 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.734 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8621.114 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 185873.754 ops/s
[info]                  ·gc.alloc.rate:            1009.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       8552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8646.619 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 185110.043 ops/s
[info]                  ·gc.alloc.rate:            1005.738 MB/sec
[info]                  ·gc.alloc.rate.norm:       8552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8681.831 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 185258.404 ops/s
[info]                  ·gc.alloc.rate:            1006.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       8552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8674.756 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay":
[info]   184997.274 ±(99.9%) 6112.290 ops/s [Average]
[info]   (min, avg, max) = (182316.874, 184997.274, 186427.293), stdev = 1587.342
[info]   CI (99.9%): [178884.984, 191109.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate":
[info]   1005.091 ±(99.9%) 33.448 MB/sec [Average]
[info]   (min, avg, max) = (990.448, 1005.091, 1012.929), stdev = 8.686
[info]   CI (99.9%): [971.643, 1038.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   8552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8552.002, 8552.002, 8552.002), stdev = 0.001
[info]   CI (99.9%): [8552.002, 8552.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.147 ±(99.9%) 1.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.734), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1019.280 ±(99.9%) 14.990 MB/sec [Average]
[info]   (min, avg, max) = (1012.321, 1019.280, 1021.159), stdev = 3.893
[info]   CI (99.9%): [1004.290, 1034.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8673.037 ±(99.9%) 173.010 B/op [Average]
[info]   (min, avg, max) = (8621.114, 8673.037, 8740.865), stdev = 44.930
[info]   CI (99.9%): [8500.027, 8846.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.901 ±(99.9%) 59.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.901, 34.503), stdev = 15.430
[info]   CI (99.9%): [≈ 0, 66.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.438
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce
[info] # Run progress: 30.10% complete, ETA 00:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293398.653 ops/s
[info] # Warmup Iteration   2: 442339.158 ops/s
[info] # Warmup Iteration   3: 448285.042 ops/s
[info] # Warmup Iteration   4: 444131.436 ops/s
[info] # Warmup Iteration   5: 454354.967 ops/s
[info] Iteration   1: 455759.111 ops/s
[info]                  ·gc.alloc.rate:            1646.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5877.462 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 453796.299 ops/s
[info]                  ·gc.alloc.rate:                                  1640.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5902.882 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 455738.300 ops/s
[info]                  ·gc.alloc.rate:                                  1647.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4701.815 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   4: 457438.856 ops/s
[info]                  ·gc.alloc.rate:                                  1653.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5855.649 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 456570.886 ops/s
[info]                  ·gc.alloc.rate:                                  1650.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5862.799 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce":
[info]   455860.690 ±(99.9%) 5195.513 ops/s [Average]
[info]   (min, avg, max) = (453796.299, 455860.690, 457438.856), stdev = 1349.258
[info]   CI (99.9%): [450665.177, 461056.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate":
[info]   1647.515 ±(99.9%) 18.633 MB/sec [Average]
[info]   (min, avg, max) = (1640.177, 1647.515, 1653.125), stdev = 4.839
[info]   CI (99.9%): [1628.883, 1666.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1633.651 ±(99.9%) 585.716 MB/sec [Average]
[info]   (min, avg, max) = (1361.551, 1633.651, 1702.139), stdev = 152.109
[info]   CI (99.9%): [1047.934, 2219.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5640.121 ±(99.9%) 2020.974 B/op [Average]
[info]   (min, avg, max) = (4701.815, 5640.121, 5902.882), stdev = 524.841
[info]   CI (99.9%): [3619.147, 7661.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 13.000), stdev = 2.793
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson
[info] # Run progress: 31.07% complete, ETA 00:19:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247732.804 ops/s
[info] # Warmup Iteration   2: 470513.756 ops/s
[info] # Warmup Iteration   3: 463158.670 ops/s
[info] # Warmup Iteration   4: 472461.395 ops/s
[info] # Warmup Iteration   5: 465733.544 ops/s
[info] Iteration   1: 468026.942 ops/s
[info]                  ·gc.alloc.rate:            544.761 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2257.994 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 472944.992 ops/s
[info]                  ·gc.alloc.rate:            550.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1117.263 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 469416.833 ops/s
[info]                  ·gc.alloc.rate:            546.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2251.160 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 474527.923 ops/s
[info]                  ·gc.alloc.rate:            552.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1113.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 469067.531 ops/s
[info]                  ·gc.alloc.rate:                   545.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2253.007 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson":
[info]   470796.844 ±(99.9%) 10737.498 ops/s [Average]
[info]   (min, avg, max) = (468026.942, 470796.844, 474527.923), stdev = 2788.494
[info]   CI (99.9%): [460059.346, 481534.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate":
[info]   547.956 ±(99.9%) 12.479 MB/sec [Average]
[info]   (min, avg, max) = (544.761, 547.956, 552.341), stdev = 3.241
[info]   CI (99.9%): [535.476, 560.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   537.114 ±(99.9%) 708.018 MB/sec [Average]
[info]   (min, avg, max) = (335.662, 537.114, 671.434), stdev = 183.870
[info]   CI (99.9%): [≈ 0, 1245.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1798.593 ±(99.9%) 2401.539 B/op [Average]
[info]   (min, avg, max) = (1113.539, 1798.593, 2257.994), stdev = 623.672
[info]   CI (99.9%): [≈ 0, 4200.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.235 ±(99.9%) 19.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.235, 11.176), stdev = 4.998
[info]   CI (99.9%): [≈ 0, 21.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter
[info] # Run progress: 32.04% complete, ETA 00:19:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2279418.426 ops/s
[info] # Warmup Iteration   2: 2780325.965 ops/s
[info] # Warmup Iteration   3: 2823011.860 ops/s
[info] # Warmup Iteration   4: 2816456.891 ops/s
[info] # Warmup Iteration   5: 2808784.104 ops/s
[info] Iteration   1: 2870460.155 ops/s
[info]                  ·gc.alloc.rate:                                  1137.754 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       559.909 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2861046.693 ops/s
[info]                  ·gc.alloc.rate:            1134.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 561.736 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2863672.025 ops/s
[info]                  ·gc.alloc.rate:            1135.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 748.280 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2888369.721 ops/s
[info]                  ·gc.alloc.rate:            1145.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 556.434 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2877525.205 ops/s
[info]                  ·gc.alloc.rate:            1140.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 558.534 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter":
[info]   2872214.760 ±(99.9%) 42617.351 ops/s [Average]
[info]   (min, avg, max) = (2861046.693, 2872214.760, 2888369.721), stdev = 11067.591
[info]   CI (99.9%): [2829597.408, 2914832.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate":
[info]   1138.564 ±(99.9%) 17.042 MB/sec [Average]
[info]   (min, avg, max) = (1134.179, 1138.564, 1145.021), stdev = 4.426
[info]   CI (99.9%): [1121.522, 1155.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.151), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1089.041 ±(99.9%) 585.804 MB/sec [Average]
[info]   (min, avg, max) = (1020.895, 1089.041, 1361.181), stdev = 152.131
[info]   CI (99.9%): [503.237, 1674.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   596.979 ±(99.9%) 325.772 B/op [Average]
[info]   (min, avg, max) = (556.434, 596.979, 748.280), stdev = 84.602
[info]   CI (99.9%): [271.206, 922.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay
[info] # Run progress: 33.01% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47717.813 ops/s
[info] # Warmup Iteration   2: 124294.741 ops/s
[info] # Warmup Iteration   3: 124760.477 ops/s
[info] # Warmup Iteration   4: 130401.091 ops/s
[info] # Warmup Iteration   5: 129486.043 ops/s
[info] Iteration   1: 129801.779 ops/s
[info]                  ·gc.alloc.rate:            905.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       10984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12236.887 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 129721.689 ops/s
[info]                  ·gc.alloc.rate:                                  905.276 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10984.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12333.431 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                48.493 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 131717.439 ops/s
[info]                  ·gc.alloc.rate:                                  919.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10984.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.381 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8134.296 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 130773.533 ops/s
[info]                  ·gc.alloc.rate:                                  912.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10984.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12289.973 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 129986.357 ops/s
[info]                  ·gc.alloc.rate:            907.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       10984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12364.560 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay":
[info]   130400.159 ±(99.9%) 3258.431 ops/s [Average]
[info]   (min, avg, max) = (129721.689, 130400.159, 131717.439), stdev = 846.204
[info]   CI (99.9%): [127141.728, 133658.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate":
[info]   909.989 ±(99.9%) 22.817 MB/sec [Average]
[info]   (min, avg, max) = (905.276, 909.989, 919.191), stdev = 5.926
[info]   CI (99.9%): [887.171, 932.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm":
[info]   10984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10984.003, 10984.003, 10984.003), stdev = 0.001
[info]   CI (99.9%): [10984.003, 10984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.032), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.141 ±(99.9%) 0.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.381), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   949.704 ±(99.9%) 579.330 MB/sec [Average]
[info]   (min, avg, max) = (680.715, 949.704, 1021.164), stdev = 150.450
[info]   CI (99.9%): [370.373, 1529.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   11471.829 ±(99.9%) 7186.669 B/op [Average]
[info]   (min, avg, max) = (8134.296, 11471.829, 12364.560), stdev = 1866.355
[info]   CI (99.9%): [4285.160, 18658.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.699 ±(99.9%) 83.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.699, 48.493), stdev = 21.687
[info]   CI (99.9%): [≈ 0, 93.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.309
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce
[info] # Run progress: 33.98% complete, ETA 00:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202423.445 ops/s
[info] # Warmup Iteration   2: 387143.175 ops/s
[info] # Warmup Iteration   3: 399605.464 ops/s
[info] # Warmup Iteration   4: 402282.360 ops/s
[info] # Warmup Iteration   5: 406962.963 ops/s
[info] Iteration   1: 410797.845 ops/s
[info]                  ·gc.alloc.rate:                                  1428.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5216.453 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 403790.259 ops/s
[info]                  ·gc.alloc.rate:            1403.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6633.731 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 408365.569 ops/s
[info]                  ·gc.alloc.rate:            1419.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5247.565 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 407304.606 ops/s
[info]                  ·gc.alloc.rate:            1415.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5261.155 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 407513.617 ops/s
[info]                  ·gc.alloc.rate:            1416.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5258.431 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce":
[info]   407554.379 ±(99.9%) 9705.369 ops/s [Average]
[info]   (min, avg, max) = (403790.259, 407554.379, 410797.845), stdev = 2520.454
[info]   CI (99.9%): [397849.010, 417259.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate":
[info]   1416.722 ±(99.9%) 33.706 MB/sec [Average]
[info]   (min, avg, max) = (1403.725, 1416.722, 1428.044), stdev = 8.753
[info]   CI (99.9%): [1383.016, 1450.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen":
[info]   1429.375 ±(99.9%) 586.290 MB/sec [Average]
[info]   (min, avg, max) = (1361.136, 1429.375, 1701.742), stdev = 152.258
[info]   CI (99.9%): [843.085, 2015.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5523.467 ±(99.9%) 2390.902 B/op [Average]
[info]   (min, avg, max) = (5216.453, 5523.467, 6633.731), stdev = 620.910
[info]   CI (99.9%): [3132.565, 7914.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson
[info] # Run progress: 34.95% complete, ETA 00:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331769.280 ops/s
[info] # Warmup Iteration   2: 700861.607 ops/s
[info] # Warmup Iteration   3: 718609.342 ops/s
[info] # Warmup Iteration   4: 722728.614 ops/s
[info] # Warmup Iteration   5: 715770.690 ops/s
[info] Iteration   1: 720344.011 ops/s
[info]                  ·gc.alloc.rate:            849.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1467.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 717496.101 ops/s
[info]                  ·gc.alloc.rate:                   846.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2218.070 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 731206.993 ops/s
[info]                  ·gc.alloc.rate:                                  862.240 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.259 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1465.230 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 735450.344 ops/s
[info]                  ·gc.alloc.rate:            867.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2185.395 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 713854.654 ops/s
[info]                  ·gc.alloc.rate:            842.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1500.981 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson":
[info]   723670.421 ±(99.9%) 35558.722 ops/s [Average]
[info]   (min, avg, max) = (713854.654, 723670.421, 735450.344), stdev = 9234.487
[info]   CI (99.9%): [688111.699, 759229.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate":
[info]   853.420 ±(99.9%) 41.840 MB/sec [Average]
[info]   (min, avg, max) = (842.003, 853.420, 867.376), stdev = 10.866
[info]   CI (99.9%): [811.580, 895.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.000, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.120), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.259), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen":
[info]   813.102 ±(99.9%) 714.510 MB/sec [Average]
[info]   (min, avg, max) = (671.295, 813.102, 1021.314), stdev = 185.556
[info]   CI (99.9%): [98.592, 1527.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1767.336 ±(99.9%) 1528.596 B/op [Average]
[info]   (min, avg, max) = (1465.230, 1767.336, 2218.070), stdev = 396.972
[info]   CI (99.9%): [238.740, 3295.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.046 ±(99.9%) 17.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.046, 10.228), stdev = 4.574
[info]   CI (99.9%): [≈ 0, 19.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 6.309
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter
[info] # Run progress: 35.92% complete, ETA 00:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2585191.398 ops/s
[info] # Warmup Iteration   2: 2719273.495 ops/s
[info] # Warmup Iteration   3: 2724709.366 ops/s
[info] # Warmup Iteration   4: 2966870.700 ops/s
[info] # Warmup Iteration   5: 3115613.208 ops/s
[info] Iteration   1: 3088626.001 ops/s
[info]                  ·gc.alloc.rate:            769.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 342.842 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3061623.400 ops/s
[info]                  ·gc.alloc.rate:                   762.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        518.802 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.712 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 3111742.803 ops/s
[info]                  ·gc.alloc.rate:                   774.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             679.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        343.963 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3045314.497 ops/s
[info]                  ·gc.alloc.rate:                                  758.455 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       351.847 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2787316.725 ops/s
[info]                  ·gc.alloc.rate:            694.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 384.416 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter":
[info]   3018924.685 ±(99.9%) 508063.705 ops/s [Average]
[info]   (min, avg, max) = (2787316.725, 3018924.685, 3111742.803), stdev = 131942.531
[info]   CI (99.9%): [2510860.980, 3526988.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate":
[info]   751.890 ±(99.9%) 126.437 MB/sec [Average]
[info]   (min, avg, max) = (694.237, 751.890, 774.918), stdev = 32.835
[info]   CI (99.9%): [625.454, 878.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   744.720 ±(99.9%) 569.712 MB/sec [Average]
[info]   (min, avg, max) = (672.753, 744.720, 1009.316), stdev = 147.952
[info]   CI (99.9%): [175.007, 1314.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   388.374 ±(99.9%) 288.200 B/op [Average]
[info]   (min, avg, max) = (342.842, 388.374, 518.802), stdev = 74.845
[info]   CI (99.9%): [100.174, 676.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.410 ±(99.9%) 2.859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.410, 1.712), stdev = 0.743
[info]   CI (99.9%): [≈ 0, 3.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 17.000), stdev = 6.427
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay
[info] # Run progress: 36.89% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106704.621 ops/s
[info] # Warmup Iteration   2: 190321.195 ops/s
[info] # Warmup Iteration   3: 190231.659 ops/s
[info] # Warmup Iteration   4: 190858.142 ops/s
[info] # Warmup Iteration   5: 189922.027 ops/s
[info] Iteration   1: 193435.366 ops/s
[info]                  ·gc.alloc.rate:                                  1076.295 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8270.416 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                32.518 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 195495.568 ops/s
[info]                  ·gc.alloc.rate:                                  1087.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.350 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8221.328 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 192450.364 ops/s
[info]                  ·gc.alloc.rate:                                  1070.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8350.782 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 192911.134 ops/s
[info]                  ·gc.alloc.rate:            1073.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       8760.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11108.349 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 193225.177 ops/s
[info]                  ·gc.alloc.rate:            1075.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       8760.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8317.769 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay":
[info]   193503.522 ±(99.9%) 4519.561 ops/s [Average]
[info]   (min, avg, max) = (192450.364, 193503.522, 195495.568), stdev = 1173.716
[info]   CI (99.9%): [188983.960, 198023.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate":
[info]   1076.848 ±(99.9%) 25.003 MB/sec [Average]
[info]   (min, avg, max) = (1070.979, 1076.848, 1087.892), stdev = 6.493
[info]   CI (99.9%): [1051.845, 1101.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm":
[info]   8760.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8760.002, 8760.002, 8760.002), stdev = 0.001
[info]   CI (99.9%): [8760.002, 8760.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.350), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1088.144 ±(99.9%) 588.679 MB/sec [Average]
[info]   (min, avg, max) = (1016.142, 1088.144, 1361.595), stdev = 152.878
[info]   CI (99.9%): [499.465, 1676.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8853.729 ±(99.9%) 4856.892 B/op [Average]
[info]   (min, avg, max) = (8221.328, 8853.729, 11108.349), stdev = 1261.319
[info]   CI (99.9%): [3996.837, 13710.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.504 ±(99.9%) 55.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.504, 32.518), stdev = 14.542
[info]   CI (99.9%): [≈ 0, 62.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce
[info] # Run progress: 37.86% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281625.981 ops/s
[info] # Warmup Iteration   2: 455211.426 ops/s
[info] # Warmup Iteration   3: 468103.165 ops/s
[info] # Warmup Iteration   4: 475824.816 ops/s
[info] # Warmup Iteration   5: 478735.019 ops/s
[info] Iteration   1: 482816.434 ops/s
[info]                  ·gc.alloc.rate:                                  1845.213 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5547.964 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 477505.939 ops/s
[info]                  ·gc.alloc.rate:            1824.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6731.563 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 484077.172 ops/s
[info]                  ·gc.alloc.rate:                                  1849.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5533.480 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 484142.450 ops/s
[info]                  ·gc.alloc.rate:                                  1850.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6639.367 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 484515.798 ops/s
[info]                  ·gc.alloc.rate:                                  1851.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5528.729 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce":
[info]   482611.559 ±(99.9%) 11263.891 ops/s [Average]
[info]   (min, avg, max) = (477505.939, 482611.559, 484515.798), stdev = 2925.197
[info]   CI (99.9%): [471347.667, 493875.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate":
[info]   1844.398 ±(99.9%) 42.940 MB/sec [Average]
[info]   (min, avg, max) = (1824.954, 1844.398, 1851.990), stdev = 11.152
[info]   CI (99.9%): [1801.458, 1887.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1837.772 ±(99.9%) 717.765 MB/sec [Average]
[info]   (min, avg, max) = (1701.287, 1837.772, 2042.020), stdev = 186.401
[info]   CI (99.9%): [1120.007, 2555.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5996.221 ±(99.9%) 2426.194 B/op [Average]
[info]   (min, avg, max) = (5528.729, 5996.221, 6731.563), stdev = 630.075
[info]   CI (99.9%): [3570.027, 8422.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter
[info] # Run progress: 38.83% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1998029.679 ops/s
[info] # Warmup Iteration   2: 2054505.410 ops/s
[info] # Warmup Iteration   3: 2053323.580 ops/s
[info] # Warmup Iteration   4: 2044837.380 ops/s
[info] # Warmup Iteration   5: 2100129.610 ops/s
[info] Iteration   1: 2107616.782 ops/s
[info]                  ·gc.alloc.rate:                                  1360.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1016.777 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2096372.124 ops/s
[info]                  ·gc.alloc.rate:            1353.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1022.204 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2119757.908 ops/s
[info]                  ·gc.alloc.rate:                                  1368.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1010.933 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 2118678.114 ops/s
[info]                  ·gc.alloc.rate:                                  1367.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1011.480 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2120718.589 ops/s
[info]                  ·gc.alloc.rate:                                  1368.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1010.496 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter":
[info]   2112628.703 ±(99.9%) 40489.612 ops/s [Average]
[info]   (min, avg, max) = (2096372.124, 2112628.703, 2120718.589), stdev = 10515.024
[info]   CI (99.9%): [2072139.091, 2153118.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate":
[info]   1363.762 ±(99.9%) 26.222 MB/sec [Average]
[info]   (min, avg, max) = (1353.347, 1363.762, 1368.925), stdev = 6.810
[info]   CI (99.9%): [1337.540, 1389.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1361.557 ±(99.9%) 0.544 MB/sec [Average]
[info]   (min, avg, max) = (1361.334, 1361.557, 1361.689), stdev = 0.141
[info]   CI (99.9%): [1361.013, 1362.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1014.378 ±(99.9%) 19.478 B/op [Average]
[info]   (min, avg, max) = (1010.496, 1014.378, 1022.204), stdev = 5.058
[info]   CI (99.9%): [994.900, 1033.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay
[info] # Run progress: 39.81% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43537.083 ops/s
[info] # Warmup Iteration   2: 132199.186 ops/s
[info] # Warmup Iteration   3: 130776.445 ops/s
[info] # Warmup Iteration   4: 134333.377 ops/s
[info] # Warmup Iteration   5: 132593.528 ops/s
[info] Iteration   1: 134155.779 ops/s
[info]                  ·gc.alloc.rate:                   966.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11839.618 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 135934.506 ops/s
[info]                  ·gc.alloc.rate:                                  979.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.217 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11815.636 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.713 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 136613.097 ops/s
[info]                  ·gc.alloc.rate:                                  984.677 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11764.249 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 136869.078 ops/s
[info]                  ·gc.alloc.rate:            986.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7828.510 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 136985.392 ops/s
[info]                  ·gc.alloc.rate:            987.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11732.736 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay":
[info]   136111.571 ±(99.9%) 4492.806 ops/s [Average]
[info]   (min, avg, max) = (134155.779, 136111.571, 136985.392), stdev = 1166.767
[info]   CI (99.9%): [131618.765, 140604.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate":
[info]   980.975 ±(99.9%) 32.728 MB/sec [Average]
[info]   (min, avg, max) = (966.714, 980.975, 987.315), stdev = 8.499
[info]   CI (99.9%): [948.247, 1013.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   11344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11344.003, 11344.003, 11344.003), stdev = 0.001
[info]   CI (99.9%): [11344.003, 11344.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.217), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.506 ±(99.9%) 4.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.514), stdev = 1.123
[info]   CI (99.9%): [≈ 0, 4.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   950.490 ±(99.9%) 580.964 MB/sec [Average]
[info]   (min, avg, max) = (680.757, 950.490, 1021.155), stdev = 150.874
[info]   CI (99.9%): [369.526, 1531.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10996.150 ±(99.9%) 6820.500 B/op [Average]
[info]   (min, avg, max) = (7828.510, 10996.150, 11839.618), stdev = 1771.262
[info]   CI (99.9%): [4175.650, 17816.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.357 ±(99.9%) 65.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.357, 39.075), stdev = 16.945
[info]   CI (99.9%): [≈ 0, 74.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 17.000), stdev = 5.941
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson
[info] # Run progress: 40.78% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156315.817 ops/s
[info] # Warmup Iteration   2: 589350.064 ops/s
[info] # Warmup Iteration   3: 592426.227 ops/s
[info] # Warmup Iteration   4: 596180.086 ops/s
[info] # Warmup Iteration   5: 579127.226 ops/s
[info] Iteration   1: 527867.414 ops/s
[info]                  ·gc.alloc.rate:            684.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2001.967 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 527854.968 ops/s
[info]                  ·gc.alloc.rate:            684.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2002.009 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 574080.092 ops/s
[info]                  ·gc.alloc.rate:                   744.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2772.112 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.783 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 605442.282 ops/s
[info]                  ·gc.alloc.rate:                                  784.654 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.264 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.685 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1769.772 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 601447.531 ops/s
[info]                  ·gc.alloc.rate:                                  779.485 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1781.469 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson":
[info]   567338.457 ±(99.9%) 146345.863 ops/s [Average]
[info]   (min, avg, max) = (527854.968, 567338.457, 605442.282), stdev = 38005.556
[info]   CI (99.9%): [420992.594, 713684.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate":
[info]   735.286 ±(99.9%) 189.667 MB/sec [Average]
[info]   (min, avg, max) = (684.097, 735.286, 784.654), stdev = 49.256
[info]   CI (99.9%): [545.618, 924.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2040.001, 2040.001, 2040.001), stdev = 0.001
[info]   CI (99.9%): [2040.000, 2040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.053 ±(99.9%) 0.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.264), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.138 ±(99.9%) 1.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.685), stdev = 0.306
[info]   CI (99.9%): [≈ 0, 1.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   743.047 ±(99.9%) 577.254 MB/sec [Average]
[info]   (min, avg, max) = (671.357, 743.047, 1011.086), stdev = 149.911
[info]   CI (99.9%): [165.793, 1320.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2065.466 ±(99.9%) 1582.395 B/op [Average]
[info]   (min, avg, max) = (1769.772, 2065.466, 2772.112), stdev = 410.943
[info]   CI (99.9%): [483.071, 3647.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.557 ±(99.9%) 22.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.557, 12.783), stdev = 5.717
[info]   CI (99.9%): [≈ 0, 24.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 15.000), stdev = 5.899
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter
[info] # Run progress: 41.75% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1999469.263 ops/s
[info] # Warmup Iteration   2: 1505721.359 ops/s
[info] # Warmup Iteration   3: 1366249.201 ops/s
[info] # Warmup Iteration   4: 1369967.569 ops/s
[info] # Warmup Iteration   5: 1474960.503 ops/s
[info] Iteration   1: 1520862.600 ops/s
[info]                  ·gc.alloc.rate:            718.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1044.360 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 1509443.619 ops/s
[info]                  ·gc.alloc.rate:                   713.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        701.477 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1534772.493 ops/s
[info]                  ·gc.alloc.rate:                                  725.427 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       697.434 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.683 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1534698.544 ops/s
[info]                  ·gc.alloc.rate:                                  725.397 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       698.154 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1538073.171 ops/s
[info]                  ·gc.alloc.rate:                                  727.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       696.604 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter":
[info]   1527570.085 ±(99.9%) 46629.515 ops/s [Average]
[info]   (min, avg, max) = (1509443.619, 1527570.085, 1538073.171), stdev = 12109.537
[info]   CI (99.9%): [1480940.570, 1574199.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate":
[info]   722.023 ±(99.9%) 22.040 MB/sec [Average]
[info]   (min, avg, max) = (713.500, 722.023, 727.014), stdev = 5.724
[info]   CI (99.9%): [699.983, 744.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.130), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   744.619 ±(99.9%) 569.153 MB/sec [Average]
[info]   (min, avg, max) = (672.720, 744.619, 1008.956), stdev = 147.807
[info]   CI (99.9%): [175.467, 1313.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   767.606 ±(99.9%) 595.777 B/op [Average]
[info]   (min, avg, max) = (696.604, 767.606, 1044.360), stdev = 154.721
[info]   CI (99.9%): [171.829, 1363.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.831 ±(99.9%) 5.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 3.473), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 16.000), stdev = 6.380
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay
[info] # Run progress: 42.72% complete, ETA 00:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92698.929 ops/s
[info] # Warmup Iteration   2: 159082.548 ops/s
[info] # Warmup Iteration   3: 162564.092 ops/s
[info] # Warmup Iteration   4: 161825.337 ops/s
[info] # Warmup Iteration   5: 161735.149 ops/s
[info] Iteration   1: 162763.365 ops/s
[info]                  ·gc.alloc.rate:                   906.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              8768.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9758.300 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.206 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 163231.963 ops/s
[info]                  ·gc.alloc.rate:                                  909.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8768.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            679.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6557.534 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.423 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 166191.922 ops/s
[info]                  ·gc.alloc.rate:                                  925.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8768.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9670.487 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 165353.911 ops/s
[info]                  ·gc.alloc.rate:            921.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       8768.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9719.780 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 165448.939 ops/s
[info]                  ·gc.alloc.rate:            921.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       8768.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6475.899 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay":
[info]   164598.020 ±(99.9%) 5797.754 ops/s [Average]
[info]   (min, avg, max) = (162763.365, 164598.020, 166191.922), stdev = 1505.658
[info]   CI (99.9%): [158800.266, 170395.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate":
[info]   916.850 ±(99.9%) 32.342 MB/sec [Average]
[info]   (min, avg, max) = (906.631, 916.850, 925.732), stdev = 8.399
[info]   CI (99.9%): [884.508, 949.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm":
[info]   8768.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8768.002, 8768.002, 8768.003), stdev = 0.001
[info]   CI (99.9%): [8768.002, 8768.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.338), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   882.361 ±(99.9%) 710.484 MB/sec [Average]
[info]   (min, avg, max) = (679.989, 882.361, 1021.134), stdev = 184.511
[info]   CI (99.9%): [171.876, 1592.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8436.400 ±(99.9%) 6749.938 B/op [Average]
[info]   (min, avg, max) = (6475.899, 8436.400, 9758.300), stdev = 1752.937
[info]   CI (99.9%): [1686.462, 15186.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.726 ±(99.9%) 53.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.726, 32.206), stdev = 13.964
[info]   CI (99.9%): [≈ 0, 61.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 17.000), stdev = 5.857
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce
[info] # Run progress: 43.69% complete, ETA 00:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207806.551 ops/s
[info] # Warmup Iteration   2: 387415.412 ops/s
[info] # Warmup Iteration   3: 404220.602 ops/s
[info] # Warmup Iteration   4: 402732.165 ops/s
[info] # Warmup Iteration   5: 407134.899 ops/s
[info] Iteration   1: 409644.360 ops/s
[info]                  ·gc.alloc.rate:                                  1267.820 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5231.286 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 396169.283 ops/s
[info]                  ·gc.alloc.rate:                                  1226.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5409.096 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 368545.134 ops/s
[info]                  ·gc.alloc.rate:            1140.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4360.947 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 369614.224 ops/s
[info]                  ·gc.alloc.rate:            1144.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4348.313 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 409411.112 ops/s
[info]                  ·gc.alloc.rate:                                  1267.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5234.250 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce":
[info]   390676.823 ±(99.9%) 78781.975 ops/s [Average]
[info]   (min, avg, max) = (368545.134, 390676.823, 409644.360), stdev = 20459.429
[info]   CI (99.9%): [311894.848, 469458.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate":
[info]   1209.298 ±(99.9%) 243.671 MB/sec [Average]
[info]   (min, avg, max) = (1140.871, 1209.298, 1267.820), stdev = 63.280
[info]   CI (99.9%): [965.627, 1452.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.500), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   1225.349 ±(99.9%) 717.687 MB/sec [Average]
[info]   (min, avg, max) = (1021.160, 1225.349, 1361.662), stdev = 186.381
[info]   CI (99.9%): [507.662, 1943.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4916.779 ±(99.9%) 1995.456 B/op [Average]
[info]   (min, avg, max) = (4348.313, 4916.779, 5409.096), stdev = 518.213
[info]   CI (99.9%): [2921.323, 6912.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson
[info] # Run progress: 44.66% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 530994.929 ops/s
[info] # Warmup Iteration   2: 828096.949 ops/s
[info] # Warmup Iteration   3: 840878.833 ops/s
[info] # Warmup Iteration   4: 824494.806 ops/s
[info] # Warmup Iteration   5: 748782.055 ops/s
[info] Iteration   1: 751767.300 ops/s
[info]                  ·gc.alloc.rate:            569.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1408.567 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 820939.487 ops/s
[info]                  ·gc.alloc.rate:            621.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1289.835 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 848212.284 ops/s
[info]                  ·gc.alloc.rate:            642.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1248.400 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 850069.694 ops/s
[info]                  ·gc.alloc.rate:                   643.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        622.835 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 851030.819 ops/s
[info]                  ·gc.alloc.rate:                   644.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1257.811 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson":
[info]   824403.917 ±(99.9%) 163625.668 ops/s [Average]
[info]   (min, avg, max) = (751767.300, 824403.917, 851030.819), stdev = 42493.066
[info]   CI (99.9%): [660778.249, 988029.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate":
[info]   624.317 ±(99.9%) 124.113 MB/sec [Average]
[info]   (min, avg, max) = (569.244, 624.317, 644.468), stdev = 32.232
[info]   CI (99.9%): [500.204, 748.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm":
[info]   1192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.001, 1192.001), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   606.909 ±(99.9%) 582.325 MB/sec [Average]
[info]   (min, avg, max) = (336.445, 606.909, 680.049), stdev = 151.228
[info]   CI (99.9%): [24.584, 1189.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1165.490 ±(99.9%) 1193.731 B/op [Average]
[info]   (min, avg, max) = (622.835, 1165.490, 1408.567), stdev = 310.008
[info]   CI (99.9%): [≈ 0, 2359.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.480 ±(99.9%) 10.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.480, 6.167), stdev = 2.674
[info]   CI (99.9%): [≈ 0, 11.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.400, 12.000), stdev = 3.578
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter
[info] # Run progress: 45.63% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3349355.358 ops/s
[info] # Warmup Iteration   2: 3273591.282 ops/s
[info] # Warmup Iteration   3: 3316810.056 ops/s
[info] # Warmup Iteration   4: 3579777.963 ops/s
[info] # Warmup Iteration   5: 3753580.818 ops/s
[info] Iteration   1: 3740520.806 ops/s
[info]                  ·gc.alloc.rate:      114.043 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3692227.280 ops/s
[info]                  ·gc.alloc.rate:                   112.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        142.827 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3581875.118 ops/s
[info]                  ·gc.alloc.rate:      109.231 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3711947.405 ops/s
[info]                  ·gc.alloc.rate:      113.191 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3602996.786 ops/s
[info]                  ·gc.alloc.rate:            109.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.946 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter":
[info]   3665913.479 ±(99.9%) 268157.666 ops/s [Average]
[info]   (min, avg, max) = (3581875.118, 3665913.479, 3740520.806), stdev = 69639.694
[info]   CI (99.9%): [3397755.813, 3934071.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate":
[info]   111.785 ±(99.9%) 8.145 MB/sec [Average]
[info]   (min, avg, max) = (109.231, 111.785, 114.043), stdev = 2.115
[info]   CI (99.9%): [103.640, 119.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.275 ±(99.9%) 707.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.275, 336.361), stdev = 183.865
[info]   CI (99.9%): [≈ 0, 842.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   57.955 ±(99.9%) 305.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.955, 146.946), stdev = 79.371
[info]   CI (99.9%): [≈ 0, 363.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.114 ±(99.9%) 0.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.568), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay
[info] # Run progress: 46.60% complete, ETA 00:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77691.842 ops/s
[info] # Warmup Iteration   2: 134000.043 ops/s
[info] # Warmup Iteration   3: 135842.770 ops/s
[info] # Warmup Iteration   4: 135710.336 ops/s
[info] # Warmup Iteration   5: 135118.371 ops/s
[info] Iteration   1: 135027.967 ops/s
[info]                  ·gc.alloc.rate:                   951.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              11088.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7841.881 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 137538.643 ops/s
[info]                  ·gc.alloc.rate:                                  968.771 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11088.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11677.778 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.623 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 137701.507 ops/s
[info]                  ·gc.alloc.rate:                                  969.966 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11088.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11671.401 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 137380.585 ops/s
[info]                  ·gc.alloc.rate:                                  967.830 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11088.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11698.837 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 137873.128 ops/s
[info]                  ·gc.alloc.rate:            971.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       11088.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11657.097 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay":
[info]   137104.366 ±(99.9%) 4525.079 ops/s [Average]
[info]   (min, avg, max) = (135027.967, 137104.366, 137873.128), stdev = 1175.149
[info]   CI (99.9%): [132579.286, 141629.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate":
[info]   965.789 ±(99.9%) 31.773 MB/sec [Average]
[info]   (min, avg, max) = (951.201, 965.789, 971.178), stdev = 8.251
[info]   CI (99.9%): [934.016, 997.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm":
[info]   11088.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11088.003, 11088.003, 11088.003), stdev = 0.001
[info]   CI (99.9%): [11088.003, 11088.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.167 ±(99.9%) 1.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.796), stdev = 0.352
[info]   CI (99.9%): [≈ 0, 1.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   951.240 ±(99.9%) 599.520 MB/sec [Average]
[info]   (min, avg, max) = (672.728, 951.240, 1021.147), stdev = 155.693
[info]   CI (99.9%): [351.720, 1550.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10909.399 ±(99.9%) 6603.316 B/op [Average]
[info]   (min, avg, max) = (7841.881, 10909.399, 11698.837), stdev = 1714.860
[info]   CI (99.9%): [4306.083, 17512.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.289 ±(99.9%) 64.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.289, 38.821), stdev = 16.836
[info]   CI (99.9%): [≈ 0, 74.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce
[info] # Run progress: 47.57% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2704.493 ops/s
[info] # Warmup Iteration   2: 4945.847 ops/s
[info] # Warmup Iteration   3: 6721.299 ops/s
[info] # Warmup Iteration   4: 6718.246 ops/s
[info] # Warmup Iteration   5: 6681.686 ops/s
[info] Iteration   1: 7037.352 ops/s
[info]                  ·gc.alloc.rate:                   1035.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              231656.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        225684.421 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 744.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 7650.039 ops/s
[info]                  ·gc.alloc.rate:                                  1125.964 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       209934.453 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                137.033 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7525.443 ops/s
[info]                  ·gc.alloc.rate:            1107.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       231656.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 213560.118 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7577.826 ops/s
[info]                  ·gc.alloc.rate:                                  1115.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.761 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       282793.158 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 7560.752 ops/s
[info]                  ·gc.alloc.rate:                                  1112.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231667.827 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       212571.675 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce":
[info]   7470.282 ±(99.9%) 948.178 ops/s [Average]
[info]   (min, avg, max) = (7037.352, 7470.282, 7650.039), stdev = 246.239
[info]   CI (99.9%): [6522.105, 8418.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate":
[info]   1099.465 ±(99.9%) 139.781 MB/sec [Average]
[info]   (min, avg, max) = (1035.636, 1099.465, 1125.964), stdev = 36.301
[info]   CI (99.9%): [959.684, 1239.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm":
[info]   231658.410 ±(99.9%) 20.270 B/op [Average]
[info]   (min, avg, max) = (231656.053, 231658.410, 231667.827), stdev = 5.264
[info]   CI (99.9%): [231638.140, 231678.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.078), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.635 ±(99.9%) 26.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.635, 15.987), stdev = 6.793
[info]   CI (99.9%): [≈ 0, 32.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   1086.596 ±(99.9%) 591.932 MB/sec [Average]
[info]   (min, avg, max) = (1008.940, 1086.596, 1361.428), stdev = 153.723
[info]   CI (99.9%): [494.665, 1678.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   228908.765 ±(99.9%) 118316.168 B/op [Average]
[info]   (min, avg, max) = (209934.453, 228908.765, 282793.158), stdev = 30726.333
[info]   CI (99.9%): [110592.597, 347224.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   176.373 ±(99.9%) 1244.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 176.373, 744.833), stdev = 323.271
[info]   CI (99.9%): [≈ 0, 1421.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 19.000), stdev = 6.387
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson
[info] # Run progress: 48.54% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3910.686 ops/s
[info] # Warmup Iteration   2: 10545.668 ops/s
[info] # Warmup Iteration   3: 10731.511 ops/s
[info] # Warmup Iteration   4: 10885.993 ops/s
[info] # Warmup Iteration   5: 10807.664 ops/s
[info] Iteration   1: 10842.403 ops/s
[info]                  ·gc.alloc.rate:      153.104 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.044 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10940.169 ops/s
[info]                  ·gc.alloc.rate:      154.576 MB/sec
[info]                  ·gc.alloc.rate.norm: 22234.615 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10838.354 ops/s
[info]                  ·gc.alloc.rate:            153.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48748.483 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 10760.704 ops/s
[info]                  ·gc.alloc.rate:      152.097 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.041 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10761.305 ops/s
[info]                  ·gc.alloc.rate:            152.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49097.204 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson":
[info]   10828.587 ±(99.9%) 284.737 ops/s [Average]
[info]   (min, avg, max) = (10760.704, 10828.587, 10940.169), stdev = 73.945
[info]   CI (99.9%): [10543.850, 11113.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate":
[info]   153.007 ±(99.9%) 3.952 MB/sec [Average]
[info]   (min, avg, max) = (152.069, 153.007, 154.576), stdev = 1.026
[info]   CI (99.9%): [149.055, 156.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   22235.756 ±(99.9%) 26.785 B/op [Average]
[info]   (min, avg, max) = (22224.044, 22235.756, 22240.041), stdev = 6.956
[info]   CI (99.9%): [22208.971, 22262.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   134.297 ±(99.9%) 708.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.297, 335.778), stdev = 183.894
[info]   CI (99.9%): [≈ 0, 842.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   19569.137 ±(99.9%) 103183.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19569.137, 49097.204), stdev = 26796.429
[info]   CI (99.9%): [≈ 0, 122752.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 7.000), stdev = 3.578
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter
[info] # Run progress: 49.51% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6957.843 ops/s
[info] # Warmup Iteration   2: 18940.033 ops/s
[info] # Warmup Iteration   3: 19827.351 ops/s
[info] # Warmup Iteration   4: 19997.987 ops/s
[info] # Warmup Iteration   5: 19921.951 ops/s
[info] Iteration   1: 20098.198 ops/s
[info]                  ·gc.alloc.rate:      180.765 MB/sec
[info]                  ·gc.alloc.rate.norm: 14160.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19632.988 ops/s
[info]                  ·gc.alloc.rate:            176.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26965.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 20038.917 ops/s
[info]                  ·gc.alloc.rate:      180.279 MB/sec
[info]                  ·gc.alloc.rate.norm: 14160.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20007.804 ops/s
[info]                  ·gc.alloc.rate:            179.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26461.990 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 19919.780 ops/s
[info]                  ·gc.alloc.rate:            179.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       14160.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26578.873 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter":
[info]   19939.537 ±(99.9%) 704.974 ops/s [Average]
[info]   (min, avg, max) = (19632.988, 19939.537, 20098.198), stdev = 183.080
[info]   CI (99.9%): [19234.563, 20644.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate":
[info]   179.384 ±(99.9%) 6.203 MB/sec [Average]
[info]   (min, avg, max) = (176.688, 179.384, 180.765), stdev = 1.611
[info]   CI (99.9%): [173.181, 185.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   14160.023 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (14160.020, 14160.023, 14160.027), stdev = 0.003
[info]   CI (99.9%): [14160.013, 14160.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.840 ±(99.9%) 709.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.840, 336.479), stdev = 184.254
[info]   CI (99.9%): [≈ 0, 911.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   16001.368 ±(99.9%) 56251.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16001.368, 26965.976), stdev = 14608.374
[info]   CI (99.9%): [≈ 0, 72253.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 6.000), stdev = 3.286
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay
[info] # Run progress: 50.49% complete, ETA 00:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 938.235 ops/s
[info] # Warmup Iteration   2: 2915.590 ops/s
[info] # Warmup Iteration   3: 3007.804 ops/s
[info] # Warmup Iteration   4: 3133.020 ops/s
[info] # Warmup Iteration   5: 3129.222 ops/s
[info] Iteration   1: 3100.389 ops/s
[info]                  ·gc.alloc.rate:                   910.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              462024.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        511945.845 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 338.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 3148.044 ops/s
[info]                  ·gc.alloc.rate:                                  924.137 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462024.130 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       508138.131 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1997.922 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 2921.187 ops/s
[info]                  ·gc.alloc.rate:                                  857.436 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462024.140 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.828 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       366750.401 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2831.656 ops/s
[info]                  ·gc.alloc.rate:                                  831.333 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462024.155 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.450 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       378272.034 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2827.921 ops/s
[info]                  ·gc.alloc.rate:                                  830.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462024.156 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       378806.883 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay":
[info]   2965.839 ±(99.9%) 578.630 ops/s [Average]
[info]   (min, avg, max) = (2827.921, 2965.839, 3148.044), stdev = 150.269
[info]   CI (99.9%): [2387.209, 3544.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate":
[info]   870.660 ±(99.9%) 169.573 MB/sec [Average]
[info]   (min, avg, max) = (830.351, 870.660, 924.137), stdev = 44.038
[info]   CI (99.9%): [701.087, 1040.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   462024.144 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (462024.130, 462024.144, 462024.156), stdev = 0.011
[info]   CI (99.9%): [462024.102, 462024.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.043), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.595 ±(99.9%) 33.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.595, 21.414), stdev = 8.787
[info]   CI (99.9%): [≈ 0, 41.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   813.360 ±(99.9%) 699.647 MB/sec [Average]
[info]   (min, avg, max) = (680.624, 813.360, 1016.374), stdev = 181.696
[info]   CI (99.9%): [113.713, 1513.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   428782.659 ±(99.9%) 286286.435 B/op [Average]
[info]   (min, avg, max) = (366750.401, 428782.659, 511945.845), stdev = 74347.678
[info]   CI (99.9%): [142496.224, 715069.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   467.213 ±(99.9%) 3342.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 467.213, 1997.922), stdev = 868.129
[info]   CI (99.9%): [≈ 0, 3810.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 18.000), stdev = 6.656
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce
[info] # Run progress: 51.46% complete, ETA 00:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191125.944 ops/s
[info] # Warmup Iteration   2: 308232.312 ops/s
[info] # Warmup Iteration   3: 321463.042 ops/s
[info] # Warmup Iteration   4: 321641.325 ops/s
[info] # Warmup Iteration   5: 322590.537 ops/s
[info] Iteration   1: 328301.730 ops/s
[info]                  ·gc.alloc.rate:                                  1082.791 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4872.998 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.160 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 327555.131 ops/s
[info]                  ·gc.alloc.rate:                                  1080.321 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4906.289 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 329224.127 ops/s
[info]                  ·gc.alloc.rate:            1086.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6509.037 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 332252.309 ops/s
[info]                  ·gc.alloc.rate:            1095.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4837.266 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 331927.424 ops/s
[info]                  ·gc.alloc.rate:            1094.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4842.001 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce":
[info]   329852.144 ±(99.9%) 8200.615 ops/s [Average]
[info]   (min, avg, max) = (327555.131, 329852.144, 332252.309), stdev = 2129.674
[info]   CI (99.9%): [321651.530, 338052.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate":
[info]   1087.980 ±(99.9%) 27.226 MB/sec [Average]
[info]   (min, avg, max) = (1080.321, 1087.980, 1095.922), stdev = 7.071
[info]   CI (99.9%): [1060.754, 1115.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm":
[info]   5192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5192.001, 5192.001, 5192.001), stdev = 0.001
[info]   CI (99.9%): [5192.001, 5192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.222), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1088.145 ±(99.9%) 588.442 MB/sec [Average]
[info]   (min, avg, max) = (1016.263, 1088.145, 1361.487), stdev = 152.816
[info]   CI (99.9%): [499.703, 1676.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5193.518 ±(99.9%) 2833.760 B/op [Average]
[info]   (min, avg, max) = (4837.266, 5193.518, 6509.037), stdev = 735.919
[info]   CI (99.9%): [2359.758, 8027.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.832 ±(99.9%) 32.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.832, 19.160), stdev = 8.569
[info]   CI (99.9%): [≈ 0, 36.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 3.033
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson
[info] # Run progress: 52.43% complete, ETA 00:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279754.931 ops/s
[info] # Warmup Iteration   2: 1179001.003 ops/s
[info] # Warmup Iteration   3: 1253953.595 ops/s
[info] # Warmup Iteration   4: 1259832.378 ops/s
[info] # Warmup Iteration   5: 1267680.617 ops/s
[info] Iteration   1: 1258268.536 ops/s
[info]                  ·gc.alloc.rate:            524.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 841.542 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1268267.305 ops/s
[info]                  ·gc.alloc.rate:            528.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 417.450 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1261711.992 ops/s
[info]                  ·gc.alloc.rate:            525.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 839.228 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1270301.607 ops/s
[info]                  ·gc.alloc.rate:            529.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 416.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1196176.993 ops/s
[info]                  ·gc.alloc.rate:            498.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 885.212 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson":
[info]   1250945.287 ±(99.9%) 119367.437 ops/s [Average]
[info]   (min, avg, max) = (1196176.993, 1250945.287, 1270301.607), stdev = 30999.344
[info]   CI (99.9%): [1131577.850, 1370312.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate":
[info]   521.326 ±(99.9%) 49.816 MB/sec [Average]
[info]   (min, avg, max) = (498.481, 521.326, 529.440), stdev = 12.937
[info]   CI (99.9%): [471.510, 571.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen":
[info]   538.139 ±(99.9%) 709.263 MB/sec [Average]
[info]   (min, avg, max) = (336.355, 538.139, 672.737), stdev = 184.193
[info]   CI (99.9%): [≈ 0, 1247.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   680.043 ±(99.9%) 926.911 B/op [Average]
[info]   (min, avg, max) = (416.784, 680.043, 885.212), stdev = 240.716
[info]   CI (99.9%): [≈ 0, 1606.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 12.000), stdev = 3.130
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter
[info] # Run progress: 53.40% complete, ETA 00:13:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8926356.201 ops/s
[info] # Warmup Iteration   2: 11052880.854 ops/s
[info] # Warmup Iteration   3: 11524901.216 ops/s
[info] # Warmup Iteration   4: 11303238.551 ops/s
[info] # Warmup Iteration   5: 11276528.676 ops/s
[info] Iteration   1: 11522756.946 ops/s
[info]                  ·gc.alloc.rate:            585.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45.947 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 10786869.094 ops/s
[info]                  ·gc.alloc.rate:            548.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98.163 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 10101784.763 ops/s
[info]                  ·gc.alloc.rate:            513.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104.821 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 10350440.450 ops/s
[info]                  ·gc.alloc.rate:            526.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 11067970.845 ops/s
[info]                  ·gc.alloc.rate:                   562.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        96.148 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter":
[info]   10765964.419 ±(99.9%) 2176699.396 ops/s [Average]
[info]   (min, avg, max) = (10101784.763, 10765964.419, 11522756.946), stdev = 565281.921
[info]   CI (99.9%): [8589265.023, 12942663.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate":
[info]   547.182 ±(99.9%) 110.522 MB/sec [Average]
[info]   (min, avg, max) = (513.444, 547.182, 585.571), stdev = 28.702
[info]   CI (99.9%): [436.660, 657.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.858 ±(99.9%) 711.871 MB/sec [Average]
[info]   (min, avg, max) = (336.318, 538.858, 676.116), stdev = 184.871
[info]   CI (99.9%): [≈ 0, 1250.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   79.246 ±(99.9%) 108.838 B/op [Average]
[info]   (min, avg, max) = (45.947, 79.246, 104.821), stdev = 28.265
[info]   CI (99.9%): [≈ 0, 188.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.114 ±(99.9%) 0.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.568), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay
[info] # Run progress: 54.37% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122978.713 ops/s
[info] # Warmup Iteration   2: 202461.919 ops/s
[info] # Warmup Iteration   3: 204684.221 ops/s
[info] # Warmup Iteration   4: 203795.841 ops/s
[info] # Warmup Iteration   5: 204105.173 ops/s
[info] Iteration   1: 190002.813 ops/s
[info]                  ·gc.alloc.rate:            615.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2786.521 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 203807.398 ops/s
[info]                  ·gc.alloc.rate:            659.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5195.478 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 204375.174 ops/s
[info]                  ·gc.alloc.rate:            661.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5180.914 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 205735.308 ops/s
[info]                  ·gc.alloc.rate:                   666.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5172.277 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 205987.132 ops/s
[info]                  ·gc.alloc.rate:                                  666.887 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.444 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5201.603 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay":
[info]   201981.565 ±(99.9%) 26023.109 ops/s [Average]
[info]   (min, avg, max) = (190002.813, 201981.565, 205987.132), stdev = 6758.119
[info]   CI (99.9%): [175958.456, 228004.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate":
[info]   653.879 ±(99.9%) 84.333 MB/sec [Average]
[info]   (min, avg, max) = (615.063, 653.879, 666.887), stdev = 21.901
[info]   CI (99.9%): [569.546, 738.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm":
[info]   5096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.002, 5096.002, 5096.002), stdev = 0.001
[info]   CI (99.9%): [5096.002, 5096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.089 ±(99.9%) 0.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.444), stdev = 0.199
[info]   CI (99.9%): [≈ 0, 0.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen":
[info]   607.669 ±(99.9%) 584.238 MB/sec [Average]
[info]   (min, avg, max) = (336.320, 607.669, 680.707), stdev = 151.725
[info]   CI (99.9%): [23.431, 1191.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4707.359 ±(99.9%) 4134.989 B/op [Average]
[info]   (min, avg, max) = (2786.521, 4707.359, 5201.603), stdev = 1073.844
[info]   CI (99.9%): [572.369, 8842.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.115 ±(99.9%) 52.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.115, 30.575), stdev = 13.674
[info]   CI (99.9%): [≈ 0, 58.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 12.000), stdev = 3.834
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce
[info] # Run progress: 55.34% complete, ETA 00:12:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 975284.790 ops/s
[info] # Warmup Iteration   2: 1137926.150 ops/s
[info] # Warmup Iteration   3: 1136010.400 ops/s
[info] # Warmup Iteration   4: 1208220.372 ops/s
[info] # Warmup Iteration   5: 1265120.603 ops/s
[info] Iteration   1: 1273592.190 ops/s
[info]                  ·gc.alloc.rate:                                  1281.517 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1261.983 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 1290721.100 ops/s
[info]                  ·gc.alloc.rate:            1298.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       1584.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1660.302 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1290701.386 ops/s
[info]                  ·gc.alloc.rate:            1298.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       1584.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1660.310 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1287317.203 ops/s
[info]                  ·gc.alloc.rate:                                  1294.995 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1664.578 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1287142.069 ops/s
[info]                  ·gc.alloc.rate:                                  1295.124 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1664.917 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce":
[info]   1285894.790 ±(99.9%) 27318.519 ops/s [Average]
[info]   (min, avg, max) = (1273592.190, 1285894.790, 1290721.100), stdev = 7094.533
[info]   CI (99.9%): [1258576.270, 1313213.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate":
[info]   1293.887 ±(99.9%) 27.635 MB/sec [Average]
[info]   (min, avg, max) = (1281.517, 1293.887, 1298.906), stdev = 7.177
[info]   CI (99.9%): [1266.252, 1321.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm":
[info]   1584.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1584.000, 1584.000, 1584.000), stdev = 0.001
[info]   CI (99.9%): [1584.000, 1584.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1293.218 ±(99.9%) 585.987 MB/sec [Average]
[info]   (min, avg, max) = (1020.993, 1293.218, 1361.481), stdev = 152.179
[info]   CI (99.9%): [707.231, 1879.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1582.418 ±(99.9%) 689.814 B/op [Average]
[info]   (min, avg, max) = (1261.983, 1582.418, 1664.917), stdev = 179.143
[info]   CI (99.9%): [892.604, 2272.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 11.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson
[info] # Run progress: 56.31% complete, ETA 00:12:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1922537.079 ops/s
[info] # Warmup Iteration   2: 2845770.343 ops/s
[info] # Warmup Iteration   3: 2856020.062 ops/s
[info] # Warmup Iteration   4: 3212114.415 ops/s
[info] # Warmup Iteration   5: 3165365.862 ops/s
[info] Iteration   1: 3155499.830 ops/s
[info]                  ·gc.alloc.rate:            866.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 503.344 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 2893394.227 ops/s
[info]                  ·gc.alloc.rate:                   794.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        367.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2909499.103 ops/s
[info]                  ·gc.alloc.rate:                                  798.496 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       368.261 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 3099140.306 ops/s
[info]                  ·gc.alloc.rate:            850.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 518.593 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 3265932.054 ops/s
[info]                  ·gc.alloc.rate:            896.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 328.081 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson":
[info]   3064693.104 ±(99.9%) 618978.494 ops/s [Average]
[info]   (min, avg, max) = (2893394.227, 3064693.104, 3265932.054), stdev = 160746.749
[info]   CI (99.9%): [2445714.610, 3683671.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate":
[info]   841.187 ±(99.9%) 170.122 MB/sec [Average]
[info]   (min, avg, max) = (794.233, 841.187, 896.652), stdev = 44.180
[info]   CI (99.9%): [671.065, 1011.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   813.577 ±(99.9%) 708.367 MB/sec [Average]
[info]   (min, avg, max) = (676.180, 813.577, 1021.025), stdev = 183.961
[info]   CI (99.9%): [105.210, 1521.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   417.213 ±(99.9%) 336.133 B/op [Average]
[info]   (min, avg, max) = (328.081, 417.213, 518.593), stdev = 87.293
[info]   CI (99.9%): [81.081, 753.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.435 ±(99.9%) 3.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.435, 2.174), stdev = 0.972
[info]   CI (99.9%): [≈ 0, 4.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 17.000), stdev = 6.099
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter
[info] # Run progress: 57.28% complete, ETA 00:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12915916.516 ops/s
[info] # Warmup Iteration   2: 13534122.799 ops/s
[info] # Warmup Iteration   3: 13973389.690 ops/s
[info] # Warmup Iteration   4: 15554857.485 ops/s
[info] # Warmup Iteration   5: 15244315.963 ops/s
[info] Iteration   1: 15337660.617 ops/s
[info]                  ·gc.alloc.rate:            467.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34.520 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 15261781.212 ops/s
[info]                  ·gc.alloc.rate:            465.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.382 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 16112215.205 ops/s
[info]                  ·gc.alloc.rate:            491.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 16203354.253 ops/s
[info]                  ·gc.alloc.rate:            494.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.350 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 16087855.823 ops/s
[info]                  ·gc.alloc.rate:            490.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter":
[info]   15800573.422 ±(99.9%) 1771368.914 ops/s [Average]
[info]   (min, avg, max) = (15261781.212, 15800573.422, 16203354.253), stdev = 460018.882
[info]   CI (99.9%): [14029204.508, 17571942.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate":
[info]   481.877 ±(99.9%) 54.315 MB/sec [Average]
[info]   (min, avg, max) = (465.425, 481.877, 494.239), stdev = 14.105
[info]   CI (99.9%): [427.562, 536.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.954 ±(99.9%) 709.588 MB/sec [Average]
[info]   (min, avg, max) = (336.283, 470.954, 672.887), stdev = 184.278
[info]   CI (99.9%): [≈ 0, 1180.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   47.004 ±(99.9%) 71.831 B/op [Average]
[info]   (min, avg, max) = (32.859, 47.004, 69.382), stdev = 18.654
[info]   CI (99.9%): [≈ 0, 118.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc
[info] # Run progress: 58.25% complete, ETA 00:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17418451.221 ops/s
[info] # Warmup Iteration   2: 19214030.777 ops/s
[info] # Warmup Iteration   3: 18895399.012 ops/s
[info] # Warmup Iteration   4: 18924177.125 ops/s
[info] # Warmup Iteration   5: 18769889.922 ops/s
[info] Iteration   1: 17440321.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17650746.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17854571.979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18809734.048 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18979583.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc":
[info]   18146991.345 ±(99.9%) 2697917.333 ops/s [Average]
[info]   (min, avg, max) = (17440321.187, 18146991.345, 18979583.494), stdev = 700640.564
[info]   CI (99.9%): [15449074.012, 20844908.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay
[info] # Run progress: 59.22% complete, ETA 00:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 504861.475 ops/s
[info] # Warmup Iteration   2: 809075.704 ops/s
[info] # Warmup Iteration   3: 803683.591 ops/s
[info] # Warmup Iteration   4: 816106.160 ops/s
[info] # Warmup Iteration   5: 804175.254 ops/s
[info] Iteration   1: 822617.850 ops/s
[info]                  ·gc.alloc.rate:                                  1199.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.188 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1953.757 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 817541.166 ops/s
[info]                  ·gc.alloc.rate:                                  1192.418 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2621.177 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 829465.607 ops/s
[info]                  ·gc.alloc.rate:            1209.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       2296.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1937.618 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 825742.043 ops/s
[info]                  ·gc.alloc.rate:                                  1204.549 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2595.183 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 828803.543 ops/s
[info]                  ·gc.alloc.rate:            1209.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       2296.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1360.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2583.718 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay":
[info]   824834.042 ±(99.9%) 18877.027 ops/s [Average]
[info]   (min, avg, max) = (817541.166, 824834.042, 829465.607), stdev = 4902.304
[info]   CI (99.9%): [805957.015, 843711.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate":
[info]   1203.218 ±(99.9%) 27.998 MB/sec [Average]
[info]   (min, avg, max) = (1192.418, 1203.218, 1209.916), stdev = 7.271
[info]   CI (99.9%): [1175.221, 1231.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm":
[info]   2296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.000, 2296.001, 2296.001), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.188), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.073 ±(99.9%) 0.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.359), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   1225.152 ±(99.9%) 717.450 MB/sec [Average]
[info]   (min, avg, max) = (1021.039, 1225.152, 1361.509), stdev = 186.320
[info]   CI (99.9%): [507.702, 1942.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   2338.291 ±(99.9%) 1381.220 B/op [Average]
[info]   (min, avg, max) = (1937.618, 2338.291, 2621.177), stdev = 358.698
[info]   CI (99.9%): [957.071, 3719.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce
[info] # Run progress: 60.19% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 395287.291 ops/s
[info] # Warmup Iteration   2: 662770.382 ops/s
[info] # Warmup Iteration   3: 677630.921 ops/s
[info] # Warmup Iteration   4: 671524.738 ops/s
[info] # Warmup Iteration   5: 682955.783 ops/s
[info] Iteration   1: 686497.402 ops/s
[info]                  ·gc.alloc.rate:                                  1566.410 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3121.475 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 684130.426 ops/s
[info]                  ·gc.alloc.rate:            1561.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       3592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3915.365 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 679987.191 ops/s
[info]                  ·gc.alloc.rate:                                  1551.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3151.382 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 680818.674 ops/s
[info]                  ·gc.alloc.rate:                                  1553.599 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3934.582 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 685554.923 ops/s
[info]                  ·gc.alloc.rate:                                  1564.619 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3125.855 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce":
[info]   683397.723 ±(99.9%) 11073.799 ops/s [Average]
[info]   (min, avg, max) = (679987.191, 683397.723, 686497.402), stdev = 2875.830
[info]   CI (99.9%): [672323.924, 694471.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate":
[info]   1559.543 ±(99.9%) 25.217 MB/sec [Average]
[info]   (min, avg, max) = (1551.784, 1559.543, 1566.410), stdev = 6.549
[info]   CI (99.9%): [1534.325, 1584.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm":
[info]   3592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3592.001, 3592.001, 3592.001), stdev = 0.001
[info]   CI (99.9%): [3592.001, 3592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1497.570 ±(99.9%) 717.939 MB/sec [Average]
[info]   (min, avg, max) = (1361.222, 1497.570, 1701.854), stdev = 186.447
[info]   CI (99.9%): [779.631, 2215.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3449.732 ±(99.9%) 1671.324 B/op [Average]
[info]   (min, avg, max) = (3121.475, 3449.732, 3934.582), stdev = 434.038
[info]   CI (99.9%): [1778.408, 5121.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson
[info] # Run progress: 61.17% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1331290.851 ops/s
[info] # Warmup Iteration   2: 2569831.834 ops/s
[info] # Warmup Iteration   3: 2562278.678 ops/s
[info] # Warmup Iteration   4: 2586080.334 ops/s
[info] # Warmup Iteration   5: 2482223.982 ops/s
[info] Iteration   1: 2372542.879 ops/s
[info]                  ·gc.alloc.rate:                                  1169.548 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.188 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       903.222 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2370213.750 ops/s
[info]                  ·gc.alloc.rate:            1168.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       776.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 678.052 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2654065.020 ops/s
[info]                  ·gc.alloc.rate:            1308.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       776.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 807.406 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2607431.213 ops/s
[info]                  ·gc.alloc.rate:                                  1285.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       821.816 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 2639131.678 ops/s
[info]                  ·gc.alloc.rate:                                  1301.135 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       811.996 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson":
[info]   2528676.908 ±(99.9%) 556724.692 ops/s [Average]
[info]   (min, avg, max) = (2370213.750, 2528676.908, 2654065.020), stdev = 144579.635
[info]   CI (99.9%): [1971952.216, 3085401.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate":
[info]   1246.526 ±(99.9%) 274.794 MB/sec [Average]
[info]   (min, avg, max) = (1168.234, 1246.526, 1308.415), stdev = 71.363
[info]   CI (99.9%): [971.731, 1521.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm":
[info]   776.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (776.000, 776.000, 776.000), stdev = 0.001
[info]   CI (99.9%): [776.000, 776.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.188), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.125), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen":
[info]   1293.221 ±(99.9%) 586.457 MB/sec [Average]
[info]   (min, avg, max) = (1020.777, 1293.221, 1361.490), stdev = 152.301
[info]   CI (99.9%): [706.764, 1879.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   804.498 ±(99.9%) 311.043 B/op [Average]
[info]   (min, avg, max) = (678.052, 804.498, 903.222), stdev = 80.777
[info]   CI (99.9%): [493.455, 1115.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter
[info] # Run progress: 62.14% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3909325.442 ops/s
[info] # Warmup Iteration   2: 4217182.923 ops/s
[info] # Warmup Iteration   3: 4811673.044 ops/s
[info] # Warmup Iteration   4: 4834504.769 ops/s
[info] # Warmup Iteration   5: 4946248.232 ops/s
[info] Iteration   1: 4736057.679 ops/s
[info]                  ·gc.alloc.rate:                                  1251.529 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       452.474 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4719798.067 ops/s
[info]                  ·gc.alloc.rate:            1247.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 453.998 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 4715446.674 ops/s
[info]                  ·gc.alloc.rate:            1246.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 340.834 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 4754855.075 ops/s
[info]                  ·gc.alloc.rate:                                  1256.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       450.698 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 4708391.185 ops/s
[info]                  ·gc.alloc.rate:                                  1244.246 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       455.140 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter":
[info]   4726909.736 ±(99.9%) 71769.360 ops/s [Average]
[info]   (min, avg, max) = (4708391.185, 4726909.736, 4754855.075), stdev = 18638.275
[info]   CI (99.9%): [4655140.375, 4798679.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate":
[info]   1249.214 ±(99.9%) 18.881 MB/sec [Average]
[info]   (min, avg, max) = (1244.246, 1249.214, 1256.590), stdev = 4.903
[info]   CI (99.9%): [1230.333, 1268.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.024), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1293.284 ±(99.9%) 585.839 MB/sec [Average]
[info]   (min, avg, max) = (1021.127, 1293.284, 1361.400), stdev = 152.141
[info]   CI (99.9%): [707.445, 1879.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   430.629 ±(99.9%) 193.396 B/op [Average]
[info]   (min, avg, max) = (340.834, 430.629, 455.140), stdev = 50.224
[info]   CI (99.9%): [237.233, 624.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay
[info] # Run progress: 63.11% complete, ETA 00:10:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133688.841 ops/s
[info] # Warmup Iteration   2: 285867.160 ops/s
[info] # Warmup Iteration   3: 290822.107 ops/s
[info] # Warmup Iteration   4: 289563.415 ops/s
[info] # Warmup Iteration   5: 288732.111 ops/s
[info] Iteration   1: 286601.923 ops/s
[info]                  ·gc.alloc.rate:                   1004.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              5520.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5560.350 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 292687.053 ops/s
[info]                  ·gc.alloc.rate:                                  1026.304 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5520.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5490.864 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 295544.936 ops/s
[info]                  ·gc.alloc.rate:            1036.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       5520.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5437.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 295211.707 ops/s
[info]                  ·gc.alloc.rate:            1035.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       5520.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5443.837 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 292716.252 ops/s
[info]                  ·gc.alloc.rate:            1026.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       5520.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5490.583 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay":
[info]   292552.374 ±(99.9%) 13814.148 ops/s [Average]
[info]   (min, avg, max) = (286601.923, 292552.374, 295544.936), stdev = 3587.490
[info]   CI (99.9%): [278738.227, 306366.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate":
[info]   1025.833 ±(99.9%) 48.587 MB/sec [Average]
[info]   (min, avg, max) = (1004.896, 1025.833, 1036.321), stdev = 12.618
[info]   CI (99.9%): [977.246, 1074.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm":
[info]   5520.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5520.001, 5520.001, 5520.002), stdev = 0.001
[info]   CI (99.9%): [5520.001, 5520.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.090 ±(99.9%) 0.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.449), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1019.180 ±(99.9%) 14.936 MB/sec [Average]
[info]   (min, avg, max) = (1012.242, 1019.180, 1020.964), stdev = 3.879
[info]   CI (99.9%): [1004.244, 1034.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5484.679 ±(99.9%) 189.317 B/op [Average]
[info]   (min, avg, max) = (5437.760, 5484.679, 5560.350), stdev = 49.165
[info]   CI (99.9%): [5295.362, 5673.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.390 ±(99.9%) 37.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.390, 21.949), stdev = 9.816
[info]   CI (99.9%): [≈ 0, 42.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 14.000), stdev = 4.775
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson
[info] # Run progress: 64.08% complete, ETA 00:10:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1191664.445 ops/s
[info] # Warmup Iteration   2: 1816844.198 ops/s
[info] # Warmup Iteration   3: 1798574.495 ops/s
[info] # Warmup Iteration   4: 1740483.674 ops/s
[info] # Warmup Iteration   5: 1631836.854 ops/s
[info] Iteration   1: 1615126.606 ops/s
[info]                  ·gc.alloc.rate:                   853.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        982.748 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 1791901.849 ops/s
[info]                  ·gc.alloc.rate:                                  946.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       896.323 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.585 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1849301.511 ops/s
[info]                  ·gc.alloc.rate:            977.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 869.081 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1844498.117 ops/s
[info]                  ·gc.alloc.rate:            974.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 871.396 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1846470.592 ops/s
[info]                  ·gc.alloc.rate:            975.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 580.284 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson":
[info]   1789459.735 ±(99.9%) 386306.644 ops/s [Average]
[info]   (min, avg, max) = (1615126.606, 1789459.735, 1849301.511), stdev = 100322.609
[info]   CI (99.9%): [1403153.091, 2175766.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate":
[info]   945.749 ±(99.9%) 204.162 MB/sec [Average]
[info]   (min, avg, max) = (853.640, 945.749, 977.326), stdev = 53.020
[info]   CI (99.9%): [741.587, 1149.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   950.218 ±(99.9%) 580.649 MB/sec [Average]
[info]   (min, avg, max) = (680.644, 950.218, 1021.124), stdev = 150.793
[info]   CI (99.9%): [369.570, 1530.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   839.966 ±(99.9%) 586.617 B/op [Average]
[info]   (min, avg, max) = (580.284, 839.966, 982.748), stdev = 152.343
[info]   CI (99.9%): [253.349, 1426.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.896 ±(99.9%) 6.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.896, 3.895), stdev = 1.695
[info]   CI (99.9%): [≈ 0, 7.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 18.000), stdev = 6.245
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter
[info] # Run progress: 65.05% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4022890.427 ops/s
[info] # Warmup Iteration   2: 4006598.970 ops/s
[info] # Warmup Iteration   3: 4008885.407 ops/s
[info] # Warmup Iteration   4: 4343828.464 ops/s
[info] # Warmup Iteration   5: 4477466.705 ops/s
[info] Iteration   1: 4487979.676 ops/s
[info]                  ·gc.alloc.rate:            821.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235.939 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4515009.259 ops/s
[info]                  ·gc.alloc.rate:                   826.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        352.948 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 4534863.405 ops/s
[info]                  ·gc.alloc.rate:                                  829.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.148 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       236.272 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4419093.905 ops/s
[info]                  ·gc.alloc.rate:                                  808.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       363.668 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 4042580.166 ops/s
[info]                  ·gc.alloc.rate:            739.664 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 265.042 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter":
[info]   4399905.282 ±(99.9%) 787428.818 ops/s [Average]
[info]   (min, avg, max) = (4042580.166, 4399905.282, 4534863.405), stdev = 204492.763
[info]   CI (99.9%): [3612476.464, 5187334.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate":
[info]   805.060 ±(99.9%) 144.134 MB/sec [Average]
[info]   (min, avg, max) = (739.664, 805.060, 829.717), stdev = 37.431
[info]   CI (99.9%): [660.926, 949.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (288.000, 288.000, 288.000), stdev = 0.001
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   813.529 ±(99.9%) 714.682 MB/sec [Average]
[info]   (min, avg, max) = (672.680, 813.529, 1020.960), stdev = 185.601
[info]   CI (99.9%): [98.847, 1528.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   290.774 ±(99.9%) 242.152 B/op [Average]
[info]   (min, avg, max) = (235.939, 290.774, 363.668), stdev = 62.886
[info]   CI (99.9%): [48.622, 532.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 2.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.393), stdev = 0.623
[info]   CI (99.9%): [≈ 0, 2.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 14.000), stdev = 4.817
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay
[info] # Run progress: 66.02% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179675.819 ops/s
[info] # Warmup Iteration   2: 373123.360 ops/s
[info] # Warmup Iteration   3: 373604.408 ops/s
[info] # Warmup Iteration   4: 375776.206 ops/s
[info] # Warmup Iteration   5: 376722.773 ops/s
[info] Iteration   1: 375610.511 ops/s
[info]                  ·gc.alloc.rate:                                  1088.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4259.372 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.747 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 378708.274 ops/s
[info]                  ·gc.alloc.rate:                                  1096.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5658.043 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 377579.832 ops/s
[info]                  ·gc.alloc.rate:            1093.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4256.353 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 382848.941 ops/s
[info]                  ·gc.alloc.rate:            1109.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4198.050 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 382029.204 ops/s
[info]                  ·gc.alloc.rate:                                  1106.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4207.027 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay":
[info]   379355.352 ±(99.9%) 11703.307 ops/s [Average]
[info]   (min, avg, max) = (375610.511, 379355.352, 382848.941), stdev = 3039.312
[info]   CI (99.9%): [367652.045, 391058.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate":
[info]   1099.047 ±(99.9%) 34.211 MB/sec [Average]
[info]   (min, avg, max) = (1088.116, 1099.047, 1109.360), stdev = 8.885
[info]   CI (99.9%): [1064.836, 1133.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.152), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   1088.214 ±(99.9%) 587.514 MB/sec [Average]
[info]   (min, avg, max) = (1016.380, 1088.214, 1361.124), stdev = 152.575
[info]   CI (99.9%): [500.700, 1675.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4515.769 ±(99.9%) 2461.171 B/op [Average]
[info]   (min, avg, max) = (4198.050, 4515.769, 5658.043), stdev = 639.158
[info]   CI (99.9%): [2054.598, 6976.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.349 ±(99.9%) 28.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.349, 16.747), stdev = 7.490
[info]   CI (99.9%): [≈ 0, 32.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce
[info] # Run progress: 66.99% complete, ETA 00:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3340.554 ops/s
[info] # Warmup Iteration   2: 4363.979 ops/s
[info] # Warmup Iteration   3: 4469.993 ops/s
[info] # Warmup Iteration   4: 4483.440 ops/s
[info] # Warmup Iteration   5: 4482.788 ops/s
[info] Iteration   1: 4524.091 ops/s
[info]                  ·gc.alloc.rate:                                  1044.444 MB/sec
[info]                  ·gc.alloc.rate.norm:                             363408.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 41.239 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       353619.221 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1390.377 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 4533.519 ops/s
[info]                  ·gc.alloc.rate:                                  1046.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             363408.097 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       354457.995 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4557.804 ops/s
[info]                  ·gc.alloc.rate:                                  1052.435 MB/sec
[info]                  ·gc.alloc.rate.norm:                             363408.089 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.788 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       352592.018 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4317.754 ops/s
[info]                  ·gc.alloc.rate:                                  997.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             363408.094 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 30.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       372098.844 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4555.427 ops/s
[info]                  ·gc.alloc.rate:                                  1051.837 MB/sec
[info]                  ·gc.alloc.rate.norm:                             363408.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.341 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       352746.765 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce":
[info]   4497.719 ±(99.9%) 391.295 ops/s [Average]
[info]   (min, avg, max) = (4317.754, 4497.719, 4557.804), stdev = 101.618
[info]   CI (99.9%): [4106.424, 4889.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1038.548 ±(99.9%) 89.748 MB/sec [Average]
[info]   (min, avg, max) = (997.296, 1038.548, 1052.435), stdev = 23.307
[info]   CI (99.9%): [948.800, 1128.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   363408.092 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (363408.089, 363408.092, 363408.097), stdev = 0.003
[info]   CI (99.9%): [363408.079, 363408.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.071 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (0.025, 0.071, 0.119), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   24.992 ±(99.9%) 46.233 B/op [Average]
[info]   (min, avg, max) = (8.788, 24.992, 41.239), stdev = 12.007
[info]   CI (99.9%): [≈ 0, 71.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1020.099 ±(99.9%) 8.162 MB/sec [Average]
[info]   (min, avg, max) = (1016.311, 1020.099, 1021.146), stdev = 2.120
[info]   CI (99.9%): [1011.938, 1028.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   357102.969 ±(99.9%) 32408.028 B/op [Average]
[info]   (min, avg, max) = (352592.018, 357102.969, 372098.844), stdev = 8416.262
[info]   CI (99.9%): [324694.941, 389510.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   278.075 ±(99.9%) 2394.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 278.075, 1390.377), stdev = 621.796
[info]   CI (99.9%): [≈ 0, 2672.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson
[info] # Run progress: 67.96% complete, ETA 00:09:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14758.651 ops/s
[info] # Warmup Iteration   2: 20747.739 ops/s
[info] # Warmup Iteration   3: 20806.298 ops/s
[info] # Warmup Iteration   4: 20818.985 ops/s
[info] # Warmup Iteration   5: 20804.090 ops/s
[info] Iteration   1: 20898.197 ops/s
[info]                  ·gc.alloc.rate:                   341.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              25687.963 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25283.815 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 20988.584 ops/s
[info]                  ·gc.alloc.rate:            342.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       25687.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25225.366 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 20811.053 ops/s
[info]                  ·gc.alloc.rate:                   339.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              25688.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25388.274 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 20907.680 ops/s
[info]                  ·gc.alloc.rate:            341.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       25687.855 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25323.078 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 20750.404 ops/s
[info]                  ·gc.alloc.rate:                   338.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              25687.639 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25464.118 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson":
[info]   20871.184 ±(99.9%) 355.262 ops/s [Average]
[info]   (min, avg, max) = (20750.404, 20871.184, 20988.584), stdev = 92.260
[info]   CI (99.9%): [20515.922, 21226.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   340.609 ±(99.9%) 5.706 MB/sec [Average]
[info]   (min, avg, max) = (338.673, 340.609, 342.480), stdev = 1.482
[info]   CI (99.9%): [334.904, 346.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   25687.861 ±(99.9%) 0.554 B/op [Average]
[info]   (min, avg, max) = (25687.639, 25687.861, 25688.011), stdev = 0.144
[info]   CI (99.9%): [25687.307, 25688.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   335.952 ±(99.9%) 1.402 MB/sec [Average]
[info]   (min, avg, max) = (335.664, 335.952, 336.384), stdev = 0.364
[info]   CI (99.9%): [334.549, 337.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   25336.930 ±(99.9%) 356.432 B/op [Average]
[info]   (min, avg, max) = (25225.366, 25336.930, 25464.118), stdev = 92.564
[info]   CI (99.9%): [24980.498, 25693.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.213 ±(99.9%) 106.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.213, 50.524), stdev = 27.581
[info]   CI (99.9%): [≈ 0, 136.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter
[info] # Run progress: 68.93% complete, ETA 00:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31136.862 ops/s
[info] # Warmup Iteration   2: 36179.457 ops/s
[info] # Warmup Iteration   3: 32368.949 ops/s
[info] # Warmup Iteration   4: 28740.757 ops/s
[info] # Warmup Iteration   5: 31648.132 ops/s
[info] Iteration   1: 35276.747 ops/s
[info]                  ·gc.alloc.rate:            270.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15007.677 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 35200.535 ops/s
[info]                  ·gc.alloc.rate:            269.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15039.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 34122.488 ops/s
[info]                  ·gc.alloc.rate:            261.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15515.570 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 31333.966 ops/s
[info]                  ·gc.alloc.rate:      240.145 MB/sec
[info]                  ·gc.alloc.rate.norm: 12064.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 31146.984 ops/s
[info]                  ·gc.alloc.rate:            238.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16997.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter":
[info]   33416.144 ±(99.9%) 7851.294 ops/s [Average]
[info]   (min, avg, max) = (31146.984, 33416.144, 35276.747), stdev = 2038.956
[info]   CI (99.9%): [25564.850, 41267.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   256.104 ±(99.9%) 60.128 MB/sec [Average]
[info]   (min, avg, max) = (238.728, 256.104, 270.317), stdev = 15.615
[info]   CI (99.9%): [195.976, 316.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   12064.013 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (12064.012, 12064.013, 12064.014), stdev = 0.001
[info]   CI (99.9%): [12064.009, 12064.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.067 ±(99.9%) 579.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.067, 336.379), stdev = 150.413
[info]   CI (99.9%): [≈ 0, 848.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   12512.128 ±(99.9%) 27112.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12512.128, 16997.749), stdev = 7041.145
[info]   CI (99.9%): [≈ 0, 39625.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc
[info] # Run progress: 69.90% complete, ETA 00:08:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35639.015 ops/s
[info] # Warmup Iteration   2: 40564.885 ops/s
[info] # Warmup Iteration   3: 38899.256 ops/s
[info] # Warmup Iteration   4: 40056.056 ops/s
[info] # Warmup Iteration   5: 39399.622 ops/s
[info] Iteration   1: 35603.985 ops/s
[info]                  ·gc.alloc.rate:      5.246 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35605.592 ops/s
[info]                  ·gc.alloc.rate:      5.248 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38436.234 ops/s
[info]                  ·gc.alloc.rate:      5.664 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 40000.867 ops/s
[info]                  ·gc.alloc.rate:      5.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 39889.182 ops/s
[info]                  ·gc.alloc.rate:      5.880 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc":
[info]   37907.172 ±(99.9%) 8434.970 ops/s [Average]
[info]   (min, avg, max) = (35603.985, 37907.172, 40000.867), stdev = 2190.535
[info]   CI (99.9%): [29472.202, 46342.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   5.587 ±(99.9%) 1.245 MB/sec [Average]
[info]   (min, avg, max) = (5.246, 5.587, 5.896), stdev = 0.323
[info]   CI (99.9%): [4.342, 6.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   232.011 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (232.010, 232.011, 232.012), stdev = 0.001
[info]   CI (99.9%): [232.007, 232.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay
[info] # Run progress: 70.87% complete, ETA 00:08:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1765.774 ops/s
[info] # Warmup Iteration   2: 3626.560 ops/s
[info] # Warmup Iteration   3: 3686.317 ops/s
[info] # Warmup Iteration   4: 3726.419 ops/s
[info] # Warmup Iteration   5: 3699.049 ops/s
[info] Iteration   1: 3678.673 ops/s
[info]                  ·gc.alloc.rate:                                  1111.458 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475591.509 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 39.757 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       580421.009 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1709.635 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 3782.825 ops/s
[info]                  ·gc.alloc.rate:            1143.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       475591.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 424806.292 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 3805.550 ops/s
[info]                  ·gc.alloc.rate:                                  1149.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475592.654 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       422239.823 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3797.672 ops/s
[info]                  ·gc.alloc.rate:            1147.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       475591.461 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 564171.978 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3640.910 ops/s
[info]                  ·gc.alloc.rate:                                  1100.162 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475590.509 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.924 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       441369.305 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay":
[info]   3741.126 ±(99.9%) 292.182 ops/s [Average]
[info]   (min, avg, max) = (3640.910, 3741.126, 3805.550), stdev = 75.879
[info]   CI (99.9%): [3448.944, 4033.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1130.430 ±(99.9%) 88.403 MB/sec [Average]
[info]   (min, avg, max) = (1100.162, 1130.430, 1149.870), stdev = 22.958
[info]   CI (99.9%): [1042.027, 1218.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   475591.595 ±(99.9%) 2.976 B/op [Average]
[info]   (min, avg, max) = (475590.509, 475591.595, 475592.654), stdev = 0.773
[info]   CI (99.9%): [475588.619, 475594.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.093), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   16.181 ±(99.9%) 64.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.181, 39.757), stdev = 16.746
[info]   CI (99.9%): [≈ 0, 80.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1156.132 ±(99.9%) 712.757 MB/sec [Average]
[info]   (min, avg, max) = (1020.875, 1156.132, 1361.338), stdev = 185.101
[info]   CI (99.9%): [443.375, 1868.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   486601.681 ±(99.9%) 303360.757 B/op [Average]
[info]   (min, avg, max) = (422239.823, 486601.681, 580421.009), stdev = 78781.825
[info]   CI (99.9%): [183240.925, 789962.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   341.927 ±(99.9%) 2944.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 341.927, 1709.635), stdev = 764.572
[info]   CI (99.9%): [≈ 0, 3286.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 3.033
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson
[info] # Run progress: 71.84% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107601.481 ops/s
[info] # Warmup Iteration   2: 462393.544 ops/s
[info] # Warmup Iteration   3: 461400.709 ops/s
[info] # Warmup Iteration   4: 460901.986 ops/s
[info] # Warmup Iteration   5: 460019.944 ops/s
[info] Iteration   1: 461785.485 ops/s
[info]                  ·gc.alloc.rate:                   1035.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3444.043 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.892 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 465439.675 ops/s
[info]                  ·gc.alloc.rate:                                  1043.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.268 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.908 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3453.153 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 465637.595 ops/s
[info]                  ·gc.alloc.rate:            1043.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3451.507 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 467051.238 ops/s
[info]                  ·gc.alloc.rate:            1046.690 MB/sec
[info]                  ·gc.alloc.rate.norm:       3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3441.222 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 465906.497 ops/s
[info]                  ·gc.alloc.rate:            1044.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3449.722 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson":
[info]   465164.098 ±(99.9%) 7659.691 ops/s [Average]
[info]   (min, avg, max) = (461785.485, 465164.098, 467051.238), stdev = 1989.197
[info]   CI (99.9%): [457504.407, 472823.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate":
[info]   1042.575 ±(99.9%) 16.969 MB/sec [Average]
[info]   (min, avg, max) = (1035.058, 1042.575, 1046.690), stdev = 4.407
[info]   CI (99.9%): [1025.605, 1059.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm":
[info]   3528.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3528.001, 3528.001, 3528.001), stdev = 0.001
[info]   CI (99.9%): [3528.001, 3528.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.054 ±(99.9%) 0.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.268), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.182 ±(99.9%) 1.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.908), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen":
[info]   1018.913 ±(99.9%) 18.272 MB/sec [Average]
[info]   (min, avg, max) = (1010.426, 1018.913, 1021.149), stdev = 4.745
[info]   CI (99.9%): [1000.642, 1037.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3447.929 ±(99.9%) 19.578 B/op [Average]
[info]   (min, avg, max) = (3441.222, 3447.929, 3453.153), stdev = 5.084
[info]   CI (99.9%): [3428.352, 3467.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.178 ±(99.9%) 27.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.178, 15.892), stdev = 7.107
[info]   CI (99.9%): [≈ 0, 30.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter
[info] # Run progress: 72.82% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2062686.064 ops/s
[info] # Warmup Iteration   2: 2332343.594 ops/s
[info] # Warmup Iteration   3: 2324766.813 ops/s
[info] # Warmup Iteration   4: 2361339.231 ops/s
[info] # Warmup Iteration   5: 2321807.940 ops/s
[info] Iteration   1: 2358313.330 ops/s
[info]                  ·gc.alloc.rate:            491.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.502 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2239893.894 ops/s
[info]                  ·gc.alloc.rate:            466.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 236.356 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2059482.139 ops/s
[info]                  ·gc.alloc.rate:            429.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 514.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2080423.699 ops/s
[info]                  ·gc.alloc.rate:            433.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254.489 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2302196.450 ops/s
[info]                  ·gc.alloc.rate:            479.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 229.974 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter":
[info]   2208061.902 ±(99.9%) 512358.299 ops/s [Average]
[info]   (min, avg, max) = (2059482.139, 2208061.902, 2358313.330), stdev = 133057.823
[info]   CI (99.9%): [1695703.603, 2720420.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   460.082 ±(99.9%) 106.697 MB/sec [Average]
[info]   (min, avg, max) = (429.128, 460.082, 491.316), stdev = 27.709
[info]   CI (99.9%): [353.386, 566.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (328.000, 328.000, 328.000), stdev = 0.001
[info]   CI (99.9%): [328.000, 328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   403.582 ±(99.9%) 579.065 MB/sec [Average]
[info]   (min, avg, max) = (336.285, 403.582, 672.592), stdev = 150.381
[info]   CI (99.9%): [≈ 0, 982.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   291.882 ±(99.9%) 480.291 B/op [Average]
[info]   (min, avg, max) = (224.502, 291.882, 514.090), stdev = 124.730
[info]   CI (99.9%): [≈ 0, 772.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay
[info] # Run progress: 73.79% complete, ETA 00:07:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76638.655 ops/s
[info] # Warmup Iteration   2: 218921.272 ops/s
[info] # Warmup Iteration   3: 218133.898 ops/s
[info] # Warmup Iteration   4: 216593.297 ops/s
[info] # Warmup Iteration   5: 217484.368 ops/s
[info] Iteration   1: 219699.465 ops/s
[info]                  ·gc.alloc.rate:            855.206 MB/sec
[info]                  ·gc.alloc.rate.norm:       6128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4819.745 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 216993.531 ops/s
[info]                  ·gc.alloc.rate:                   844.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              6128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7343.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 222159.718 ops/s
[info]                  ·gc.alloc.rate:                                  864.952 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.554 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4823.035 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 222944.264 ops/s
[info]                  ·gc.alloc.rate:                                  867.910 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7209.180 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 222434.846 ops/s
[info]                  ·gc.alloc.rate:            865.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       6128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4816.922 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay":
[info]   220846.365 ±(99.9%) 9589.776 ops/s [Average]
[info]   (min, avg, max) = (216993.531, 220846.365, 222944.264), stdev = 2490.434
[info]   CI (99.9%): [211256.589, 230436.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate":
[info]   859.758 ±(99.9%) 37.413 MB/sec [Average]
[info]   (min, avg, max) = (844.760, 859.758, 867.910), stdev = 9.716
[info]   CI (99.9%): [822.345, 897.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   6128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6128.002, 6128.002, 6128.002), stdev = 0.001
[info]   CI (99.9%): [6128.002, 6128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.114 ±(99.9%) 0.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.554), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   813.495 ±(99.9%) 714.496 MB/sec [Average]
[info]   (min, avg, max) = (672.630, 813.495, 1021.037), stdev = 185.552
[info]   CI (99.9%): [98.999, 1527.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5802.533 ±(99.9%) 5184.382 B/op [Average]
[info]   (min, avg, max) = (4816.922, 5802.533, 7343.781), stdev = 1346.367
[info]   CI (99.9%): [618.151, 10986.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.798 ±(99.9%) 49.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.798, 28.989), stdev = 12.964
[info]   CI (99.9%): [≈ 0, 55.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 14.000), stdev = 4.970
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce
[info] # Run progress: 74.76% complete, ETA 00:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352112.550 ops/s
[info] # Warmup Iteration   2: 454070.283 ops/s
[info] # Warmup Iteration   3: 459363.561 ops/s
[info] # Warmup Iteration   4: 492163.815 ops/s
[info] # Warmup Iteration   5: 509777.676 ops/s
[info] Iteration   1: 522435.504 ops/s
[info]                  ·gc.alloc.rate:                                  1263.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.164 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.493 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4101.801 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 526291.593 ops/s
[info]                  ·gc.alloc.rate:                                  1273.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3053.780 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 527461.992 ops/s
[info]                  ·gc.alloc.rate:            1276.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4062.676 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 521528.920 ops/s
[info]                  ·gc.alloc.rate:                                  1261.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4108.909 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 520763.616 ops/s
[info]                  ·gc.alloc.rate:                                  1259.768 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4115.031 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce":
[info]   523696.325 ±(99.9%) 11520.403 ops/s [Average]
[info]   (min, avg, max) = (520763.616, 523696.325, 527461.992), stdev = 2991.812
[info]   CI (99.9%): [512175.922, 535216.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate":
[info]   1266.996 ±(99.9%) 27.740 MB/sec [Average]
[info]   (min, avg, max) = (1259.768, 1266.996, 1276.019), stdev = 7.204
[info]   CI (99.9%): [1239.256, 1294.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm":
[info]   3808.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3808.001, 3808.001, 3808.001), stdev = 0.001
[info]   CI (99.9%): [3808.001, 3808.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.101 ±(99.9%) 0.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.493), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1293.389 ±(99.9%) 586.165 MB/sec [Average]
[info]   (min, avg, max) = (1021.080, 1293.389, 1361.657), stdev = 152.225
[info]   CI (99.9%): [707.224, 1879.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3888.440 ±(99.9%) 1798.388 B/op [Average]
[info]   (min, avg, max) = (3053.780, 3888.440, 4115.031), stdev = 467.036
[info]   CI (99.9%): [2090.052, 5686.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson
[info] # Run progress: 75.73% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547666.939 ops/s
[info] # Warmup Iteration   2: 854615.577 ops/s
[info] # Warmup Iteration   3: 844369.173 ops/s
[info] # Warmup Iteration   4: 943223.808 ops/s
[info] # Warmup Iteration   5: 938169.492 ops/s
[info] Iteration   1: 936294.143 ops/s
[info]                  ·gc.alloc.rate:            633.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1128.697 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 936849.273 ops/s
[info]                  ·gc.alloc.rate:            633.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1128.063 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 944514.356 ops/s
[info]                  ·gc.alloc.rate:            638.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1118.845 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 948676.434 ops/s
[info]                  ·gc.alloc.rate:                   641.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        556.981 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.631 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 955394.422 ops/s
[info]                  ·gc.alloc.rate:                   645.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1120.439 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson":
[info]   944345.726 ±(99.9%) 31157.036 ops/s [Average]
[info]   (min, avg, max) = (936294.143, 944345.726, 955394.422), stdev = 8091.383
[info]   CI (99.9%): [913188.690, 975502.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate":
[info]   638.502 ±(99.9%) 21.036 MB/sec [Average]
[info]   (min, avg, max) = (633.035, 638.502, 645.950), stdev = 5.463
[info]   CI (99.9%): [617.466, 659.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   606.133 ±(99.9%) 582.141 MB/sec [Average]
[info]   (min, avg, max) = (335.777, 606.133, 680.213), stdev = 151.180
[info]   CI (99.9%): [23.992, 1188.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1010.605 ±(99.9%) 976.608 B/op [Average]
[info]   (min, avg, max) = (556.981, 1010.605, 1128.697), stdev = 253.622
[info]   CI (99.9%): [33.997, 1987.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.546 ±(99.9%) 11.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.546, 6.631), stdev = 2.882
[info]   CI (99.9%): [≈ 0, 12.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.600, 13.000), stdev = 3.912
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter
[info] # Run progress: 76.70% complete, ETA 00:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3786186.343 ops/s
[info] # Warmup Iteration   2: 4428997.777 ops/s
[info] # Warmup Iteration   3: 4450260.485 ops/s
[info] # Warmup Iteration   4: 4433158.883 ops/s
[info] # Warmup Iteration   5: 4477576.417 ops/s
[info] Iteration   1: 4207092.658 ops/s
[info]                  ·gc.alloc.rate:            748.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251.691 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3923823.977 ops/s
[info]                  ·gc.alloc.rate:                   697.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        269.848 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 4008827.264 ops/s
[info]                  ·gc.alloc.rate:                                  713.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       266.995 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.262 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4471142.114 ops/s
[info]                  ·gc.alloc.rate:                                  795.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       359.461 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4508217.454 ops/s
[info]                  ·gc.alloc.rate:            801.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237.677 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter":
[info]   4223820.693 ±(99.9%) 1016142.242 ops/s [Average]
[info]   (min, avg, max) = (3923823.977, 4223820.693, 4508217.454), stdev = 263888.913
[info]   CI (99.9%): [3207678.451, 5239962.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate":
[info]   751.335 ±(99.9%) 180.769 MB/sec [Average]
[info]   (min, avg, max) = (697.968, 751.335, 801.938), stdev = 46.945
[info]   CI (99.9%): [570.566, 932.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm":
[info]   280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (280.000, 280.000, 280.000), stdev = 0.001
[info]   CI (99.9%): [280.000, 280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   745.418 ±(99.9%) 593.546 MB/sec [Average]
[info]   (min, avg, max) = (672.628, 745.418, 1021.068), stdev = 154.142
[info]   CI (99.9%): [151.872, 1338.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   277.134 ±(99.9%) 184.045 B/op [Average]
[info]   (min, avg, max) = (237.677, 277.134, 359.461), stdev = 47.796
[info]   CI (99.9%): [93.089, 461.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.319 ±(99.9%) 2.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.336), stdev = 0.579
[info]   CI (99.9%): [≈ 0, 2.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 12.000), stdev = 4.615
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay
[info] # Run progress: 77.67% complete, ETA 00:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122005.800 ops/s
[info] # Warmup Iteration   2: 293953.427 ops/s
[info] # Warmup Iteration   3: 300631.374 ops/s
[info] # Warmup Iteration   4: 300559.079 ops/s
[info] # Warmup Iteration   5: 298556.056 ops/s
[info] Iteration   1: 300210.773 ops/s
[info]                  ·gc.alloc.rate:                   1020.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5308.096 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 302590.434 ops/s
[info]                  ·gc.alloc.rate:                                  1029.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.443 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5311.517 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 305112.534 ops/s
[info]                  ·gc.alloc.rate:                                  1037.515 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5267.534 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 303979.097 ops/s
[info]                  ·gc.alloc.rate:            1033.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       5352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5287.112 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 302393.427 ops/s
[info]                  ·gc.alloc.rate:                                  1028.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5314.889 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay":
[info]   302857.253 ±(99.9%) 7109.370 ops/s [Average]
[info]   (min, avg, max) = (300210.773, 302857.253, 305112.534), stdev = 1846.281
[info]   CI (99.9%): [295747.882, 309966.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate":
[info]   1029.814 ±(99.9%) 24.134 MB/sec [Average]
[info]   (min, avg, max) = (1020.869, 1029.814, 1037.515), stdev = 6.267
[info]   CI (99.9%): [1005.680, 1053.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm":
[info]   5352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5352.001, 5352.001, 5352.001), stdev = 0.001
[info]   CI (99.9%): [5352.001, 5352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.090 ±(99.9%) 0.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.443), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.375 ±(99.9%) 14.817 MB/sec [Average]
[info]   (min, avg, max) = (1012.495, 1019.375, 1021.260), stdev = 3.848
[info]   CI (99.9%): [1004.557, 1034.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5297.830 ±(99.9%) 77.409 B/op [Average]
[info]   (min, avg, max) = (5267.534, 5297.830, 5314.889), stdev = 20.103
[info]   CI (99.9%): [5220.421, 5375.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.191 ±(99.9%) 36.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.191, 20.953), stdev = 9.370
[info]   CI (99.9%): [≈ 0, 40.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce
[info] # Run progress: 78.64% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143622.499 ops/s
[info] # Warmup Iteration   2: 297955.058 ops/s
[info] # Warmup Iteration   3: 308799.381 ops/s
[info] # Warmup Iteration   4: 311964.119 ops/s
[info] # Warmup Iteration   5: 309732.928 ops/s
[info] Iteration   1: 307975.342 ops/s
[info]                  ·gc.alloc.rate:            856.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5150.694 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 310424.052 ops/s
[info]                  ·gc.alloc.rate:                   862.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3428.099 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 314270.794 ops/s
[info]                  ·gc.alloc.rate:                                  873.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4376.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5114.191 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 311721.070 ops/s
[info]                  ·gc.alloc.rate:                                  866.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4376.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3437.348 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 315607.190 ops/s
[info]                  ·gc.alloc.rate:            877.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5092.448 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce":
[info]   311999.690 ±(99.9%) 11699.814 ops/s [Average]
[info]   (min, avg, max) = (307975.342, 311999.690, 315607.190), stdev = 3038.405
[info]   CI (99.9%): [300299.875, 323699.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate":
[info]   867.460 ±(99.9%) 32.023 MB/sec [Average]
[info]   (min, avg, max) = (856.588, 867.460, 877.443), stdev = 8.316
[info]   CI (99.9%): [835.438, 899.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm":
[info]   4376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4376.001, 4376.001), stdev = 0.001
[info]   CI (99.9%): [4376.001, 4376.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.080 ±(99.9%) 0.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.400), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen":
[info]   881.429 ±(99.9%) 713.984 MB/sec [Average]
[info]   (min, avg, max) = (676.058, 881.429, 1021.099), stdev = 185.419
[info]   CI (99.9%): [167.445, 1595.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4444.556 ±(99.9%) 3557.660 B/op [Average]
[info]   (min, avg, max) = (3428.099, 4444.556, 5150.694), stdev = 923.913
[info]   CI (99.9%): [886.896, 8002.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.053 ±(99.9%) 34.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.053, 20.265), stdev = 9.063
[info]   CI (99.9%): [≈ 0, 38.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.107
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson
[info] # Run progress: 79.61% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96675.366 ops/s
[info] # Warmup Iteration   2: 551047.738 ops/s
[info] # Warmup Iteration   3: 566304.866 ops/s
[info] # Warmup Iteration   4: 559924.589 ops/s
[info] # Warmup Iteration   5: 561582.550 ops/s
[info] Iteration   1: 567082.705 ops/s
[info]                  ·gc.alloc.rate:                   890.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1863.534 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 562432.586 ops/s
[info]                  ·gc.alloc.rate:                   883.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2831.470 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 575580.399 ops/s
[info]                  ·gc.alloc.rate:                                  903.861 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.284 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1861.477 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 567791.542 ops/s
[info]                  ·gc.alloc.rate:                                  891.670 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2830.516 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 572510.088 ops/s
[info]                  ·gc.alloc.rate:            898.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2807.209 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson":
[info]   569079.464 ±(99.9%) 19621.110 ops/s [Average]
[info]   (min, avg, max) = (562432.586, 569079.464, 575580.399), stdev = 5095.540
[info]   CI (99.9%): [549458.354, 588700.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate":
[info]   893.674 ±(99.9%) 30.681 MB/sec [Average]
[info]   (min, avg, max) = (883.253, 893.674, 903.861), stdev = 7.968
[info]   CI (99.9%): [862.993, 924.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.057 ±(99.9%) 0.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.284), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.156 ±(99.9%) 1.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.777), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen":
[info]   881.116 ±(99.9%) 721.236 MB/sec [Average]
[info]   (min, avg, max) = (671.389, 881.116, 1020.989), stdev = 187.303
[info]   CI (99.9%): [159.880, 1602.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2438.841 ±(99.9%) 2026.250 B/op [Average]
[info]   (min, avg, max) = (1861.477, 2438.841, 2831.470), stdev = 526.211
[info]   CI (99.9%): [412.592, 4465.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.979 ±(99.9%) 21.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.979, 13.048), stdev = 5.685
[info]   CI (99.9%): [≈ 0, 24.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 14.000), stdev = 5.215
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter
[info] # Run progress: 80.58% complete, ETA 00:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2046019.804 ops/s
[info] # Warmup Iteration   2: 2283969.216 ops/s
[info] # Warmup Iteration   3: 2274648.894 ops/s
[info] # Warmup Iteration   4: 2299472.895 ops/s
[info] # Warmup Iteration   5: 2276152.699 ops/s
[info] Iteration   1: 2304140.208 ops/s
[info]                  ·gc.alloc.rate:            620.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 229.787 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2291969.538 ops/s
[info]                  ·gc.alloc.rate:            617.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 462.013 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2272077.464 ops/s
[info]                  ·gc.alloc.rate:            612.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 466.030 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2294957.978 ops/s
[info]                  ·gc.alloc.rate:                   618.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        463.688 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2330936.664 ops/s
[info]                  ·gc.alloc.rate:                                  627.910 MB/sec
[info]                  ·gc.alloc.rate.norm:                             424.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       459.670 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter":
[info]   2298816.371 ±(99.9%) 82515.084 ops/s [Average]
[info]   (min, avg, max) = (2272077.464, 2298816.371, 2330936.664), stdev = 21428.905
[info]   CI (99.9%): [2216301.287, 2381331.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate":
[info]   619.264 ±(99.9%) 22.125 MB/sec [Average]
[info]   (min, avg, max) = (612.086, 619.264, 627.910), stdev = 5.746
[info]   CI (99.9%): [597.139, 641.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   607.760 ±(99.9%) 584.438 MB/sec [Average]
[info]   (min, avg, max) = (336.316, 607.760, 680.733), stdev = 151.777
[info]   CI (99.9%): [23.322, 1192.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   416.238 ±(99.9%) 401.449 B/op [Average]
[info]   (min, avg, max) = (229.787, 416.238, 466.030), stdev = 104.255
[info]   CI (99.9%): [14.789, 817.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.548 ±(99.9%) 4.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 2.741), stdev = 1.226
[info]   CI (99.9%): [≈ 0, 5.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 11.000), stdev = 3.421
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay
[info] # Run progress: 81.55% complete, ETA 00:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79281.913 ops/s
[info] # Warmup Iteration   2: 231114.119 ops/s
[info] # Warmup Iteration   3: 236292.162 ops/s
[info] # Warmup Iteration   4: 234085.711 ops/s
[info] # Warmup Iteration   5: 233237.366 ops/s
[info] Iteration   1: 233239.716 ops/s
[info]                  ·gc.alloc.rate:            842.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4539.854 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 231183.617 ops/s
[info]                  ·gc.alloc.rate:                   835.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6892.888 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 234471.587 ops/s
[info]                  ·gc.alloc.rate:                                  847.220 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.202 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.358 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4569.660 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 234576.436 ops/s
[info]                  ·gc.alloc.rate:                                  848.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1019.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6841.013 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 235619.908 ops/s
[info]                  ·gc.alloc.rate:            851.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4547.534 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay":
[info]   233818.253 ±(99.9%) 6535.797 ops/s [Average]
[info]   (min, avg, max) = (231183.617, 233818.253, 235619.908), stdev = 1697.326
[info]   CI (99.9%): [227282.455, 240354.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate":
[info]   845.032 ±(99.9%) 23.952 MB/sec [Average]
[info]   (min, avg, max) = (835.453, 845.032, 851.657), stdev = 6.220
[info]   CI (99.9%): [821.079, 868.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm":
[info]   5688.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.002, 5688.002, 5688.002), stdev = 0.001
[info]   CI (99.9%): [5688.002, 5688.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.202), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.273 ±(99.9%) 2.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.273, 1.358), stdev = 0.606
[info]   CI (99.9%): [≈ 0, 2.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen":
[info]   813.318 ±(99.9%) 713.350 MB/sec [Average]
[info]   (min, avg, max) = (672.648, 813.318, 1019.975), stdev = 185.255
[info]   CI (99.9%): [99.969, 1526.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5478.190 ±(99.9%) 4882.381 B/op [Average]
[info]   (min, avg, max) = (4539.854, 5478.190, 6892.888), stdev = 1267.939
[info]   CI (99.9%): [595.809, 10360.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.442 ±(99.9%) 46.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.442, 27.209), stdev = 12.168
[info]   CI (99.9%): [≈ 0, 52.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 14.000), stdev = 5.273
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce
[info] # Run progress: 82.52% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 365879.866 ops/s
[info] # Warmup Iteration   2: 477002.673 ops/s
[info] # Warmup Iteration   3: 477060.905 ops/s
[info] # Warmup Iteration   4: 477723.881 ops/s
[info] # Warmup Iteration   5: 481707.319 ops/s
[info] Iteration   1: 485587.334 ops/s
[info]                  ·gc.alloc.rate:                                  1127.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3656.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.406 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4410.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.159 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 490815.809 ops/s
[info]                  ·gc.alloc.rate:                                  1139.946 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3656.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3274.597 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 488828.433 ops/s
[info]                  ·gc.alloc.rate:            1135.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       3656.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3287.839 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 489106.548 ops/s
[info]                  ·gc.alloc.rate:            1136.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       3656.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4380.864 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 486907.315 ops/s
[info]                  ·gc.alloc.rate:                                  1130.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3656.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3300.808 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce":
[info]   488249.088 ±(99.9%) 7831.169 ops/s [Average]
[info]   (min, avg, max) = (485587.334, 488249.088, 490815.809), stdev = 2033.730
[info]   CI (99.9%): [480417.918, 496080.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate":
[info]   1134.024 ±(99.9%) 18.168 MB/sec [Average]
[info]   (min, avg, max) = (1127.832, 1134.024, 1139.946), stdev = 4.718
[info]   CI (99.9%): [1115.856, 1152.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   3656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3656.001, 3656.001, 3656.001), stdev = 0.001
[info]   CI (99.9%): [3656.001, 3656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.084 ±(99.9%) 0.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.406), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1157.012 ±(99.9%) 717.056 MB/sec [Average]
[info]   (min, avg, max) = (1020.981, 1157.012, 1361.365), stdev = 186.217
[info]   CI (99.9%): [439.956, 1874.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3730.956 ±(99.9%) 2337.531 B/op [Average]
[info]   (min, avg, max) = (3274.597, 3730.956, 4410.671), stdev = 607.049
[info]   CI (99.9%): [1393.424, 6068.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.432 ±(99.9%) 3.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.432, 2.159), stdev = 0.965
[info]   CI (99.9%): [≈ 0, 4.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson
[info] # Run progress: 83.50% complete, ETA 00:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 449035.376 ops/s
[info] # Warmup Iteration   2: 1006948.964 ops/s
[info] # Warmup Iteration   3: 1009498.873 ops/s
[info] # Warmup Iteration   4: 1004134.700 ops/s
[info] # Warmup Iteration   5: 910718.452 ops/s
[info] Iteration   1: 904592.849 ops/s
[info]                  ·gc.alloc.rate:            519.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1168.252 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 976090.068 ops/s
[info]                  ·gc.alloc.rate:            560.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 541.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1010644.383 ops/s
[info]                  ·gc.alloc.rate:            580.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1045.628 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 1012893.484 ops/s
[info]                  ·gc.alloc.rate:            581.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1043.349 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   5: 1019590.559 ops/s
[info]                  ·gc.alloc.rate:                   585.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1041.659 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson":
[info]   984762.269 ±(99.9%) 184435.412 ops/s [Average]
[info]   (min, avg, max) = (904592.849, 984762.269, 1019590.559), stdev = 47897.291
[info]   CI (99.9%): [800326.857, 1169197.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate":
[info]   565.551 ±(99.9%) 105.973 MB/sec [Average]
[info]   (min, avg, max) = (519.484, 565.551, 585.583), stdev = 27.521
[info]   CI (99.9%): [459.579, 671.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   604.897 ±(99.9%) 579.507 MB/sec [Average]
[info]   (min, avg, max) = (335.694, 604.897, 674.754), stdev = 150.496
[info]   CI (99.9%): [25.390, 1184.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   968.045 ±(99.9%) 941.774 B/op [Average]
[info]   (min, avg, max) = (541.340, 968.045, 1168.252), stdev = 244.576
[info]   CI (99.9%): [26.271, 1909.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.440 ±(99.9%) 12.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.440, 7.198), stdev = 3.219
[info]   CI (99.9%): [≈ 0, 13.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.800, 13.000), stdev = 2.683
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter
[info] # Run progress: 84.47% complete, ETA 00:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3423233.648 ops/s
[info] # Warmup Iteration   2: 3656161.590 ops/s
[info] # Warmup Iteration   3: 3687312.952 ops/s
[info] # Warmup Iteration   4: 3720721.125 ops/s
[info] # Warmup Iteration   5: 3696998.131 ops/s
[info] Iteration   1: 3718043.360 ops/s
[info]                  ·gc.alloc.rate:            510.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 284.801 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3708138.146 ops/s
[info]                  ·gc.alloc.rate:            508.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142.773 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3655135.262 ops/s
[info]                  ·gc.alloc.rate:            501.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 289.666 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 3691755.534 ops/s
[info]                  ·gc.alloc.rate:            506.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 143.403 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3670941.045 ops/s
[info]                  ·gc.alloc.rate:                   503.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        288.446 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter":
[info]   3688802.670 ±(99.9%) 99859.639 ops/s [Average]
[info]   (min, avg, max) = (3655135.262, 3688802.670, 3718043.360), stdev = 25933.231
[info]   CI (99.9%): [3588943.030, 3788662.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate":
[info]   506.199 ±(99.9%) 13.581 MB/sec [Average]
[info]   (min, avg, max) = (501.566, 506.199, 510.149), stdev = 3.527
[info]   CI (99.9%): [492.617, 519.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   216.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (216.000, 216.000, 216.000), stdev = 0.001
[info]   CI (99.9%): [216.000, 216.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.154 ±(99.9%) 709.441 MB/sec [Average]
[info]   (min, avg, max) = (336.312, 538.154, 672.843), stdev = 184.240
[info]   CI (99.9%): [≈ 0, 1247.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   229.818 ±(99.9%) 304.947 B/op [Average]
[info]   (min, avg, max) = (142.773, 229.818, 289.666), stdev = 79.194
[info]   CI (99.9%): [≈ 0, 534.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.286 ±(99.9%) 2.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 1.428), stdev = 0.639
[info]   CI (99.9%): [≈ 0, 2.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 11.000), stdev = 2.739
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay
[info] # Run progress: 85.44% complete, ETA 00:04:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122462.473 ops/s
[info] # Warmup Iteration   2: 258276.961 ops/s
[info] # Warmup Iteration   3: 260390.337 ops/s
[info] # Warmup Iteration   4: 289086.777 ops/s
[info] # Warmup Iteration   5: 293990.420 ops/s
[info] Iteration   1: 291875.442 ops/s
[info]                  ·gc.alloc.rate:                   986.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5441.616 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.959 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 298367.284 ops/s
[info]                  ·gc.alloc.rate:                                  1008.379 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5383.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.514 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 298568.189 ops/s
[info]                  ·gc.alloc.rate:            1009.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5382.877 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 298375.032 ops/s
[info]                  ·gc.alloc.rate:            1008.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5386.502 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 298663.457 ops/s
[info]                  ·gc.alloc.rate:            1009.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5381.147 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay":
[info]   297169.881 ±(99.9%) 11407.151 ops/s [Average]
[info]   (min, avg, max) = (291875.442, 297169.881, 298663.457), stdev = 2962.401
[info]   CI (99.9%): [285762.730, 308577.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate":
[info]   1004.352 ±(99.9%) 38.749 MB/sec [Average]
[info]   (min, avg, max) = (986.368, 1004.352, 1009.437), stdev = 10.063
[info]   CI (99.9%): [965.603, 1043.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   5320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5320.001, 5320.001, 5320.001), stdev = 0.001
[info]   CI (99.9%): [5320.001, 5320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.076 ±(99.9%) 0.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.380), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1018.481 ±(99.9%) 20.623 MB/sec [Average]
[info]   (min, avg, max) = (1008.916, 1018.481, 1021.097), stdev = 5.356
[info]   CI (99.9%): [997.857, 1039.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5395.048 ±(99.9%) 100.519 B/op [Average]
[info]   (min, avg, max) = (5381.147, 5395.048, 5441.616), stdev = 26.104
[info]   CI (99.9%): [5294.529, 5495.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.295 ±(99.9%) 29.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.295, 17.959), stdev = 7.789
[info]   CI (99.9%): [≈ 0, 34.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.701
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce
[info] # Run progress: 86.41% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128657.034 ops/s
[info] # Warmup Iteration   2: 288671.672 ops/s
[info] # Warmup Iteration   3: 297337.404 ops/s
[info] # Warmup Iteration   4: 290643.293 ops/s
[info] # Warmup Iteration   5: 294501.657 ops/s
[info] Iteration   1: 294181.871 ops/s
[info]                  ·gc.alloc.rate:            792.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3599.398 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 291903.573 ops/s
[info]                  ·gc.alloc.rate:                   786.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5441.206 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 299347.591 ops/s
[info]                  ·gc.alloc.rate:                   806.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3575.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 300744.272 ops/s
[info]                  ·gc.alloc.rate:                                  810.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3562.696 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 295469.703 ops/s
[info]                  ·gc.alloc.rate:            795.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5439.324 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce":
[info]   296329.402 ±(99.9%) 14087.711 ops/s [Average]
[info]   (min, avg, max) = (291903.573, 296329.402, 300744.272), stdev = 3658.534
[info]   CI (99.9%): [282241.691, 310417.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate":
[info]   798.217 ±(99.9%) 37.971 MB/sec [Average]
[info]   (min, avg, max) = (786.327, 798.217, 810.154), stdev = 9.861
[info]   CI (99.9%): [760.245, 836.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm":
[info]   4240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4240.001, 4240.001, 4240.001), stdev = 0.001
[info]   CI (99.9%): [4240.001, 4240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.228), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen":
[info]   812.707 ±(99.9%) 711.578 MB/sec [Average]
[info]   (min, avg, max) = (672.669, 812.707, 1021.019), stdev = 184.794
[info]   CI (99.9%): [101.130, 1524.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4323.688 ±(99.9%) 3925.251 B/op [Average]
[info]   (min, avg, max) = (3562.696, 4323.688, 5441.206), stdev = 1019.375
[info]   CI (99.9%): [398.437, 8248.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.292 ±(99.9%) 29.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.292, 17.958), stdev = 7.788
[info]   CI (99.9%): [≈ 0, 34.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 17.000), stdev = 5.683
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson
[info] # Run progress: 87.38% complete, ETA 00:03:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90741.303 ops/s
[info] # Warmup Iteration   2: 550070.477 ops/s
[info] # Warmup Iteration   3: 553523.571 ops/s
[info] # Warmup Iteration   4: 550730.341 ops/s
[info] # Warmup Iteration   5: 548081.677 ops/s
[info] Iteration   1: 552126.815 ops/s
[info]                  ·gc.alloc.rate:            906.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       2584.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2871.099 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 554937.354 ops/s
[info]                  ·gc.alloc.rate:                   910.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              2584.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1915.649 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 558586.858 ops/s
[info]                  ·gc.alloc.rate:                                  917.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.257 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.725 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2877.140 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 562844.810 ops/s
[info]                  ·gc.alloc.rate:            923.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       2584.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2855.501 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 561266.694 ops/s
[info]                  ·gc.alloc.rate:            921.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       2584.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1908.920 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson":
[info]   557952.506 ±(99.9%) 17042.167 ops/s [Average]
[info]   (min, avg, max) = (552126.815, 557952.506, 562844.810), stdev = 4425.797
[info]   CI (99.9%): [540910.340, 574994.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate":
[info]   915.907 ±(99.9%) 28.231 MB/sec [Average]
[info]   (min, avg, max) = (906.326, 915.907, 923.954), stdev = 7.331
[info]   CI (99.9%): [887.676, 944.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2584.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2584.001, 2584.001, 2584.001), stdev = 0.001
[info]   CI (99.9%): [2584.001, 2584.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.051 ±(99.9%) 0.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.257), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.145 ±(99.9%) 1.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.725), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   881.006 ±(99.9%) 714.076 MB/sec [Average]
[info]   (min, avg, max) = (675.208, 881.006, 1021.034), stdev = 185.443
[info]   CI (99.9%): [166.930, 1595.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2485.662 ±(99.9%) 2015.753 B/op [Average]
[info]   (min, avg, max) = (1908.920, 2485.662, 2877.140), stdev = 523.485
[info]   CI (99.9%): [469.909, 4501.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.645 ±(99.9%) 22.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.645, 13.224), stdev = 5.914
[info]   CI (99.9%): [≈ 0, 25.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.309
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter
[info] # Run progress: 88.35% complete, ETA 00:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1782977.982 ops/s
[info] # Warmup Iteration   2: 1999801.403 ops/s
[info] # Warmup Iteration   3: 1988934.801 ops/s
[info] # Warmup Iteration   4: 1983553.387 ops/s
[info] # Warmup Iteration   5: 2007226.004 ops/s
[info] Iteration   1: 1976781.362 ops/s
[info]                  ·gc.alloc.rate:            512.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 535.678 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1996609.625 ops/s
[info]                  ·gc.alloc.rate:            517.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 265.178 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1987912.681 ops/s
[info]                  ·gc.alloc.rate:            515.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.659 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 1999774.624 ops/s
[info]                  ·gc.alloc.rate:            518.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 264.758 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1991135.706 ops/s
[info]                  ·gc.alloc.rate:                   516.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        531.806 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter":
[info]   1990442.800 ±(99.9%) 34367.358 ops/s [Average]
[info]   (min, avg, max) = (1976781.362, 1990442.800, 1999774.624), stdev = 8925.094
[info]   CI (99.9%): [1956075.442, 2024810.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate":
[info]   515.888 ±(99.9%) 9.007 MB/sec [Average]
[info]   (min, avg, max) = (512.288, 515.888, 518.301), stdev = 2.339
[info]   CI (99.9%): [506.881, 524.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.132 ±(99.9%) 709.303 MB/sec [Average]
[info]   (min, avg, max) = (336.334, 538.132, 672.684), stdev = 184.204
[info]   CI (99.9%): [≈ 0, 1247.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   426.016 ±(99.9%) 566.133 B/op [Average]
[info]   (min, avg, max) = (264.758, 426.016, 535.678), stdev = 147.023
[info]   CI (99.9%): [≈ 0, 992.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.527 ±(99.9%) 4.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.527, 2.633), stdev = 1.177
[info]   CI (99.9%): [≈ 0, 5.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 12.000), stdev = 3.240
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay
[info] # Run progress: 89.32% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80588.086 ops/s
[info] # Warmup Iteration   2: 230031.467 ops/s
[info] # Warmup Iteration   3: 229417.789 ops/s
[info] # Warmup Iteration   4: 231432.409 ops/s
[info] # Warmup Iteration   5: 228120.339 ops/s
[info] Iteration   1: 229917.665 ops/s
[info]                  ·gc.alloc.rate:            885.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       6064.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6908.366 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 232429.646 ops/s
[info]                  ·gc.alloc.rate:                   895.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4578.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 233696.733 ops/s
[info]                  ·gc.alloc.rate:                                  900.301 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6064.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.490 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6877.482 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 233366.500 ops/s
[info]                  ·gc.alloc.rate:                                  898.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6064.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6887.000 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 234362.530 ops/s
[info]                  ·gc.alloc.rate:            902.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       6064.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4571.882 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay":
[info]   232754.615 ±(99.9%) 6669.865 ops/s [Average]
[info]   (min, avg, max) = (229917.665, 232754.615, 234362.530), stdev = 1732.143
[info]   CI (99.9%): [226084.750, 239424.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate":
[info]   896.655 ±(99.9%) 25.872 MB/sec [Average]
[info]   (min, avg, max) = (885.665, 896.655, 902.931), stdev = 6.719
[info]   CI (99.9%): [870.783, 922.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm":
[info]   6064.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.002, 6064.002, 6064.002), stdev = 0.001
[info]   CI (99.9%): [6064.002, 6064.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.098 ±(99.9%) 0.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.490), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.569 ±(99.9%) 714.494 MB/sec [Average]
[info]   (min, avg, max) = (676.019, 881.569, 1021.075), stdev = 185.552
[info]   CI (99.9%): [167.074, 1596.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5964.619 ±(99.9%) 4884.472 B/op [Average]
[info]   (min, avg, max) = (4571.882, 5964.619, 6908.366), stdev = 1268.482
[info]   CI (99.9%): [1080.147, 10849.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.413 ±(99.9%) 46.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.413, 27.064), stdev = 12.103
[info]   CI (99.9%): [≈ 0, 52.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 5.683
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce
[info] # Run progress: 90.29% complete, ETA 00:02:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334303.447 ops/s
[info] # Warmup Iteration   2: 520203.016 ops/s
[info] # Warmup Iteration   3: 533254.294 ops/s
[info] # Warmup Iteration   4: 532752.397 ops/s
[info] # Warmup Iteration   5: 537988.825 ops/s
[info] Iteration   1: 534623.393 ops/s
[info]                  ·gc.alloc.rate:                   934.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2970.887 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 549924.170 ops/s
[info]                  ·gc.alloc.rate:                                  961.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2920.740 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.906 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 550172.242 ops/s
[info]                  ·gc.alloc.rate:            961.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2921.170 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 549449.661 ops/s
[info]                  ·gc.alloc.rate:            960.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2925.135 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 548680.386 ops/s
[info]                  ·gc.alloc.rate:                                  959.123 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1952.784 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce":
[info]   546569.970 ±(99.9%) 25808.953 ops/s [Average]
[info]   (min, avg, max) = (534623.393, 546569.970, 550172.242), stdev = 6702.503
[info]   CI (99.9%): [520761.017, 572378.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate":
[info]   955.540 ±(99.9%) 44.985 MB/sec [Average]
[info]   (min, avg, max) = (934.727, 955.540, 961.993), stdev = 11.682
[info]   CI (99.9%): [910.555, 1000.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm":
[info]   2752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2752.001, 2752.001, 2752.001), stdev = 0.001
[info]   CI (99.9%): [2752.001, 2752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.178), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   950.402 ±(99.9%) 581.139 MB/sec [Average]
[info]   (min, avg, max) = (680.581, 950.402, 1021.127), stdev = 150.920
[info]   CI (99.9%): [369.262, 1531.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2738.143 ±(99.9%) 1692.494 B/op [Average]
[info]   (min, avg, max) = (1952.784, 2738.143, 2970.887), stdev = 439.535
[info]   CI (99.9%): [1045.649, 4430.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.342 ±(99.9%) 16.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.342, 9.805), stdev = 4.253
[info]   CI (99.9%): [≈ 0, 18.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 17.000), stdev = 5.848
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson
[info] # Run progress: 91.26% complete, ETA 00:02:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 935509.923 ops/s
[info] # Warmup Iteration   2: 1394666.011 ops/s
[info] # Warmup Iteration   3: 1265237.055 ops/s
[info] # Warmup Iteration   4: 1264086.396 ops/s
[info] # Warmup Iteration   5: 1388475.196 ops/s
[info] Iteration   1: 1416044.108 ops/s
[info]                  ·gc.alloc.rate:            582.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 747.777 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1419420.806 ops/s
[info]                  ·gc.alloc.rate:            584.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 745.954 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 1426871.738 ops/s
[info]                  ·gc.alloc.rate:            587.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 371.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1413077.065 ops/s
[info]                  ·gc.alloc.rate:                   581.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        748.607 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 1429479.469 ops/s
[info]                  ·gc.alloc.rate:                   588.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        744.410 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson":
[info]   1420978.637 ±(99.9%) 26968.534 ops/s [Average]
[info]   (min, avg, max) = (1413077.065, 1420978.637, 1429479.469), stdev = 7003.643
[info]   CI (99.9%): [1394010.103, 1447947.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate":
[info]   584.951 ±(99.9%) 11.111 MB/sec [Average]
[info]   (min, avg, max) = (581.722, 584.951, 588.522), stdev = 2.886
[info]   CI (99.9%): [573.839, 596.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   605.937 ±(99.9%) 580.497 MB/sec [Average]
[info]   (min, avg, max) = (336.276, 605.937, 676.083), stdev = 150.753
[info]   CI (99.9%): [25.440, 1186.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   671.556 ±(99.9%) 646.933 B/op [Average]
[info]   (min, avg, max) = (371.031, 671.556, 748.607), stdev = 168.007
[info]   CI (99.9%): [24.622, 1318.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.028 ±(99.9%) 7.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.028, 4.400), stdev = 1.912
[info]   CI (99.9%): [≈ 0, 8.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.800, 12.000), stdev = 2.683
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter
[info] # Run progress: 92.23% complete, ETA 00:02:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3707949.781 ops/s
[info] # Warmup Iteration   2: 4143099.856 ops/s
[info] # Warmup Iteration   3: 4145421.017 ops/s
[info] # Warmup Iteration   4: 4169489.925 ops/s
[info] # Warmup Iteration   5: 4158588.387 ops/s
[info] Iteration   1: 4148266.576 ops/s
[info]                  ·gc.alloc.rate:            463.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 255.268 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4159633.717 ops/s
[info]                  ·gc.alloc.rate:            465.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 127.280 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4179384.719 ops/s
[info]                  ·gc.alloc.rate:            467.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 126.677 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 4173152.377 ops/s
[info]                  ·gc.alloc.rate:            466.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253.733 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 3912150.033 ops/s
[info]                  ·gc.alloc.rate:            437.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.331 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter":
[info]   4114517.484 ±(99.9%) 438081.068 ops/s [Average]
[info]   (min, avg, max) = (3912150.033, 4114517.484, 4179384.719), stdev = 113768.262
[info]   CI (99.9%): [3676436.416, 4552598.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate":
[info]   460.035 ±(99.9%) 48.924 MB/sec [Average]
[info]   (min, avg, max) = (437.441, 460.035, 467.274), stdev = 12.705
[info]   CI (99.9%): [411.111, 508.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.870 ±(99.9%) 709.328 MB/sec [Average]
[info]   (min, avg, max) = (336.322, 470.870, 672.740), stdev = 184.210
[info]   CI (99.9%): [≈ 0, 1180.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   179.658 ±(99.9%) 263.420 B/op [Average]
[info]   (min, avg, max) = (126.677, 179.658, 255.268), stdev = 68.409
[info]   CI (99.9%): [≈ 0, 443.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc
[info] # Run progress: 93.20% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3403527.728 ops/s
[info] # Warmup Iteration   2: 4301784.985 ops/s
[info] # Warmup Iteration   3: 4323763.917 ops/s
[info] # Warmup Iteration   4: 4310654.798 ops/s
[info] # Warmup Iteration   5: 4328405.808 ops/s
[info] Iteration   1: 4317121.000 ops/s
[info]                  ·gc.alloc.rate:            263.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 122.639 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4312580.152 ops/s
[info]                  ·gc.alloc.rate:            263.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 122.767 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4280687.920 ops/s
[info]                  ·gc.alloc.rate:            261.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4346831.862 ops/s
[info]                  ·gc.alloc.rate:      265.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4259453.621 ops/s
[info]                  ·gc.alloc.rate:            259.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 124.299 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc":
[info]   4303334.911 ±(99.9%) 130666.387 ops/s [Average]
[info]   (min, avg, max) = (4259453.621, 4303334.911, 4346831.862), stdev = 33933.646
[info]   CI (99.9%): [4172668.524, 4434001.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate":
[info]   262.456 ±(99.9%) 7.931 MB/sec [Average]
[info]   (min, avg, max) = (259.792, 262.456, 265.121), stdev = 2.060
[info]   CI (99.9%): [254.525, 270.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.080 ±(99.9%) 579.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.080, 336.380), stdev = 150.420
[info]   CI (99.9%): [≈ 0, 848.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   98.677 ±(99.9%) 212.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98.677, 124.299), stdev = 55.166
[info]   CI (99.9%): [≈ 0, 311.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay
[info] # Run progress: 94.17% complete, ETA 00:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84172.428 ops/s
[info] # Warmup Iteration   2: 173848.227 ops/s
[info] # Warmup Iteration   3: 175731.917 ops/s
[info] # Warmup Iteration   4: 174514.011 ops/s
[info] # Warmup Iteration   5: 174580.868 ops/s
[info] Iteration   1: 175946.564 ops/s
[info]                  ·gc.alloc.rate:            910.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       8144.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6018.046 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 175281.626 ops/s
[info]                  ·gc.alloc.rate:                                  906.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8144.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.320 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9127.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                35.886 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 177204.974 ops/s
[info]                  ·gc.alloc.rate:                                  916.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8144.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.311 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9069.488 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 177354.006 ops/s
[info]                  ·gc.alloc.rate:            917.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       8144.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6041.519 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 177329.067 ops/s
[info]                  ·gc.alloc.rate:            917.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       8144.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9063.658 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay":
[info]   176623.248 ±(99.9%) 3667.445 ops/s [Average]
[info]   (min, avg, max) = (175281.626, 176623.248, 177354.006), stdev = 952.424
[info]   CI (99.9%): [172955.803, 180290.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate":
[info]   913.722 ±(99.9%) 18.849 MB/sec [Average]
[info]   (min, avg, max) = (906.836, 913.722, 917.538), stdev = 4.895
[info]   CI (99.9%): [894.874, 932.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm":
[info]   8144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8144.002, 8144.002, 8144.002), stdev = 0.001
[info]   CI (99.9%): [8144.002, 8144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.036), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.126 ±(99.9%) 0.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.320), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   882.269 ±(99.9%) 722.921 MB/sec [Average]
[info]   (min, avg, max) = (672.624, 882.269, 1020.933), stdev = 187.740
[info]   CI (99.9%): [159.348, 1605.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   7863.952 ±(99.9%) 6448.150 B/op [Average]
[info]   (min, avg, max) = (6018.046, 7863.952, 9127.050), stdev = 1674.564
[info]   CI (99.9%): [1415.802, 14312.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.177 ±(99.9%) 61.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.177, 35.886), stdev = 16.049
[info]   CI (99.9%): [≈ 0, 68.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce
[info] # Run progress: 95.15% complete, ETA 00:01:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2917.754 ops/s
[info] # Warmup Iteration   2: 4938.560 ops/s
[info] # Warmup Iteration   3: 6218.798 ops/s
[info] # Warmup Iteration   4: 6228.836 ops/s
[info] # Warmup Iteration   5: 6223.429 ops/s
[info] Iteration   1: 6179.835 ops/s
[info]                  ·gc.alloc.rate:            824.350 MB/sec
[info]                  ·gc.alloc.rate.norm:       209992.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256970.663 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 6261.165 ops/s
[info]                  ·gc.alloc.rate:                   835.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              209992.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        169098.157 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 837.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 6302.664 ops/s
[info]                  ·gc.alloc.rate:                                  840.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             209992.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.518 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       254825.259 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                166.335 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 6399.209 ops/s
[info]                  ·gc.alloc.rate:                                  853.866 MB/sec
[info]                  ·gc.alloc.rate.norm:                             209992.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167418.321 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6383.097 ops/s
[info]                  ·gc.alloc.rate:            851.826 MB/sec
[info]                  ·gc.alloc.rate.norm:       209992.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251756.775 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce":
[info]   6305.194 ±(99.9%) 347.453 ops/s [Average]
[info]   (min, avg, max) = (6179.835, 6305.194, 6399.209), stdev = 90.232
[info]   CI (99.9%): [5957.741, 6652.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate":
[info]   841.261 ±(99.9%) 46.859 MB/sec [Average]
[info]   (min, avg, max) = (824.350, 841.261, 853.866), stdev = 12.169
[info]   CI (99.9%): [794.402, 888.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm":
[info]   209992.067 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (209992.064, 209992.067, 209992.070), stdev = 0.003
[info]   CI (99.9%): [209992.055, 209992.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.780 ±(99.9%) 10.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.780, 6.518), stdev = 2.842
[info]   CI (99.9%): [≈ 0, 12.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   880.783 ±(99.9%) 717.774 MB/sec [Average]
[info]   (min, avg, max) = (672.616, 880.783, 1021.243), stdev = 186.404
[info]   CI (99.9%): [163.010, 1598.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   220013.835 ±(99.9%) 182082.442 B/op [Average]
[info]   (min, avg, max) = (167418.321, 220013.835, 256970.663), stdev = 47286.232
[info]   CI (99.9%): [37931.393, 402096.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   200.691 ±(99.9%) 1397.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 200.691, 837.120), stdev = 362.992
[info]   CI (99.9%): [≈ 0, 1598.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 18.000), stdev = 6.427
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson
[info] # Run progress: 96.12% complete, ETA 00:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10986.958 ops/s
[info] # Warmup Iteration   2: 24583.516 ops/s
[info] # Warmup Iteration   3: 24702.063 ops/s
[info] # Warmup Iteration   4: 24925.080 ops/s
[info] # Warmup Iteration   5: 24875.047 ops/s
[info] Iteration   1: 24811.713 ops/s
[info]                  ·gc.alloc.rate:            326.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       20724.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21296.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 24671.094 ops/s
[info]                  ·gc.alloc.rate:            324.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       20724.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21417.723 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 24765.366 ops/s
[info]                  ·gc.alloc.rate:            326.065 MB/sec
[info]                  ·gc.alloc.rate.norm:       20724.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21335.579 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 24757.753 ops/s
[info]                  ·gc.alloc.rate:            325.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       20723.994 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21343.334 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 24566.918 ops/s
[info]                  ·gc.alloc.rate:            323.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       20724.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21507.501 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson":
[info]   24714.569 ±(99.9%) 373.200 ops/s [Average]
[info]   (min, avg, max) = (24566.918, 24714.569, 24811.713), stdev = 96.919
[info]   CI (99.9%): [24341.369, 25087.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate":
[info]   325.414 ±(99.9%) 4.897 MB/sec [Average]
[info]   (min, avg, max) = (323.452, 325.414, 326.695), stdev = 1.272
[info]   CI (99.9%): [320.517, 330.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   20724.059 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (20723.994, 20724.059, 20724.132), stdev = 0.057
[info]   CI (99.9%): [20723.839, 20724.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   335.710 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (335.678, 335.710, 335.779), stdev = 0.041
[info]   CI (99.9%): [335.554, 335.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   21380.034 ±(99.9%) 322.442 B/op [Average]
[info]   (min, avg, max) = (21296.031, 21380.034, 21507.501), stdev = 83.737
[info]   CI (99.9%): [21057.591, 21702.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter
[info] # Run progress: 97.09% complete, ETA 00:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24795.828 ops/s
[info] # Warmup Iteration   2: 36690.254 ops/s
[info] # Warmup Iteration   3: 36920.076 ops/s
[info] # Warmup Iteration   4: 37608.804 ops/s
[info] # Warmup Iteration   5: 37399.425 ops/s
[info] Iteration   1: 37173.263 ops/s
[info]                  ·gc.alloc.rate:            250.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14241.975 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 37029.362 ops/s
[info]                  ·gc.alloc.rate:            249.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14297.348 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 37582.387 ops/s
[info]                  ·gc.alloc.rate:      253.094 MB/sec
[info]                  ·gc.alloc.rate.norm: 10600.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37452.978 ops/s
[info]                  ·gc.alloc.rate:            252.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14136.279 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 37499.981 ops/s
[info]                  ·gc.alloc.rate:            252.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       10600.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14118.188 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter":
[info]   37347.594 ±(99.9%) 905.347 ops/s [Average]
[info]   (min, avg, max) = (37029.362, 37347.594, 37582.387), stdev = 235.116
[info]   CI (99.9%): [36442.247, 38252.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate":
[info]   251.509 ±(99.9%) 6.087 MB/sec [Average]
[info]   (min, avg, max) = (249.376, 251.509, 253.094), stdev = 1.581
[info]   CI (99.9%): [245.422, 257.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   10600.011 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (10600.011, 10600.011, 10600.013), stdev = 0.001
[info]   CI (99.9%): [10600.008, 10600.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.079 ±(99.9%) 579.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.079, 336.359), stdev = 150.420
[info]   CI (99.9%): [≈ 0, 848.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   11358.758 ±(99.9%) 24452.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11358.758, 14297.348), stdev = 6350.172
[info]   CI (99.9%): [≈ 0, 35811.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc
[info] # Run progress: 98.06% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28034.029 ops/s
[info] # Warmup Iteration   2: 39475.845 ops/s
[info] # Warmup Iteration   3: 39939.196 ops/s
[info] # Warmup Iteration   4: 40055.697 ops/s
[info] # Warmup Iteration   5: 40022.463 ops/s
[info] Iteration   1: 39935.699 ops/s
[info]                  ·gc.alloc.rate:      12.785 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 40034.928 ops/s
[info]                  ·gc.alloc.rate:      12.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 39954.798 ops/s
[info]                  ·gc.alloc.rate:      12.792 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 39842.293 ops/s
[info]                  ·gc.alloc.rate:      12.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 40008.808 ops/s
[info]                  ·gc.alloc.rate:      12.811 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc":
[info]   39955.305 ±(99.9%) 287.890 ops/s [Average]
[info]   (min, avg, max) = (39842.293, 39955.305, 40034.928), stdev = 74.764
[info]   CI (99.9%): [39667.415, 40243.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   12.793 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (12.757, 12.793, 12.818), stdev = 0.024
[info]   CI (99.9%): [12.699, 12.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   504.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.010, 504.010, 504.010), stdev = 0.001
[info]   CI (99.9%): [504.010, 504.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay
[info] # Run progress: 99.03% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1925.517 ops/s
[info] # Warmup Iteration   2: 4151.110 ops/s
[info] # Warmup Iteration   3: 4198.526 ops/s
[info] # Warmup Iteration   4: 4336.040 ops/s
[info] # Warmup Iteration   5: 4383.539 ops/s
[info] Iteration   1: 4344.792 ops/s
[info]                  ·gc.alloc.rate:            888.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       321821.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365529.830 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4375.278 ops/s
[info]                  ·gc.alloc.rate:                   894.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              321821.666 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242918.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1676.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4437.563 ops/s
[info]                  ·gc.alloc.rate:                                  907.327 MB/sec
[info]                  ·gc.alloc.rate.norm:                             321822.310 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       362123.678 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4439.116 ops/s
[info]                  ·gc.alloc.rate:                                  907.447 MB/sec
[info]                  ·gc.alloc.rate.norm:                             321820.932 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       362042.119 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4323.959 ops/s
[info]                  ·gc.alloc.rate:            884.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       321822.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247721.838 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay":
[info]   4384.142 ±(99.9%) 203.073 ops/s [Average]
[info]   (min, avg, max) = (4323.959, 4384.142, 4439.116), stdev = 52.737
[info]   CI (99.9%): [4181.069, 4587.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate":
[info]   896.418 ±(99.9%) 41.101 MB/sec [Average]
[info]   (min, avg, max) = (884.301, 896.418, 907.447), stdev = 10.674
[info]   CI (99.9%): [855.317, 937.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   321821.773 ±(99.9%) 2.477 B/op [Average]
[info]   (min, avg, max) = (321820.932, 321821.773, 321822.509), stdev = 0.643
[info]   CI (99.9%): [321819.296, 321824.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.610 ±(99.9%) 9.739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.610, 5.778), stdev = 2.529
[info]   CI (99.9%): [≈ 0, 11.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   881.362 ±(99.9%) 715.119 MB/sec [Average]
[info]   (min, avg, max) = (675.318, 881.362, 1020.950), stdev = 185.714
[info]   CI (99.9%): [166.243, 1596.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   316067.275 ±(99.9%) 248830.305 B/op [Average]
[info]   (min, avg, max) = (242918.909, 316067.275, 365529.830), stdev = 64620.440
[info]   CI (99.9%): [67236.970, 564897.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   335.391 ±(99.9%) 2887.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 335.391, 1676.955), stdev = 749.957
[info]   CI (99.9%): [≈ 0, 3223.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 18.000), stdev = 6.465
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # Run complete. Total time: 00:28:09
[info] Benchmark                                                                                              Mode  Cnt         Score         Error   Units
[info] JsonCodecMakerBenchmark.missingReqFieldCirce                                                          thrpt    5   1360672.735 ±  290634.510   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate                                           thrpt    5      2033.172 ±     434.514  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm                                      thrpt    5      2352.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.001 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.002 ±       0.006    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen                                     thrpt    5      2042.117 ±       0.616  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2368.247 ±     511.787    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count                                                thrpt    5        30.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time                                                 thrpt    5        54.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJackson                                                        thrpt    5    176966.159 ±    7357.892   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate                                         thrpt    5       315.716 ±      13.057  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm                                    thrpt    5      2808.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       269.103 ±     579.264  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      2401.279 ±    5169.767    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count                                              thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time                                               thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter                                                       thrpt    5    307703.939 ±   52865.069   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate                                        thrpt    5       203.350 ±      35.044  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm                                   thrpt    5      1040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       201.703 ±     709.017  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5      1026.252 ±    3607.949    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count                                             thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time                                              thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless                                              thrpt    5    662019.499 ±  132514.580   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate                               thrpt    5       232.176 ±      46.429  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm                          thrpt    5       552.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen                         thrpt    5       269.088 ±     579.233  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm                    thrpt    5       637.168 ±    1379.790    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count                                    thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time                                     thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump                                        thrpt    5   2582863.569 ±  829542.123   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate                         thrpt    5       288.844 ±      92.738  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm                    thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                   thrpt    5       269.122 ±     579.305  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm              thrpt    5       159.227 ±     344.307    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count                              thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time                               thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldPlay                                                           thrpt    5    106994.782 ±   14901.053   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate                                            thrpt    5       686.839 ±      95.757  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm                                       thrpt    5     10104.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.037 ±       0.322  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.536 ±       4.619    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       675.007 ±      13.774  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      9940.220 ±    1378.188    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        11.757 ±     101.235    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count                                                 thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time                                                  thrpt    5        48.000                    ms
[info] JsonCodecMakerBenchmark.readAdtCirce                                                                  thrpt    5    494309.572 ±    8254.030   ops/s
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate                                                   thrpt    5      1276.197 ±      21.085  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm                                              thrpt    5      4064.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.040 ±       0.331  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.126 ±       1.053    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1293.289 ±     585.825  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      4117.019 ±    1815.164    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.count                                                        thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.time                                                         thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJackson                                                                thrpt    5   1111443.107 ±  161368.637   ops/s
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate                                                 thrpt    5       790.855 ±     114.900  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm                                            thrpt    5      1120.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.014 ±       0.083  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.020 ±       0.116    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen                                           thrpt    5       745.451 ±     593.376  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1054.413 ±     776.620    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.135 ±       7.783    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.count                                                      thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.time                                                       thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJsoniter                                                               thrpt    5   2489687.863 ±   91947.816   ops/s
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate                                                thrpt    5       164.498 ±       6.037  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm                                           thrpt    5       104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen                                          thrpt    5       134.537 ±     709.373  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                     thrpt    5        85.064 ±     448.520    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count                                                     thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time                                                      thrpt    5        11.000                    ms
[info] JsonCodecMakerBenchmark.readAdtPlay                                                                   thrpt    5     96305.198 ±   19469.376   ops/s
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate                                                    thrpt    5       805.178 ±     162.708  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm                                               thrpt    5     13160.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.010 ±       0.085  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.164 ±       1.336    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen                                              thrpt    5       813.520 ±     714.585  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     13353.308 ±   12632.914    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        12.612 ±     108.597    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.count                                                         thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.time                                                          thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsCirce                                                              thrpt    5   1060387.381 ±   31869.062   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate                                               thrpt    5      1665.278 ±      50.045  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm                                          thrpt    5      2472.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.003 ±       0.009    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1633.657 ±     586.362  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2425.418 ±     884.459    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count                                                    thrpt    5        24.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time                                                     thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJackson                                                            thrpt    5   1616905.384 ±  158091.717   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate                                             thrpt    5      1134.112 ±     110.753  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm                                        thrpt    5      1104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.038 ±       0.320  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.036 ±       0.308    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1157.134 ±     717.094  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1126.554 ±     691.398    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.128 ±       1.106    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count                                                  thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time                                                   thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter                                                           thrpt    5   6556140.057 ±  314350.569   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate                                            thrpt    5       833.243 ±      38.791  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       200.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.025 ±       0.214  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.006 ±       0.051    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       813.165 ±     706.572  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       195.416 ±     174.684    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.192 ±       1.650    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count                                                 thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time                                                  thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsPlay                                                               thrpt    5    333027.923 ±    6795.175   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate                                                thrpt    5       856.440 ±      17.584  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm                                           thrpt    5      4048.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.017 ±       0.139  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.078 ±       0.655    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       881.579 ±     714.528  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4167.993 ±    3400.587    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         3.778 ±      32.533    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count                                                     thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time                                                      thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readArraysCirce                                                               thrpt    5    548981.374 ±   17444.744   ops/s
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate                                                thrpt    5      1777.334 ±      56.624  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm                                           thrpt    5      5096.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.001 ±       0.007  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.004 ±       0.020    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1769.784 ±     585.359  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5075.623 ±    1746.582    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.count                                                     thrpt    5        26.000                counts
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.time                                                      thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJackson                                                             thrpt    5   1019148.874 ±   40845.958   ops/s
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate                                              thrpt    5       958.296 ±      38.665  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm                                         thrpt    5      1480.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.017 ±       0.144  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.026 ±       0.222    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen                                        thrpt    5      1018.541 ±      20.667  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1573.115 ±      32.945    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.253 ±       8.750    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.count                                                   thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.time                                                    thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJsoniter                                                            thrpt    5   2636211.244 ±   61790.817   ops/s
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate                                             thrpt    5      1098.689 ±      25.021  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm                                        thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.026 ±       0.220  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.016 ±       0.131    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5      1156.313 ±     713.192  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       690.738 ±     436.065    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.476 ±       4.097    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count                                                  thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time                                                   thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readArraysPlay                                                                thrpt    5    174834.919 ±    3851.593   ops/s
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate                                                 thrpt    5      1079.802 ±      23.879  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm                                            thrpt    5      9720.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±       0.070  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.111 ±       0.628    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1020.271 ±       8.203  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      9184.331 ±     192.710    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         7.220 ±      62.165    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.count                                                      thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.time                                                       thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJackson                                                            thrpt    5   1333159.430 ±  128359.467   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate                                             thrpt    5       846.935 ±      81.578  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm                                        thrpt    5      1000.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.019 ±       0.159  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.023 ±       0.186    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5       813.338 ±     715.022  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       959.232 ±     812.611    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         1.111 ±       7.916    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count                                                  thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time                                                   thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter                                                           thrpt    5   3643902.046 ±   66870.881   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate                                            thrpt    5       481.538 ±       8.783  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       208.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       470.922 ±     709.450  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       203.691 ±     310.284    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count                                                 thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time                                                  thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsPlay                                                               thrpt    5    211791.768 ±    9963.934   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate                                                thrpt    5       976.287 ±      45.980  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm                                           thrpt    5      7256.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.009 ±       0.081  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.070 ±       0.596    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1018.492 ±      20.568  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      7570.205 ±     207.469    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         6.046 ±      42.252    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count                                                     thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time                                                      thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce                                                        thrpt    5    502060.149 ±    6459.823   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate                                         thrpt    5      1640.630 ±      20.962  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm                                    thrpt    5      5144.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.001 ±       0.008  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.004 ±       0.025    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1633.599 ±     586.123  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5      5121.960 ±    1837.179    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count                                              thrpt    5        24.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time                                               thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson                                                      thrpt    5    495052.139 ±    6746.667   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate                                       thrpt    5       613.993 ±       8.365  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm                                  thrpt    5      1952.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       606.974 ±     582.465  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5      1930.223 ±    1858.393    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       5.561  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.549 ±      17.758    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count                                            thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time                                             thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter                                                     thrpt    5   4513579.361 ±  182728.375   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate                                      thrpt    5       206.454 ±       8.468  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       269.073 ±     579.200  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5        94.128 ±     202.653    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count                                           thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time                                            thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay                                                         thrpt    5    161241.972 ±    4485.088   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate                                          thrpt    5       831.018 ±      23.269  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm                                     thrpt    5      8112.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.038 ±       0.323  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.368 ±       3.140    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen                                    thrpt    5       880.844 ±     717.837  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5      8600.528 ±    7047.967    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         7.820 ±      54.480    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count                                               thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time                                                thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce                                                        thrpt    5      4419.814 ±     836.143   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate                                         thrpt    5      1063.814 ±     201.216  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm                                    thrpt    5    378808.097 ±       0.029    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.057 ±       0.208  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        20.922 ±      78.830    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1088.100 ±     588.256  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5    387658.108 ±  198912.252    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                            thrpt    5         0.933 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       362.829 ±    3124.068    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count                                              thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time                                               thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson                                                      thrpt    5      9304.745 ±      80.138   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate                                       thrpt    5       323.961 ±       2.839  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm                                  thrpt    5     54800.046 ±       0.012    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       335.692 ±       0.202  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5     56784.761 ±     488.022    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space                          thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space.norm                     thrpt    5        22.599 ±     194.581    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count                                            thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time                                             thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter                                                     thrpt    5     14333.847 ±    2914.728   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate                                      thrpt    5       244.970 ±      49.814  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                 thrpt    5     26896.031 ±       0.018    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       269.123 ±     579.307  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5     29252.350 ±   63292.835    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count                                           thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time                                            thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay                                                         thrpt    5      1725.318 ±      48.224   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate                                          thrpt    5      1077.528 ±      29.959  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm                                     thrpt    5    982976.251 ±       0.066    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.032 ±       0.122  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5        29.644 ±     111.813    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                    thrpt    5      1086.966 ±     569.403  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5    992386.170 ±  551238.935    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.932 ±       8.025  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       861.001 ±    7413.477    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count                                               thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time                                                thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter                                                    thrpt    5   3287665.806 ±   41604.474   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate                                     thrpt    5       985.859 ±      12.341  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm                                thrpt    5       472.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.032 ±       0.273  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.015 ±       0.131    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5       952.039 ±     594.041  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5       455.656 ±     280.798    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space                        thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         0.384 ±       3.311    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count                                          thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time                                           thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay                                                        thrpt    5    184997.274 ±    6112.290   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate                                         thrpt    5      1005.091 ±      33.448  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm                                    thrpt    5      8552.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.017 ±       0.150  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.147 ±       1.264    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1019.280 ±      14.990  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5      8673.037 ±     173.010    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         6.901 ±      59.417    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count                                              thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time                                               thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesCirce                                                            thrpt    5    455860.690 ±    5195.513   ops/s
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate                                             thrpt    5      1647.515 ±      18.633  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm                                        thrpt    5      5688.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.001 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.005 ±       0.012    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen                                       thrpt    5      1633.651 ±     585.716  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5640.121 ±    2020.974    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.count                                                  thrpt    5        24.000                counts
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.time                                                   thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJackson                                                          thrpt    5    470796.844 ±   10737.498   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate                                           thrpt    5       547.956 ±      12.479  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm                                      thrpt    5      1832.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen                                     thrpt    5       537.114 ±     708.018  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1798.593 ±    2401.539    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space                              thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.235 ±      19.245    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.count                                                thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.time                                                 thrpt    5        51.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJsoniter                                                         thrpt    5   2872214.760 ±   42617.351   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate                                          thrpt    5      1138.564 ±      17.042  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm                                     thrpt    5       624.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.030 ±       0.260  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.017 ±       0.143    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen                                    thrpt    5      1089.041 ±     585.804  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                               thrpt    5       596.979 ±     325.772    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count                                               thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time                                                thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesPlay                                                             thrpt    5    130400.159 ±    3258.431   ops/s
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate                                              thrpt    5       909.989 ±      22.817  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm                                         thrpt    5     10984.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.012 ±       0.058  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.141 ±       0.700    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen                                        thrpt    5       949.704 ±     579.330  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     11471.829 ±    7186.669    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         9.699 ±      83.508    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.count                                                   thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.time                                                    thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readMapsCirce                                                                 thrpt    5    407554.379 ±    9705.369   ops/s
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate                                                  thrpt    5      1416.722 ±      33.706  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm                                             thrpt    5      5472.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.001 ±       0.007  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.003 ±       0.028    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1429.375 ±     586.290  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5523.467 ±    2390.902    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.count                                                       thrpt    5        21.000                counts
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.time                                                        thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJackson                                                               thrpt    5    723670.421 ±   35558.722   ops/s
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate                                                thrpt    5       853.420 ±      41.840  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm                                           thrpt    5      1856.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.024 ±       0.207  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.052 ±       0.445    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       813.102 ±     714.510  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1767.336 ±    1528.596    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.933 ±       8.030  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         2.046 ±      17.614    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.count                                                     thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.time                                                      thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJsoniter                                                              thrpt    5   3018924.685 ±  508063.705   ops/s
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate                                               thrpt    5       751.890 ±     126.437  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm                                          thrpt    5       392.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.009 ±       0.076  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.005 ±       0.039    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       744.720 ±     569.712  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       388.374 ±     288.200    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       5.562  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.410 ±       2.859    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count                                                    thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time                                                     thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.readMapsPlay                                                                  thrpt    5    193503.522 ±    4519.561   ops/s
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate                                                   thrpt    5      1076.848 ±      25.003  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm                                              thrpt    5      8760.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.013 ±       0.073  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.105 ±       0.586    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen                                             thrpt    5      1088.144 ±     588.679  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      8853.729 ±    4856.892    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.504 ±      55.998    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.count                                                        thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.time                                                         thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce                                                     thrpt    5    482611.559 ±   11263.891   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate                                      thrpt    5      1844.398 ±      42.940  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm                                 thrpt    5      6016.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.005 ±       0.018    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen                                thrpt    5      1837.772 ±     717.765  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                           thrpt    5      5996.221 ±    2426.194    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count                                           thrpt    5        27.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time                                            thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter                                                  thrpt    5   2112628.703 ±   40489.612   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate                                   thrpt    5      1363.762 ±      26.222  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm                              thrpt    5      1016.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.001 ±       0.002  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         0.001 ±       0.002    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                             thrpt    5      1361.557 ±       0.544  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                        thrpt    5      1014.378 ±      19.478    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count                                        thrpt    5        20.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time                                         thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay                                                      thrpt    5    136111.571 ±    4492.806   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate                                       thrpt    5       980.975 ±      32.728  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm                                  thrpt    5     11344.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.044 ±       0.373  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.506 ±       4.323    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen                                 thrpt    5       950.490 ±     580.964  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                            thrpt    5     10996.150 ±    6820.500    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         9.357 ±      65.248    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count                                            thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time                                             thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJackson                                                        thrpt    5    567338.457 ±  146345.863   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate                                         thrpt    5       735.286 ±     189.667  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm                                    thrpt    5      2040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.053 ±       0.453  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.138 ±       1.179    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       743.047 ±     577.254  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      2065.466 ±    1582.395    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.932 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         2.557 ±      22.013    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count                                              thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time                                               thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter                                                       thrpt    5   1527570.085 ±   46629.515   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate                                        thrpt    5       722.023 ±      22.040  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm                                   thrpt    5       744.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.027 ±       0.214  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.028 ±       0.219    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       744.619 ±     569.153  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       767.606 ±     595.777    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         0.831 ±       5.799    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count                                             thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time                                              thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsPlay                                                           thrpt    5    164598.020 ±    5797.754   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate                                            thrpt    5       916.850 ±      32.342  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm                                       thrpt    5      8768.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.011 ±       0.062  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.105 ±       0.591    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       882.361 ±     710.484  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8436.400 ±    6749.938    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.726 ±      53.772    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count                                                 thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time                                                  thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesCirce                                                           thrpt    5    390676.823 ±   78781.975   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate                                            thrpt    5      1209.298 ±     243.671  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm                                       thrpt    5      4872.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.027 ±       0.221  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.105 ±       0.851    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1225.349 ±     717.687  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      4916.779 ±    1995.456    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count                                                 thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time                                                  thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJackson                                                         thrpt    5    824403.917 ±  163625.668   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate                                          thrpt    5       624.317 ±     124.113  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm                                     thrpt    5      1192.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       606.909 ±     582.325  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1165.490 ±    1193.731    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       5.562  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.480 ±      10.296    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count                                               thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time                                                thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter                                                        thrpt    5   3665913.479 ±  268157.666   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate                                         thrpt    5       111.785 ±       8.145  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm                                    thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       134.275 ±     707.997  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5        57.955 ±     305.629    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.266 ±       2.294  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.114 ±       0.978    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count                                              thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time                                               thrpt    5        11.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesPlay                                                            thrpt    5    137104.366 ±    4525.079   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate                                             thrpt    5       965.789 ±      31.773  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm                                        thrpt    5     11088.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.015 ±       0.118  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.167 ±       1.354    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       951.240 ±     599.520  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     10909.399 ±    6603.316    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         9.289 ±      64.829    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count                                                  thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time                                                   thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPICirce                                                           thrpt    5      7470.282 ±     948.178   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate                                            thrpt    5      1099.465 ±     139.781  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm                                       thrpt    5    231658.410 ±      20.270    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.032 ±       0.127  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         6.635 ±      26.157    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1086.596 ±     591.932  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    228908.765 ±  118316.168    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.559  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       176.373 ±    1244.802    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count                                                 thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time                                                  thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson                                                         thrpt    5     10828.587 ±     284.737   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate                                          thrpt    5       153.007 ±       3.952  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm                                     thrpt    5     22235.756 ±      26.785    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       134.297 ±     708.112  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5     19569.137 ±  103183.505    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count                                               thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time                                                thrpt    5        13.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter                                                        thrpt    5     19939.537 ±     704.974   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate                                         thrpt    5       179.384 ±       6.203  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm                                    thrpt    5     14160.023 ±       0.010    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       201.840 ±     709.496  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5     16001.368 ±   56251.648    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count                                              thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time                                               thrpt    5        18.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay                                                            thrpt    5      2965.839 ±     578.630   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate                                             thrpt    5       870.660 ±     169.573  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm                                        thrpt    5    462024.144 ±       0.043    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.015 ±       0.068  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         7.595 ±      33.834    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       813.360 ±     699.647  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    428782.659 ±  286286.435    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       467.213 ±    3342.856    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count                                                  thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time                                                   thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtCirce                                                                 thrpt    5    329852.144 ±    8200.615   ops/s
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate                                                  thrpt    5      1087.980 ±      27.226  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm                                             thrpt    5      5192.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.013 ±       0.079  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.064 ±       0.377    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1088.145 ±     588.442  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5193.518 ±    2833.760    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.832 ±      32.994    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.count                                                       thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.time                                                        thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJackson                                                               thrpt    5   1250945.287 ±  119367.437   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate                                                thrpt    5       521.326 ±      49.816  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm                                           thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       538.139 ±     709.263  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       680.043 ±     926.911    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.count                                                     thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.time                                                      thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJsoniter                                                              thrpt    5  10765964.419 ± 2176699.396   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate                                               thrpt    5       547.182 ±     110.522  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm                                          thrpt    5        80.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       538.858 ±     711.871  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5        79.246 ±     108.838    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.114 ±       0.979    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count                                                    thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time                                                     thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtPlay                                                                  thrpt    5    201981.565 ±   26023.109   ops/s
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate                                                   thrpt    5       653.879 ±      84.333  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm                                              thrpt    5      5096.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.012 ±       0.100  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.089 ±       0.765    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen                                             thrpt    5       607.669 ±     584.238  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      4707.359 ±    4134.989    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.115 ±      52.652    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.count                                                        thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.time                                                         thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce                                                             thrpt    5   1285894.790 ±   27318.519   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate                                              thrpt    5      1293.887 ±      27.635  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm                                         thrpt    5      1584.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.005 ±       0.033  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.006 ±       0.041    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen                                        thrpt    5      1293.218 ±     585.987  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1582.418 ±     689.814    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count                                                   thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time                                                    thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson                                                           thrpt    5   3064693.104 ±  618978.494   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate                                            thrpt    5       841.187 ±     170.122  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm                                       thrpt    5       432.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.014 ±       0.118  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.007 ±       0.064    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5       813.577 ±     708.367  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       417.213 ±     336.133    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.435 ±       3.744    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count                                                 thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time                                                  thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter                                                          thrpt    5  15800573.422 ± 1771368.914   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate                                           thrpt    5       481.877 ±      54.315  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm                                      thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       470.954 ±     709.588  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5        47.004 ±      71.831    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count                                                thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time                                                 thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc                                                  thrpt    5  18146991.345 ± 2697917.333   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                  B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count                                        thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay                                                              thrpt    5    824834.042 ±   18877.027   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate                                               thrpt    5      1203.218 ±      27.998  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm                                          thrpt    5      2296.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.038 ±       0.322  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.073 ±       0.616    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1225.152 ±     717.450  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2338.291 ±    1381.220    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count                                                    thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time                                                     thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysCirce                                                              thrpt    5    683397.723 ±   11073.799   ops/s
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate                                               thrpt    5      1559.543 ±      25.217  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm                                          thrpt    5      3592.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.001 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.003 ±       0.010    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1497.570 ±     717.939  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3449.732 ±    1671.324    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.count                                                    thrpt    5        22.000                counts
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.time                                                     thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJackson                                                            thrpt    5   2528676.908 ±  556724.692   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate                                             thrpt    5      1246.526 ±     274.794  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm                                        thrpt    5       776.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.039 ±       0.321  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.026 ±       0.213    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1293.221 ±     586.457  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       804.498 ±     311.043    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.count                                                  thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.time                                                   thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJsoniter                                                           thrpt    5   4726909.736 ±   71769.360   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate                                            thrpt    5      1249.214 ±      18.881  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm                                       thrpt    5       416.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.006 ±       0.040  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.002 ±       0.013    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.284 ±     585.839  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       430.629 ±     193.396    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count                                                 thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time                                                  thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysPlay                                                               thrpt    5    292552.374 ±   13814.148   ops/s
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate                                                thrpt    5      1025.833 ±      48.587  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm                                           thrpt    5      5520.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.017 ±       0.144  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.090 ±       0.774    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1019.180 ±      14.936  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5484.679 ±     189.317    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         4.390 ±      37.797    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.count                                                     thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.time                                                      thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJackson                                                           thrpt    5   1789459.735 ±  386306.644   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate                                            thrpt    5       945.749 ±     204.162  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm                                       thrpt    5       832.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.011 ±       0.097  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.010 ±       0.085    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5       950.218 ±     580.649  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       839.966 ±     586.617    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±       6.687  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.896 ±       6.528    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time                                                  thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter                                                          thrpt    5   4399905.282 ±  787428.818   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate                                           thrpt    5       805.060 ±     144.134  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm                                      thrpt    5       288.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.030 ±       0.255  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.010 ±       0.088    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       813.529 ±     714.682  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5       290.774 ±     242.152    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.279 ±       2.399    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count                                                thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time                                                 thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsPlay                                                              thrpt    5    379355.352 ±   11703.307   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate                                               thrpt    5      1099.047 ±      34.211  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm                                          thrpt    5      4560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.013 ±       0.067  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.054 ±       0.280    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1088.214 ±     587.514  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      4515.769 ±    2461.171    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         3.349 ±      28.840    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count                                                    thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time                                                     thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce                                                       thrpt    5      4497.719 ±     391.295   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate                                        thrpt    5      1038.548 ±      89.748  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm                                   thrpt    5    363408.092 ±       0.013    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.071 ±       0.131  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5        24.992 ±      46.233    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                  thrpt    5      1020.099 ±       8.162  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                             thrpt    5    357102.969 ±   32408.028    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                      thrpt    5       278.075 ±    2394.313    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count                                             thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time                                              thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson                                                     thrpt    5     20871.184 ±     355.262   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate                                      thrpt    5       340.609 ±       5.706  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm                                 thrpt    5     25687.861 ±       0.554    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                thrpt    5       335.952 ±       1.402  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                           thrpt    5     25336.930 ±     356.432    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space                         thrpt    5         0.400 ±       1.405  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space.norm                    thrpt    5        30.213 ±     106.203    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count                                           thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time                                            thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter                                                    thrpt    5     33416.144 ±    7851.294   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate                                     thrpt    5       256.104 ±      60.128  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                thrpt    5     12064.013 ±       0.004    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5       269.067 ±     579.187  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5     12512.128 ±   27112.944    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count                                          thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time                                           thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc                                            thrpt    5     37907.172 ±    8434.970   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate                             thrpt    5         5.587 ±       1.245  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm                        thrpt    5       232.011 ±       0.004    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count                                  thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay                                                        thrpt    5      3741.126 ±     292.182   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate                                         thrpt    5      1130.430 ±      88.403  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm                                    thrpt    5    475591.595 ±       2.976    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.038 ±       0.151  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        16.181 ±      64.483    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1156.132 ±     712.757  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5    486601.681 ±  303360.757    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       341.927 ±    2944.094    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count                                              thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time                                               thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson                                                    thrpt    5    465164.098 ±    7659.691   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate                                     thrpt    5      1042.575 ±      16.969  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm                                thrpt    5      3528.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.054 ±       0.462  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.182 ±       1.563    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen                               thrpt    5      1018.913 ±      18.272  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3447.929 ±      19.578    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space                        thrpt    5         0.932 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         3.178 ±      27.367    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count                                          thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time                                           thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter                                                   thrpt    5   2208061.902 ±  512358.299   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate                                    thrpt    5       460.082 ±     106.697  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm                               thrpt    5       328.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                              thrpt    5       403.582 ±     579.065  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                         thrpt    5       291.882 ±     480.291    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count                                         thrpt    5         6.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time                                          thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay                                                       thrpt    5    220846.365 ±    9589.776   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate                                        thrpt    5       859.758 ±      37.413  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm                                   thrpt    5      6128.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.016 ±       0.134  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.114 ±       0.946    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                  thrpt    5       813.495 ±     714.496  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                             thrpt    5      5802.533 ±    5184.382    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         5.798 ±      49.920    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count                                             thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time                                              thrpt    5        36.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesCirce                                                           thrpt    5    523696.325 ±   11520.403   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate                                            thrpt    5      1266.996 ±      27.740  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm                                       thrpt    5      3808.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.034 ±       0.280  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.101 ±       0.844    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.389 ±     586.165  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3888.440 ±    1798.388    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count                                                 thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time                                                  thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJackson                                                         thrpt    5    944345.726 ±   31157.036   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate                                          thrpt    5       638.502 ±      21.036  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm                                     thrpt    5      1064.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       606.133 ±     582.141  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1010.605 ±     976.608    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.933 ±       6.690  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.546 ±      11.098    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count                                               thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time                                                thrpt    5        48.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter                                                        thrpt    5   4223820.693 ± 1016142.242   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate                                         thrpt    5       751.335 ±     180.769  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm                                    thrpt    5       280.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.025 ±       0.199  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.010 ±       0.078    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       745.418 ±     593.546  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5       277.134 ±     184.045    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.319 ±       2.231    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count                                              thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time                                               thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesPlay                                                            thrpt    5    302857.253 ±    7109.370   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate                                             thrpt    5      1029.814 ±      24.134  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm                                        thrpt    5      5352.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.017 ±       0.146  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.090 ±       0.760    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5      1019.375 ±      14.817  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5297.830 ±      77.409    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         4.191 ±      36.082    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count                                                  thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time                                                   thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsCirce                                                                thrpt    5    311999.690 ±   11699.814   ops/s
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate                                                 thrpt    5       867.460 ±      32.023  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm                                            thrpt    5      4376.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.016 ±       0.137  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.080 ±       0.688    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       881.429 ±     713.984  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      4444.556 ±    3557.660    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.053 ±      34.897    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.count                                                      thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.time                                                       thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJackson                                                              thrpt    5    569079.464 ±   19621.110   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate                                               thrpt    5       893.674 ±      30.681  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm                                          thrpt    5      2472.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.057 ±       0.489  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.156 ±       1.337    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen                                         thrpt    5       881.116 ±     721.236  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2438.841 ±    2026.250    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space                                  thrpt    5         1.066 ±       7.821  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         2.979 ±      21.892    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.count                                                    thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.time                                                     thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJsoniter                                                             thrpt    5   2298816.371 ±   82515.084   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate                                              thrpt    5       619.264 ±      22.125  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm                                         thrpt    5       424.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.019 ±       0.164  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.013 ±       0.111    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen                                        thrpt    5       607.760 ±     584.438  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       416.238 ±     401.449    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.548 ±       4.720    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count                                                   thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time                                                    thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsPlay                                                                 thrpt    5    233818.253 ±    6535.797   ops/s
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate                                                  thrpt    5       845.032 ±      23.952  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm                                             thrpt    5      5688.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.041 ±       0.348  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.273 ±       2.335    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen                                            thrpt    5       813.318 ±     713.350  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5478.190 ±    4882.381    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         5.442 ±      46.855    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.count                                                       thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.time                                                        thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce                                                    thrpt    5    488249.088 ±    7831.169   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate                                     thrpt    5      1134.024 ±      18.168  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm                                thrpt    5      3656.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.026 ±       0.214  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.084 ±       0.694    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen                               thrpt    5      1157.012 ±     717.056  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3730.956 ±    2337.531    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Survivor_Space                        thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         0.432 ±       3.718    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count                                          thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time                                           thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson                                                  thrpt    5    984762.269 ±  184435.412   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate                                   thrpt    5       565.551 ±     105.973  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm                              thrpt    5       904.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen                             thrpt    5       604.897 ±     579.507  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm                        thrpt    5       968.045 ±     941.774    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space                      thrpt    5         0.933 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm                 thrpt    5         1.440 ±      12.395    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count                                        thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time                                         thrpt    5        54.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter                                                 thrpt    5   3688802.670 ±   99859.639   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate                                  thrpt    5       506.199 ±      13.581  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm                             thrpt    5       216.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                            thrpt    5       538.154 ±     709.441  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                       thrpt    5       229.818 ±     304.947    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space                     thrpt    5         0.666 ±       5.736  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                thrpt    5         0.286 ±       2.459    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count                                       thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time                                        thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay                                                     thrpt    5    297169.881 ±   11407.151   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate                                      thrpt    5      1004.352 ±      38.749  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm                                 thrpt    5      5320.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.014 ±       0.124  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.076 ±       0.655    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen                                thrpt    5      1018.481 ±      20.623  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                           thrpt    5      5395.048 ±     100.519    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space                         thrpt    5         0.799 ±       5.559  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                    thrpt    5         4.295 ±      29.992    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count                                           thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time                                            thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce                                                         thrpt    5    296329.402 ±   14087.711   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate                                          thrpt    5       798.217 ±      37.971  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm                                     thrpt    5      4240.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.009 ±       0.075  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.046 ±       0.393    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen                                    thrpt    5       812.707 ±     711.578  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm                               thrpt    5      4323.688 ±    3925.251    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         4.292 ±      29.991    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count                                               thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time                                                thrpt    5        43.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson                                                       thrpt    5    557952.506 ±   17042.167   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate                                        thrpt    5       915.907 ±      28.231  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm                                   thrpt    5      2584.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.051 ±       0.443  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.145 ±       1.248    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen                                  thrpt    5       881.006 ±     714.076  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2485.662 ±    2015.753    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space                           thrpt    5         0.932 ±       8.027  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         2.645 ±      22.773    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count                                             thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time                                              thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter                                                      thrpt    5   1990442.800 ±   34367.358   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate                                       thrpt    5       515.888 ±       9.007  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm                                  thrpt    5       408.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                 thrpt    5       538.132 ±     709.303  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                            thrpt    5       426.016 ±     566.133    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                          thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         0.527 ±       4.534    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time                                             thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay                                                          thrpt    5    232754.615 ±    6669.865   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate                                           thrpt    5       896.655 ±      25.872  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm                                      thrpt    5      6064.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.015 ±       0.125  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.098 ±       0.843    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen                                     thrpt    5       881.569 ±     714.494  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                thrpt    5      5964.619 ±    4884.472    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         5.413 ±      46.606    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time                                                 thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesCirce                                                          thrpt    5    546569.970 ±   25808.953   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate                                           thrpt    5       955.540 ±      44.985  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm                                      thrpt    5      2752.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.013 ±       0.107  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.036 ±       0.305    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen                                     thrpt    5       950.402 ±     581.139  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2738.143 ±    1692.494    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.342 ±      16.375    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count                                                thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time                                                 thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJackson                                                        thrpt    5   1420978.637 ±   26968.534   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate                                         thrpt    5       584.951 ±      11.111  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm                                    thrpt    5       648.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       605.937 ±     580.497  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5       671.556 ±     646.933    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.933 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         1.028 ±       7.363    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count                                              thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time                                               thrpt    5        49.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter                                                       thrpt    5   4114517.484 ±  438081.068   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate                                        thrpt    5       460.035 ±      48.924  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       470.870 ±     709.328  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       179.658 ±     263.420    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count                                             thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time                                              thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc                                               thrpt    5   4303334.911 ±  130666.387   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate                                thrpt    5       262.456 ±       7.931  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm                           thrpt    5        96.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen                          thrpt    5       269.080 ±     579.216  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm                     thrpt    5        98.677 ±     212.425    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count                                     thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time                                      thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesPlay                                                           thrpt    5    176623.248 ±    3667.445   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate                                            thrpt    5       913.722 ±      18.849  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm                                       thrpt    5      8144.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.014 ±       0.075  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.126 ±       0.666    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       882.269 ±     722.921  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      7863.952 ±    6448.150    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.177 ±      61.798    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count                                                 thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time                                                  thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce                                                          thrpt    5      6305.194 ±     347.453   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate                                           thrpt    5       841.261 ±      46.859  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm                                      thrpt    5    209992.067 ±       0.012    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.007 ±       0.044  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         1.780 ±      10.945    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen                                     thrpt    5       880.783 ±     717.774  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5    220013.835 ±  182082.442    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       5.559  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5       200.691 ±    1397.752    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time                                                 thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson                                                        thrpt    5     24714.569 ±     373.200   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate                                         thrpt    5       325.414 ±       4.897  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm                                    thrpt    5     20724.059 ±       0.220    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       335.710 ±       0.156  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5     21380.034 ±     322.442    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count                                              thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time                                               thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter                                                       thrpt    5     37347.594 ±     905.347   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate                                        thrpt    5       251.509 ±       6.087  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm                                   thrpt    5     10600.011 ±       0.003    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       269.079 ±     579.214  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5     11358.758 ±   24452.249    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count                                             thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time                                              thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc                                               thrpt    5     39955.305 ±     287.890   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate                                thrpt    5        12.793 ±       0.094  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm                           thrpt    5       504.010 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count                                     thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay                                                           thrpt    5      4384.142 ±     203.073   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate                                            thrpt    5       896.418 ±      41.101  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm                                       thrpt    5    321821.773 ±       2.477    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.005 ±       0.027  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         1.610 ±       9.739    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       881.362 ±     715.119  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    316067.275 ±  248830.305    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       335.391 ±    2887.818    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count                                                 thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time                                                  thrpt    5        37.000                    ms
[success] Total time: 1749 s, completed Nov 29, 2017, 1:05:02 AM
