[info] Loading settings from build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Dec 4, 2017, 3:25:29 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonWriter.scala:197:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] one warning found
[info] Done compiling.
[info] Compiling 6 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:32:62: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -854843732 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1882203379 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -739937554 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1690673754 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -553105946 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 14144516 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case -11755678 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:27:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:28:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:29:18: local val v3 in value format is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:63:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:65:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1868115770 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 135249149 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:67:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Array[Int]];
[info]             do 
[info]               x.+=(d2(in, v2))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[scala.math.BigInt];
[info]             do 
[info]               x.+=(in.readBigInt(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1396692260 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             e2(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma(i.!=(0));
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeKey(c, "aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 c = out.writeKey(c, "a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:69:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -311899171 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 395882128 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:71:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:73:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:75:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:77:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:79:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         var c = false;
[info]         x.foreach(((kv) => {
[info]           c = out.writeKey(c, kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:81:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = 0.toByte;
[info]           var _s: Short = 0.toShort;
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = 0.toChar;
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -986815646 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1128364876 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 977778859 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2108804597 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:83:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:85:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.A): com.github.plokhotnyuk.jsoniter_scala.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.B): com.github.plokhotnyuk.jsoniter_scala.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.C): com.github.plokhotnyuk.jsoniter_scala.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1283270383 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readValueAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 1042714897 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 1249097774 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case -251352298 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.A, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "type");
[info]             out.writeVal("A")
[info]           };
[info]           {
[info]             c = out.writeKey(c, "a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.B, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "type");
[info]             out.writeVal("B")
[info]           };
[info]           {
[info]             c = out.writeKey(c, "b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.C, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "type");
[info]             out.writeVal("C")
[info]           };
[info]           {
[info]             c = out.writeKey(c, "l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:87:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:284:54: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1125392404 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -758822041 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1567327321 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -2118257363 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -560369018 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d11(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d11(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1994874891 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d10(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -422319283 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1231204836 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1565337738 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -903425777 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1481771385 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1617333980 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1034472816 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1096575944 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1766340764 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 656981833 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1692587979 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -761280539 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1523152584 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1042811670 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1322051899 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 430342393 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1547487212 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -738485249 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -869817957 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1479864213 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 892046337 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1815398146 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1854913126 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1700955824 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2002464660 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 196017265 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1725122937 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1346866717 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1251129302 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1343246339 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 929396071 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 356376530 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, req0, req1)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -350359215 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d12(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           var c = false;
[info]           {
[info]             c = out.writeKey(c, "created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 c = out.writeKey(c, "contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             c = out.writeKey(c, "lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var c = false;
[info]         x.foreach(((x) => {
[info]           c = out.writeComma(c);
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:134:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:135:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:137:18: local val v4 in value format is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CustomPlayJsonFormats.scala:65:45: Reference to uninitialized value v14
[warn]   implicit val v13: OFormat[C] = Json.format[C]
[warn]                                             ^
[warn] 7 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT.jar ...
Processing 293 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 116 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*JsonCodecMakerBenchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_93ebdd00/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce
[info] # Run progress: 0.00% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 822209.970 ops/s
[info] # Warmup Iteration   2: 1244364.974 ops/s
[info] # Warmup Iteration   3: 1393581.245 ops/s
[info] # Warmup Iteration   4: 1404793.098 ops/s
[info] # Warmup Iteration   5: 1422347.468 ops/s
[info] Iteration   1: 1441397.040 ops/s
[info]                  ·gc.alloc.rate:            2168.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       2368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2230.097 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1432002.867 ops/s
[info]                  ·gc.alloc.rate:                                  2154.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2244.741 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 1431448.963 ops/s
[info]                  ·gc.alloc.rate:                                  2153.301 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2619.829 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   4: 1440993.292 ops/s
[info]                  ·gc.alloc.rate:                                  2167.643 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2230.714 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   5: 1437992.066 ops/s
[info]                  ·gc.alloc.rate:                                  2163.622 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2235.317 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce":
[info]   1436766.845 ±(99.9%) 18444.754 ops/s [Average]
[info]   (min, avg, max) = (1431448.963, 1436766.845, 1441397.040), stdev = 4790.044
[info]   CI (99.9%): [1418322.091, 1455211.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate":
[info]   2161.483 ±(99.9%) 27.868 MB/sec [Average]
[info]   (min, avg, max) = (2153.301, 2161.483, 2168.498), stdev = 7.237
[info]   CI (99.9%): [2133.616, 2189.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm":
[info]   2368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2368.000, 2368.000, 2368.000), stdev = 0.001
[info]   CI (99.9%): [2368.000, 2368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen":
[info]   2110.217 ±(99.9%) 585.672 MB/sec [Average]
[info]   (min, avg, max) = (2041.972, 2110.217, 2382.297), stdev = 152.097
[info]   CI (99.9%): [1524.546, 2695.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2312.140 ±(99.9%) 662.708 B/op [Average]
[info]   (min, avg, max) = (2230.097, 2312.140, 2619.829), stdev = 172.103
[info]   CI (99.9%): [1649.432, 2974.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 13.000), stdev = 2.121
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson
[info] # Run progress: 0.89% complete, ETA 00:30:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53236.692 ops/s
[info] # Warmup Iteration   2: 164950.455 ops/s
[info] # Warmup Iteration   3: 166331.324 ops/s
[info] # Warmup Iteration   4: 168505.878 ops/s
[info] # Warmup Iteration   5: 144951.398 ops/s
[info] Iteration   1: 169391.619 ops/s
[info]                  ·gc.alloc.rate:            304.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       2832.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3125.625 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 168548.834 ops/s
[info]                  ·gc.alloc.rate:            303.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       2832.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3141.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 167821.429 ops/s
[info]                  ·gc.alloc.rate:            301.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       2832.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3154.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 166490.302 ops/s
[info]                  ·gc.alloc.rate:            299.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       2832.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3179.850 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 169000.122 ops/s
[info]                  ·gc.alloc.rate:            304.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       2832.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3132.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson":
[info]   168250.461 ±(99.9%) 4405.365 ops/s [Average]
[info]   (min, avg, max) = (166490.302, 168250.461, 169391.619), stdev = 1144.059
[info]   CI (99.9%): [163845.096, 172655.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate":
[info]   302.730 ±(99.9%) 7.912 MB/sec [Average]
[info]   (min, avg, max) = (299.571, 302.730, 304.785), stdev = 2.055
[info]   CI (99.9%): [294.818, 310.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm":
[info]   2832.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2832.002, 2832.003, 2832.003), stdev = 0.001
[info]   CI (99.9%): [2832.002, 2832.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen":
[info]   336.377 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (336.362, 336.377, 336.401), stdev = 0.016
[info]   CI (99.9%): [336.315, 336.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3146.882 ±(99.9%) 82.308 B/op [Average]
[info]   (min, avg, max) = (3125.625, 3146.882, 3179.850), stdev = 21.375
[info]   CI (99.9%): [3064.574, 3229.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter
[info] # Run progress: 1.79% complete, ETA 00:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299502.843 ops/s
[info] # Warmup Iteration   2: 311640.789 ops/s
[info] # Warmup Iteration   3: 311268.344 ops/s
[info] # Warmup Iteration   4: 310086.489 ops/s
[info] # Warmup Iteration   5: 307329.582 ops/s
[info] Iteration   1: 307328.462 ops/s
[info]                  ·gc.alloc.rate:      202.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 305677.078 ops/s
[info]                  ·gc.alloc.rate:            201.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1732.038 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 316502.045 ops/s
[info]                  ·gc.alloc.rate:      209.099 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 309487.247 ops/s
[info]                  ·gc.alloc.rate:            204.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1710.725 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 307194.854 ops/s
[info]                  ·gc.alloc.rate:            203.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1723.509 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter":
[info]   309237.937 ±(99.9%) 16487.033 ops/s [Average]
[info]   (min, avg, max) = (305677.078, 309237.937, 316502.045), stdev = 4281.630
[info]   CI (99.9%): [292750.904, 325724.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate":
[info]   204.226 ±(99.9%) 11.071 MB/sec [Average]
[info]   (min, avg, max) = (201.993, 204.226, 209.099), stdev = 2.875
[info]   CI (99.9%): [193.156, 215.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm":
[info]   1040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1040.001, 1040.001, 1040.001), stdev = 0.001
[info]   CI (99.9%): [1040.001, 1040.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.834 ±(99.9%) 709.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.834, 336.422), stdev = 184.249
[info]   CI (99.9%): [≈ 0, 911.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1033.254 ±(99.9%) 3632.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1033.254, 1732.038), stdev = 943.258
[info]   CI (99.9%): [≈ 0, 4665.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless
[info] # Run progress: 2.68% complete, ETA 00:29:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695095.853 ops/s
[info] # Warmup Iteration   2: 685648.805 ops/s
[info] # Warmup Iteration   3: 663008.521 ops/s
[info] # Warmup Iteration   4: 698714.623 ops/s
[info] # Warmup Iteration   5: 705044.426 ops/s
[info] Iteration   1: 699799.617 ops/s
[info]                  ·gc.alloc.rate:            238.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 756.568 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 670686.425 ops/s
[info]                  ·gc.alloc.rate:      228.431 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 673690.877 ops/s
[info]                  ·gc.alloc.rate:            229.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 785.909 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 676819.532 ops/s
[info]                  ·gc.alloc.rate:            230.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 782.254 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 680570.758 ops/s
[info]                  ·gc.alloc.rate:            231.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 777.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless":
[info]   680313.442 ±(99.9%) 44262.414 ops/s [Average]
[info]   (min, avg, max) = (670686.425, 680313.442, 699799.617), stdev = 11494.808
[info]   CI (99.9%): [636051.028, 724575.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate":
[info]   231.660 ±(99.9%) 14.972 MB/sec [Average]
[info]   (min, avg, max) = (228.431, 231.660, 238.255), stdev = 3.888
[info]   CI (99.9%): [216.688, 246.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm":
[info]   536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.001, 536.001, 536.001), stdev = 0.001
[info]   CI (99.9%): [536.001, 536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   269.073 ±(99.9%) 579.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.073, 336.367), stdev = 150.416
[info]   CI (99.9%): [≈ 0, 848.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   620.538 ±(99.9%) 1336.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 620.538, 785.909), stdev = 347.078
[info]   CI (99.9%): [≈ 0, 1957.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump
[info] # Run progress: 3.57% complete, ETA 00:29:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2748842.513 ops/s
[info] # Warmup Iteration   2: 2210675.803 ops/s
[info] # Warmup Iteration   3: 2819840.253 ops/s
[info] # Warmup Iteration   4: 2886655.555 ops/s
[info] # Warmup Iteration   5: 2888792.303 ops/s
[info] Iteration   1: 2854231.176 ops/s
[info]                  ·gc.alloc.rate:            319.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.485 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2882967.796 ops/s
[info]                  ·gc.alloc.rate:            322.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.649 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2868874.148 ops/s
[info]                  ·gc.alloc.rate:            320.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2840234.069 ops/s
[info]                  ·gc.alloc.rate:            317.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.419 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2872760.928 ops/s
[info]                  ·gc.alloc.rate:            321.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump":
[info]   2863813.623 ±(99.9%) 64444.072 ops/s [Average]
[info]   (min, avg, max) = (2840234.069, 2863813.623, 2882967.796), stdev = 16735.921
[info]   CI (99.9%): [2799369.551, 2928257.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   320.230 ±(99.9%) 7.210 MB/sec [Average]
[info]   (min, avg, max) = (317.571, 320.230, 322.337), stdev = 1.872
[info]   CI (99.9%): [313.020, 327.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   336.378 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (336.346, 336.378, 336.458), stdev = 0.046
[info]   CI (99.9%): [336.201, 336.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   184.880 ±(99.9%) 4.172 B/op [Average]
[info]   (min, avg, max) = (183.649, 184.880, 186.419), stdev = 1.084
[info]   CI (99.9%): [180.708, 189.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay
[info] # Run progress: 4.46% complete, ETA 00:29:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41930.766 ops/s
[info] # Warmup Iteration   2: 117218.856 ops/s
[info] # Warmup Iteration   3: 106612.294 ops/s
[info] # Warmup Iteration   4: 116366.953 ops/s
[info] # Warmup Iteration   5: 123912.805 ops/s
[info] Iteration   1: 122377.150 ops/s
[info]                  ·gc.alloc.rate:            785.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       10104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12979.122 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 111824.423 ops/s
[info]                  ·gc.alloc.rate:            717.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       10104.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9469.267 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 114110.852 ops/s
[info]                  ·gc.alloc.rate:                   732.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              10104.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9325.290 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 123594.662 ops/s
[info]                  ·gc.alloc.rate:                                  793.580 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10104.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.210 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.669 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8669.563 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 123061.934 ops/s
[info]                  ·gc.alloc.rate:                                  790.171 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10104.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13060.025 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay":
[info]   118993.804 ±(99.9%) 21474.707 ops/s [Average]
[info]   (min, avg, max) = (111824.423, 118993.804, 123594.662), stdev = 5576.913
[info]   CI (99.9%): [97519.097, 140468.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate":
[info]   764.005 ±(99.9%) 137.819 MB/sec [Average]
[info]   (min, avg, max) = (717.983, 764.005, 793.580), stdev = 35.791
[info]   CI (99.9%): [626.186, 901.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm":
[info]   10104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10104.003, 10104.003, 10104.004), stdev = 0.001
[info]   CI (99.9%): [10104.003, 10104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.210), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.538 ±(99.9%) 4.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.538, 2.669), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen":
[info]   812.101 ±(99.9%) 714.348 MB/sec [Average]
[info]   (min, avg, max) = (672.879, 812.101, 1021.344), stdev = 185.514
[info]   CI (99.9%): [97.754, 1526.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10700.653 ±(99.9%) 8234.285 B/op [Average]
[info]   (min, avg, max) = (8669.563, 10700.653, 13060.025), stdev = 2138.418
[info]   CI (99.9%): [2466.369, 18934.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   11.025 ±(99.9%) 94.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.025, 55.125), stdev = 24.653
[info]   CI (99.9%): [≈ 0, 105.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 18.000), stdev = 6.058
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce
[info] # Run progress: 5.36% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367615.411 ops/s
[info] # Warmup Iteration   2: 514130.119 ops/s
[info] # Warmup Iteration   3: 511791.459 ops/s
[info] # Warmup Iteration   4: 512387.858 ops/s
[info] # Warmup Iteration   5: 523962.341 ops/s
[info] Iteration   1: 528024.956 ops/s
[info]                  ·gc.alloc.rate:                                  1362.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4058.399 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 522337.938 ops/s
[info]                  ·gc.alloc.rate:                                  1348.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4097.041 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 524162.283 ops/s
[info]                  ·gc.alloc.rate:                                  1353.336 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4088.039 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 526430.882 ops/s
[info]                  ·gc.alloc.rate:                                  1359.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4070.701 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 521376.276 ops/s
[info]                  ·gc.alloc.rate:                                  1346.527 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4110.139 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce":
[info]   524466.467 ±(99.9%) 10666.738 ops/s [Average]
[info]   (min, avg, max) = (521376.276, 524466.467, 528024.956), stdev = 2770.118
[info]   CI (99.9%): [513799.729, 535133.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate":
[info]   1354.029 ±(99.9%) 26.431 MB/sec [Average]
[info]   (min, avg, max) = (1346.527, 1354.029, 1362.756), stdev = 6.864
[info]   CI (99.9%): [1327.598, 1380.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm":
[info]   4064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4064.001, 4064.001, 4064.001), stdev = 0.001
[info]   CI (99.9%): [4064.001, 4064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.008, 0.019), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1360.953 ±(99.9%) 3.453 MB/sec [Average]
[info]   (min, avg, max) = (1359.463, 1360.953, 1361.814), stdev = 0.897
[info]   CI (99.9%): [1357.500, 1364.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4084.864 ±(99.9%) 79.340 B/op [Average]
[info]   (min, avg, max) = (4058.399, 4084.864, 4110.139), stdev = 20.604
[info]   CI (99.9%): [4005.524, 4164.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson
[info] # Run progress: 6.25% complete, ETA 00:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 657501.960 ops/s
[info] # Warmup Iteration   2: 1079546.518 ops/s
[info] # Warmup Iteration   3: 1089798.936 ops/s
[info] # Warmup Iteration   4: 1084750.280 ops/s
[info] # Warmup Iteration   5: 1081203.939 ops/s
[info] Iteration   1: 1081266.185 ops/s
[info]                  ·gc.alloc.rate:            769.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 979.282 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1077637.085 ops/s
[info]                  ·gc.alloc.rate:                   767.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1473.924 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.864 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 948136.056 ops/s
[info]                  ·gc.alloc.rate:                   674.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             679.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1128.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1096877.676 ops/s
[info]                  ·gc.alloc.rate:                                  780.747 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       976.860 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1046684.164 ops/s
[info]                  ·gc.alloc.rate:            744.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1023.687 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson":
[info]   1050120.233 ±(99.9%) 230444.913 ops/s [Average]
[info]   (min, avg, max) = (948136.056, 1050120.233, 1096877.676), stdev = 59845.812
[info]   CI (99.9%): [819675.320, 1280565.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate":
[info]   747.303 ±(99.9%) 164.651 MB/sec [Average]
[info]   (min, avg, max) = (674.431, 747.303, 780.747), stdev = 42.759
[info]   CI (99.9%): [582.651, 911.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen":
[info]   744.757 ±(99.9%) 569.893 MB/sec [Average]
[info]   (min, avg, max) = (672.745, 744.757, 1009.437), stdev = 148.000
[info]   CI (99.9%): [174.864, 1314.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1116.541 ±(99.9%) 805.074 B/op [Average]
[info]   (min, avg, max) = (976.860, 1116.541, 1473.924), stdev = 209.075
[info]   CI (99.9%): [311.467, 1921.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.194 ±(99.9%) 8.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.194, 4.864), stdev = 2.107
[info]   CI (99.9%): [≈ 0, 9.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 19.000), stdev = 7.314
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter
[info] # Run progress: 7.14% complete, ETA 00:28:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2092441.803 ops/s
[info] # Warmup Iteration   2: 2800636.961 ops/s
[info] # Warmup Iteration   3: 2775307.696 ops/s
[info] # Warmup Iteration   4: 2802124.930 ops/s
[info] # Warmup Iteration   5: 2765129.959 ops/s
[info] Iteration   1: 2766684.226 ops/s
[info]                  ·gc.alloc.rate:            182.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191.368 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2818224.936 ops/s
[info]                  ·gc.alloc.rate:      186.214 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2766657.625 ops/s
[info]                  ·gc.alloc.rate:            182.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191.365 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2828107.133 ops/s
[info]                  ·gc.alloc.rate:      186.867 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2805230.937 ops/s
[info]                  ·gc.alloc.rate:            185.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.741 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter":
[info]   2796980.971 ±(99.9%) 111029.564 ops/s [Average]
[info]   (min, avg, max) = (2766657.625, 2796980.971, 2828107.133), stdev = 28834.025
[info]   CI (99.9%): [2685951.407, 2908010.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate":
[info]   184.807 ±(99.9%) 7.332 MB/sec [Average]
[info]   (min, avg, max) = (182.757, 184.807, 186.867), stdev = 1.904
[info]   CI (99.9%): [177.475, 192.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.823 ±(99.9%) 709.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.823, 336.470), stdev = 184.238
[info]   CI (99.9%): [≈ 0, 911.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   114.295 ±(99.9%) 401.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.295, 191.368), stdev = 104.342
[info]   CI (99.9%): [≈ 0, 516.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay
[info] # Run progress: 8.04% complete, ETA 00:28:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59724.448 ops/s
[info] # Warmup Iteration   2: 108492.799 ops/s
[info] # Warmup Iteration   3: 106346.100 ops/s
[info] # Warmup Iteration   4: 109562.392 ops/s
[info] # Warmup Iteration   5: 110406.353 ops/s
[info] Iteration   1: 109014.252 ops/s
[info]                  ·gc.alloc.rate:                   923.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14570.101 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 110844.614 ops/s
[info]                  ·gc.alloc.rate:                                  939.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.649 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14489.077 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.458 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 112509.954 ops/s
[info]                  ·gc.alloc.rate:            953.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9522.683 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 112506.036 ops/s
[info]                  ·gc.alloc.rate:            953.141 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14285.421 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 112754.566 ops/s
[info]                  ·gc.alloc.rate:            955.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14254.006 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay":
[info]   111525.884 ±(99.9%) 6152.352 ops/s [Average]
[info]   (min, avg, max) = (109014.252, 111525.884, 112754.566), stdev = 1597.746
[info]   CI (99.9%): [105373.533, 117678.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate":
[info]   944.854 ±(99.9%) 52.080 MB/sec [Average]
[info]   (min, avg, max) = (923.601, 944.854, 955.270), stdev = 13.525
[info]   CI (99.9%): [892.773, 996.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm":
[info]   13336.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.004, 13336.004, 13336.004), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.130 ±(99.9%) 1.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.649), stdev = 0.290
[info]   CI (99.9%): [≈ 0, 1.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen":
[info]   950.398 ±(99.9%) 581.026 MB/sec [Average]
[info]   (min, avg, max) = (680.629, 950.398, 1021.028), stdev = 150.891
[info]   CI (99.9%): [369.372, 1531.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   13424.258 ±(99.9%) 8414.156 B/op [Average]
[info]   (min, avg, max) = (9522.683, 13424.258, 14570.101), stdev = 2185.130
[info]   CI (99.9%): [5010.102, 21838.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   11.509 ±(99.9%) 80.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.509, 48.086), stdev = 20.853
[info]   CI (99.9%): [≈ 0, 91.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 17.000), stdev = 5.857
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce
[info] # Run progress: 8.93% complete, ETA 00:27:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 737506.723 ops/s
[info] # Warmup Iteration   2: 1049488.171 ops/s
[info] # Warmup Iteration   3: 1084187.047 ops/s
[info] # Warmup Iteration   4: 1092162.063 ops/s
[info] # Warmup Iteration   5: 1113587.153 ops/s
[info] Iteration   1: 1109959.141 ops/s
[info]                  ·gc.alloc.rate:                                  1742.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2413.177 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1119654.927 ops/s
[info]                  ·gc.alloc.rate:                                  1758.409 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2870.895 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 1121698.914 ops/s
[info]                  ·gc.alloc.rate:            1761.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2388.030 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1116904.569 ops/s
[info]                  ·gc.alloc.rate:                                  1754.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2398.353 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1120959.908 ops/s
[info]                  ·gc.alloc.rate:            1760.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2389.694 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce":
[info]   1117835.492 ±(99.9%) 18356.496 ops/s [Average]
[info]   (min, avg, max) = (1109959.141, 1117835.492, 1121698.914), stdev = 4767.124
[info]   CI (99.9%): [1099478.996, 1136191.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate":
[info]   1755.596 ±(99.9%) 29.438 MB/sec [Average]
[info]   (min, avg, max) = (1742.918, 1755.596, 1761.654), stdev = 7.645
[info]   CI (99.9%): [1726.158, 1785.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm":
[info]   2472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.000, 2472.000, 2472.000), stdev = 0.001
[info]   CI (99.9%): [2472.000, 2472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1769.904 ±(99.9%) 586.041 MB/sec [Average]
[info]   (min, avg, max) = (1701.444, 1769.904, 2042.155), stdev = 152.193
[info]   CI (99.9%): [1183.864, 2355.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2492.030 ±(99.9%) 816.437 B/op [Average]
[info]   (min, avg, max) = (2388.030, 2492.030, 2870.895), stdev = 212.026
[info]   CI (99.9%): [1675.593, 3308.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 10.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson
[info] # Run progress: 9.82% complete, ETA 00:27:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 986366.648 ops/s
[info] # Warmup Iteration   2: 1470351.464 ops/s
[info] # Warmup Iteration   3: 1482013.515 ops/s
[info] # Warmup Iteration   4: 1470327.339 ops/s
[info] # Warmup Iteration   5: 1470320.159 ops/s
[info] Iteration   1: 1486779.119 ops/s
[info]                  ·gc.alloc.rate:                                  1042.816 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1076.095 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.231 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1513993.685 ops/s
[info]                  ·gc.alloc.rate:                                  1062.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1061.568 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1504781.762 ops/s
[info]                  ·gc.alloc.rate:                                  1055.793 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1067.208 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1500097.998 ops/s
[info]                  ·gc.alloc.rate:                                  1052.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1071.426 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1510625.601 ops/s
[info]                  ·gc.alloc.rate:                                  1059.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1063.971 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson":
[info]   1503255.633 ±(99.9%) 40996.133 ops/s [Average]
[info]   (min, avg, max) = (1486779.119, 1503255.633, 1513993.685), stdev = 10646.565
[info]   CI (99.9%): [1462259.500, 1544251.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate":
[info]   1054.480 ±(99.9%) 28.947 MB/sec [Average]
[info]   (min, avg, max) = (1042.816, 1054.480, 1062.050), stdev = 7.517
[info]   CI (99.9%): [1025.533, 1083.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.037, 0.163), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.290 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.039, 0.173), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1020.114 ±(99.9%) 7.929 MB/sec [Average]
[info]   (min, avg, max) = (1016.457, 1020.114, 1021.230), stdev = 2.059
[info]   CI (99.9%): [1012.186, 1028.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1068.054 ±(99.9%) 22.410 B/op [Average]
[info]   (min, avg, max) = (1061.568, 1068.054, 1076.095), stdev = 5.820
[info]   CI (99.9%): [1045.644, 1090.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.846 ±(99.9%) 7.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.846, 4.231), stdev = 1.892
[info]   CI (99.9%): [≈ 0, 8.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter
[info] # Run progress: 10.71% complete, ETA 00:27:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6734525.308 ops/s
[info] # Warmup Iteration   2: 6908900.353 ops/s
[info] # Warmup Iteration   3: 7197450.754 ops/s
[info] # Warmup Iteration   4: 7159417.835 ops/s
[info] # Warmup Iteration   5: 6882474.799 ops/s
[info] Iteration   1: 7160995.954 ops/s
[info]                  ·gc.alloc.rate:                   909.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        147.870 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.878 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 7347849.797 ops/s
[info]                  ·gc.alloc.rate:                                  933.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       218.736 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7356336.979 ops/s
[info]                  ·gc.alloc.rate:                                  934.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       218.479 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 7360890.963 ops/s
[info]                  ·gc.alloc.rate:            935.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 218.350 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 7335068.725 ops/s
[info]                  ·gc.alloc.rate:            931.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.067 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter":
[info]   7312228.484 ±(99.9%) 327731.587 ops/s [Average]
[info]   (min, avg, max) = (7160995.954, 7312228.484, 7360890.963), stdev = 85110.852
[info]   CI (99.9%): [6984496.897, 7639960.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate":
[info]   929.050 ±(99.9%) 41.697 MB/sec [Average]
[info]   (min, avg, max) = (909.814, 929.050, 935.248), stdev = 10.829
[info]   CI (99.9%): [887.353, 970.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   883.281 ±(99.9%) 726.370 MB/sec [Average]
[info]   (min, avg, max) = (672.673, 883.281, 1021.153), stdev = 188.636
[info]   CI (99.9%): [156.910, 1609.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   189.900 ±(99.9%) 150.932 B/op [Average]
[info]   (min, avg, max) = (146.067, 189.900, 218.736), stdev = 39.197
[info]   CI (99.9%): [38.968, 340.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.176 ±(99.9%) 1.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.878), stdev = 0.393
[info]   CI (99.9%): [≈ 0, 1.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay
[info] # Run progress: 11.61% complete, ETA 00:27:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189540.105 ops/s
[info] # Warmup Iteration   2: 331611.272 ops/s
[info] # Warmup Iteration   3: 340684.002 ops/s
[info] # Warmup Iteration   4: 336880.291 ops/s
[info] # Warmup Iteration   5: 334689.132 ops/s
[info] Iteration   1: 324590.820 ops/s
[info]                  ·gc.alloc.rate:            866.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       4200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3262.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 337244.323 ops/s
[info]                  ·gc.alloc.rate:                                  899.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4200.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4743.942 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.652 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 343095.421 ops/s
[info]                  ·gc.alloc.rate:                                  915.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4200.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4684.253 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 342733.558 ops/s
[info]                  ·gc.alloc.rate:            914.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       4200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3126.033 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 340861.287 ops/s
[info]                  ·gc.alloc.rate:            909.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       4200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4714.947 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay":
[info]   337705.082 ±(99.9%) 29608.618 ops/s [Average]
[info]   (min, avg, max) = (324590.820, 337705.082, 343095.421), stdev = 7689.264
[info]   CI (99.9%): [308096.464, 367313.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate":
[info]   901.068 ±(99.9%) 79.002 MB/sec [Average]
[info]   (min, avg, max) = (866.068, 901.068, 915.432), stdev = 20.516
[info]   CI (99.9%): [822.066, 980.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm":
[info]   4200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4200.001, 4200.001, 4200.001), stdev = 0.001
[info]   CI (99.9%): [4200.001, 4200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.171), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   882.345 ±(99.9%) 723.093 MB/sec [Average]
[info]   (min, avg, max) = (672.695, 882.345, 1021.000), stdev = 187.785
[info]   CI (99.9%): [159.252, 1605.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4106.282 ±(99.9%) 3212.715 B/op [Average]
[info]   (min, avg, max) = (3126.033, 4106.282, 4743.942), stdev = 834.332
[info]   CI (99.9%): [893.567, 7318.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.730 ±(99.9%) 32.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.730, 18.652), stdev = 8.342
[info]   CI (99.9%): [≈ 0, 35.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 12.000), stdev = 4.099
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce
[info] # Run progress: 12.50% complete, ETA 00:26:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369903.312 ops/s
[info] # Warmup Iteration   2: 559481.892 ops/s
[info] # Warmup Iteration   3: 578302.195 ops/s
[info] # Warmup Iteration   4: 590498.671 ops/s
[info] # Warmup Iteration   5: 591571.090 ops/s
[info] Iteration   1: 595096.498 ops/s
[info]                  ·gc.alloc.rate:                                  1926.700 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5401.408 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 590577.284 ops/s
[info]                  ·gc.alloc.rate:                                  1912.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5442.418 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 591589.813 ops/s
[info]                  ·gc.alloc.rate:                                  1915.110 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.555 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4527.744 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 588734.794 ops/s
[info]                  ·gc.alloc.rate:            1906.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5459.942 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 593194.551 ops/s
[info]                  ·gc.alloc.rate:                                  1920.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5418.933 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce":
[info]   591838.588 ±(99.9%) 9380.671 ops/s [Average]
[info]   (min, avg, max) = (588734.794, 591838.588, 595096.498), stdev = 2436.130
[info]   CI (99.9%): [582457.918, 601219.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate":
[info]   1916.196 ±(99.9%) 30.175 MB/sec [Average]
[info]   (min, avg, max) = (1906.181, 1916.196, 1926.700), stdev = 7.836
[info]   CI (99.9%): [1886.020, 1946.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm":
[info]   5096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.001, 5096.001, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.001, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1974.147 ±(99.9%) 586.774 MB/sec [Average]
[info]   (min, avg, max) = (1701.555, 1974.147, 2042.393), stdev = 152.383
[info]   CI (99.9%): [1387.373, 2560.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5250.089 ±(99.9%) 1557.270 B/op [Average]
[info]   (min, avg, max) = (4527.744, 5250.089, 5459.942), stdev = 404.418
[info]   CI (99.9%): [3692.819, 6807.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 11.000), stdev = 1.304
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson
[info] # Run progress: 13.39% complete, ETA 00:26:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 598116.315 ops/s
[info] # Warmup Iteration   2: 900020.447 ops/s
[info] # Warmup Iteration   3: 925456.748 ops/s
[info] # Warmup Iteration   4: 911280.898 ops/s
[info] # Warmup Iteration   5: 919371.359 ops/s
[info] Iteration   1: 924291.468 ops/s
[info]                  ·gc.alloc.rate:            869.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1145.628 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 921901.802 ops/s
[info]                  ·gc.alloc.rate:                                  866.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1735.396 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.823 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 930207.850 ops/s
[info]                  ·gc.alloc.rate:                                  874.649 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1151.822 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 935493.549 ops/s
[info]                  ·gc.alloc.rate:            879.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1718.079 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 934677.760 ops/s
[info]                  ·gc.alloc.rate:                                  878.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1146.343 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson":
[info]   929314.486 ±(99.9%) 23416.397 ops/s [Average]
[info]   (min, avg, max) = (921901.802, 929314.486, 935493.549), stdev = 6081.164
[info]   CI (99.9%): [905898.088, 952730.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate":
[info]   873.855 ±(99.9%) 21.622 MB/sec [Average]
[info]   (min, avg, max) = (866.993, 873.855, 879.594), stdev = 5.615
[info]   CI (99.9%): [852.233, 895.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen":
[info]   814.386 ±(99.9%) 718.840 MB/sec [Average]
[info]   (min, avg, max) = (672.866, 814.386, 1021.089), stdev = 186.680
[info]   CI (99.9%): [95.547, 1533.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1379.453 ±(99.9%) 1221.014 B/op [Average]
[info]   (min, avg, max) = (1145.628, 1379.453, 1735.396), stdev = 317.094
[info]   CI (99.9%): [158.439, 2600.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.365 ±(99.9%) 11.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.365, 6.823), stdev = 3.051
[info]   CI (99.9%): [≈ 0, 13.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter
[info] # Run progress: 14.29% complete, ETA 00:26:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2120400.586 ops/s
[info] # Warmup Iteration   2: 2540900.856 ops/s
[info] # Warmup Iteration   3: 2536542.984 ops/s
[info] # Warmup Iteration   4: 2533275.063 ops/s
[info] # Warmup Iteration   5: 2522758.712 ops/s
[info] Iteration   1: 2588447.535 ops/s
[info]                  ·gc.alloc.rate:                                  1078.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.154 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       620.926 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2567332.588 ops/s
[info]                  ·gc.alloc.rate:                                  1070.180 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       626.003 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 2553246.357 ops/s
[info]                  ·gc.alloc.rate:                                  1064.153 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       629.453 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2575680.218 ops/s
[info]                  ·gc.alloc.rate:            1073.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 623.937 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2592174.856 ops/s
[info]                  ·gc.alloc.rate:            1080.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 826.691 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter":
[info]   2575376.311 ±(99.9%) 61114.242 ops/s [Average]
[info]   (min, avg, max) = (2553246.357, 2575376.311, 2592174.856), stdev = 15871.175
[info]   CI (99.9%): [2514262.069, 2636490.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate":
[info]   1073.360 ±(99.9%) 25.317 MB/sec [Average]
[info]   (min, avg, max) = (1064.153, 1073.360, 1080.346), stdev = 6.575
[info]   CI (99.9%): [1048.043, 1098.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.154), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1089.153 ±(99.9%) 586.144 MB/sec [Average]
[info]   (min, avg, max) = (1020.893, 1089.153, 1361.452), stdev = 152.220
[info]   CI (99.9%): [503.009, 1675.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   665.402 ±(99.9%) 347.393 B/op [Average]
[info]   (min, avg, max) = (620.926, 665.402, 826.691), stdev = 90.217
[info]   CI (99.9%): [318.009, 1012.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 12.000), stdev = 3.362
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay
[info] # Run progress: 15.18% complete, ETA 00:25:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78424.845 ops/s
[info] # Warmup Iteration   2: 169619.606 ops/s
[info] # Warmup Iteration   3: 172732.449 ops/s
[info] # Warmup Iteration   4: 173046.135 ops/s
[info] # Warmup Iteration   5: 173047.015 ops/s
[info] Iteration   1: 173777.427 ops/s
[info]                  ·gc.alloc.rate:                   1046.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              9480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9169.829 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 175019.664 ops/s
[info]                  ·gc.alloc.rate:                                  1054.022 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9480.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.492 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12243.660 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 175432.658 ops/s
[info]                  ·gc.alloc.rate:                                  1056.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9480.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9161.131 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 176102.070 ops/s
[info]                  ·gc.alloc.rate:            1060.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       9480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9126.335 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 175644.680 ops/s
[info]                  ·gc.alloc.rate:                                  1057.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9480.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9149.972 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay":
[info]   175195.300 ±(99.9%) 3401.736 ops/s [Average]
[info]   (min, avg, max) = (173777.427, 175195.300, 176102.070), stdev = 883.420
[info]   CI (99.9%): [171793.564, 178597.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate":
[info]   1055.031 ±(99.9%) 20.850 MB/sec [Average]
[info]   (min, avg, max) = (1046.342, 1055.031, 1060.655), stdev = 5.415
[info]   CI (99.9%): [1034.180, 1075.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm":
[info]   9480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9480.002, 9480.002, 9480.003), stdev = 0.001
[info]   CI (99.9%): [9480.002, 9480.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.103 ±(99.9%) 0.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.492), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1087.253 ±(99.9%) 590.082 MB/sec [Average]
[info]   (min, avg, max) = (1012.107, 1087.253, 1361.296), stdev = 153.242
[info]   CI (99.9%): [497.171, 1677.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9770.185 ±(99.9%) 5324.710 B/op [Average]
[info]   (min, avg, max) = (9126.335, 9770.185, 12243.660), stdev = 1382.810
[info]   CI (99.9%): [4445.475, 15094.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.239 ±(99.9%) 62.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.239, 36.197), stdev = 16.188
[info]   CI (99.9%): [≈ 0, 69.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 14.000), stdev = 4.278
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson
[info] # Run progress: 16.07% complete, ETA 00:25:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 851793.606 ops/s
[info] # Warmup Iteration   2: 1292859.357 ops/s
[info] # Warmup Iteration   3: 1298696.868 ops/s
[info] # Warmup Iteration   4: 1284873.280 ops/s
[info] # Warmup Iteration   5: 1300024.146 ops/s
[info] Iteration   1: 1296994.747 ops/s
[info]                  ·gc.alloc.rate:            823.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 815.614 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1295791.122 ops/s
[info]                  ·gc.alloc.rate:                   823.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1229.027 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.664 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 1295626.917 ops/s
[info]                  ·gc.alloc.rate:                                  823.091 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       826.946 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1314470.025 ops/s
[info]                  ·gc.alloc.rate:                                  835.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1222.626 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1311516.106 ops/s
[info]                  ·gc.alloc.rate:            833.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 816.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson":
[info]   1302879.783 ±(99.9%) 35834.096 ops/s [Average]
[info]   (min, avg, max) = (1295626.917, 1302879.783, 1314470.025), stdev = 9306.001
[info]   CI (99.9%): [1267045.688, 1338713.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate":
[info]   827.695 ±(99.9%) 22.944 MB/sec [Average]
[info]   (min, avg, max) = (823.091, 827.695, 835.104), stdev = 5.959
[info]   CI (99.9%): [804.751, 850.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.116), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   813.218 ±(99.9%) 714.372 MB/sec [Average]
[info]   (min, avg, max) = (671.933, 813.218, 1021.020), stdev = 185.520
[info]   CI (99.9%): [98.846, 1527.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   982.241 ±(99.9%) 856.447 B/op [Average]
[info]   (min, avg, max) = (815.614, 982.241, 1229.027), stdev = 222.417
[info]   CI (99.9%): [125.794, 1838.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.133 ±(99.9%) 9.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.133, 5.664), stdev = 2.533
[info]   CI (99.9%): [≈ 0, 10.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 15.000), stdev = 5.550
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter
[info] # Run progress: 16.96% complete, ETA 00:25:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3440317.890 ops/s
[info] # Warmup Iteration   2: 4018493.193 ops/s
[info] # Warmup Iteration   3: 3958984.007 ops/s
[info] # Warmup Iteration   4: 3958559.913 ops/s
[info] # Warmup Iteration   5: 4004632.741 ops/s
[info] Iteration   1: 3979929.236 ops/s
[info]                  ·gc.alloc.rate:            525.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 266.056 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3997773.757 ops/s
[info]                  ·gc.alloc.rate:            528.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132.433 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3996879.350 ops/s
[info]                  ·gc.alloc.rate:            528.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 264.921 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 3957850.216 ops/s
[info]                  ·gc.alloc.rate:            521.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133.768 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3979753.406 ops/s
[info]                  ·gc.alloc.rate:                   525.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        266.068 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter":
[info]   3982437.193 ±(99.9%) 62737.084 ops/s [Average]
[info]   (min, avg, max) = (3957850.216, 3982437.193, 3997773.757), stdev = 16292.621
[info]   CI (99.9%): [3919700.109, 4045174.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate":
[info]   525.970 ±(99.9%) 10.348 MB/sec [Average]
[info]   (min, avg, max) = (521.635, 525.970, 528.277), stdev = 2.687
[info]   CI (99.9%): [515.622, 536.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   537.979 ±(99.9%) 710.296 MB/sec [Average]
[info]   (min, avg, max) = (335.472, 537.979, 672.756), stdev = 184.462
[info]   CI (99.9%): [≈ 0, 1248.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   212.649 ±(99.9%) 279.637 B/op [Average]
[info]   (min, avg, max) = (132.433, 212.649, 266.068), stdev = 72.621
[info]   CI (99.9%): [≈ 0, 492.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.316 ±(99.9%) 2.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.316, 1.581), stdev = 0.707
[info]   CI (99.9%): [≈ 0, 3.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 11.000), stdev = 2.739
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay
[info] # Run progress: 17.86% complete, ETA 00:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98786.731 ops/s
[info] # Warmup Iteration   2: 213484.002 ops/s
[info] # Warmup Iteration   3: 213139.080 ops/s
[info] # Warmup Iteration   4: 212199.574 ops/s
[info] # Warmup Iteration   5: 212424.309 ops/s
[info] Iteration   1: 212753.423 ops/s
[info]                  ·gc.alloc.rate:                   985.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              7288.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7489.688 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 217197.310 ops/s
[info]                  ·gc.alloc.rate:                                  1005.463 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7288.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.493 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7399.669 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 216996.617 ops/s
[info]                  ·gc.alloc.rate:            1004.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       7288.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7406.214 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 218699.339 ops/s
[info]                  ·gc.alloc.rate:            1012.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       7288.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4899.373 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 216915.199 ops/s
[info]                  ·gc.alloc.rate:            1004.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       7288.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7409.423 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay":
[info]   216512.378 ±(99.9%) 8562.472 ops/s [Average]
[info]   (min, avg, max) = (212753.423, 216512.378, 218699.339), stdev = 2223.647
[info]   CI (99.9%): [207949.905, 225074.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate":
[info]   1002.480 ±(99.9%) 39.555 MB/sec [Average]
[info]   (min, avg, max) = (985.134, 1002.480, 1012.655), stdev = 10.272
[info]   CI (99.9%): [962.924, 1042.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm":
[info]   7288.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7288.002, 7288.002, 7288.002), stdev = 0.001
[info]   CI (99.9%): [7288.002, 7288.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.099 ±(99.9%) 0.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.099, 0.493), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 0.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   951.240 ±(99.9%) 582.408 MB/sec [Average]
[info]   (min, avg, max) = (680.759, 951.240, 1021.307), stdev = 151.250
[info]   CI (99.9%): [368.832, 1533.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6920.873 ±(99.9%) 4353.739 B/op [Average]
[info]   (min, avg, max) = (4899.373, 6920.873, 7489.688), stdev = 1130.652
[info]   CI (99.9%): [2567.135, 11274.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.913 ±(99.9%) 50.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.913, 29.565), stdev = 13.222
[info]   CI (99.9%): [≈ 0, 56.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce
[info] # Run progress: 18.75% complete, ETA 00:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354680.232 ops/s
[info] # Warmup Iteration   2: 507763.926 ops/s
[info] # Warmup Iteration   3: 519163.502 ops/s
[info] # Warmup Iteration   4: 523970.447 ops/s
[info] # Warmup Iteration   5: 533758.872 ops/s
[info] Iteration   1: 529116.044 ops/s
[info]                  ·gc.alloc.rate:                                  1729.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5062.445 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 531410.725 ops/s
[info]                  ·gc.alloc.rate:                                  1736.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5040.538 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 535639.027 ops/s
[info]                  ·gc.alloc.rate:                                  1750.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6001.001 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 536088.610 ops/s
[info]                  ·gc.alloc.rate:                                  1752.020 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4996.497 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 534557.305 ops/s
[info]                  ·gc.alloc.rate:            1746.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5010.954 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce":
[info]   533362.342 ±(99.9%) 11533.244 ops/s [Average]
[info]   (min, avg, max) = (529116.044, 533362.342, 536088.610), stdev = 2995.147
[info]   CI (99.9%): [521829.098, 544895.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate":
[info]   1743.149 ±(99.9%) 37.972 MB/sec [Average]
[info]   (min, avg, max) = (1729.078, 1743.149, 1752.020), stdev = 9.861
[info]   CI (99.9%): [1705.177, 1781.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.001, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.001, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen":
[info]   1769.933 ±(99.9%) 586.737 MB/sec [Average]
[info]   (min, avg, max) = (1701.665, 1769.933, 2042.507), stdev = 152.374
[info]   CI (99.9%): [1183.196, 2356.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5222.287 ±(99.9%) 1679.141 B/op [Average]
[info]   (min, avg, max) = (4996.497, 5222.287, 6001.001), stdev = 436.068
[info]   CI (99.9%): [3543.146, 6901.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 11.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson
[info] # Run progress: 19.64% complete, ETA 00:24:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258176.835 ops/s
[info] # Warmup Iteration   2: 471624.492 ops/s
[info] # Warmup Iteration   3: 472794.925 ops/s
[info] # Warmup Iteration   4: 474486.050 ops/s
[info] # Warmup Iteration   5: 470451.953 ops/s
[info] Iteration   1: 449707.116 ops/s
[info]                  ·gc.alloc.rate:            557.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2354.653 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 475915.515 ops/s
[info]                  ·gc.alloc.rate:            590.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2224.966 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 476709.259 ops/s
[info]                  ·gc.alloc.rate:            591.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2221.247 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 479479.788 ops/s
[info]                  ·gc.alloc.rate:            594.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1104.236 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 475956.063 ops/s
[info]                  ·gc.alloc.rate:                   590.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2235.840 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson":
[info]   471553.549 ±(99.9%) 47359.873 ops/s [Average]
[info]   (min, avg, max) = (449707.116, 471553.549, 479479.788), stdev = 12299.209
[info]   CI (99.9%): [424193.676, 518913.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate":
[info]   584.774 ±(99.9%) 58.803 MB/sec [Average]
[info]   (min, avg, max) = (557.649, 584.774, 594.625), stdev = 15.271
[info]   CI (99.9%): [525.971, 643.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen":
[info]   606.110 ±(99.9%) 580.650 MB/sec [Average]
[info]   (min, avg, max) = (336.376, 606.110, 676.093), stdev = 150.793
[info]   CI (99.9%): [25.460, 1186.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2028.189 ±(99.9%) 2000.279 B/op [Average]
[info]   (min, avg, max) = (1104.236, 2028.189, 2354.653), stdev = 519.466
[info]   CI (99.9%): [27.910, 4028.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.643 ±(99.9%) 22.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.643, 13.217), stdev = 5.911
[info]   CI (99.9%): [≈ 0, 25.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 12.000), stdev = 2.828
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter
[info] # Run progress: 20.54% complete, ETA 00:24:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4879159.584 ops/s
[info] # Warmup Iteration   2: 4874928.540 ops/s
[info] # Warmup Iteration   3: 2831063.748 ops/s
[info] # Warmup Iteration   4: 3914379.335 ops/s
[info] # Warmup Iteration   5: 2873530.384 ops/s
[info] Iteration   1: 4909982.580 ops/s
[info]                  ·gc.alloc.rate:            224.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107.833 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4807628.541 ops/s
[info]                  ·gc.alloc.rate:            219.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4906897.595 ops/s
[info]                  ·gc.alloc.rate:      224.448 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4880572.490 ops/s
[info]                  ·gc.alloc.rate:            223.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4906544.396 ops/s
[info]                  ·gc.alloc.rate:            224.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107.902 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter":
[info]   4882325.120 ±(99.9%) 167159.260 ops/s [Average]
[info]   (min, avg, max) = (4807628.541, 4882325.120, 4909982.580), stdev = 43410.729
[info]   CI (99.9%): [4715165.861, 5049484.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate":
[info]   223.340 ±(99.9%) 7.554 MB/sec [Average]
[info]   (min, avg, max) = (219.970, 223.340, 224.563), stdev = 1.962
[info]   CI (99.9%): [215.786, 230.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.111 ±(99.9%) 579.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.111, 336.464), stdev = 150.438
[info]   CI (99.9%): [≈ 0, 848.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   86.869 ±(99.9%) 187.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.869, 110.131), stdev = 48.570
[info]   CI (99.9%): [≈ 0, 273.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay
[info] # Run progress: 21.43% complete, ETA 00:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55958.228 ops/s
[info] # Warmup Iteration   2: 156763.564 ops/s
[info] # Warmup Iteration   3: 157272.970 ops/s
[info] # Warmup Iteration   4: 159511.175 ops/s
[info] # Warmup Iteration   5: 156732.266 ops/s
[info] Iteration   1: 158418.819 ops/s
[info]                  ·gc.alloc.rate:            875.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       8704.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6684.224 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 158948.654 ops/s
[info]                  ·gc.alloc.rate:                   878.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10025.573 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 160310.496 ops/s
[info]                  ·gc.alloc.rate:                                  886.512 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8704.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.167 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.636 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10025.052 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 161904.082 ops/s
[info]                  ·gc.alloc.rate:            895.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       8704.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6617.868 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 161279.160 ops/s
[info]                  ·gc.alloc.rate:            891.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       8704.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9965.141 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay":
[info]   160172.242 ±(99.9%) 5716.395 ops/s [Average]
[info]   (min, avg, max) = (158418.819, 160172.242, 161904.082), stdev = 1484.530
[info]   CI (99.9%): [154455.847, 165888.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate":
[info]   885.710 ±(99.9%) 31.692 MB/sec [Average]
[info]   (min, avg, max) = (875.987, 885.710, 895.318), stdev = 8.230
[info]   CI (99.9%): [854.018, 917.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm":
[info]   8704.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8704.003, 8704.003, 8704.003), stdev = 0.001
[info]   CI (99.9%): [8704.002, 8704.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.167), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.327 ±(99.9%) 2.817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.327, 1.636), stdev = 0.732
[info]   CI (99.9%): [≈ 0, 3.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen":
[info]   881.581 ±(99.9%) 720.319 MB/sec [Average]
[info]   (min, avg, max) = (672.713, 881.581, 1021.063), stdev = 187.065
[info]   CI (99.9%): [161.262, 1601.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8663.572 ±(99.9%) 7075.521 B/op [Average]
[info]   (min, avg, max) = (6617.868, 8663.572, 10025.573), stdev = 1837.490
[info]   CI (99.9%): [1588.051, 15739.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.915 ±(99.9%) 68.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.915, 39.575), stdev = 17.698
[info]   CI (99.9%): [≈ 0, 76.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 17.000), stdev = 6.285
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce
[info] # Run progress: 22.32% complete, ETA 00:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2965.915 ops/s
[info] # Warmup Iteration   2: 4263.929 ops/s
[info] # Warmup Iteration   3: 4470.476 ops/s
[info] # Warmup Iteration   4: 4517.640 ops/s
[info] # Warmup Iteration   5: 4498.433 ops/s
[info] Iteration   1: 4553.358 ops/s
[info]                  ·gc.alloc.rate:                                  1095.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 62.860 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       468693.905 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1611.423 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 4593.520 ops/s
[info]                  ·gc.alloc.rate:            1105.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       378808.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 349829.599 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 4609.522 ops/s
[info]                  ·gc.alloc.rate:                                  1109.441 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.542 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       348615.703 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4552.273 ops/s
[info]                  ·gc.alloc.rate:            1095.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       378808.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 352979.141 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 4568.502 ops/s
[info]                  ·gc.alloc.rate:                                  1099.824 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.096 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 31.408 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       468991.104 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce":
[info]   4575.435 ±(99.9%) 97.432 ops/s [Average]
[info]   (min, avg, max) = (4552.273, 4575.435, 4609.522), stdev = 25.303
[info]   CI (99.9%): [4478.003, 4672.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1101.282 ±(99.9%) 23.323 MB/sec [Average]
[info]   (min, avg, max) = (1095.718, 1101.282, 1109.441), stdev = 6.057
[info]   CI (99.9%): [1077.959, 1124.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   378808.092 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (378808.088, 378808.092, 378808.096), stdev = 0.004
[info]   CI (99.9%): [378808.077, 378808.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.063 ±(99.9%) 0.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.182), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   21.562 ±(99.9%) 101.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.562, 62.860), stdev = 26.442
[info]   CI (99.9%): [≈ 0, 123.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1156.104 ±(99.9%) 712.157 MB/sec [Average]
[info]   (min, avg, max) = (1020.959, 1156.104, 1361.660), stdev = 184.945
[info]   CI (99.9%): [443.947, 1868.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   397821.890 ±(99.9%) 249723.094 B/op [Average]
[info]   (min, avg, max) = (348615.703, 397821.890, 468991.104), stdev = 64852.294
[info]   CI (99.9%): [148098.796, 647544.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   322.285 ±(99.9%) 2774.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 322.285, 1611.423), stdev = 720.650
[info]   CI (99.9%): [≈ 0, 3097.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson
[info] # Run progress: 23.21% complete, ETA 00:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5587.589 ops/s
[info] # Warmup Iteration   2: 9029.673 ops/s
[info] # Warmup Iteration   3: 9172.089 ops/s
[info] # Warmup Iteration   4: 9035.904 ops/s
[info] # Warmup Iteration   5: 9097.914 ops/s
[info] Iteration   1: 9181.317 ops/s
[info]                  ·gc.alloc.rate:      232.656 MB/sec
[info]                  ·gc.alloc.rate.norm: 39888.051 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9093.556 ops/s
[info]                  ·gc.alloc.rate:            230.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58100.517 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 9027.580 ops/s
[info]                  ·gc.alloc.rate:                   228.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        58525.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 116.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9144.241 ops/s
[info]                  ·gc.alloc.rate:      231.742 MB/sec
[info]                  ·gc.alloc.rate.norm: 39888.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9137.166 ops/s
[info]                  ·gc.alloc.rate:            231.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57941.884 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson":
[info]   9116.772 ±(99.9%) 226.426 ops/s [Average]
[info]   (min, avg, max) = (9027.580, 9116.772, 9181.317), stdev = 58.802
[info]   CI (99.9%): [8890.346, 9343.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   231.035 ±(99.9%) 5.711 MB/sec [Average]
[info]   (min, avg, max) = (228.787, 231.035, 232.656), stdev = 1.483
[info]   CI (99.9%): [225.325, 236.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   39888.047 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (39888.045, 39888.047, 39888.051), stdev = 0.003
[info]   CI (99.9%): [39888.035, 39888.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   201.539 ±(99.9%) 708.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.539, 336.352), stdev = 183.980
[info]   CI (99.9%): [≈ 0, 909.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   34913.515 ±(99.9%) 122728.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34913.515, 58525.172), stdev = 31872.246
[info]   CI (99.9%): [≈ 0, 157642.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   23.224 ±(99.9%) 199.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.224, 116.121), stdev = 51.931
[info]   CI (99.9%): [≈ 0, 223.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 8.000), stdev = 3.742
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter
[info] # Run progress: 24.11% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12444.050 ops/s
[info] # Warmup Iteration   2: 17304.919 ops/s
[info] # Warmup Iteration   3: 17341.271 ops/s
[info] # Warmup Iteration   4: 17285.439 ops/s
[info] # Warmup Iteration   5: 17361.918 ops/s
[info] Iteration   1: 17320.535 ops/s
[info]                  ·gc.alloc.rate:            295.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30566.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 17444.392 ops/s
[info]                  ·gc.alloc.rate:      298.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 26896.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17406.998 ops/s
[info]                  ·gc.alloc.rate:            297.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30415.329 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 17319.478 ops/s
[info]                  ·gc.alloc.rate:            295.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30568.082 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 17388.481 ops/s
[info]                  ·gc.alloc.rate:            297.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30448.558 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter":
[info]   17375.977 ±(99.9%) 211.481 ops/s [Average]
[info]   (min, avg, max) = (17319.478, 17375.977, 17444.392), stdev = 54.921
[info]   CI (99.9%): [17164.496, 17587.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   296.884 ±(99.9%) 3.675 MB/sec [Average]
[info]   (min, avg, max) = (295.905, 296.884, 298.090), stdev = 0.954
[info]   CI (99.9%): [293.209, 300.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   26896.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (26896.023, 26896.025, 26896.029), stdev = 0.003
[info]   CI (99.9%): [26896.015, 26896.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.054 ±(99.9%) 579.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.054, 336.355), stdev = 150.406
[info]   CI (99.9%): [≈ 0, 848.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   24399.657 ±(99.9%) 52522.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24399.657, 30568.082), stdev = 13639.996
[info]   CI (99.9%): [≈ 0, 76922.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay
[info] # Run progress: 25.00% complete, ETA 00:22:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 756.915 ops/s
[info] # Warmup Iteration   2: 1698.090 ops/s
[info] # Warmup Iteration   3: 1688.162 ops/s
[info] # Warmup Iteration   4: 1709.471 ops/s
[info] # Warmup Iteration   5: 1703.142 ops/s
[info] Iteration   1: 1733.394 ops/s
[info]                  ·gc.alloc.rate:                                  1082.656 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.235 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.762 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       922795.257 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3628.291 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1752.908 ops/s
[info]                  ·gc.alloc.rate:                                  1095.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.233 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.325 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       916457.815 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1757.255 ops/s
[info]                  ·gc.alloc.rate:                                  1097.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.232 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 47.736 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       914372.587 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1755.976 ops/s
[info]                  ·gc.alloc.rate:            1096.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       982976.250 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1219857.339 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1594.950 ops/s
[info]                  ·gc.alloc.rate:            996.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       982976.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 671456.561 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay":
[info]   1718.897 ±(99.9%) 269.379 ops/s [Average]
[info]   (min, avg, max) = (1594.950, 1718.897, 1757.255), stdev = 69.957
[info]   CI (99.9%): [1449.518, 1988.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1073.645 ±(99.9%) 168.346 MB/sec [Average]
[info]   (min, avg, max) = (996.188, 1073.645, 1097.471), stdev = 43.719
[info]   CI (99.9%): [905.299, 1241.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   982976.241 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (982976.232, 982976.241, 982976.256), stdev = 0.011
[info]   CI (99.9%): [982976.199, 982976.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.053), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   16.165 ±(99.9%) 75.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.165, 47.736), stdev = 19.510
[info]   CI (99.9%): [≈ 0, 91.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1019.971 ±(99.9%) 926.722 MB/sec [Average]
[info]   (min, avg, max) = (680.482, 1019.971, 1361.166), stdev = 240.667
[info]   CI (99.9%): [93.250, 1946.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   928987.912 ±(99.9%) 748988.304 B/op [Average]
[info]   (min, avg, max) = (671456.561, 928987.912, 1219857.339), stdev = 194509.884
[info]   CI (99.9%): [179999.608, 1677976.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   725.658 ±(99.9%) 6248.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 725.658, 3628.291), stdev = 1622.621
[info]   CI (99.9%): [≈ 0, 6973.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter
[info] # Run progress: 25.89% complete, ETA 00:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3070346.486 ops/s
[info] # Warmup Iteration   2: 3459813.006 ops/s
[info] # Warmup Iteration   3: 3445717.709 ops/s
[info] # Warmup Iteration   4: 3430224.028 ops/s
[info] # Warmup Iteration   5: 3460002.588 ops/s
[info] Iteration   1: 3502938.010 ops/s
[info]                  ·gc.alloc.rate:                                  1050.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.152 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       458.807 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 3528231.253 ops/s
[info]                  ·gc.alloc.rate:                                  1058.011 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       455.540 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 3549896.783 ops/s
[info]                  ·gc.alloc.rate:            1064.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 452.733 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3543025.872 ops/s
[info]                  ·gc.alloc.rate:            1062.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 453.619 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 3542842.632 ops/s
[info]                  ·gc.alloc.rate:            1062.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 453.652 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter":
[info]   3533386.910 ±(99.9%) 72260.196 ops/s [Average]
[info]   (min, avg, max) = (3502938.010, 3533386.910, 3549896.783), stdev = 18765.743
[info]   CI (99.9%): [3461126.714, 3605647.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   1059.527 ±(99.9%) 21.708 MB/sec [Average]
[info]   (min, avg, max) = (1050.371, 1059.527, 1064.505), stdev = 5.637
[info]   CI (99.9%): [1037.820, 1081.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.152), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   1021.051 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (1021.007, 1021.051, 1021.115), stdev = 0.044
[info]   CI (99.9%): [1020.880, 1021.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   454.870 ±(99.9%) 9.347 B/op [Average]
[info]   (min, avg, max) = (452.733, 454.870, 458.807), stdev = 2.427
[info]   CI (99.9%): [445.524, 464.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay
[info] # Run progress: 26.79% complete, ETA 00:22:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107054.024 ops/s
[info] # Warmup Iteration   2: 182431.609 ops/s
[info] # Warmup Iteration   3: 184009.409 ops/s
[info] # Warmup Iteration   4: 183300.371 ops/s
[info] # Warmup Iteration   5: 183534.785 ops/s
[info] Iteration   1: 183299.237 ops/s
[info]                  ·gc.alloc.rate:                                  1051.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9032.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8728.362 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                34.319 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 185488.782 ops/s
[info]                  ·gc.alloc.rate:                                  1064.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9032.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8664.656 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 185366.921 ops/s
[info]                  ·gc.alloc.rate:            1063.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       9032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8670.077 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 185345.878 ops/s
[info]                  ·gc.alloc.rate:            1063.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       9032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8671.293 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 185366.513 ops/s
[info]                  ·gc.alloc.rate:                                  1063.604 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9032.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11560.540 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay":
[info]   184973.466 ±(99.9%) 3610.467 ops/s [Average]
[info]   (min, avg, max) = (183299.237, 184973.466, 185488.782), stdev = 937.627
[info]   CI (99.9%): [181363.000, 188583.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate":
[info]   1061.325 ±(99.9%) 20.809 MB/sec [Average]
[info]   (min, avg, max) = (1051.669, 1061.325, 1064.195), stdev = 5.404
[info]   CI (99.9%): [1040.516, 1082.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   9032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9032.002, 9032.002, 9032.002), stdev = 0.001
[info]   CI (99.9%): [9032.002, 9032.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.039), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.119 ±(99.9%) 0.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.331), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1088.130 ±(99.9%) 588.208 MB/sec [Average]
[info]   (min, avg, max) = (1016.314, 1088.130, 1361.364), stdev = 152.756
[info]   CI (99.9%): [499.922, 1676.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9258.986 ±(99.9%) 4955.277 B/op [Average]
[info]   (min, avg, max) = (8664.656, 9258.986, 11560.540), stdev = 1286.870
[info]   CI (99.9%): [4303.709, 14214.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.864 ±(99.9%) 59.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.864, 34.319), stdev = 15.348
[info]   CI (99.9%): [≈ 0, 65.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.280
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce
[info] # Run progress: 27.68% complete, ETA 00:22:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287510.085 ops/s
[info] # Warmup Iteration   2: 441655.063 ops/s
[info] # Warmup Iteration   3: 452729.257 ops/s
[info] # Warmup Iteration   4: 453415.404 ops/s
[info] # Warmup Iteration   5: 469677.072 ops/s
[info] Iteration   1: 469919.774 ops/s
[info]                  ·gc.alloc.rate:                                  1698.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5700.383 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 468914.865 ops/s
[info]                  ·gc.alloc.rate:            1694.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5712.599 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 464959.650 ops/s
[info]                  ·gc.alloc.rate:                                  1680.560 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5760.948 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 463421.681 ops/s
[info]                  ·gc.alloc.rate:                                  1675.024 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5780.301 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 470598.153 ops/s
[info]                  ·gc.alloc.rate:                                  1701.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5692.184 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce":
[info]   467562.825 ±(99.9%) 12256.007 ops/s [Average]
[info]   (min, avg, max) = (463421.681, 467562.825, 470598.153), stdev = 3182.846
[info]   CI (99.9%): [455306.818, 479818.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate":
[info]   1689.900 ±(99.9%) 44.134 MB/sec [Average]
[info]   (min, avg, max) = (1675.024, 1689.900, 1701.125), stdev = 11.461
[info]   CI (99.9%): [1645.766, 1734.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.027), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1702.102 ±(99.9%) 0.775 MB/sec [Average]
[info]   (min, avg, max) = (1701.901, 1702.102, 1702.376), stdev = 0.201
[info]   CI (99.9%): [1701.326, 1702.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5729.283 ±(99.9%) 150.316 B/op [Average]
[info]   (min, avg, max) = (5692.184, 5729.283, 5780.301), stdev = 39.037
[info]   CI (99.9%): [5578.967, 5879.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson
[info] # Run progress: 28.57% complete, ETA 00:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250144.050 ops/s
[info] # Warmup Iteration   2: 460690.721 ops/s
[info] # Warmup Iteration   3: 464987.617 ops/s
[info] # Warmup Iteration   4: 470372.480 ops/s
[info] # Warmup Iteration   5: 464728.714 ops/s
[info] Iteration   1: 468226.159 ops/s
[info]                  ·gc.alloc.rate:            544.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2256.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 470357.089 ops/s
[info]                  ·gc.alloc.rate:            547.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1123.388 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 465445.646 ops/s
[info]                  ·gc.alloc.rate:            541.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2270.425 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 470450.892 ops/s
[info]                  ·gc.alloc.rate:            547.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1123.188 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 463712.783 ops/s
[info]                  ·gc.alloc.rate:                   539.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2278.933 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson":
[info]   467638.514 ±(99.9%) 11530.329 ops/s [Average]
[info]   (min, avg, max) = (463712.783, 467638.514, 470450.892), stdev = 2994.390
[info]   CI (99.9%): [456108.185, 479168.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate":
[info]   544.266 ±(99.9%) 13.397 MB/sec [Average]
[info]   (min, avg, max) = (539.727, 544.266, 547.655), stdev = 3.479
[info]   CI (99.9%): [530.869, 557.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   537.092 ±(99.9%) 707.957 MB/sec [Average]
[info]   (min, avg, max) = (335.617, 537.092, 671.398), stdev = 183.854
[info]   CI (99.9%): [≈ 0, 1245.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1810.586 ±(99.9%) 2416.137 B/op [Average]
[info]   (min, avg, max) = (1123.188, 1810.586, 2278.933), stdev = 627.463
[info]   CI (99.9%): [≈ 0, 4226.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.261 ±(99.9%) 19.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.261, 11.304), stdev = 5.055
[info]   CI (99.9%): [≈ 0, 21.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter
[info] # Run progress: 29.46% complete, ETA 00:21:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2582039.636 ops/s
[info] # Warmup Iteration   2: 2930818.404 ops/s
[info] # Warmup Iteration   3: 2913665.682 ops/s
[info] # Warmup Iteration   4: 2946634.181 ops/s
[info] # Warmup Iteration   5: 2684265.152 ops/s
[info] Iteration   1: 2990599.025 ops/s
[info]                  ·gc.alloc.rate:                                  1185.448 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.167 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       716.555 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 3022408.550 ops/s
[info]                  ·gc.alloc.rate:            1198.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 531.759 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2997503.550 ops/s
[info]                  ·gc.alloc.rate:            1188.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 714.893 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2980148.778 ops/s
[info]                  ·gc.alloc.rate:            1181.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 539.309 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2988468.754 ops/s
[info]                  ·gc.alloc.rate:            1184.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 717.057 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter":
[info]   2995825.731 ±(99.9%) 61990.337 ops/s [Average]
[info]   (min, avg, max) = (2980148.778, 2995825.731, 3022408.550), stdev = 16098.694
[info]   CI (99.9%): [2933835.394, 3057816.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate":
[info]   1187.582 ±(99.9%) 24.699 MB/sec [Average]
[info]   (min, avg, max) = (1181.478, 1187.582, 1198.229), stdev = 6.414
[info]   CI (99.9%): [1162.883, 1212.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.167), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1225.198 ±(99.9%) 717.384 MB/sec [Average]
[info]   (min, avg, max) = (1021.104, 1225.198, 1361.279), stdev = 186.302
[info]   CI (99.9%): [507.814, 1942.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   643.914 ±(99.9%) 381.124 B/op [Average]
[info]   (min, avg, max) = (531.759, 643.914, 717.057), stdev = 98.977
[info]   CI (99.9%): [262.791, 1025.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay
[info] # Run progress: 30.36% complete, ETA 00:21:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52257.485 ops/s
[info] # Warmup Iteration   2: 135543.226 ops/s
[info] # Warmup Iteration   3: 135295.100 ops/s
[info] # Warmup Iteration   4: 137978.027 ops/s
[info] # Warmup Iteration   5: 135691.113 ops/s
[info] Iteration   1: 126488.623 ops/s
[info]                  ·gc.alloc.rate:                   878.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12557.350 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.443 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 137389.675 ops/s
[info]                  ·gc.alloc.rate:                   954.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7790.913 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 138454.279 ops/s
[info]                  ·gc.alloc.rate:                                  961.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10936.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.322 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11607.769 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 139256.979 ops/s
[info]                  ·gc.alloc.rate:            967.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11540.931 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 139242.890 ops/s
[info]                  ·gc.alloc.rate:                                  967.462 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10936.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11542.257 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay":
[info]   136166.489 ±(99.9%) 21038.636 ops/s [Average]
[info]   (min, avg, max) = (126488.623, 136166.489, 139256.979), stdev = 5463.667
[info]   CI (99.9%): [115127.853, 157205.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate":
[info]   946.071 ±(99.9%) 146.189 MB/sec [Average]
[info]   (min, avg, max) = (878.818, 946.071, 967.538), stdev = 37.965
[info]   CI (99.9%): [799.882, 1092.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm":
[info]   10936.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10936.003, 10936.003, 10936.003), stdev = 0.001
[info]   CI (99.9%): [10936.002, 10936.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.322), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   950.468 ±(99.9%) 582.343 MB/sec [Average]
[info]   (min, avg, max) = (680.093, 950.468, 1021.095), stdev = 151.233
[info]   CI (99.9%): [368.125, 1532.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   11007.844 ±(99.9%) 7120.907 B/op [Average]
[info]   (min, avg, max) = (7790.913, 11007.844, 12557.350), stdev = 1849.277
[info]   CI (99.9%): [3886.937, 18128.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.815 ±(99.9%) 69.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.815, 41.443), stdev = 17.987
[info]   CI (99.9%): [≈ 0, 79.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 18.000), stdev = 6.164
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce
[info] # Run progress: 31.25% complete, ETA 00:21:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206834.772 ops/s
[info] # Warmup Iteration   2: 376327.661 ops/s
[info] # Warmup Iteration   3: 382121.750 ops/s
[info] # Warmup Iteration   4: 386284.174 ops/s
[info] # Warmup Iteration   5: 390211.439 ops/s
[info] Iteration   1: 390373.848 ops/s
[info]                  ·gc.alloc.rate:                                  1356.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5489.421 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 400297.162 ops/s
[info]                  ·gc.alloc.rate:                                  1391.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5353.258 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 400679.959 ops/s
[info]                  ·gc.alloc.rate:                                  1392.983 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5348.115 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 396516.013 ops/s
[info]                  ·gc.alloc.rate:                                  1378.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5404.418 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 402293.979 ops/s
[info]                  ·gc.alloc.rate:                                  1398.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5326.742 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce":
[info]   398032.192 ±(99.9%) 18391.876 ops/s [Average]
[info]   (min, avg, max) = (390373.848, 398032.192, 402293.979), stdev = 4776.312
[info]   CI (99.9%): [379640.317, 416424.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate":
[info]   1383.657 ±(99.9%) 63.999 MB/sec [Average]
[info]   (min, avg, max) = (1356.958, 1383.657, 1398.337), stdev = 16.620
[info]   CI (99.9%): [1319.658, 1447.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.010, 0.019), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen":
[info]   1361.345 ±(99.9%) 0.371 MB/sec [Average]
[info]   (min, avg, max) = (1361.217, 1361.345, 1361.446), stdev = 0.096
[info]   CI (99.9%): [1360.974, 1361.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5384.391 ±(99.9%) 251.332 B/op [Average]
[info]   (min, avg, max) = (5326.742, 5384.391, 5489.421), stdev = 65.270
[info]   CI (99.9%): [5133.058, 5635.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 10.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson
[info] # Run progress: 32.14% complete, ETA 00:20:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351895.097 ops/s
[info] # Warmup Iteration   2: 741919.320 ops/s
[info] # Warmup Iteration   3: 737664.897 ops/s
[info] # Warmup Iteration   4: 740507.451 ops/s
[info] # Warmup Iteration   5: 743010.696 ops/s
[info] Iteration   1: 737235.096 ops/s
[info]                  ·gc.alloc.rate:            869.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2151.580 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 743690.237 ops/s
[info]                  ·gc.alloc.rate:                   876.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1429.402 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.868 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 738335.186 ops/s
[info]                  ·gc.alloc.rate:                                  870.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2176.706 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 743684.208 ops/s
[info]                  ·gc.alloc.rate:                                  876.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2161.152 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 743896.083 ops/s
[info]                  ·gc.alloc.rate:                                  877.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1440.365 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson":
[info]   741368.162 ±(99.9%) 12687.808 ops/s [Average]
[info]   (min, avg, max) = (737235.096, 741368.162, 743896.083), stdev = 3294.983
[info]   CI (99.9%): [728680.355, 754055.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate":
[info]   874.207 ±(99.9%) 15.045 MB/sec [Average]
[info]   (min, avg, max) = (869.293, 874.207, 877.189), stdev = 3.907
[info]   CI (99.9%): [859.162, 889.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.000, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.132), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen":
[info]   881.219 ±(99.9%) 714.447 MB/sec [Average]
[info]   (min, avg, max) = (675.389, 881.219, 1021.159), stdev = 185.540
[info]   CI (99.9%): [166.772, 1595.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1871.841 ±(99.9%) 1536.428 B/op [Average]
[info]   (min, avg, max) = (1429.402, 1871.841, 2176.706), stdev = 399.005
[info]   CI (99.9%): [335.413, 3408.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.974 ±(99.9%) 16.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.974, 9.868), stdev = 4.413
[info]   CI (99.9%): [≈ 0, 18.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 19.000), stdev = 6.686
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter
[info] # Run progress: 33.04% complete, ETA 00:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3289227.302 ops/s
[info] # Warmup Iteration   2: 3576742.458 ops/s
[info] # Warmup Iteration   3: 3640256.947 ops/s
[info] # Warmup Iteration   4: 3608062.292 ops/s
[info] # Warmup Iteration   5: 3591418.497 ops/s
[info] Iteration   1: 3587721.609 ops/s
[info]                  ·gc.alloc.rate:                   893.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        295.142 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3634072.361 ops/s
[info]                  ·gc.alloc.rate:                                  904.788 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       442.264 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3649317.906 ops/s
[info]                  ·gc.alloc.rate:            908.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 440.408 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3639187.229 ops/s
[info]                  ·gc.alloc.rate:            906.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 294.429 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3641746.623 ops/s
[info]                  ·gc.alloc.rate:                                  906.943 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       441.341 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter":
[info]   3630409.145 ±(99.9%) 94297.137 ops/s [Average]
[info]   (min, avg, max) = (3587721.609, 3630409.145, 3649317.906), stdev = 24488.667
[info]   CI (99.9%): [3536112.008, 3724706.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate":
[info]   904.013 ±(99.9%) 23.462 MB/sec [Average]
[info]   (min, avg, max) = (893.410, 904.013, 908.711), stdev = 6.093
[info]   CI (99.9%): [880.550, 927.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   883.228 ±(99.9%) 726.215 MB/sec [Average]
[info]   (min, avg, max) = (672.661, 883.228, 1021.100), stdev = 188.596
[info]   CI (99.9%): [157.012, 1609.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   382.717 ±(99.9%) 309.102 B/op [Average]
[info]   (min, avg, max) = (294.429, 382.717, 442.264), stdev = 80.273
[info]   CI (99.9%): [73.614, 691.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.351 ±(99.9%) 3.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.351, 1.753), stdev = 0.784
[info]   CI (99.9%): [≈ 0, 3.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.271
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay
[info] # Run progress: 33.93% complete, ETA 00:20:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105009.296 ops/s
[info] # Warmup Iteration   2: 188319.397 ops/s
[info] # Warmup Iteration   3: 189456.274 ops/s
[info] # Warmup Iteration   4: 190182.314 ops/s
[info] # Warmup Iteration   5: 188551.107 ops/s
[info] Iteration   1: 190096.439 ops/s
[info]                  ·gc.alloc.rate:                                  1032.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8416.095 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                33.091 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 192233.261 ops/s
[info]                  ·gc.alloc.rate:                                  1044.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8360.641 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 193079.634 ops/s
[info]                  ·gc.alloc.rate:            1048.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       8552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8323.971 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 189661.010 ops/s
[info]                  ·gc.alloc.rate:                                  1030.509 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8473.822 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 193160.961 ops/s
[info]                  ·gc.alloc.rate:                                  1049.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8320.610 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay":
[info]   191646.261 ±(99.9%) 6396.188 ops/s [Average]
[info]   (min, avg, max) = (189661.010, 191646.261, 193160.961), stdev = 1661.070
[info]   CI (99.9%): [185250.073, 198042.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate":
[info]   1041.205 ±(99.9%) 34.716 MB/sec [Average]
[info]   (min, avg, max) = (1030.509, 1041.205, 1049.425), stdev = 9.016
[info]   CI (99.9%): [1006.490, 1075.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm":
[info]   8552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8552.002, 8552.002, 8552.002), stdev = 0.001
[info]   CI (99.9%): [8552.002, 8552.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.111 ±(99.9%) 0.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.380), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1020.092 ±(99.9%) 8.214 MB/sec [Average]
[info]   (min, avg, max) = (1016.277, 1020.092, 1021.089), stdev = 2.133
[info]   CI (99.9%): [1011.878, 1028.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8379.028 ±(99.9%) 252.076 B/op [Average]
[info]   (min, avg, max) = (8320.610, 8379.028, 8473.822), stdev = 65.463
[info]   CI (99.9%): [8126.952, 8631.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.618 ±(99.9%) 56.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.618, 33.091), stdev = 14.799
[info]   CI (99.9%): [≈ 0, 63.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce
[info] # Run progress: 34.82% complete, ETA 00:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292460.683 ops/s
[info] # Warmup Iteration   2: 466410.578 ops/s
[info] # Warmup Iteration   3: 467246.849 ops/s
[info] # Warmup Iteration   4: 481628.346 ops/s
[info] # Warmup Iteration   5: 484172.133 ops/s
[info] Iteration   1: 483464.176 ops/s
[info]                  ·gc.alloc.rate:                                  1847.499 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6648.525 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 485545.578 ops/s
[info]                  ·gc.alloc.rate:                                  1855.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5516.639 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 479901.466 ops/s
[info]                  ·gc.alloc.rate:            1834.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6697.933 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 481511.420 ops/s
[info]                  ·gc.alloc.rate:                                  1840.564 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5562.893 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 479669.810 ops/s
[info]                  ·gc.alloc.rate:                                  1833.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6701.102 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce":
[info]   482018.490 ±(99.9%) 9585.236 ops/s [Average]
[info]   (min, avg, max) = (479669.810, 482018.490, 485545.578), stdev = 2489.255
[info]   CI (99.9%): [472433.255, 491603.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate":
[info]   1842.284 ±(99.9%) 36.305 MB/sec [Average]
[info]   (min, avg, max) = (1833.298, 1842.284, 1855.744), stdev = 9.428
[info]   CI (99.9%): [1805.979, 1878.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1905.941 ±(99.9%) 717.505 MB/sec [Average]
[info]   (min, avg, max) = (1701.707, 1905.941, 2042.239), stdev = 186.334
[info]   CI (99.9%): [1188.435, 2623.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6225.418 ±(99.9%) 2412.322 B/op [Average]
[info]   (min, avg, max) = (5516.639, 6225.418, 6701.102), stdev = 626.472
[info]   CI (99.9%): [3813.096, 8637.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 10.000), stdev = 2.191
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter
[info] # Run progress: 35.71% complete, ETA 00:19:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2230757.740 ops/s
[info] # Warmup Iteration   2: 2597911.417 ops/s
[info] # Warmup Iteration   3: 2574359.038 ops/s
[info] # Warmup Iteration   4: 2657097.030 ops/s
[info] # Warmup Iteration   5: 2673579.154 ops/s
[info] Iteration   1: 2669520.365 ops/s
[info]                  ·gc.alloc.rate:                                  1722.895 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1003.427 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 2651864.428 ops/s
[info]                  ·gc.alloc.rate:                                  1711.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1010.081 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 2678321.940 ops/s
[info]                  ·gc.alloc.rate:                                  1729.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1000.126 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 2667896.072 ops/s
[info]                  ·gc.alloc.rate:                                  1722.096 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1004.021 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 2652468.986 ops/s
[info]                  ·gc.alloc.rate:            1712.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1009.855 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter":
[info]   2664014.358 ±(99.9%) 44366.335 ops/s [Average]
[info]   (min, avg, max) = (2651864.428, 2664014.358, 2678321.940), stdev = 11521.796
[info]   CI (99.9%): [2619648.023, 2708380.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate":
[info]   1719.569 ±(99.9%) 28.813 MB/sec [Average]
[info]   (min, avg, max) = (1711.652, 1719.569, 1729.019), stdev = 7.483
[info]   CI (99.9%): [1690.757, 1748.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1701.776 ±(99.9%) 0.623 MB/sec [Average]
[info]   (min, avg, max) = (1701.574, 1701.776, 1702.004), stdev = 0.162
[info]   CI (99.9%): [1701.153, 1702.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1005.502 ±(99.9%) 16.710 B/op [Average]
[info]   (min, avg, max) = (1000.126, 1005.502, 1010.081), stdev = 4.339
[info]   CI (99.9%): [988.792, 1022.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 10.000), stdev = 1.673
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay
[info] # Run progress: 36.61% complete, ETA 00:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41523.677 ops/s
[info] # Warmup Iteration   2: 124189.342 ops/s
[info] # Warmup Iteration   3: 126316.494 ops/s
[info] # Warmup Iteration   4: 127499.061 ops/s
[info] # Warmup Iteration   5: 128410.093 ops/s
[info] Iteration   1: 127888.684 ops/s
[info]                  ·gc.alloc.rate:            921.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12419.515 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 128620.334 ops/s
[info]                  ·gc.alloc.rate:                                  926.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.181 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12438.121 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                48.905 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 129764.510 ops/s
[info]                  ·gc.alloc.rate:                                  935.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11344.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.334 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12384.374 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 130326.840 ops/s
[info]                  ·gc.alloc.rate:            939.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8221.602 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 127533.498 ops/s
[info]                  ·gc.alloc.rate:            919.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       11344.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12601.753 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay":
[info]   128826.773 ±(99.9%) 4606.608 ops/s [Average]
[info]   (min, avg, max) = (127533.498, 128826.773, 130326.840), stdev = 1196.321
[info]   CI (99.9%): [124220.165, 133433.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate":
[info]   928.520 ±(99.9%) 33.197 MB/sec [Average]
[info]   (min, avg, max) = (919.163, 928.520, 939.415), stdev = 8.621
[info]   CI (99.9%): [895.323, 961.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   11344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11344.003, 11344.003, 11344.003), stdev = 0.001
[info]   CI (99.9%): [11344.003, 11344.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.181), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.509 ±(99.9%) 3.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.509, 2.213), stdev = 0.963
[info]   CI (99.9%): [≈ 0, 4.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   949.702 ±(99.9%) 579.033 MB/sec [Average]
[info]   (min, avg, max) = (680.844, 949.702, 1021.074), stdev = 150.373
[info]   CI (99.9%): [370.669, 1528.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   11613.073 ±(99.9%) 7307.485 B/op [Average]
[info]   (min, avg, max) = (8221.602, 11613.073, 12601.753), stdev = 1897.731
[info]   CI (99.9%): [4305.588, 18920.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.781 ±(99.9%) 84.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.781, 48.905), stdev = 21.871
[info]   CI (99.9%): [≈ 0, 93.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 17.000), stdev = 5.683
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson
[info] # Run progress: 37.50% complete, ETA 00:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110099.404 ops/s
[info] # Warmup Iteration   2: 596050.577 ops/s
[info] # Warmup Iteration   3: 584316.808 ops/s
[info] # Warmup Iteration   4: 594800.219 ops/s
[info] # Warmup Iteration   5: 597526.338 ops/s
[info] Iteration   1: 592731.825 ops/s
[info]                  ·gc.alloc.rate:            768.174 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1782.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 593681.431 ops/s
[info]                  ·gc.alloc.rate:            769.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2670.047 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 601510.331 ops/s
[info]                  ·gc.alloc.rate:                   779.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1767.301 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 607726.380 ops/s
[info]                  ·gc.alloc.rate:                                  786.622 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.253 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.656 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            679.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1763.058 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 599578.579 ops/s
[info]                  ·gc.alloc.rate:                                  777.149 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2680.608 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson":
[info]   599045.709 ±(99.9%) 23608.010 ops/s [Average]
[info]   (min, avg, max) = (592731.825, 599045.709, 607726.380), stdev = 6130.925
[info]   CI (99.9%): [575437.699, 622653.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate":
[info]   776.210 ±(99.9%) 29.288 MB/sec [Average]
[info]   (min, avg, max) = (768.174, 776.210, 786.622), stdev = 7.606
[info]   CI (99.9%): [746.922, 805.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2040.001, 2040.001, 2040.001), stdev = 0.001
[info]   CI (99.9%): [2040.001, 2040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.051 ±(99.9%) 0.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.253), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.133 ±(99.9%) 1.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.656), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   810.985 ±(99.9%) 714.477 MB/sec [Average]
[info]   (min, avg, max) = (671.377, 810.985, 1021.192), stdev = 185.547
[info]   CI (99.9%): [96.509, 1525.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2132.791 ±(99.9%) 1907.358 B/op [Average]
[info]   (min, avg, max) = (1763.058, 2132.791, 2680.608), stdev = 495.335
[info]   CI (99.9%): [225.434, 4040.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.440 ±(99.9%) 21.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.440, 12.200), stdev = 5.456
[info]   CI (99.9%): [≈ 0, 23.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 19.000), stdev = 6.723
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter
[info] # Run progress: 38.39% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2104194.624 ops/s
[info] # Warmup Iteration   2: 1376042.069 ops/s
[info] # Warmup Iteration   3: 1622938.707 ops/s
[info] # Warmup Iteration   4: 1635791.984 ops/s
[info] # Warmup Iteration   5: 1637463.773 ops/s
[info] Iteration   1: 1627697.218 ops/s
[info]                  ·gc.alloc.rate:            769.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 975.832 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 1652862.566 ops/s
[info]                  ·gc.alloc.rate:                   781.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        643.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1650212.461 ops/s
[info]                  ·gc.alloc.rate:                                  779.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       649.313 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1661442.299 ops/s
[info]                  ·gc.alloc.rate:            785.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 967.252 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1666280.910 ops/s
[info]                  ·gc.alloc.rate:            787.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 643.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter":
[info]   1651699.091 ±(99.9%) 57347.879 ops/s [Average]
[info]   (min, avg, max) = (1627697.218, 1651699.091, 1666280.910), stdev = 14893.062
[info]   CI (99.9%): [1594351.212, 1709046.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate":
[info]   780.705 ±(99.9%) 26.985 MB/sec [Average]
[info]   (min, avg, max) = (769.408, 780.705, 787.572), stdev = 7.008
[info]   CI (99.9%): [753.719, 807.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.123), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.023 ±(99.9%) 0.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   813.514 ±(99.9%) 708.560 MB/sec [Average]
[info]   (min, avg, max) = (676.117, 813.514, 1020.895), stdev = 184.011
[info]   CI (99.9%): [104.954, 1522.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   775.853 ±(99.9%) 688.036 B/op [Average]
[info]   (min, avg, max) = (643.038, 775.853, 975.832), stdev = 178.681
[info]   CI (99.9%): [87.817, 1463.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.761 ±(99.9%) 6.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.761, 3.806), stdev = 1.702
[info]   CI (99.9%): [≈ 0, 7.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 17.000), stdev = 6.017
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay
[info] # Run progress: 39.29% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100774.468 ops/s
[info] # Warmup Iteration   2: 162916.266 ops/s
[info] # Warmup Iteration   3: 164673.745 ops/s
[info] # Warmup Iteration   4: 166392.198 ops/s
[info] # Warmup Iteration   5: 167423.889 ops/s
[info] Iteration   1: 166609.584 ops/s
[info]                  ·gc.alloc.rate:                   938.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              8864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9533.081 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 169608.660 ops/s
[info]                  ·gc.alloc.rate:                                  955.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.659 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9469.629 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.181 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 169838.996 ops/s
[info]                  ·gc.alloc.rate:            956.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       8864.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9462.869 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 170679.563 ops/s
[info]                  ·gc.alloc.rate:                                  961.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8864.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9416.471 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 169254.715 ops/s
[info]                  ·gc.alloc.rate:            953.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       8864.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6330.118 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay":
[info]   169198.304 ±(99.9%) 5927.259 ops/s [Average]
[info]   (min, avg, max) = (166609.584, 169198.304, 170679.563), stdev = 1539.290
[info]   CI (99.9%): [163271.045, 175125.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate":
[info]   952.774 ±(99.9%) 33.451 MB/sec [Average]
[info]   (min, avg, max) = (938.164, 952.774, 961.156), stdev = 8.687
[info]   CI (99.9%): [919.323, 986.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm":
[info]   8864.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8864.002, 8864.002, 8864.003), stdev = 0.001
[info]   CI (99.9%): [8864.002, 8864.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.133 ±(99.9%) 1.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.659), stdev = 0.294
[info]   CI (99.9%): [≈ 0, 1.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   950.397 ±(99.9%) 580.924 MB/sec [Average]
[info]   (min, avg, max) = (680.678, 950.397, 1021.062), stdev = 150.864
[info]   CI (99.9%): [369.473, 1531.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8842.434 ±(99.9%) 5410.311 B/op [Average]
[info]   (min, avg, max) = (6330.118, 8842.434, 9533.081), stdev = 1405.041
[info]   CI (99.9%): [3432.122, 14252.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.529 ±(99.9%) 52.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.529, 31.462), stdev = 13.644
[info]   CI (99.9%): [≈ 0, 60.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 18.000), stdev = 6.465
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce
[info] # Run progress: 40.18% complete, ETA 00:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202397.437 ops/s
[info] # Warmup Iteration   2: 388357.935 ops/s
[info] # Warmup Iteration   3: 402906.038 ops/s
[info] # Warmup Iteration   4: 401423.632 ops/s
[info] # Warmup Iteration   5: 397903.944 ops/s
[info] Iteration   1: 405405.509 ops/s
[info]                  ·gc.alloc.rate:                                  1254.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.281 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5285.782 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 405795.088 ops/s
[info]                  ·gc.alloc.rate:            1255.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3960.576 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 406566.689 ops/s
[info]                  ·gc.alloc.rate:            1258.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5270.833 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 405255.896 ops/s
[info]                  ·gc.alloc.rate:                                  1254.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5287.894 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 401171.796 ops/s
[info]                  ·gc.alloc.rate:                                  1241.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5341.691 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce":
[info]   404838.995 ±(99.9%) 8132.550 ops/s [Average]
[info]   (min, avg, max) = (401171.796, 404838.995, 406566.689), stdev = 2111.998
[info]   CI (99.9%): [396706.445, 412971.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate":
[info]   1253.025 ±(99.9%) 24.782 MB/sec [Average]
[info]   (min, avg, max) = (1241.874, 1253.025, 1258.370), stdev = 6.436
[info]   CI (99.9%): [1228.244, 1277.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.281), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   1293.307 ±(99.9%) 586.169 MB/sec [Average]
[info]   (min, avg, max) = (1020.997, 1293.307, 1361.598), stdev = 152.226
[info]   CI (99.9%): [707.138, 1879.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5029.355 ±(99.9%) 2302.955 B/op [Average]
[info]   (min, avg, max) = (3960.576, 5029.355, 5341.691), stdev = 598.070
[info]   CI (99.9%): [2726.400, 7332.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson
[info] # Run progress: 41.07% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538469.470 ops/s
[info] # Warmup Iteration   2: 854875.524 ops/s
[info] # Warmup Iteration   3: 878932.477 ops/s
[info] # Warmup Iteration   4: 868049.857 ops/s
[info] # Warmup Iteration   5: 877094.245 ops/s
[info] Iteration   1: 867106.457 ops/s
[info]                  ·gc.alloc.rate:            656.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1221.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 880849.584 ops/s
[info]                  ·gc.alloc.rate:            667.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1202.149 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 869834.292 ops/s
[info]                  ·gc.alloc.rate:                   658.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1217.308 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 881072.694 ops/s
[info]                  ·gc.alloc.rate:                                  667.699 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            679.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1212.879 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.188 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 884711.588 ops/s
[info]                  ·gc.alloc.rate:                                  670.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            340.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       605.554 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson":
[info]   876714.923 ±(99.9%) 29808.183 ops/s [Average]
[info]   (min, avg, max) = (867106.457, 876714.923, 884711.588), stdev = 7741.090
[info]   CI (99.9%): [846906.740, 906523.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate":
[info]   664.100 ±(99.9%) 22.910 MB/sec [Average]
[info]   (min, avg, max) = (656.604, 664.100, 670.120), stdev = 5.950
[info]   CI (99.9%): [641.190, 687.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   607.653 ±(99.9%) 575.319 MB/sec [Average]
[info]   (min, avg, max) = (340.431, 607.653, 679.394), stdev = 149.409
[info]   CI (99.9%): [32.334, 1182.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1091.819 ±(99.9%) 1047.081 B/op [Average]
[info]   (min, avg, max) = (605.554, 1091.819, 1221.206), stdev = 271.924
[info]   CI (99.9%): [44.738, 2138.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.443 ±(99.9%) 10.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.443, 6.026), stdev = 2.613
[info]   CI (99.9%): [≈ 0, 11.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.000, 12.000), stdev = 5.148
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter
[info] # Run progress: 41.96% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3911539.615 ops/s
[info] # Warmup Iteration   2: 4142748.319 ops/s
[info] # Warmup Iteration   3: 4081011.527 ops/s
[info] # Warmup Iteration   4: 4193516.940 ops/s
[info] # Warmup Iteration   5: 4193792.262 ops/s
[info] Iteration   1: 4107262.860 ops/s
[info]                  ·gc.alloc.rate:                   125.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        128.386 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4118349.362 ops/s
[info]                  ·gc.alloc.rate:      125.611 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4133940.262 ops/s
[info]                  ·gc.alloc.rate:            126.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.073 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2489137.986 ops/s
[info]                  ·gc.alloc.rate:      75.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4136556.849 ops/s
[info]                  ·gc.alloc.rate:      126.163 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter":
[info]   3797049.464 ±(99.9%) 2815752.326 ops/s [Average]
[info]   (min, avg, max) = (2489137.986, 3797049.464, 4136556.849), stdev = 731241.937
[info]   CI (99.9%): [981297.138, 6612801.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate":
[info]   115.802 ±(99.9%) 85.844 MB/sec [Average]
[info]   (min, avg, max) = (75.927, 115.802, 126.163), stdev = 22.293
[info]   CI (99.9%): [29.957, 201.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.270 ±(99.9%) 707.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.270, 336.381), stdev = 183.858
[info]   CI (99.9%): [≈ 0, 842.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   51.292 ±(99.9%) 270.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.292, 128.386), stdev = 70.234
[info]   CI (99.9%): [≈ 0, 321.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.102 ±(99.9%) 0.879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.102, 0.510), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 0.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay
[info] # Run progress: 42.86% complete, ETA 00:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71686.171 ops/s
[info] # Warmup Iteration   2: 135826.950 ops/s
[info] # Warmup Iteration   3: 136583.739 ops/s
[info] # Warmup Iteration   4: 137039.464 ops/s
[info] # Warmup Iteration   5: 137779.330 ops/s
[info] Iteration   1: 137079.395 ops/s
[info]                  ·gc.alloc.rate:                   943.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11586.855 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.240 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 140556.449 ops/s
[info]                  ·gc.alloc.rate:                                  967.235 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10832.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.603 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11426.995 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.459 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 141400.393 ops/s
[info]                  ·gc.alloc.rate:                                  973.140 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10832.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11365.894 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 140213.103 ops/s
[info]                  ·gc.alloc.rate:            965.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       10832.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11462.503 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 141063.443 ops/s
[info]                  ·gc.alloc.rate:            970.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       10832.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7595.899 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay":
[info]   140062.556 ±(99.9%) 6657.670 ops/s [Average]
[info]   (min, avg, max) = (137079.395, 140062.556, 141400.393), stdev = 1728.976
[info]   CI (99.9%): [133404.886, 146720.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate":
[info]   963.912 ±(99.9%) 46.091 MB/sec [Average]
[info]   (min, avg, max) = (943.255, 963.912, 973.140), stdev = 11.970
[info]   CI (99.9%): [917.820, 1010.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm":
[info]   10832.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.003, 10832.003, 10832.003), stdev = 0.001
[info]   CI (99.9%): [10832.003, 10832.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.121 ±(99.9%) 1.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.603), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   950.499 ±(99.9%) 580.786 MB/sec [Average]
[info]   (min, avg, max) = (680.847, 950.499, 1021.190), stdev = 150.828
[info]   CI (99.9%): [369.713, 1531.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10687.629 ±(99.9%) 6662.431 B/op [Average]
[info]   (min, avg, max) = (7595.899, 10687.629, 11586.855), stdev = 1730.212
[info]   CI (99.9%): [4025.199, 17350.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.140 ±(99.9%) 63.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.140, 38.240), stdev = 16.585
[info]   CI (99.9%): [≈ 0, 73.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 18.000), stdev = 6.301
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce
[info] # Run progress: 43.75% complete, ETA 00:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106142.644 ops/s
[info] # Warmup Iteration   2: 120050.983 ops/s
[info] # Warmup Iteration   3: 121469.849 ops/s
[info] # Warmup Iteration   4: 120261.370 ops/s
[info] # Warmup Iteration   5: 117709.714 ops/s
[info] Iteration   1: 120288.344 ops/s
[info]                  ·gc.alloc.rate:                   892.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8803.140 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 122280.806 ops/s
[info]                  ·gc.alloc.rate:                                  907.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13134.528 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.573 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 122048.727 ops/s
[info]                  ·gc.alloc.rate:                                  905.678 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13167.648 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 122579.408 ops/s
[info]                  ·gc.alloc.rate:            909.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       11680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8741.056 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 121659.376 ops/s
[info]                  ·gc.alloc.rate:                                  902.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13210.610 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce":
[info]   121771.332 ±(99.9%) 3444.813 ops/s [Average]
[info]   (min, avg, max) = (120288.344, 121771.332, 122579.408), stdev = 894.607
[info]   CI (99.9%): [118326.519, 125216.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate":
[info]   903.568 ±(99.9%) 25.623 MB/sec [Average]
[info]   (min, avg, max) = (892.560, 903.568, 909.603), stdev = 6.654
[info]   CI (99.9%): [877.945, 929.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate.norm":
[info]   11680.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11680.003, 11680.003, 11680.004), stdev = 0.001
[info]   CI (99.9%): [11680.003, 11680.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.215 ±(99.9%) 1.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 1.012), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 1.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen":
[info]   883.151 ±(99.9%) 725.712 MB/sec [Average]
[info]   (min, avg, max) = (672.717, 883.151, 1021.032), stdev = 188.465
[info]   CI (99.9%): [157.439, 1608.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11411.396 ±(99.9%) 9278.473 B/op [Average]
[info]   (min, avg, max) = (8741.056, 11411.396, 13210.610), stdev = 2409.590
[info]   CI (99.9%): [2132.924, 20689.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.431 ±(99.9%) 72.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.431, 43.580), stdev = 18.899
[info]   CI (99.9%): [≈ 0, 83.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 11.000), stdev = 3.808
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson
[info] # Run progress: 44.64% complete, ETA 00:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 488201.589 ops/s
[info] # Warmup Iteration   2: 558665.984 ops/s
[info] # Warmup Iteration   3: 564278.686 ops/s
[info] # Warmup Iteration   4: 529413.549 ops/s
[info] # Warmup Iteration   5: 563125.324 ops/s
[info] Iteration   1: 549470.450 ops/s
[info]                  ·gc.alloc.rate:            720.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1927.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 558866.934 ops/s
[info]                  ·gc.alloc.rate:            732.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1894.785 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 557174.465 ops/s
[info]                  ·gc.alloc.rate:                                  730.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2871.388 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                11.290 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   4: 558261.954 ops/s
[info]                  ·gc.alloc.rate:                                  732.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1919.296 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 555444.449 ops/s
[info]                  ·gc.alloc.rate:            728.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1929.025 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson":
[info]   555843.651 ±(99.9%) 14604.116 ops/s [Average]
[info]   (min, avg, max) = (549470.450, 555843.651, 558866.934), stdev = 3792.642
[info]   CI (99.9%): [541239.535, 570447.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate":
[info]   728.965 ±(99.9%) 19.523 MB/sec [Average]
[info]   (min, avg, max) = (720.455, 728.965, 732.982), stdev = 5.070
[info]   CI (99.9%): [709.443, 748.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate.norm":
[info]   2064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2064.001, 2064.001, 2064.001), stdev = 0.001
[info]   CI (99.9%): [2064.001, 2064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.050), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.045 ±(99.9%) 0.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.142), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen":
[info]   744.776 ±(99.9%) 585.544 MB/sec [Average]
[info]   (min, avg, max) = (672.686, 744.776, 1016.702), stdev = 152.064
[info]   CI (99.9%): [159.232, 1330.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2108.329 ±(99.9%) 1643.383 B/op [Average]
[info]   (min, avg, max) = (1894.785, 2108.329, 2871.388), stdev = 426.781
[info]   CI (99.9%): [464.946, 3751.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.258 ±(99.9%) 19.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.258, 11.290), stdev = 5.049
[info]   CI (99.9%): [≈ 0, 21.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 15.000), stdev = 5.639
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter
[info] # Run progress: 45.54% complete, ETA 00:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585265.670 ops/s
[info] # Warmup Iteration   2: 604988.366 ops/s
[info] # Warmup Iteration   3: 622701.881 ops/s
[info] # Warmup Iteration   4: 617928.666 ops/s
[info] # Warmup Iteration   5: 620824.215 ops/s
[info] Iteration   1: 599962.311 ops/s
[info]                  ·gc.alloc.rate:            512.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1764.971 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 608207.801 ops/s
[info]                  ·gc.alloc.rate:            519.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 870.524 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 611747.566 ops/s
[info]                  ·gc.alloc.rate:            522.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1730.779 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 616759.203 ops/s
[info]                  ·gc.alloc.rate:            526.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1716.842 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 622452.568 ops/s
[info]                  ·gc.alloc.rate:                   531.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        850.570 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter":
[info]   611825.890 ±(99.9%) 32849.461 ops/s [Average]
[info]   (min, avg, max) = (599962.311, 611825.890, 622452.568), stdev = 8530.901
[info]   CI (99.9%): [578976.428, 644675.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate":
[info]   522.429 ±(99.9%) 28.194 MB/sec [Average]
[info]   (min, avg, max) = (512.209, 522.429, 531.512), stdev = 7.322
[info]   CI (99.9%): [494.235, 550.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.001, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.001, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.190 ±(99.9%) 709.430 MB/sec [Average]
[info]   (min, avg, max) = (336.362, 538.190, 672.826), stdev = 184.237
[info]   CI (99.9%): [≈ 0, 1247.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1386.737 ±(99.9%) 1851.061 B/op [Average]
[info]   (min, avg, max) = (850.570, 1386.737, 1764.971), stdev = 480.715
[info]   CI (99.9%): [≈ 0, 3237.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   2.021 ±(99.9%) 17.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.021, 10.106), stdev = 4.519
[info]   CI (99.9%): [≈ 0, 19.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 11.000), stdev = 2.702
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay
[info] # Run progress: 46.43% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150413.863 ops/s
[info] # Warmup Iteration   2: 181075.912 ops/s
[info] # Warmup Iteration   3: 182515.811 ops/s
[info] # Warmup Iteration   4: 186533.026 ops/s
[info] # Warmup Iteration   5: 187429.852 ops/s
[info] Iteration   1: 188845.216 ops/s
[info]                  ·gc.alloc.rate:                                  1720.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14184.425 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 188664.621 ops/s
[info]                  ·gc.alloc.rate:                                  1718.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14198.031 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 188497.340 ops/s
[info]                  ·gc.alloc.rate:                                  1717.407 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14209.854 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 187976.800 ops/s
[info]                  ·gc.alloc.rate:                                  1712.882 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14250.367 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 187229.281 ops/s
[info]                  ·gc.alloc.rate:            1706.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       14344.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14307.214 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay":
[info]   188242.652 ±(99.9%) 2512.974 ops/s [Average]
[info]   (min, avg, max) = (187229.281, 188242.652, 188845.216), stdev = 652.611
[info]   CI (99.9%): [185729.678, 190755.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate":
[info]   1715.186 ±(99.9%) 22.628 MB/sec [Average]
[info]   (min, avg, max) = (1706.039, 1715.186, 1720.703), stdev = 5.876
[info]   CI (99.9%): [1692.558, 1737.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate.norm":
[info]   14344.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14344.002, 14344.002, 14344.002), stdev = 0.001
[info]   CI (99.9%): [14344.002, 14344.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.037), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen":
[info]   1701.535 ±(99.9%) 0.599 MB/sec [Average]
[info]   (min, avg, max) = (1701.346, 1701.535, 1701.700), stdev = 0.156
[info]   CI (99.9%): [1700.936, 1702.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen.norm":
[info]   14229.978 ±(99.9%) 191.390 B/op [Average]
[info]   (min, avg, max) = (14184.425, 14229.978, 14307.214), stdev = 49.703
[info]   CI (99.9%): [14038.588, 14421.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 11.000), stdev = 1.949
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce
[info] # Run progress: 47.32% complete, ETA 00:16:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2807.854 ops/s
[info] # Warmup Iteration   2: 4988.252 ops/s
[info] # Warmup Iteration   3: 6798.177 ops/s
[info] # Warmup Iteration   4: 7466.036 ops/s
[info] # Warmup Iteration   5: 7408.695 ops/s
[info] Iteration   1: 7508.171 ops/s
[info]                  ·gc.alloc.rate:                   1104.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              231656.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        212228.431 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 837.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 7589.471 ops/s
[info]                  ·gc.alloc.rate:                                  1117.043 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.715 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       211759.585 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 7569.920 ops/s
[info]                  ·gc.alloc.rate:                                  1114.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.636 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       212290.941 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7638.191 ops/s
[info]                  ·gc.alloc.rate:                                  1124.201 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.679 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       280535.254 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 7621.616 ops/s
[info]                  ·gc.alloc.rate:                                  1121.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231674.900 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.800 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       210870.656 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce":
[info]   7585.474 ±(99.9%) 195.580 ops/s [Average]
[info]   (min, avg, max) = (7508.171, 7585.474, 7638.191), stdev = 50.791
[info]   CI (99.9%): [7389.894, 7781.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate":
[info]   1116.415 ±(99.9%) 29.135 MB/sec [Average]
[info]   (min, avg, max) = (1104.872, 1116.415, 1124.201), stdev = 7.566
[info]   CI (99.9%): [1087.281, 1145.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm":
[info]   231659.826 ±(99.9%) 32.448 B/op [Average]
[info]   (min, avg, max) = (231656.054, 231659.826, 231674.900), stdev = 8.427
[info]   CI (99.9%): [231627.377, 231692.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.085), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.966 ±(99.9%) 26.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.966, 17.715), stdev = 6.917
[info]   CI (99.9%): [≈ 0, 34.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   1087.362 ±(99.9%) 590.086 MB/sec [Average]
[info]   (min, avg, max) = (1012.213, 1087.362, 1361.406), stdev = 153.243
[info]   CI (99.9%): [497.276, 1677.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   225536.974 ±(99.9%) 118408.129 B/op [Average]
[info]   (min, avg, max) = (210870.656, 225536.974, 280535.254), stdev = 30750.215
[info]   CI (99.9%): [107128.845, 343945.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   167.549 ±(99.9%) 1442.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167.549, 837.744), stdev = 374.650
[info]   CI (99.9%): [≈ 0, 1610.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 15.000), stdev = 4.764
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson
[info] # Run progress: 48.21% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3936.413 ops/s
[info] # Warmup Iteration   2: 9757.036 ops/s
[info] # Warmup Iteration   3: 10318.293 ops/s
[info] # Warmup Iteration   4: 10564.971 ops/s
[info] # Warmup Iteration   5: 10577.102 ops/s
[info] Iteration   1: 10404.706 ops/s
[info]                  ·gc.alloc.rate:                   146.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50378.399 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 403.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10568.053 ops/s
[info]                  ·gc.alloc.rate:      149.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 22231.150 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10489.056 ops/s
[info]                  ·gc.alloc.rate:            148.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50370.025 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 10426.761 ops/s
[info]                  ·gc.alloc.rate:      147.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.042 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10404.733 ops/s
[info]                  ·gc.alloc.rate:            147.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50781.426 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson":
[info]   10458.662 ±(99.9%) 270.421 ops/s [Average]
[info]   (min, avg, max) = (10404.706, 10458.662, 10568.053), stdev = 70.227
[info]   CI (99.9%): [10188.241, 10729.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate":
[info]   147.757 ±(99.9%) 3.794 MB/sec [Average]
[info]   (min, avg, max) = (146.908, 147.757, 149.257), stdev = 0.985
[info]   CI (99.9%): [143.963, 151.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   22235.065 ±(99.9%) 27.966 B/op [Average]
[info]   (min, avg, max) = (22224.049, 22235.065, 22240.045), stdev = 7.263
[info]   CI (99.9%): [22207.099, 22263.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   200.907 ±(99.9%) 706.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 200.907, 335.778), stdev = 183.405
[info]   CI (99.9%): [≈ 0, 907.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   30305.970 ±(99.9%) 106531.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30305.970, 50781.426), stdev = 27665.939
[info]   CI (99.9%): [≈ 0, 136837.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   80.605 ±(99.9%) 694.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.605, 403.027), stdev = 180.239
[info]   CI (99.9%): [≈ 0, 774.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 7.000), stdev = 3.834
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter
[info] # Run progress: 49.11% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7757.044 ops/s
[info] # Warmup Iteration   2: 12581.276 ops/s
[info] # Warmup Iteration   3: 20153.013 ops/s
[info] # Warmup Iteration   4: 20803.874 ops/s
[info] # Warmup Iteration   5: 20409.760 ops/s
[info] Iteration   1: 20136.426 ops/s
[info]                  ·gc.alloc.rate:      181.549 MB/sec
[info]                  ·gc.alloc.rate.norm: 14192.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20384.854 ops/s
[info]                  ·gc.alloc.rate:            183.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       14190.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25972.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 20666.810 ops/s
[info]                  ·gc.alloc.rate:      186.373 MB/sec
[info]                  ·gc.alloc.rate.norm: 14192.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20372.071 ops/s
[info]                  ·gc.alloc.rate:            183.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       14192.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25987.970 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 20496.392 ops/s
[info]                  ·gc.alloc.rate:            184.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       14192.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25830.775 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter":
[info]   20411.311 ±(99.9%) 746.468 ops/s [Average]
[info]   (min, avg, max) = (20136.426, 20411.311, 20666.810), stdev = 193.855
[info]   CI (99.9%): [19664.842, 21157.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate":
[info]   184.053 ±(99.9%) 6.771 MB/sec [Average]
[info]   (min, avg, max) = (181.549, 184.053, 186.373), stdev = 1.758
[info]   CI (99.9%): [177.281, 190.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   14191.701 ±(99.9%) 2.769 B/op [Average]
[info]   (min, avg, max) = (14190.414, 14191.701, 14192.027), stdev = 0.719
[info]   CI (99.9%): [14188.932, 14194.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.845 ±(99.9%) 709.513 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.845, 336.447), stdev = 184.258
[info]   CI (99.9%): [≈ 0, 911.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   15558.284 ±(99.9%) 54690.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15558.284, 25987.970), stdev = 14202.837
[info]   CI (99.9%): [≈ 0, 70248.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay
[info] # Run progress: 50.00% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1059.876 ops/s
[info] # Warmup Iteration   2: 2954.859 ops/s
[info] # Warmup Iteration   3: 3042.000 ops/s
[info] # Warmup Iteration   4: 3108.095 ops/s
[info] # Warmup Iteration   5: 3093.352 ops/s
[info] Iteration   1: 3065.220 ops/s
[info]                  ·gc.alloc.rate:            898.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       461480.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 518131.977 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 3122.256 ops/s
[info]                  ·gc.alloc.rate:                                  915.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             461480.131 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       512368.548 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2014.555 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 3150.855 ops/s
[info]                  ·gc.alloc.rate:            924.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       461480.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 339988.792 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3151.204 ops/s
[info]                  ·gc.alloc.rate:                                  924.182 MB/sec
[info]                  ·gc.alloc.rate.norm:                             461480.129 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       509983.188 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3148.261 ops/s
[info]                  ·gc.alloc.rate:            923.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       461480.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 510306.987 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay":
[info]   3127.559 ±(99.9%) 142.065 ops/s [Average]
[info]   (min, avg, max) = (3065.220, 3127.559, 3151.204), stdev = 36.894
[info]   CI (99.9%): [2985.494, 3269.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate":
[info]   917.076 ±(99.9%) 42.219 MB/sec [Average]
[info]   (min, avg, max) = (898.641, 917.076, 924.182), stdev = 10.964
[info]   CI (99.9%): [874.858, 959.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   461480.133 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (461480.129, 461480.133, 461480.144), stdev = 0.006
[info]   CI (99.9%): [461480.109, 461480.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.746 ±(99.9%) 9.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.746, 4.982), stdev = 2.431
[info]   CI (99.9%): [≈ 0, 11.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   949.637 ±(99.9%) 579.087 MB/sec [Average]
[info]   (min, avg, max) = (680.765, 949.637, 1021.317), stdev = 150.387
[info]   CI (99.9%): [370.550, 1528.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   478155.898 ±(99.9%) 297681.241 B/op [Average]
[info]   (min, avg, max) = (339988.792, 478155.898, 518131.977), stdev = 77306.873
[info]   CI (99.9%): [180474.658, 775837.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   402.911 ±(99.9%) 3469.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 402.911, 2014.555), stdev = 900.936
[info]   CI (99.9%): [≈ 0, 3872.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 18.000), stdev = 6.340
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce
[info] # Run progress: 50.89% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191497.001 ops/s
[info] # Warmup Iteration   2: 317780.030 ops/s
[info] # Warmup Iteration   3: 325954.708 ops/s
[info] # Warmup Iteration   4: 325682.707 ops/s
[info] # Warmup Iteration   5: 325984.868 ops/s
[info] Iteration   1: 323252.652 ops/s
[info]                  ·gc.alloc.rate:                   1066.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1016.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4949.173 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 326136.304 ops/s
[info]                  ·gc.alloc.rate:                                  1075.563 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6570.335 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 327079.811 ops/s
[info]                  ·gc.alloc.rate:            1078.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4913.788 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 331711.636 ops/s
[info]                  ·gc.alloc.rate:            1094.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4845.052 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 328930.178 ops/s
[info]                  ·gc.alloc.rate:                                  1084.867 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4886.245 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce":
[info]   327422.116 ±(99.9%) 12150.772 ops/s [Average]
[info]   (min, avg, max) = (323252.652, 327422.116, 331711.636), stdev = 3155.517
[info]   CI (99.9%): [315271.345, 339572.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate":
[info]   1079.891 ±(99.9%) 39.933 MB/sec [Average]
[info]   (min, avg, max) = (1066.249, 1079.891, 1094.010), stdev = 10.370
[info]   CI (99.9%): [1039.959, 1119.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm":
[info]   5192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5192.001, 5192.001, 5192.001), stdev = 0.001
[info]   CI (99.9%): [5192.001, 5192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.234), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1088.064 ±(99.9%) 587.769 MB/sec [Average]
[info]   (min, avg, max) = (1016.381, 1088.064, 1361.095), stdev = 152.642
[info]   CI (99.9%): [500.296, 1675.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5232.918 ±(99.9%) 2882.628 B/op [Average]
[info]   (min, avg, max) = (4845.052, 5232.918, 6570.335), stdev = 748.609
[info]   CI (99.9%): [2350.291, 8115.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.892 ±(99.9%) 33.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.892, 19.459), stdev = 8.703
[info]   CI (99.9%): [≈ 0, 37.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 15.000), stdev = 4.658
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson
[info] # Run progress: 51.79% complete, ETA 00:14:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 768254.727 ops/s
[info] # Warmup Iteration   2: 1311885.294 ops/s
[info] # Warmup Iteration   3: 1311930.313 ops/s
[info] # Warmup Iteration   4: 1319443.781 ops/s
[info] # Warmup Iteration   5: 1309093.936 ops/s
[info] Iteration   1: 1313048.282 ops/s
[info]                  ·gc.alloc.rate:            547.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 804.864 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1320814.635 ops/s
[info]                  ·gc.alloc.rate:            550.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 400.063 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1310882.797 ops/s
[info]                  ·gc.alloc.rate:            546.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 806.172 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1305243.362 ops/s
[info]                  ·gc.alloc.rate:                   543.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        810.465 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 1312096.003 ops/s
[info]                  ·gc.alloc.rate:                   546.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        402.724 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson":
[info]   1312417.016 ±(99.9%) 21511.688 ops/s [Average]
[info]   (min, avg, max) = (1305243.362, 1312417.016, 1320814.635), stdev = 5586.517
[info]   CI (99.9%): [1290905.328, 1333928.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate":
[info]   546.945 ±(99.9%) 9.076 MB/sec [Average]
[info]   (min, avg, max) = (543.893, 546.945, 550.476), stdev = 2.357
[info]   CI (99.9%): [537.868, 556.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen":
[info]   537.226 ±(99.9%) 708.354 MB/sec [Average]
[info]   (min, avg, max) = (335.709, 537.226, 671.961), stdev = 183.957
[info]   CI (99.9%): [≈ 0, 1245.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   644.858 ±(99.9%) 855.856 B/op [Average]
[info]   (min, avg, max) = (400.063, 644.858, 810.465), stdev = 222.263
[info]   CI (99.9%): [≈ 0, 1500.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.120 ±(99.9%) 8.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.120, 4.794), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 9.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.600, 12.000), stdev = 3.286
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter
[info] # Run progress: 52.68% complete, ETA 00:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8171334.987 ops/s
[info] # Warmup Iteration   2: 9389637.405 ops/s
[info] # Warmup Iteration   3: 9564827.390 ops/s
[info] # Warmup Iteration   4: 9669351.413 ops/s
[info] # Warmup Iteration   5: 9670285.073 ops/s
[info] Iteration   1: 9565049.085 ops/s
[info]                  ·gc.alloc.rate:            486.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 9653567.825 ops/s
[info]                  ·gc.alloc.rate:            490.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54.845 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 9596155.118 ops/s
[info]                  ·gc.alloc.rate:            487.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110.342 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 9697651.589 ops/s
[info]                  ·gc.alloc.rate:            492.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54.596 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 9501720.533 ops/s
[info]                  ·gc.alloc.rate:            482.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 111.441 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter":
[info]   9602828.830 ±(99.9%) 293638.658 ops/s [Average]
[info]   (min, avg, max) = (9501720.533, 9602828.830, 9697651.589), stdev = 76257.027
[info]   CI (99.9%): [9309190.172, 9896467.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate":
[info]   488.105 ±(99.9%) 14.979 MB/sec [Average]
[info]   (min, avg, max) = (482.922, 488.105, 492.901), stdev = 3.890
[info]   CI (99.9%): [473.126, 503.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.930 ±(99.9%) 709.255 MB/sec [Average]
[info]   (min, avg, max) = (336.377, 470.930, 672.717), stdev = 184.191
[info]   CI (99.9%): [≈ 0, 1180.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   77.315 ±(99.9%) 118.040 B/op [Average]
[info]   (min, avg, max) = (54.596, 77.315, 111.441), stdev = 30.655
[info]   CI (99.9%): [≈ 0, 195.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 12.000), stdev = 3.240
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay
[info] # Run progress: 53.57% complete, ETA 00:14:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125201.136 ops/s
[info] # Warmup Iteration   2: 202130.882 ops/s
[info] # Warmup Iteration   3: 203087.934 ops/s
[info] # Warmup Iteration   4: 203232.457 ops/s
[info] # Warmup Iteration   5: 204503.396 ops/s
[info] Iteration   1: 204074.175 ops/s
[info]                  ·gc.alloc.rate:            691.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       5336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5188.707 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 203214.438 ops/s
[info]                  ·gc.alloc.rate:            688.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       5336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5210.405 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 203013.766 ops/s
[info]                  ·gc.alloc.rate:                   688.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5215.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 203964.936 ops/s
[info]                  ·gc.alloc.rate:                   691.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5248.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 204194.881 ops/s
[info]                  ·gc.alloc.rate:                                  692.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.322 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5247.244 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay":
[info]   203692.439 ±(99.9%) 2074.982 ops/s [Average]
[info]   (min, avg, max) = (203013.766, 203692.439, 204194.881), stdev = 538.866
[info]   CI (99.9%): [201617.457, 205767.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate":
[info]   690.489 ±(99.9%) 7.024 MB/sec [Average]
[info]   (min, avg, max) = (688.168, 690.489, 692.238), stdev = 1.824
[info]   CI (99.9%): [683.465, 697.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm":
[info]   5336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.002, 5336.002, 5336.002), stdev = 0.001
[info]   CI (99.9%): [5336.002, 5336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.322), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen":
[info]   675.749 ±(99.9%) 16.265 MB/sec [Average]
[info]   (min, avg, max) = (672.635, 675.749, 680.723), stdev = 4.224
[info]   CI (99.9%): [659.484, 692.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5222.070 ±(99.9%) 98.143 B/op [Average]
[info]   (min, avg, max) = (5188.707, 5222.070, 5248.097), stdev = 25.487
[info]   CI (99.9%): [5123.927, 5320.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.192 ±(99.9%) 43.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.192, 25.821), stdev = 11.196
[info]   CI (99.9%): [≈ 0, 49.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 4.583
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce
[info] # Run progress: 54.46% complete, ETA 00:13:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 876533.365 ops/s
[info] # Warmup Iteration   2: 1203228.976 ops/s
[info] # Warmup Iteration   3: 1215774.853 ops/s
[info] # Warmup Iteration   4: 1204102.396 ops/s
[info] # Warmup Iteration   5: 1215711.105 ops/s
[info] Iteration   1: 1240388.269 ops/s
[info]                  ·gc.alloc.rate:                                  1248.507 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1295.724 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 1234630.750 ops/s
[info]                  ·gc.alloc.rate:                                  1242.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1735.590 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1234841.074 ops/s
[info]                  ·gc.alloc.rate:                                  1242.809 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1735.392 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 1239894.634 ops/s
[info]                  ·gc.alloc.rate:            1247.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       1584.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1296.240 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1230759.183 ops/s
[info]                  ·gc.alloc.rate:                                  1238.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1741.137 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce":
[info]   1236102.782 ±(99.9%) 15529.172 ops/s [Average]
[info]   (min, avg, max) = (1230759.183, 1236102.782, 1240388.269), stdev = 4032.877
[info]   CI (99.9%): [1220573.610, 1251631.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate":
[info]   1244.032 ±(99.9%) 15.972 MB/sec [Average]
[info]   (min, avg, max) = (1238.445, 1244.032, 1248.507), stdev = 4.148
[info]   CI (99.9%): [1228.059, 1260.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm":
[info]   1584.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1584.000, 1584.000, 1584.000), stdev = 0.001
[info]   CI (99.9%): [1584.000, 1584.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1225.363 ±(99.9%) 717.680 MB/sec [Average]
[info]   (min, avg, max) = (1021.102, 1225.363, 1361.592), stdev = 186.379
[info]   CI (99.9%): [507.683, 1943.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1560.817 ±(99.9%) 930.975 B/op [Average]
[info]   (min, avg, max) = (1295.724, 1560.817, 1741.137), stdev = 241.771
[info]   CI (99.9%): [629.842, 2491.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson
[info] # Run progress: 55.36% complete, ETA 00:13:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2155344.584 ops/s
[info] # Warmup Iteration   2: 3591045.449 ops/s
[info] # Warmup Iteration   3: 3637121.911 ops/s
[info] # Warmup Iteration   4: 3626282.631 ops/s
[info] # Warmup Iteration   5: 3618459.785 ops/s
[info] Iteration   1: 3622235.896 ops/s
[info]                  ·gc.alloc.rate:                   994.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        439.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 3654692.313 ops/s
[info]                  ·gc.alloc.rate:                                  1002.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       439.754 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3707357.920 ops/s
[info]                  ·gc.alloc.rate:            1017.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433.490 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3707236.163 ops/s
[info]                  ·gc.alloc.rate:                                  1017.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       433.522 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3695952.417 ops/s
[info]                  ·gc.alloc.rate:                                  1014.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       434.856 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson":
[info]   3677494.942 ±(99.9%) 145237.925 ops/s [Average]
[info]   (min, avg, max) = (3622235.896, 3677494.942, 3707357.920), stdev = 37717.828
[info]   CI (99.9%): [3532257.017, 3822732.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate":
[info]   1009.264 ±(99.9%) 40.150 MB/sec [Average]
[info]   (min, avg, max) = (994.076, 1009.264, 1017.486), stdev = 10.427
[info]   CI (99.9%): [969.114, 1049.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1019.012 ±(99.9%) 17.216 MB/sec [Average]
[info]   (min, avg, max) = (1011.019, 1019.012, 1021.194), stdev = 4.471
[info]   CI (99.9%): [1001.797, 1036.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   436.197 ±(99.9%) 12.018 B/op [Average]
[info]   (min, avg, max) = (433.490, 436.197, 439.754), stdev = 3.121
[info]   CI (99.9%): [424.179, 448.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.405 ±(99.9%) 3.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.405, 2.026), stdev = 0.906
[info]   CI (99.9%): [≈ 0, 3.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter
[info] # Run progress: 56.25% complete, ETA 00:13:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13882713.486 ops/s
[info] # Warmup Iteration   2: 15698877.356 ops/s
[info] # Warmup Iteration   3: 15657402.994 ops/s
[info] # Warmup Iteration   4: 15826661.125 ops/s
[info] # Warmup Iteration   5: 15638870.319 ops/s
[info] Iteration   1: 15700483.716 ops/s
[info]                  ·gc.alloc.rate:            478.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33.722 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 15725313.182 ops/s
[info]                  ·gc.alloc.rate:            479.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33.669 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 15551739.569 ops/s
[info]                  ·gc.alloc.rate:            474.224 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.085 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 15781079.760 ops/s
[info]                  ·gc.alloc.rate:            481.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 15650783.284 ops/s
[info]                  ·gc.alloc.rate:            477.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67.659 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter":
[info]   15681879.902 ±(99.9%) 333345.852 ops/s [Average]
[info]   (min, avg, max) = (15551739.569, 15681879.902, 15781079.760), stdev = 86568.859
[info]   CI (99.9%): [15348534.051, 16015225.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate":
[info]   478.218 ±(99.9%) 10.187 MB/sec [Average]
[info]   (min, avg, max) = (474.224, 478.218, 481.237), stdev = 2.645
[info]   CI (99.9%): [468.031, 488.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.910 ±(99.9%) 709.417 MB/sec [Average]
[info]   (min, avg, max) = (336.354, 470.910, 672.795), stdev = 184.233
[info]   CI (99.9%): [≈ 0, 1180.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   47.337 ±(99.9%) 72.187 B/op [Average]
[info]   (min, avg, max) = (33.550, 47.337, 68.085), stdev = 18.747
[info]   CI (99.9%): [≈ 0, 119.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc
[info] # Run progress: 57.14% complete, ETA 00:13:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13917442.445 ops/s
[info] # Warmup Iteration   2: 15011599.356 ops/s
[info] # Warmup Iteration   3: 15194655.274 ops/s
[info] # Warmup Iteration   4: 15170934.704 ops/s
[info] # Warmup Iteration   5: 15226485.234 ops/s
[info] Iteration   1: 15157055.415 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14962323.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15189558.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 15055980.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15189403.129 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc":
[info]   15110864.301 ±(99.9%) 382995.419 ops/s [Average]
[info]   (min, avg, max) = (14962323.685, 15110864.301, 15189558.690), stdev = 99462.694
[info]   CI (99.9%): [14727868.882, 15493859.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay
[info] # Run progress: 58.04% complete, ETA 00:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 432143.970 ops/s
[info] # Warmup Iteration   2: 806379.504 ops/s
[info] # Warmup Iteration   3: 828683.219 ops/s
[info] # Warmup Iteration   4: 814589.364 ops/s
[info] # Warmup Iteration   5: 821335.370 ops/s
[info] Iteration   1: 779700.392 ops/s
[info]                  ·gc.alloc.rate:                                  1125.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2061.355 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 824791.074 ops/s
[info]                  ·gc.alloc.rate:                                  1190.633 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2272.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1948.582 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 829529.107 ops/s
[info]                  ·gc.alloc.rate:            1197.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2583.387 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 826877.246 ops/s
[info]                  ·gc.alloc.rate:            1193.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1943.698 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 830733.023 ops/s
[info]                  ·gc.alloc.rate:            1198.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2579.532 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay":
[info]   818326.168 ±(99.9%) 83619.782 ops/s [Average]
[info]   (min, avg, max) = (779700.392, 818326.168, 830733.023), stdev = 21715.792
[info]   CI (99.9%): [734706.387, 901945.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate":
[info]   1181.152 ±(99.9%) 120.867 MB/sec [Average]
[info]   (min, avg, max) = (1125.308, 1181.152, 1198.980), stdev = 31.389
[info]   CI (99.9%): [1060.285, 1302.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm":
[info]   2272.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2272.000, 2272.001, 2272.001), stdev = 0.001
[info]   CI (99.9%): [2272.000, 2272.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   1157.177 ±(99.9%) 717.779 MB/sec [Average]
[info]   (min, avg, max) = (1020.977, 1157.177, 1361.475), stdev = 186.405
[info]   CI (99.9%): [439.398, 1874.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   2223.311 ±(99.9%) 1271.934 B/op [Average]
[info]   (min, avg, max) = (1943.698, 2223.311, 2583.387), stdev = 330.317
[info]   CI (99.9%): [951.376, 3495.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce
[info] # Run progress: 58.93% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399631.997 ops/s
[info] # Warmup Iteration   2: 648195.093 ops/s
[info] # Warmup Iteration   3: 672718.468 ops/s
[info] # Warmup Iteration   4: 663200.365 ops/s
[info] # Warmup Iteration   5: 682065.582 ops/s
[info] Iteration   1: 680565.355 ops/s
[info]                  ·gc.alloc.rate:                                  1552.753 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3935.980 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 681426.606 ops/s
[info]                  ·gc.alloc.rate:            1555.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       3592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3931.060 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 685270.224 ops/s
[info]                  ·gc.alloc.rate:                                  1563.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3127.237 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 682161.860 ops/s
[info]                  ·gc.alloc.rate:                                  1556.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3926.836 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 683986.284 ops/s
[info]                  ·gc.alloc.rate:                                  1560.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3133.084 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce":
[info]   682682.066 ±(99.9%) 7388.525 ops/s [Average]
[info]   (min, avg, max) = (680565.355, 682682.066, 685270.224), stdev = 1918.776
[info]   CI (99.9%): [675293.541, 690070.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate":
[info]   1557.849 ±(99.9%) 17.188 MB/sec [Average]
[info]   (min, avg, max) = (1552.753, 1557.849, 1563.745), stdev = 4.464
[info]   CI (99.9%): [1540.661, 1575.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm":
[info]   3592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3592.001, 3592.001, 3592.001), stdev = 0.001
[info]   CI (99.9%): [3592.001, 3592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1565.614 ±(99.9%) 717.539 MB/sec [Average]
[info]   (min, avg, max) = (1361.414, 1565.614, 1701.857), stdev = 186.343
[info]   CI (99.9%): [848.076, 2283.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3610.840 ±(99.9%) 1689.720 B/op [Average]
[info]   (min, avg, max) = (3127.237, 3610.840, 3935.980), stdev = 438.815
[info]   CI (99.9%): [1921.120, 5300.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 10.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson
[info] # Run progress: 59.82% complete, ETA 00:12:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1308215.365 ops/s
[info] # Warmup Iteration   2: 2411895.978 ops/s
[info] # Warmup Iteration   3: 2523579.416 ops/s
[info] # Warmup Iteration   4: 2545230.877 ops/s
[info] # Warmup Iteration   5: 2588738.598 ops/s
[info] Iteration   1: 2627482.767 ops/s
[info]                  ·gc.alloc.rate:                                  1295.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.200 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       815.586 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2624126.172 ops/s
[info]                  ·gc.alloc.rate:            1293.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       776.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 816.631 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2628156.312 ops/s
[info]                  ·gc.alloc.rate:                                  1295.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       815.352 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 2625737.365 ops/s
[info]                  ·gc.alloc.rate:            1294.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       776.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 816.158 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2625781.426 ops/s
[info]                  ·gc.alloc.rate:                                  1294.585 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       612.078 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson":
[info]   2626256.808 ±(99.9%) 6132.841 ops/s [Average]
[info]   (min, avg, max) = (2624126.172, 2626256.808, 2628156.312), stdev = 1592.679
[info]   CI (99.9%): [2620123.967, 2632389.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate":
[info]   1294.714 ±(99.9%) 3.011 MB/sec [Average]
[info]   (min, avg, max) = (1293.756, 1294.714, 1295.698), stdev = 0.782
[info]   CI (99.9%): [1291.703, 1297.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm":
[info]   776.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (776.000, 776.000, 776.000), stdev = 0.001
[info]   CI (99.9%): [776.000, 776.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.200), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen":
[info]   1293.320 ±(99.9%) 585.938 MB/sec [Average]
[info]   (min, avg, max) = (1021.117, 1293.320, 1361.496), stdev = 152.166
[info]   CI (99.9%): [707.382, 1879.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   775.161 ±(99.9%) 351.054 B/op [Average]
[info]   (min, avg, max) = (612.078, 775.161, 816.631), stdev = 91.168
[info]   CI (99.9%): [424.107, 1126.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter
[info] # Run progress: 60.71% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4427264.999 ops/s
[info] # Warmup Iteration   2: 4863039.554 ops/s
[info] # Warmup Iteration   3: 4808945.885 ops/s
[info] # Warmup Iteration   4: 4813972.742 ops/s
[info] # Warmup Iteration   5: 4328029.909 ops/s
[info] Iteration   1: 4854365.855 ops/s
[info]                  ·gc.alloc.rate:                                  1283.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       441.445 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4901803.844 ops/s
[info]                  ·gc.alloc.rate:                                  1295.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       327.891 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4882341.132 ops/s
[info]                  ·gc.alloc.rate:            1290.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 438.914 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4881902.270 ops/s
[info]                  ·gc.alloc.rate:            1290.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 438.964 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4899857.026 ops/s
[info]                  ·gc.alloc.rate:                                  1295.069 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.555 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       437.356 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter":
[info]   4884054.025 ±(99.9%) 73408.626 ops/s [Average]
[info]   (min, avg, max) = (4854365.855, 4884054.025, 4901803.844), stdev = 19063.987
[info]   CI (99.9%): [4810645.399, 4957462.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate":
[info]   1291.060 ±(99.9%) 19.439 MB/sec [Average]
[info]   (min, avg, max) = (1283.204, 1291.060, 1295.921), stdev = 5.048
[info]   CI (99.9%): [1271.621, 1310.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1293.624 ±(99.9%) 585.886 MB/sec [Average]
[info]   (min, avg, max) = (1021.446, 1293.624, 1361.829), stdev = 152.153
[info]   CI (99.9%): [707.739, 1879.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   416.914 ±(99.9%) 191.711 B/op [Average]
[info]   (min, avg, max) = (327.891, 416.914, 441.445), stdev = 49.787
[info]   CI (99.9%): [225.203, 608.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay
[info] # Run progress: 61.61% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110874.698 ops/s
[info] # Warmup Iteration   2: 275665.086 ops/s
[info] # Warmup Iteration   3: 281458.436 ops/s
[info] # Warmup Iteration   4: 283977.816 ops/s
[info] # Warmup Iteration   5: 279497.520 ops/s
[info] Iteration   1: 281912.695 ops/s
[info]                  ·gc.alloc.rate:                   980.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5634.286 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.595 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 284789.631 ops/s
[info]                  ·gc.alloc.rate:                                  990.276 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.278 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5639.841 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.681 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 262585.998 ops/s
[info]                  ·gc.alloc.rate:            913.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6120.746 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 284945.061 ops/s
[info]                  ·gc.alloc.rate:                                  990.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5640.433 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 284071.509 ops/s
[info]                  ·gc.alloc.rate:            987.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5657.625 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay":
[info]   279660.979 ±(99.9%) 37049.447 ops/s [Average]
[info]   (min, avg, max) = (262585.998, 279660.979, 284945.061), stdev = 9621.624
[info]   CI (99.9%): [242611.532, 316710.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate":
[info]   972.388 ±(99.9%) 128.749 MB/sec [Average]
[info]   (min, avg, max) = (913.076, 972.388, 990.900), stdev = 33.436
[info]   CI (99.9%): [843.639, 1101.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm":
[info]   5472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.002, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.278), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1018.727 ±(99.9%) 20.710 MB/sec [Average]
[info]   (min, avg, max) = (1009.120, 1018.727, 1021.401), stdev = 5.378
[info]   CI (99.9%): [998.017, 1039.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5738.586 ±(99.9%) 823.318 B/op [Average]
[info]   (min, avg, max) = (5634.286, 5738.586, 6120.746), stdev = 213.813
[info]   CI (99.9%): [4915.269, 6561.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.455 ±(99.9%) 31.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.455, 18.595), stdev = 8.063
[info]   CI (99.9%): [≈ 0, 35.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 17.000), stdev = 5.857
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson
[info] # Run progress: 62.50% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1235130.548 ops/s
[info] # Warmup Iteration   2: 1793989.447 ops/s
[info] # Warmup Iteration   3: 1805516.166 ops/s
[info] # Warmup Iteration   4: 1806112.738 ops/s
[info] # Warmup Iteration   5: 1800207.046 ops/s
[info] Iteration   1: 1801601.173 ops/s
[info]                  ·gc.alloc.rate:                   952.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        883.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 1831921.748 ops/s
[info]                  ·gc.alloc.rate:                                  968.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       877.294 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1823122.337 ops/s
[info]                  ·gc.alloc.rate:            963.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 587.708 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 1828146.590 ops/s
[info]                  ·gc.alloc.rate:                                  963.563 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       879.127 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 1840876.775 ops/s
[info]                  ·gc.alloc.rate:            973.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 873.052 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson":
[info]   1825133.725 ±(99.9%) 56488.597 ops/s [Average]
[info]   (min, avg, max) = (1801601.173, 1825133.725, 1840876.775), stdev = 14669.909
[info]   CI (99.9%): [1768645.128, 1881622.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate":
[info]   964.272 ±(99.9%) 29.725 MB/sec [Average]
[info]   (min, avg, max) = (952.346, 964.272, 973.146), stdev = 7.719
[info]   CI (99.9%): [934.547, 993.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   950.487 ±(99.9%) 580.507 MB/sec [Average]
[info]   (min, avg, max) = (680.905, 950.487, 1021.162), stdev = 150.756
[info]   CI (99.9%): [369.980, 1530.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   820.109 ±(99.9%) 500.463 B/op [Average]
[info]   (min, avg, max) = (587.708, 820.109, 883.363), stdev = 129.969
[info]   CI (99.9%): [319.646, 1320.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.815 ±(99.9%) 7.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.815, 4.073), stdev = 1.822
[info]   CI (99.9%): [≈ 0, 7.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 15.000), stdev = 5.385
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter
[info] # Run progress: 63.39% complete, ETA 00:11:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4273207.397 ops/s
[info] # Warmup Iteration   2: 4545163.884 ops/s
[info] # Warmup Iteration   3: 4582903.400 ops/s
[info] # Warmup Iteration   4: 4615606.560 ops/s
[info] # Warmup Iteration   5: 4651018.449 ops/s
[info] Iteration   1: 4637470.973 ops/s
[info]                  ·gc.alloc.rate:            848.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 228.336 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 4628805.094 ops/s
[info]                  ·gc.alloc.rate:                                  847.045 MB/sec
[info]                  ·gc.alloc.rate.norm:                             288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       345.630 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.359 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   3: 4711161.972 ops/s
[info]                  ·gc.alloc.rate:                                  862.147 MB/sec
[info]                  ·gc.alloc.rate.norm:                             288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       227.433 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 4710618.020 ops/s
[info]                  ·gc.alloc.rate:            862.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 341.190 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4712985.233 ops/s
[info]                  ·gc.alloc.rate:            862.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 341.020 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter":
[info]   4680208.258 ±(99.9%) 165912.905 ops/s [Average]
[info]   (min, avg, max) = (4628805.094, 4680208.258, 4712985.233), stdev = 43087.054
[info]   CI (99.9%): [4514295.354, 4846121.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate":
[info]   856.395 ±(99.9%) 30.550 MB/sec [Average]
[info]   (min, avg, max) = (847.045, 856.395, 862.251), stdev = 7.934
[info]   CI (99.9%): [825.845, 886.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (288.000, 288.000, 288.000), stdev = 0.001
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.101), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   882.473 ±(99.9%) 723.319 MB/sec [Average]
[info]   (min, avg, max) = (672.636, 882.473, 1021.361), stdev = 187.844
[info]   CI (99.9%): [159.154, 1605.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   296.722 ±(99.9%) 242.081 B/op [Average]
[info]   (min, avg, max) = (227.433, 296.722, 345.630), stdev = 62.868
[info]   CI (99.9%): [54.641, 538.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 2.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.272, 1.359), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 2.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 16.000), stdev = 5.933
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay
[info] # Run progress: 64.29% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203093.140 ops/s
[info] # Warmup Iteration   2: 373446.320 ops/s
[info] # Warmup Iteration   3: 377868.295 ops/s
[info] # Warmup Iteration   4: 377874.879 ops/s
[info] # Warmup Iteration   5: 380621.238 ops/s
[info] Iteration   1: 380378.983 ops/s
[info]                  ·gc.alloc.rate:                                  1101.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5614.020 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.536 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 380521.830 ops/s
[info]                  ·gc.alloc.rate:                                  1102.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4223.430 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 381544.768 ops/s
[info]                  ·gc.alloc.rate:            1105.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4212.219 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 383582.854 ops/s
[info]                  ·gc.alloc.rate:            1111.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4189.964 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 378025.942 ops/s
[info]                  ·gc.alloc.rate:                                  1095.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5668.683 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay":
[info]   380810.875 ±(99.9%) 7760.838 ops/s [Average]
[info]   (min, avg, max) = (378025.942, 380810.875, 383582.854), stdev = 2015.465
[info]   CI (99.9%): [373050.037, 388571.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate":
[info]   1103.153 ±(99.9%) 22.500 MB/sec [Average]
[info]   (min, avg, max) = (1095.114, 1103.153, 1111.233), stdev = 5.843
[info]   CI (99.9%): [1080.653, 1125.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.295), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   1156.182 ±(99.9%) 713.033 MB/sec [Average]
[info]   (min, avg, max) = (1020.865, 1156.182, 1361.372), stdev = 185.172
[info]   CI (99.9%): [443.149, 1869.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4781.663 ±(99.9%) 3023.198 B/op [Average]
[info]   (min, avg, max) = (4189.964, 4781.663, 5668.683), stdev = 785.115
[info]   CI (99.9%): [1758.466, 7804.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.307 ±(99.9%) 28.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.307, 16.536), stdev = 7.395
[info]   CI (99.9%): [≈ 0, 31.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce
[info] # Run progress: 65.18% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3149.104 ops/s
[info] # Warmup Iteration   2: 4208.606 ops/s
[info] # Warmup Iteration   3: 4371.134 ops/s
[info] # Warmup Iteration   4: 4416.618 ops/s
[info] # Warmup Iteration   5: 4398.526 ops/s
[info] Iteration   1: 4455.078 ops/s
[info]                  ·gc.alloc.rate:                                  1083.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.099 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 51.307 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       479342.305 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1411.907 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 4473.527 ops/s
[info]                  ·gc.alloc.rate:                                  1088.302 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.879 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       359210.505 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4485.910 ops/s
[info]                  ·gc.alloc.rate:                                  1091.328 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.669 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       358249.835 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4461.224 ops/s
[info]                  ·gc.alloc.rate:                                  1085.315 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.767 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       360257.061 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4469.613 ops/s
[info]                  ·gc.alloc.rate:                                  1087.720 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       479268.637 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce":
[info]   4469.070 ±(99.9%) 45.605 ops/s [Average]
[info]   (min, avg, max) = (4455.078, 4469.070, 4485.910), stdev = 11.844
[info]   CI (99.9%): [4423.465, 4514.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1087.259 ±(99.9%) 11.356 MB/sec [Average]
[info]   (min, avg, max) = (1083.632, 1087.259, 1091.328), stdev = 2.949
[info]   CI (99.9%): [1075.903, 1098.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   382912.094 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (382912.091, 382912.094, 382912.099), stdev = 0.004
[info]   CI (99.9%): [382912.079, 382912.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.063 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.033, 0.063, 0.145), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   22.240 ±(99.9%) 63.513 B/op [Average]
[info]   (min, avg, max) = (11.578, 22.240, 51.307), stdev = 16.494
[info]   CI (99.9%): [≈ 0, 85.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1156.208 ±(99.9%) 712.807 MB/sec [Average]
[info]   (min, avg, max) = (1020.938, 1156.208, 1361.436), stdev = 185.114
[info]   CI (99.9%): [443.401, 1869.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   407265.669 ±(99.9%) 253244.829 B/op [Average]
[info]   (min, avg, max) = (358249.835, 407265.669, 479342.305), stdev = 65766.878
[info]   CI (99.9%): [154020.840, 660510.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   282.381 ±(99.9%) 2431.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 282.381, 1411.907), stdev = 631.424
[info]   CI (99.9%): [≈ 0, 2713.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson
[info] # Run progress: 66.07% complete, ETA 00:10:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 17583.462 ops/s
[info] # Warmup Iteration   2: 26790.454 ops/s
[info] # Warmup Iteration   3: 26656.116 ops/s
[info] # Warmup Iteration   4: 26851.700 ops/s
[info] # Warmup Iteration   5: 26369.582 ops/s
[info] Iteration   1: 26641.218 ops/s
[info]                  ·gc.alloc.rate:            385.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       22808.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19833.457 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 26734.650 ops/s
[info]                  ·gc.alloc.rate:            387.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.928 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19763.736 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 26644.749 ops/s
[info]                  ·gc.alloc.rate:            386.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19828.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 26737.708 ops/s
[info]                  ·gc.alloc.rate:            387.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.921 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39524.516 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   5: 26863.845 ops/s
[info]                  ·gc.alloc.rate:            389.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.847 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19669.581 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson":
[info]   26724.434 ±(99.9%) 349.702 ops/s [Average]
[info]   (min, avg, max) = (26641.218, 26724.434, 26863.845), stdev = 90.817
[info]   CI (99.9%): [26374.732, 27074.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   387.193 ±(99.9%) 5.198 MB/sec [Average]
[info]   (min, avg, max) = (385.955, 387.193, 389.299), stdev = 1.350
[info]   CI (99.9%): [381.994, 392.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   22807.857 ±(99.9%) 0.644 B/op [Average]
[info]   (min, avg, max) = (22807.577, 22807.857, 22808.012), stdev = 0.167
[info]   CI (99.9%): [22807.213, 22808.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   402.778 ±(99.9%) 578.076 MB/sec [Average]
[info]   (min, avg, max) = (335.566, 402.778, 671.329), stdev = 150.124
[info]   CI (99.9%): [≈ 0, 980.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   23724.057 ±(99.9%) 34012.638 B/op [Average]
[info]   (min, avg, max) = (19669.581, 23724.057, 39524.516), stdev = 8832.974
[info]   CI (99.9%): [≈ 0, 57736.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 13.000), stdev = 3.050
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter
[info] # Run progress: 66.96% complete, ETA 00:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20661.404 ops/s
[info] # Warmup Iteration   2: 16652.773 ops/s
[info] # Warmup Iteration   3: 23855.632 ops/s
[info] # Warmup Iteration   4: 24016.813 ops/s
[info] # Warmup Iteration   5: 23976.811 ops/s
[info] Iteration   1: 23897.218 ops/s
[info]                  ·gc.alloc.rate:            183.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22154.250 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 24050.241 ops/s
[info]                  ·gc.alloc.rate:      184.336 MB/sec
[info]                  ·gc.alloc.rate.norm: 12064.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23883.076 ops/s
[info]                  ·gc.alloc.rate:            183.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22167.234 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 24042.170 ops/s
[info]                  ·gc.alloc.rate:      184.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 12064.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23937.961 ops/s
[info]                  ·gc.alloc.rate:            183.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       12064.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22116.313 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter":
[info]   23962.133 ±(99.9%) 305.741 ops/s [Average]
[info]   (min, avg, max) = (23883.076, 23962.133, 24050.241), stdev = 79.400
[info]   CI (99.9%): [23656.393, 24267.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   183.649 ±(99.9%) 2.352 MB/sec [Average]
[info]   (min, avg, max) = (183.066, 183.649, 184.336), stdev = 0.611
[info]   CI (99.9%): [181.298, 186.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   12064.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (12064.017, 12064.018, 12064.018), stdev = 0.001
[info]   CI (99.9%): [12064.015, 12064.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.800 ±(99.9%) 709.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.800, 336.378), stdev = 184.217
[info]   CI (99.9%): [≈ 0, 911.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   13287.559 ±(99.9%) 46707.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13287.559, 22167.234), stdev = 12129.841
[info]   CI (99.9%): [≈ 0, 59995.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc
[info] # Run progress: 67.86% complete, ETA 00:09:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28240.115 ops/s
[info] # Warmup Iteration   2: 32851.036 ops/s
[info] # Warmup Iteration   3: 32325.915 ops/s
[info] # Warmup Iteration   4: 32024.068 ops/s
[info] # Warmup Iteration   5: 32787.000 ops/s
[info] Iteration   1: 25236.107 ops/s
[info]                  ·gc.alloc.rate:      3.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 31256.946 ops/s
[info]                  ·gc.alloc.rate:      4.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 32616.248 ops/s
[info]                  ·gc.alloc.rate:      4.808 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 31493.607 ops/s
[info]                  ·gc.alloc.rate:      4.643 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32350.792 ops/s
[info]                  ·gc.alloc.rate:      4.769 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc":
[info]   30590.740 ±(99.9%) 11732.078 ops/s [Average]
[info]   (min, avg, max) = (25236.107, 30590.740, 32616.248), stdev = 3046.783
[info]   CI (99.9%): [18858.662, 42322.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   4.509 ±(99.9%) 1.731 MB/sec [Average]
[info]   (min, avg, max) = (3.719, 4.509, 4.808), stdev = 0.449
[info]   CI (99.9%): [2.779, 6.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   232.013 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (232.013, 232.013, 232.016), stdev = 0.002
[info]   CI (99.9%): [232.008, 232.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay
[info] # Run progress: 68.75% complete, ETA 00:09:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1717.977 ops/s
[info] # Warmup Iteration   2: 3697.653 ops/s
[info] # Warmup Iteration   3: 3689.760 ops/s
[info] # Warmup Iteration   4: 3745.648 ops/s
[info] # Warmup Iteration   5: 3739.432 ops/s
[info] Iteration   1: 3816.369 ops/s
[info]                  ·gc.alloc.rate:                                  1153.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475639.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.865 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       420858.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                274.712 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 3823.658 ops/s
[info]                  ·gc.alloc.rate:                                  1155.799 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475640.272 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.901 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       420252.813 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3820.533 ops/s
[info]                  ·gc.alloc.rate:            1154.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       475640.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 560776.908 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 3838.664 ops/s
[info]                  ·gc.alloc.rate:                                  1160.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475639.471 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       418611.200 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3825.914 ops/s
[info]                  ·gc.alloc.rate:            1156.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       475640.598 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 560044.250 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay":
[info]   3825.028 ±(99.9%) 32.434 ops/s [Average]
[info]   (min, avg, max) = (3816.369, 3825.028, 3838.664), stdev = 8.423
[info]   CI (99.9%): [3792.593, 3857.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1156.176 ±(99.9%) 9.815 MB/sec [Average]
[info]   (min, avg, max) = (1153.589, 1156.176, 1160.351), stdev = 2.549
[info]   CI (99.9%): [1146.360, 1165.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   475639.965 ±(99.9%) 2.564 B/op [Average]
[info]   (min, avg, max) = (475639.059, 475639.965, 475640.598), stdev = 0.666
[info]   CI (99.9%): [475637.401, 475642.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.051), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   10.555 ±(99.9%) 39.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.555, 21.008), stdev = 10.261
[info]   CI (99.9%): [≈ 0, 50.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1157.240 ±(99.9%) 718.067 MB/sec [Average]
[info]   (min, avg, max) = (1020.728, 1157.240, 1361.581), stdev = 186.480
[info]   CI (99.9%): [439.173, 1875.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   476108.815 ±(99.9%) 296351.176 B/op [Average]
[info]   (min, avg, max) = (418611.200, 476108.815, 560776.908), stdev = 76961.459
[info]   CI (99.9%): [179757.639, 772459.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   54.942 ±(99.9%) 473.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.942, 274.712), stdev = 122.855
[info]   CI (99.9%): [≈ 0, 528.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson
[info] # Run progress: 69.64% complete, ETA 00:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 98975.556 ops/s
[info] # Warmup Iteration   2: 459318.934 ops/s
[info] # Warmup Iteration   3: 459685.402 ops/s
[info] # Warmup Iteration   4: 460948.600 ops/s
[info] # Warmup Iteration   5: 452832.539 ops/s
[info] Iteration   1: 461978.638 ops/s
[info]                  ·gc.alloc.rate:                   1035.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3442.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 472870.664 ops/s
[info]                  ·gc.alloc.rate:                                  1059.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.276 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.920 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3398.917 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 471650.855 ops/s
[info]                  ·gc.alloc.rate:            1057.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3407.390 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 470454.547 ops/s
[info]                  ·gc.alloc.rate:            1054.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3416.341 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 471866.284 ops/s
[info]                  ·gc.alloc.rate:            1057.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3406.098 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson":
[info]   469764.198 ±(99.9%) 17082.272 ops/s [Average]
[info]   (min, avg, max) = (461978.638, 469764.198, 472870.664), stdev = 4436.212
[info]   CI (99.9%): [452681.926, 486846.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate":
[info]   1052.849 ±(99.9%) 38.304 MB/sec [Average]
[info]   (min, avg, max) = (1035.396, 1052.849, 1059.842), stdev = 9.947
[info]   CI (99.9%): [1014.545, 1091.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm":
[info]   3528.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3528.001, 3528.001, 3528.001), stdev = 0.001
[info]   CI (99.9%): [3528.001, 3528.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.055 ±(99.9%) 0.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.276), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.184 ±(99.9%) 1.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.184, 0.920), stdev = 0.411
[info]   CI (99.9%): [≈ 0, 1.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen":
[info]   1018.875 ±(99.9%) 18.344 MB/sec [Average]
[info]   (min, avg, max) = (1010.354, 1018.875, 1021.064), stdev = 4.764
[info]   CI (99.9%): [1000.530, 1037.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3414.284 ±(99.9%) 65.595 B/op [Average]
[info]   (min, avg, max) = (3398.917, 3414.284, 3442.671), stdev = 17.035
[info]   CI (99.9%): [3348.688, 3479.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.177 ±(99.9%) 27.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.177, 15.886), stdev = 7.104
[info]   CI (99.9%): [≈ 0, 30.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 15.000), stdev = 4.919
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter
[info] # Run progress: 70.54% complete, ETA 00:09:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2034507.080 ops/s
[info] # Warmup Iteration   2: 2336877.972 ops/s
[info] # Warmup Iteration   3: 2302100.304 ops/s
[info] # Warmup Iteration   4: 2325602.608 ops/s
[info] # Warmup Iteration   5: 2328555.849 ops/s
[info] Iteration   1: 2330683.757 ops/s
[info]                  ·gc.alloc.rate:            485.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 227.159 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2349766.584 ops/s
[info]                  ·gc.alloc.rate:            489.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 225.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2303980.370 ops/s
[info]                  ·gc.alloc.rate:            480.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 459.580 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 2336060.870 ops/s
[info]                  ·gc.alloc.rate:            486.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 226.640 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2318254.056 ops/s
[info]                  ·gc.alloc.rate:            483.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 456.760 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter":
[info]   2327749.127 ±(99.9%) 67181.756 ops/s [Average]
[info]   (min, avg, max) = (2303980.370, 2327749.127, 2349766.584), stdev = 17446.889
[info]   CI (99.9%): [2260567.372, 2394930.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   485.068 ±(99.9%) 13.934 MB/sec [Average]
[info]   (min, avg, max) = (480.142, 485.068, 489.636), stdev = 3.618
[info]   CI (99.9%): [471.135, 499.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (328.000, 328.000, 328.000), stdev = 0.001
[info]   CI (99.9%): [328.000, 328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.913 ±(99.9%) 709.472 MB/sec [Average]
[info]   (min, avg, max) = (336.352, 470.913, 672.754), stdev = 184.248
[info]   CI (99.9%): [≈ 0, 1180.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   319.091 ±(99.9%) 488.904 B/op [Average]
[info]   (min, avg, max) = (225.317, 319.091, 459.580), stdev = 126.967
[info]   CI (99.9%): [≈ 0, 807.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 13.000), stdev = 3.899
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay
[info] # Run progress: 71.43% complete, ETA 00:08:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76132.818 ops/s
[info] # Warmup Iteration   2: 213380.046 ops/s
[info] # Warmup Iteration   3: 214435.095 ops/s
[info] # Warmup Iteration   4: 216787.620 ops/s
[info] # Warmup Iteration   5: 214419.005 ops/s
[info] Iteration   1: 214492.787 ops/s
[info]                  ·gc.alloc.rate:            852.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       6256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4936.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 216834.438 ops/s
[info]                  ·gc.alloc.rate:                   861.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              6256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7349.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 218368.833 ops/s
[info]                  ·gc.alloc.rate:                                  867.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.583 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4906.573 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 217374.833 ops/s
[info]                  ·gc.alloc.rate:                                  863.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7393.644 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 218927.197 ops/s
[info]                  ·gc.alloc.rate:            870.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       6256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4894.293 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay":
[info]   217199.618 ±(99.9%) 6625.621 ops/s [Average]
[info]   (min, avg, max) = (214492.787, 217199.618, 218927.197), stdev = 1720.653
[info]   CI (99.9%): [210573.996, 223825.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate":
[info]   863.210 ±(99.9%) 26.515 MB/sec [Average]
[info]   (min, avg, max) = (852.349, 863.210, 870.130), stdev = 6.886
[info]   CI (99.9%): [836.695, 889.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   6256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6256.002, 6256.002, 6256.002), stdev = 0.001
[info]   CI (99.9%): [6256.002, 6256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.118 ±(99.9%) 1.000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.118, 0.583), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   813.480 ±(99.9%) 714.638 MB/sec [Average]
[info]   (min, avg, max) = (672.586, 813.480, 1021.045), stdev = 185.589
[info]   CI (99.9%): [98.842, 1528.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5896.060 ±(99.9%) 5186.795 B/op [Average]
[info]   (min, avg, max) = (4894.293, 5896.060, 7393.644), stdev = 1346.994
[info]   CI (99.9%): [709.265, 11082.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.802 ±(99.9%) 49.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.802, 29.010), stdev = 12.974
[info]   CI (99.9%): [≈ 0, 55.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 14.000), stdev = 5.148
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce
[info] # Run progress: 72.32% complete, ETA 00:08:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347478.859 ops/s
[info] # Warmup Iteration   2: 523838.677 ops/s
[info] # Warmup Iteration   3: 536594.144 ops/s
[info] # Warmup Iteration   4: 541526.889 ops/s
[info] # Warmup Iteration   5: 541961.993 ops/s
[info] Iteration   1: 554509.994 ops/s
[info]                  ·gc.alloc.rate:                                  1341.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3864.533 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 549916.383 ops/s
[info]                  ·gc.alloc.rate:            1330.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3896.783 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 549404.072 ops/s
[info]                  ·gc.alloc.rate:            1329.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3900.201 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 549414.001 ops/s
[info]                  ·gc.alloc.rate:            1329.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3900.322 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 550827.425 ops/s
[info]                  ·gc.alloc.rate:                                  1332.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3890.142 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce":
[info]   550814.375 ±(99.9%) 8261.888 ops/s [Average]
[info]   (min, avg, max) = (549404.072, 550814.375, 554509.994), stdev = 2145.586
[info]   CI (99.9%): [542552.487, 559076.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate":
[info]   1332.674 ±(99.9%) 20.095 MB/sec [Average]
[info]   (min, avg, max) = (1329.338, 1332.674, 1341.718), stdev = 5.219
[info]   CI (99.9%): [1312.579, 1352.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm":
[info]   3808.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3808.001, 3808.001, 3808.001), stdev = 0.001
[info]   CI (99.9%): [3808.001, 3808.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1361.493 ±(99.9%) 0.565 MB/sec [Average]
[info]   (min, avg, max) = (1361.268, 1361.493, 1361.637), stdev = 0.147
[info]   CI (99.9%): [1360.928, 1362.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3890.396 ±(99.9%) 57.902 B/op [Average]
[info]   (min, avg, max) = (3864.533, 3890.396, 3900.322), stdev = 15.037
[info]   CI (99.9%): [3832.495, 3948.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson
[info] # Run progress: 73.21% complete, ETA 00:08:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 582840.697 ops/s
[info] # Warmup Iteration   2: 1029545.045 ops/s
[info] # Warmup Iteration   3: 1027889.742 ops/s
[info] # Warmup Iteration   4: 1028038.297 ops/s
[info] # Warmup Iteration   5: 1024049.314 ops/s
[info] Iteration   1: 1020061.050 ops/s
[info]                  ·gc.alloc.rate:            689.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1035.998 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1018081.628 ops/s
[info]                  ·gc.alloc.rate:            688.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1038.045 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1020163.813 ops/s
[info]                  ·gc.alloc.rate:                   689.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1035.889 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 1036362.593 ops/s
[info]                  ·gc.alloc.rate:                   700.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             679.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1031.873 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1035493.070 ops/s
[info]                  ·gc.alloc.rate:                                  699.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1034.776 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson":
[info]   1026032.431 ±(99.9%) 34950.256 ops/s [Average]
[info]   (min, avg, max) = (1018081.628, 1026032.431, 1036362.593), stdev = 9076.470
[info]   CI (99.9%): [991082.175, 1060982.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate":
[info]   693.534 ±(99.9%) 23.710 MB/sec [Average]
[info]   (min, avg, max) = (688.158, 693.534, 700.572), stdev = 6.157
[info]   CI (99.9%): [669.824, 717.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   674.828 ±(99.9%) 18.465 MB/sec [Average]
[info]   (min, avg, max) = (671.302, 674.828, 680.697), stdev = 4.795
[info]   CI (99.9%): [656.363, 693.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1035.316 ±(99.9%) 8.694 B/op [Average]
[info]   (min, avg, max) = (1031.873, 1035.316, 1038.045), stdev = 2.258
[info]   CI (99.9%): [1026.622, 1044.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.432 ±(99.9%) 8.661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.432, 5.138), stdev = 2.249
[info]   CI (99.9%): [≈ 0, 10.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 13.000), stdev = 5.050
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter
[info] # Run progress: 74.11% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3986711.994 ops/s
[info] # Warmup Iteration   2: 4365895.401 ops/s
[info] # Warmup Iteration   3: 4407756.107 ops/s
[info] # Warmup Iteration   4: 4404665.964 ops/s
[info] # Warmup Iteration   5: 4396619.753 ops/s
[info] Iteration   1: 4397857.473 ops/s
[info]                  ·gc.alloc.rate:            782.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 240.778 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4423014.987 ops/s
[info]                  ·gc.alloc.rate:                   786.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        239.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 4400938.054 ops/s
[info]                  ·gc.alloc.rate:                                  783.043 MB/sec
[info]                  ·gc.alloc.rate.norm:                             280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       365.195 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4401426.946 ops/s
[info]                  ·gc.alloc.rate:                                  782.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       243.435 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 4144091.111 ops/s
[info]                  ·gc.alloc.rate:            737.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 258.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter":
[info]   4353465.714 ±(99.9%) 452345.604 ops/s [Average]
[info]   (min, avg, max) = (4144091.111, 4353465.714, 4423014.987), stdev = 117472.717
[info]   CI (99.9%): [3901120.110, 4805811.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate":
[info]   774.494 ±(99.9%) 80.294 MB/sec [Average]
[info]   (min, avg, max) = (737.320, 774.494, 786.737), stdev = 20.852
[info]   CI (99.9%): [694.201, 854.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm":
[info]   280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (280.000, 280.000, 280.000), stdev = 0.001
[info]   CI (99.9%): [280.000, 280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   745.674 ±(99.9%) 593.501 MB/sec [Average]
[info]   (min, avg, max) = (672.703, 745.674, 1021.298), stdev = 154.130
[info]   CI (99.9%): [152.174, 1339.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   269.475 ±(99.9%) 208.138 B/op [Average]
[info]   (min, avg, max) = (239.415, 269.475, 365.195), stdev = 54.053
[info]   CI (99.9%): [61.337, 477.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.284 ±(99.9%) 2.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 1.422), stdev = 0.636
[info]   CI (99.9%): [≈ 0, 2.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 11.000), stdev = 4.336
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay
[info] # Run progress: 75.00% complete, ETA 00:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142098.095 ops/s
[info] # Warmup Iteration   2: 294102.323 ops/s
[info] # Warmup Iteration   3: 297018.679 ops/s
[info] # Warmup Iteration   4: 297896.252 ops/s
[info] # Warmup Iteration   5: 297809.470 ops/s
[info] Iteration   1: 298725.590 ops/s
[info]                  ·gc.alloc.rate:                   1021.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5334.550 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 301717.207 ops/s
[info]                  ·gc.alloc.rate:                                  1031.968 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.372 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5326.813 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 302788.417 ops/s
[info]                  ·gc.alloc.rate:            1035.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5308.010 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 302914.333 ops/s
[info]                  ·gc.alloc.rate:            1036.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5305.749 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 301361.589 ops/s
[info]                  ·gc.alloc.rate:            1030.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5333.104 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay":
[info]   301501.427 ±(99.9%) 6507.484 ops/s [Average]
[info]   (min, avg, max) = (298725.590, 301501.427, 302914.333), stdev = 1689.973
[info]   CI (99.9%): [294993.943, 308008.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate":
[info]   1031.227 ±(99.9%) 22.413 MB/sec [Average]
[info]   (min, avg, max) = (1021.661, 1031.227, 1036.112), stdev = 5.821
[info]   CI (99.9%): [1008.814, 1053.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.372), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.274 ±(99.9%) 15.061 MB/sec [Average]
[info]   (min, avg, max) = (1012.277, 1019.274, 1021.053), stdev = 3.911
[info]   CI (99.9%): [1004.213, 1034.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5321.645 ±(99.9%) 53.188 B/op [Average]
[info]   (min, avg, max) = (5305.749, 5321.645, 5334.550), stdev = 13.813
[info]   CI (99.9%): [5268.458, 5374.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.211 ±(99.9%) 36.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.211, 21.057), stdev = 9.417
[info]   CI (99.9%): [≈ 0, 40.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 14.000), stdev = 4.219
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce
[info] # Run progress: 75.89% complete, ETA 00:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136885.655 ops/s
[info] # Warmup Iteration   2: 281984.828 ops/s
[info] # Warmup Iteration   3: 287937.484 ops/s
[info] # Warmup Iteration   4: 284534.103 ops/s
[info] # Warmup Iteration   5: 288772.360 ops/s
[info] Iteration   1: 287242.203 ops/s
[info]                  ·gc.alloc.rate:            795.552 MB/sec
[info]                  ·gc.alloc.rate.norm:       4352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1005.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5498.839 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 286963.736 ops/s
[info]                  ·gc.alloc.rate:                   793.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3689.982 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 288744.200 ops/s
[info]                  ·gc.alloc.rate:                                  798.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3707.153 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.631 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 290591.655 ops/s
[info]                  ·gc.alloc.rate:                                  803.501 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.182 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5530.156 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 291517.551 ops/s
[info]                  ·gc.alloc.rate:            805.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       4352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3675.542 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce":
[info]   289011.869 ±(99.9%) 7742.662 ops/s [Average]
[info]   (min, avg, max) = (286963.736, 289011.869, 291517.551), stdev = 2010.745
[info]   CI (99.9%): [281269.207, 296754.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate":
[info]   799.376 ±(99.9%) 20.170 MB/sec [Average]
[info]   (min, avg, max) = (793.547, 799.376, 805.939), stdev = 5.238
[info]   CI (99.9%): [779.206, 819.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.002), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.182), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen":
[info]   811.953 ±(99.9%) 707.517 MB/sec [Average]
[info]   (min, avg, max) = (672.834, 811.953, 1021.021), stdev = 183.740
[info]   CI (99.9%): [104.436, 1519.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4420.334 ±(99.9%) 3846.615 B/op [Average]
[info]   (min, avg, max) = (3675.542, 4420.334, 5530.156), stdev = 998.954
[info]   CI (99.9%): [573.719, 8266.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.380 ±(99.9%) 30.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.380, 18.267), stdev = 7.921
[info]   CI (99.9%): [≈ 0, 34.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.058
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson
[info] # Run progress: 76.79% complete, ETA 00:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 104355.103 ops/s
[info] # Warmup Iteration   2: 558788.325 ops/s
[info] # Warmup Iteration   3: 568119.569 ops/s
[info] # Warmup Iteration   4: 560485.877 ops/s
[info] # Warmup Iteration   5: 565275.360 ops/s
[info] Iteration   1: 567815.385 ops/s
[info]                  ·gc.alloc.rate:            891.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1861.148 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 565131.950 ops/s
[info]                  ·gc.alloc.rate:                   887.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2814.245 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 569999.426 ops/s
[info]                  ·gc.alloc.rate:                                  895.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.284 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.784 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2819.593 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 571435.434 ops/s
[info]                  ·gc.alloc.rate:            897.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1874.986 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 569138.934 ops/s
[info]                  ·gc.alloc.rate:            893.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2823.878 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson":
[info]   568704.226 ±(99.9%) 9208.838 ops/s [Average]
[info]   (min, avg, max) = (565131.950, 568704.226, 571435.434), stdev = 2391.506
[info]   CI (99.9%): [559495.388, 577913.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate":
[info]   893.108 ±(99.9%) 14.480 MB/sec [Average]
[info]   (min, avg, max) = (887.465, 893.108, 897.373), stdev = 3.761
[info]   CI (99.9%): [878.628, 907.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.057 ±(99.9%) 0.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.284), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.157 ±(99.9%) 1.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.784), stdev = 0.351
[info]   CI (99.9%): [≈ 0, 1.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen":
[info]   880.883 ±(99.9%) 720.413 MB/sec [Average]
[info]   (min, avg, max) = (671.401, 880.883, 1021.056), stdev = 187.089
[info]   CI (99.9%): [160.470, 1601.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2438.770 ±(99.9%) 2006.232 B/op [Average]
[info]   (min, avg, max) = (1861.148, 2438.770, 2823.878), stdev = 521.012
[info]   CI (99.9%): [432.538, 4445.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.597 ±(99.9%) 22.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.597, 12.986), stdev = 5.808
[info]   CI (99.9%): [≈ 0, 24.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 16.000), stdev = 6.042
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter
[info] # Run progress: 77.68% complete, ETA 00:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2137728.632 ops/s
[info] # Warmup Iteration   2: 2307572.481 ops/s
[info] # Warmup Iteration   3: 2373886.611 ops/s
[info] # Warmup Iteration   4: 2356059.956 ops/s
[info] # Warmup Iteration   5: 2353371.885 ops/s
[info] Iteration   1: 2385690.286 ops/s
[info]                  ·gc.alloc.rate:            569.833 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 221.929 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2346574.916 ops/s
[info]                  ·gc.alloc.rate:            560.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 451.224 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2320542.209 ops/s
[info]                  ·gc.alloc.rate:            554.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 456.299 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2363555.454 ops/s
[info]                  ·gc.alloc.rate:            564.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.012 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2374080.891 ops/s
[info]                  ·gc.alloc.rate:                   567.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        448.687 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter":
[info]   2358088.751 ±(99.9%) 97979.583 ops/s [Average]
[info]   (min, avg, max) = (2320542.209, 2358088.751, 2385690.286), stdev = 25444.987
[info]   CI (99.9%): [2260109.168, 2456068.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate":
[info]   563.358 ±(99.9%) 23.292 MB/sec [Average]
[info]   (min, avg, max) = (554.403, 563.358, 569.833), stdev = 6.049
[info]   CI (99.9%): [540.066, 586.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   539.049 ±(99.9%) 712.415 MB/sec [Average]
[info]   (min, avg, max) = (336.336, 539.049, 676.881), stdev = 185.012
[info]   CI (99.9%): [≈ 0, 1251.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   360.430 ±(99.9%) 483.314 B/op [Average]
[info]   (min, avg, max) = (221.929, 360.430, 456.299), stdev = 125.515
[info]   CI (99.9%): [≈ 0, 843.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.530 ±(99.9%) 4.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.530, 2.650), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.200, 11.000), stdev = 2.588
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay
[info] # Run progress: 78.57% complete, ETA 00:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85340.373 ops/s
[info] # Warmup Iteration   2: 244379.175 ops/s
[info] # Warmup Iteration   3: 242664.578 ops/s
[info] # Warmup Iteration   4: 243294.250 ops/s
[info] # Warmup Iteration   5: 240580.961 ops/s
[info] Iteration   1: 241256.882 ops/s
[info]                  ·gc.alloc.rate:            871.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6583.421 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 242125.489 ops/s
[info]                  ·gc.alloc.rate:                   874.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4395.065 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 246653.277 ops/s
[info]                  ·gc.alloc.rate:                                  891.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.391 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6516.010 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 247105.946 ops/s
[info]                  ·gc.alloc.rate:            892.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4336.202 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 246294.824 ops/s
[info]                  ·gc.alloc.rate:            890.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6525.532 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay":
[info]   244687.284 ±(99.9%) 10655.520 ops/s [Average]
[info]   (min, avg, max) = (241256.882, 244687.284, 247105.946), stdev = 2767.205
[info]   CI (99.9%): [234031.764, 255342.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate":
[info]   884.118 ±(99.9%) 38.776 MB/sec [Average]
[info]   (min, avg, max) = (871.678, 884.118, 892.894), stdev = 10.070
[info]   CI (99.9%): [845.341, 922.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm":
[info]   5688.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.002, 5688.002, 5688.002), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.078 ±(99.9%) 0.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.391), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.513 ±(99.9%) 714.622 MB/sec [Average]
[info]   (min, avg, max) = (675.900, 881.513, 1021.079), stdev = 185.585
[info]   CI (99.9%): [166.890, 1596.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5671.246 ±(99.9%) 4591.186 B/op [Average]
[info]   (min, avg, max) = (4336.202, 5671.246, 6583.421), stdev = 1192.316
[info]   CI (99.9%): [1080.060, 10262.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.196 ±(99.9%) 44.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.196, 25.981), stdev = 11.619
[info]   CI (99.9%): [≈ 0, 49.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 17.000), stdev = 6.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce
[info] # Run progress: 79.46% complete, ETA 00:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381698.279 ops/s
[info] # Warmup Iteration   2: 495856.909 ops/s
[info] # Warmup Iteration   3: 513054.658 ops/s
[info] # Warmup Iteration   4: 506157.921 ops/s
[info] # Warmup Iteration   5: 514676.873 ops/s
[info] Iteration   1: 523169.971 ops/s
[info]                  ·gc.alloc.rate:                                  1206.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.519 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4096.063 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 528316.381 ops/s
[info]                  ·gc.alloc.rate:            1219.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       3632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3042.117 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 527886.648 ops/s
[info]                  ·gc.alloc.rate:            1218.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       3632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4059.422 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 527395.938 ops/s
[info]                  ·gc.alloc.rate:                                  1216.999 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3047.412 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 525731.664 ops/s
[info]                  ·gc.alloc.rate:                                  1213.162 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4076.097 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce":
[info]   526500.121 ±(99.9%) 8101.047 ops/s [Average]
[info]   (min, avg, max) = (523169.971, 526500.121, 528316.381), stdev = 2103.816
[info]   CI (99.9%): [518399.074, 534601.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate":
[info]   1214.898 ±(99.9%) 19.247 MB/sec [Average]
[info]   (min, avg, max) = (1206.950, 1214.898, 1219.228), stdev = 4.998
[info]   CI (99.9%): [1195.652, 1234.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   3632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.001, 3632.001, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.001, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.106 ±(99.9%) 0.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.519), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 0.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1225.299 ±(99.9%) 717.565 MB/sec [Average]
[info]   (min, avg, max) = (1021.117, 1225.299, 1361.506), stdev = 186.349
[info]   CI (99.9%): [507.734, 1942.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3664.222 ±(99.9%) 2178.065 B/op [Average]
[info]   (min, avg, max) = (3042.117, 3664.222, 4096.063), stdev = 565.637
[info]   CI (99.9%): [1486.157, 5842.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson
[info] # Run progress: 80.36% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 541706.406 ops/s
[info] # Warmup Iteration   2: 1224176.128 ops/s
[info] # Warmup Iteration   3: 1226814.590 ops/s
[info] # Warmup Iteration   4: 1224951.843 ops/s
[info] # Warmup Iteration   5: 1214035.916 ops/s
[info] Iteration   1: 1230652.410 ops/s
[info]                  ·gc.alloc.rate:            612.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429.316 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1214503.326 ops/s
[info]                  ·gc.alloc.rate:            604.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 870.089 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1213613.377 ops/s
[info]                  ·gc.alloc.rate:            604.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 870.702 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 1217592.570 ops/s
[info]                  ·gc.alloc.rate:                   606.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        867.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 1225053.350 ops/s
[info]                  ·gc.alloc.rate:                                  610.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             784.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.267 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            679.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       872.855 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.711 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson":
[info]   1220283.006 ±(99.9%) 28257.523 ops/s [Average]
[info]   (min, avg, max) = (1213613.377, 1220283.006, 1230652.410), stdev = 7338.389
[info]   CI (99.9%): [1192025.484, 1248540.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate":
[info]   607.756 ±(99.9%) 13.996 MB/sec [Average]
[info]   (min, avg, max) = (604.463, 607.756, 612.890), stdev = 3.635
[info]   CI (99.9%): [593.761, 621.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm":
[info]   784.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (784.000, 784.000, 784.000), stdev = 0.001
[info]   CI (99.9%): [784.000, 784.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.053 ±(99.9%) 0.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.267), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.069 ±(99.9%) 0.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.343), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   605.758 ±(99.9%) 581.653 MB/sec [Average]
[info]   (min, avg, max) = (335.617, 605.758, 679.280), stdev = 151.053
[info]   CI (99.9%): [24.105, 1187.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   782.165 ±(99.9%) 759.565 B/op [Average]
[info]   (min, avg, max) = (429.316, 782.165, 872.855), stdev = 197.257
[info]   CI (99.9%): [22.600, 1541.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.203 ±(99.9%) 7.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.203, 4.305), stdev = 1.886
[info]   CI (99.9%): [≈ 0, 8.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.800, 13.000), stdev = 4.438
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter
[info] # Run progress: 81.25% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3023190.353 ops/s
[info] # Warmup Iteration   2: 3766359.681 ops/s
[info] # Warmup Iteration   3: 3733231.382 ops/s
[info] # Warmup Iteration   4: 3762504.658 ops/s
[info] # Warmup Iteration   5: 3730140.121 ops/s
[info] Iteration   1: 3786101.583 ops/s
[info]                  ·gc.alloc.rate:            519.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.839 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 3714644.475 ops/s
[info]                  ·gc.alloc.rate:            509.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 285.055 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 3746336.942 ops/s
[info]                  ·gc.alloc.rate:            514.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 282.636 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 3759633.428 ops/s
[info]                  ·gc.alloc.rate:            515.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140.824 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3731740.879 ops/s
[info]                  ·gc.alloc.rate:                   512.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              216.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        283.749 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter":
[info]   3747691.462 ±(99.9%) 104860.379 ops/s [Average]
[info]   (min, avg, max) = (3714644.475, 3747691.462, 3786101.583), stdev = 27231.907
[info]   CI (99.9%): [3642831.083, 3852551.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate":
[info]   514.273 ±(99.9%) 14.207 MB/sec [Average]
[info]   (min, avg, max) = (509.746, 514.273, 519.432), stdev = 3.689
[info]   CI (99.9%): [500.067, 528.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   216.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (216.000, 216.000, 216.000), stdev = 0.001
[info]   CI (99.9%): [216.000, 216.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.169 ±(99.9%) 709.496 MB/sec [Average]
[info]   (min, avg, max) = (336.281, 538.169, 672.788), stdev = 184.254
[info]   CI (99.9%): [≈ 0, 1247.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   226.421 ±(99.9%) 302.637 B/op [Average]
[info]   (min, avg, max) = (139.839, 226.421, 285.055), stdev = 78.594
[info]   CI (99.9%): [≈ 0, 529.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.337 ±(99.9%) 2.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 1.686), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 3.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 12.000), stdev = 3.114
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay
[info] # Run progress: 82.14% complete, ETA 00:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135088.587 ops/s
[info] # Warmup Iteration   2: 282388.796 ops/s
[info] # Warmup Iteration   3: 285122.372 ops/s
[info] # Warmup Iteration   4: 286002.878 ops/s
[info] # Warmup Iteration   5: 288973.315 ops/s
[info] Iteration   1: 283853.338 ops/s
[info]                  ·gc.alloc.rate:                   959.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5595.606 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 289387.938 ops/s
[info]                  ·gc.alloc.rate:                                  978.082 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5549.804 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.623 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 289123.214 ops/s
[info]                  ·gc.alloc.rate:            977.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5558.880 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 291460.147 ops/s
[info]                  ·gc.alloc.rate:                                  985.176 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5514.467 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 290776.227 ops/s
[info]                  ·gc.alloc.rate:            982.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5527.342 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay":
[info]   288920.173 ±(99.9%) 11524.503 ops/s [Average]
[info]   (min, avg, max) = (283853.338, 288920.173, 291460.147), stdev = 2992.877
[info]   CI (99.9%): [277395.670, 300444.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate":
[info]   976.525 ±(99.9%) 38.972 MB/sec [Average]
[info]   (min, avg, max) = (959.382, 976.525, 985.176), stdev = 10.121
[info]   CI (99.9%): [937.553, 1015.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   5320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5320.001, 5320.001, 5320.002), stdev = 0.001
[info]   CI (99.9%): [5320.001, 5320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.280), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1018.554 ±(99.9%) 20.432 MB/sec [Average]
[info]   (min, avg, max) = (1009.083, 1018.554, 1021.188), stdev = 5.306
[info]   CI (99.9%): [998.122, 1038.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5549.220 ±(99.9%) 120.726 B/op [Average]
[info]   (min, avg, max) = (5514.467, 5549.220, 5595.606), stdev = 31.352
[info]   CI (99.9%): [5428.494, 5669.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.418 ±(99.9%) 30.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.418, 18.467), stdev = 8.009
[info]   CI (99.9%): [≈ 0, 35.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 16.000), stdev = 4.919
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce
[info] # Run progress: 83.04% complete, ETA 00:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145069.378 ops/s
[info] # Warmup Iteration   2: 282528.719 ops/s
[info] # Warmup Iteration   3: 294121.253 ops/s
[info] # Warmup Iteration   4: 291913.491 ops/s
[info] # Warmup Iteration   5: 293714.377 ops/s
[info] Iteration   1: 295527.669 ops/s
[info]                  ·gc.alloc.rate:            791.471 MB/sec
[info]                  ·gc.alloc.rate.norm:       4216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3582.971 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 295595.910 ops/s
[info]                  ·gc.alloc.rate:                   791.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5373.257 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 298265.483 ops/s
[info]                  ·gc.alloc.rate:                                  799.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3588.618 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.515 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 297911.689 ops/s
[info]                  ·gc.alloc.rate:                                  797.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3596.401 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 299961.594 ops/s
[info]                  ·gc.alloc.rate:                                  803.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5358.116 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce":
[info]   297452.469 ±(99.9%) 7285.569 ops/s [Average]
[info]   (min, avg, max) = (295527.669, 297452.469, 299961.594), stdev = 1892.039
[info]   CI (99.9%): [290166.900, 304738.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate":
[info]   796.748 ±(99.9%) 19.749 MB/sec [Average]
[info]   (min, avg, max) = (791.471, 796.748, 803.523), stdev = 5.129
[info]   CI (99.9%): [776.999, 816.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm":
[info]   4216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4216.001, 4216.001, 4216.001), stdev = 0.001
[info]   CI (99.9%): [4216.001, 4216.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.036), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.063 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.192), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen":
[info]   812.747 ±(99.9%) 711.764 MB/sec [Average]
[info]   (min, avg, max) = (672.632, 812.747, 1021.197), stdev = 184.843
[info]   CI (99.9%): [100.983, 1524.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4299.873 ±(99.9%) 3746.588 B/op [Average]
[info]   (min, avg, max) = (3582.971, 4299.873, 5373.257), stdev = 972.977
[info]   CI (99.9%): [553.285, 8046.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.250 ±(99.9%) 29.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.250, 17.734), stdev = 7.690
[info]   CI (99.9%): [≈ 0, 33.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 17.000), stdev = 6.656
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson
[info] # Run progress: 83.93% complete, ETA 00:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 109581.703 ops/s
[info] # Warmup Iteration   2: 559418.956 ops/s
[info] # Warmup Iteration   3: 564024.708 ops/s
[info] # Warmup Iteration   4: 565705.021 ops/s
[info] # Warmup Iteration   5: 560976.691 ops/s
[info] Iteration   1: 563257.043 ops/s
[info]                  ·gc.alloc.rate:            916.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2814.300 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 567700.347 ops/s
[info]                  ·gc.alloc.rate:                                  923.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2809.678 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.657 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.905 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 573958.930 ops/s
[info]                  ·gc.alloc.rate:                                  933.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1866.856 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 568001.575 ops/s
[info]                  ·gc.alloc.rate:            922.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1019.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2829.465 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 571192.089 ops/s
[info]                  ·gc.alloc.rate:                                  928.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2813.671 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson":
[info]   568821.997 ±(99.9%) 15511.133 ops/s [Average]
[info]   (min, avg, max) = (563257.043, 568821.997, 573958.930), stdev = 4028.192
[info]   CI (99.9%): [553310.864, 584333.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate":
[info]   924.893 ±(99.9%) 25.529 MB/sec [Average]
[info]   (min, avg, max) = (916.080, 924.893, 933.419), stdev = 6.630
[info]   CI (99.9%): [899.365, 950.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2560.001, 2560.001, 2560.001), stdev = 0.001
[info]   CI (99.9%): [2560.001, 2560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.085), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.080 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.235), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   948.390 ±(99.9%) 576.627 MB/sec [Average]
[info]   (min, avg, max) = (680.687, 948.390, 1021.024), stdev = 149.748
[info]   CI (99.9%): [371.763, 1525.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2626.794 ±(99.9%) 1636.080 B/op [Average]
[info]   (min, avg, max) = (1866.856, 2626.794, 2829.465), stdev = 424.885
[info]   CI (99.9%): [990.714, 4262.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.931 ±(99.9%) 8.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.931, 4.657), stdev = 2.083
[info]   CI (99.9%): [≈ 0, 8.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.581 ±(99.9%) 22.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.581, 12.905), stdev = 5.771
[info]   CI (99.9%): [≈ 0, 24.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 18.000), stdev = 6.648
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter
[info] # Run progress: 84.82% complete, ETA 00:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1804438.874 ops/s
[info] # Warmup Iteration   2: 2040094.549 ops/s
[info] # Warmup Iteration   3: 2035390.327 ops/s
[info] # Warmup Iteration   4: 2043295.927 ops/s
[info] # Warmup Iteration   5: 2059896.601 ops/s
[info] Iteration   1: 2040244.634 ops/s
[info]                  ·gc.alloc.rate:            528.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 519.001 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2046617.195 ops/s
[info]                  ·gc.alloc.rate:            530.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 258.692 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2048511.663 ops/s
[info]                  ·gc.alloc.rate:            531.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 516.895 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2032011.783 ops/s
[info]                  ·gc.alloc.rate:            526.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 521.120 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 2004456.971 ops/s
[info]                  ·gc.alloc.rate:                   519.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        264.128 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter":
[info]   2034368.449 ±(99.9%) 69012.581 ops/s [Average]
[info]   (min, avg, max) = (2004456.971, 2034368.449, 2048511.663), stdev = 17922.348
[info]   CI (99.9%): [1965355.868, 2103381.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate":
[info]   527.360 ±(99.9%) 17.745 MB/sec [Average]
[info]   (min, avg, max) = (519.694, 527.360, 531.081), stdev = 4.608
[info]   CI (99.9%): [509.615, 545.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.213 ±(99.9%) 709.428 MB/sec [Average]
[info]   (min, avg, max) = (336.349, 538.213, 672.825), stdev = 184.236
[info]   CI (99.9%): [≈ 0, 1247.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   415.967 ±(99.9%) 543.371 B/op [Average]
[info]   (min, avg, max) = (258.692, 415.967, 521.120), stdev = 141.112
[info]   CI (99.9%): [≈ 0, 959.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.628 ±(99.9%) 5.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.628, 3.138), stdev = 1.403
[info]   CI (99.9%): [≈ 0, 6.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 11.000), stdev = 3.033
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay
[info] # Run progress: 85.71% complete, ETA 00:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88463.543 ops/s
[info] # Warmup Iteration   2: 242724.571 ops/s
[info] # Warmup Iteration   3: 240330.604 ops/s
[info] # Warmup Iteration   4: 239122.650 ops/s
[info] # Warmup Iteration   5: 241096.768 ops/s
[info] Iteration   1: 244316.391 ops/s
[info]                  ·gc.alloc.rate:            938.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       6048.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4334.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 242981.472 ops/s
[info]                  ·gc.alloc.rate:                                  933.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6584.153 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                25.888 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 245554.009 ops/s
[info]                  ·gc.alloc.rate:                                  943.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6545.141 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 244130.712 ops/s
[info]                  ·gc.alloc.rate:            938.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       6048.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6583.339 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 245811.679 ops/s
[info]                  ·gc.alloc.rate:            944.429 MB/sec
[info]                  ·gc.alloc.rate.norm:       6048.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6538.033 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay":
[info]   244558.853 ±(99.9%) 4428.297 ops/s [Average]
[info]   (min, avg, max) = (242981.472, 244558.853, 245811.679), stdev = 1150.015
[info]   CI (99.9%): [240130.556, 248987.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate":
[info]   939.636 ±(99.9%) 17.025 MB/sec [Average]
[info]   (min, avg, max) = (933.535, 939.636, 944.429), stdev = 4.421
[info]   CI (99.9%): [922.610, 956.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm":
[info]   6048.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6048.002, 6048.002, 6048.002), stdev = 0.001
[info]   CI (99.9%): [6048.001, 6048.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.091 ±(99.9%) 0.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.282), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   950.405 ±(99.9%) 597.853 MB/sec [Average]
[info]   (min, avg, max) = (672.691, 950.405, 1021.081), stdev = 155.260
[info]   CI (99.9%): [352.552, 1548.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6116.952 ±(99.9%) 3838.608 B/op [Average]
[info]   (min, avg, max) = (4334.094, 6116.952, 6584.153), stdev = 996.874
[info]   CI (99.9%): [2278.344, 9955.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.178 ±(99.9%) 44.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.178, 25.888), stdev = 11.577
[info]   CI (99.9%): [≈ 0, 49.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 12.000), stdev = 4.099
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce
[info] # Run progress: 86.61% complete, ETA 00:04:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334394.221 ops/s
[info] # Warmup Iteration   2: 530529.001 ops/s
[info] # Warmup Iteration   3: 537551.834 ops/s
[info] # Warmup Iteration   4: 537085.813 ops/s
[info] # Warmup Iteration   5: 536667.519 ops/s
[info] Iteration   1: 540284.468 ops/s
[info]                  ·gc.alloc.rate:                   944.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1959.861 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 540482.493 ops/s
[info]                  ·gc.alloc.rate:                                  945.009 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2971.525 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.940 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 537551.026 ops/s
[info]                  ·gc.alloc.rate:                                  939.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2989.891 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 542263.284 ops/s
[info]                  ·gc.alloc.rate:            948.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2963.816 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 547173.611 ops/s
[info]                  ·gc.alloc.rate:            956.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       2752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1958.157 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce":
[info]   541550.976 ±(99.9%) 13731.569 ops/s [Average]
[info]   (min, avg, max) = (537551.026, 541550.976, 547173.611), stdev = 3566.045
[info]   CI (99.9%): [527819.407, 555282.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate":
[info]   946.828 ±(99.9%) 23.977 MB/sec [Average]
[info]   (min, avg, max) = (939.862, 946.828, 956.643), stdev = 6.227
[info]   CI (99.9%): [922.851, 970.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm":
[info]   2752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2752.001, 2752.001, 2752.001), stdev = 0.001
[info]   CI (99.9%): [2752.001, 2752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.200), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   883.183 ±(99.9%) 726.005 MB/sec [Average]
[info]   (min, avg, max) = (672.651, 883.183, 1021.107), stdev = 188.541
[info]   CI (99.9%): [157.178, 1609.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2568.650 ±(99.9%) 2143.285 B/op [Average]
[info]   (min, avg, max) = (1958.157, 2568.650, 2989.891), stdev = 556.604
[info]   CI (99.9%): [425.365, 4711.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.328 ±(99.9%) 16.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.328, 9.702), stdev = 4.207
[info]   CI (99.9%): [≈ 0, 18.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson
[info] # Run progress: 87.50% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 904680.933 ops/s
[info] # Warmup Iteration   2: 1498596.920 ops/s
[info] # Warmup Iteration   3: 1540451.430 ops/s
[info] # Warmup Iteration   4: 1527060.537 ops/s
[info] # Warmup Iteration   5: 1537054.904 ops/s
[info] Iteration   1: 1526889.724 ops/s
[info]                  ·gc.alloc.rate:                   628.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        692.787 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1532310.713 ops/s
[info]                  ·gc.alloc.rate:            630.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 690.351 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1539028.190 ops/s
[info]                  ·gc.alloc.rate:            633.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 686.639 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 1543093.839 ops/s
[info]                  ·gc.alloc.rate:                   635.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        688.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1553637.656 ops/s
[info]                  ·gc.alloc.rate:                                  639.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       689.650 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson":
[info]   1538992.024 ±(99.9%) 39571.165 ops/s [Average]
[info]   (min, avg, max) = (1526889.724, 1538992.024, 1553637.656), stdev = 10276.506
[info]   CI (99.9%): [1499420.859, 1578563.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate":
[info]   633.550 ±(99.9%) 16.335 MB/sec [Average]
[info]   (min, avg, max) = (628.589, 633.550, 639.597), stdev = 4.242
[info]   CI (99.9%): [617.215, 649.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   674.284 ±(99.9%) 15.105 MB/sec [Average]
[info]   (min, avg, max) = (671.338, 674.284, 680.706), stdev = 3.923
[info]   CI (99.9%): [659.179, 689.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   689.669 ±(99.9%) 8.596 B/op [Average]
[info]   (min, avg, max) = (686.639, 689.669, 692.787), stdev = 2.232
[info]   CI (99.9%): [681.073, 698.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.088 ±(99.9%) 7.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.088, 4.756), stdev = 2.072
[info]   CI (99.9%): [≈ 0, 9.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter
[info] # Run progress: 88.39% complete, ETA 00:03:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3472548.972 ops/s
[info] # Warmup Iteration   2: 2792954.856 ops/s
[info] # Warmup Iteration   3: 4036061.021 ops/s
[info] # Warmup Iteration   4: 4052822.774 ops/s
[info] # Warmup Iteration   5: 4007538.682 ops/s
[info] Iteration   1: 4033406.634 ops/s
[info]                  ·gc.alloc.rate:            450.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4011828.879 ops/s
[info]                  ·gc.alloc.rate:            448.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4006538.069 ops/s
[info]                  ·gc.alloc.rate:            447.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 264.287 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4038728.049 ops/s
[info]                  ·gc.alloc.rate:            451.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.093 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4035096.379 ops/s
[info]                  ·gc.alloc.rate:            451.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.214 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter":
[info]   4025119.602 ±(99.9%) 56962.123 ops/s [Average]
[info]   (min, avg, max) = (4006538.069, 4025119.602, 4038728.049), stdev = 14792.883
[info]   CI (99.9%): [3968157.479, 4082081.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate":
[info]   450.123 ±(99.9%) 6.422 MB/sec [Average]
[info]   (min, avg, max) = (447.990, 450.123, 451.692), stdev = 1.668
[info]   CI (99.9%): [443.702, 456.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   403.677 ±(99.9%) 579.125 MB/sec [Average]
[info]   (min, avg, max) = (336.329, 403.677, 672.715), stdev = 150.397
[info]   CI (99.9%): [≈ 0, 982.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   157.966 ±(99.9%) 228.867 B/op [Average]
[info]   (min, avg, max) = (131.093, 157.966, 264.287), stdev = 59.436
[info]   CI (99.9%): [≈ 0, 386.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc
[info] # Run progress: 89.29% complete, ETA 00:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3626248.752 ops/s
[info] # Warmup Iteration   2: 4072320.916 ops/s
[info] # Warmup Iteration   3: 4053069.166 ops/s
[info] # Warmup Iteration   4: 4065406.485 ops/s
[info] # Warmup Iteration   5: 4107796.063 ops/s
[info] Iteration   1: 4123258.637 ops/s
[info]                  ·gc.alloc.rate:            251.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.406 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4124180.305 ops/s
[info]                  ·gc.alloc.rate:            251.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.378 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4061871.605 ops/s
[info]                  ·gc.alloc.rate:      247.796 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3851402.466 ops/s
[info]                  ·gc.alloc.rate:            234.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.475 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4113790.618 ops/s
[info]                  ·gc.alloc.rate:            250.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.702 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc":
[info]   4054900.726 ±(99.9%) 449060.943 ops/s [Average]
[info]   (min, avg, max) = (3851402.466, 4054900.726, 4124180.305), stdev = 116619.701
[info]   CI (99.9%): [3605839.784, 4503961.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate":
[info]   247.345 ±(99.9%) 27.425 MB/sec [Average]
[info]   (min, avg, max) = (234.912, 247.345, 251.584), stdev = 7.122
[info]   CI (99.9%): [219.921, 274.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.129 ±(99.9%) 579.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.129, 336.436), stdev = 150.448
[info]   CI (99.9%): [≈ 0, 848.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   104.592 ±(99.9%) 225.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.592, 137.475), stdev = 58.598
[info]   CI (99.9%): [≈ 0, 330.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay
[info] # Run progress: 90.18% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83760.776 ops/s
[info] # Warmup Iteration   2: 166454.254 ops/s
[info] # Warmup Iteration   3: 165102.000 ops/s
[info] # Warmup Iteration   4: 166180.030 ops/s
[info] # Warmup Iteration   5: 166355.934 ops/s
[info] Iteration   1: 166605.834 ops/s
[info]                  ·gc.alloc.rate:                   991.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              9368.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9564.658 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 166430.274 ops/s
[info]                  ·gc.alloc.rate:                                  990.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9368.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.842 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9656.834 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 168415.979 ops/s
[info]                  ·gc.alloc.rate:            1002.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       9368.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9542.922 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 168090.407 ops/s
[info]                  ·gc.alloc.rate:                                  1000.402 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9368.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9561.256 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 168898.751 ops/s
[info]                  ·gc.alloc.rate:            1005.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       9368.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9515.918 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay":
[info]   167688.249 ±(99.9%) 4266.559 ops/s [Average]
[info]   (min, avg, max) = (166430.274, 167688.249, 168898.751), stdev = 1108.012
[info]   CI (99.9%): [163421.690, 171954.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate":
[info]   997.998 ±(99.9%) 25.516 MB/sec [Average]
[info]   (min, avg, max) = (990.460, 997.998, 1005.075), stdev = 6.626
[info]   CI (99.9%): [972.482, 1023.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm":
[info]   9368.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9368.002, 9368.003, 9368.003), stdev = 0.001
[info]   CI (99.9%): [9368.002, 9368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.171 ±(99.9%) 1.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.842), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.314 ±(99.9%) 15.073 MB/sec [Average]
[info]   (min, avg, max) = (1012.315, 1019.314, 1021.272), stdev = 3.914
[info]   CI (99.9%): [1004.241, 1034.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9568.318 ±(99.9%) 204.566 B/op [Average]
[info]   (min, avg, max) = (9515.918, 9568.318, 9656.834), stdev = 53.125
[info]   CI (99.9%): [9363.752, 9772.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.551 ±(99.9%) 65.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.551, 37.755), stdev = 16.885
[info]   CI (99.9%): [≈ 0, 72.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce
[info] # Run progress: 91.07% complete, ETA 00:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98322.538 ops/s
[info] # Warmup Iteration   2: 104127.218 ops/s
[info] # Warmup Iteration   3: 106280.231 ops/s
[info] # Warmup Iteration   4: 105567.688 ops/s
[info] # Warmup Iteration   5: 102115.482 ops/s
[info] Iteration   1: 105425.173 ops/s
[info]                  ·gc.alloc.rate:            535.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10043.927 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 105405.797 ops/s
[info]                  ·gc.alloc.rate:            535.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10045.832 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 105847.924 ops/s
[info]                  ·gc.alloc.rate:            537.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5002.039 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 105694.795 ops/s
[info]                  ·gc.alloc.rate:            536.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10018.558 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 106210.504 ops/s
[info]                  ·gc.alloc.rate:                   539.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4984.899 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce":
[info]   105716.839 ±(99.9%) 1281.737 ops/s [Average]
[info]   (min, avg, max) = (105405.797, 105716.839, 106210.504), stdev = 332.863
[info]   CI (99.9%): [104435.101, 106998.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate":
[info]   536.818 ±(99.9%) 6.558 MB/sec [Average]
[info]   (min, avg, max) = (535.205, 536.818, 539.309), stdev = 1.703
[info]   CI (99.9%): [530.260, 543.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate.norm":
[info]   7992.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7992.004, 7992.004, 7992.004), stdev = 0.001
[info]   CI (99.9%): [7992.003, 7992.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen":
[info]   538.228 ±(99.9%) 709.422 MB/sec [Average]
[info]   (min, avg, max) = (336.387, 538.228, 672.828), stdev = 184.235
[info]   CI (99.9%): [≈ 0, 1247.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8019.051 ±(99.9%) 10635.453 B/op [Average]
[info]   (min, avg, max) = (4984.899, 8019.051, 10045.832), stdev = 2761.993
[info]   CI (99.9%): [≈ 0, 18654.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.871 ±(99.9%) 84.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.871, 49.355), stdev = 22.072
[info]   CI (99.9%): [≈ 0, 94.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 11.000), stdev = 2.739
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson
[info] # Run progress: 91.96% complete, ETA 00:02:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267329.228 ops/s
[info] # Warmup Iteration   2: 283369.808 ops/s
[info] # Warmup Iteration   3: 267486.337 ops/s
[info] # Warmup Iteration   4: 281520.762 ops/s
[info] # Warmup Iteration   5: 285145.707 ops/s
[info] Iteration   1: 283208.229 ops/s
[info]                  ·gc.alloc.rate:            299.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1869.430 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 280567.698 ops/s
[info]                  ·gc.alloc.rate:            296.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1886.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 280305.112 ops/s
[info]                  ·gc.alloc.rate:            296.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1888.639 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 282266.177 ops/s
[info]                  ·gc.alloc.rate:      298.396 MB/sec
[info]                  ·gc.alloc.rate.norm: 1664.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 282103.271 ops/s
[info]                  ·gc.alloc.rate:            298.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1876.797 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson":
[info]   281690.098 ±(99.9%) 4710.262 ops/s [Average]
[info]   (min, avg, max) = (280305.112, 281690.098, 283208.229), stdev = 1223.240
[info]   CI (99.9%): [276979.835, 286400.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate":
[info]   297.779 ±(99.9%) 4.939 MB/sec [Average]
[info]   (min, avg, max) = (296.314, 297.779, 299.349), stdev = 1.283
[info]   CI (99.9%): [292.840, 302.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate.norm":
[info]   1664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1664.001, 1664.002), stdev = 0.001
[info]   CI (99.9%): [1664.001, 1664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen":
[info]   269.068 ±(99.9%) 579.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.068, 336.370), stdev = 150.413
[info]   CI (99.9%): [≈ 0, 848.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1504.368 ±(99.9%) 3238.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1504.368, 1888.639), stdev = 841.004
[info]   CI (99.9%): [≈ 0, 4742.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter
[info] # Run progress: 92.86% complete, ETA 00:02:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241150.167 ops/s
[info] # Warmup Iteration   2: 248678.268 ops/s
[info] # Warmup Iteration   3: 246560.401 ops/s
[info] # Warmup Iteration   4: 244754.353 ops/s
[info] # Warmup Iteration   5: 246768.251 ops/s
[info] Iteration   1: 240439.472 ops/s
[info]                  ·gc.alloc.rate:      202.881 MB/sec
[info]                  ·gc.alloc.rate.norm: 1328.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 245523.579 ops/s
[info]                  ·gc.alloc.rate:            207.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2156.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 248949.952 ops/s
[info]                  ·gc.alloc.rate:      210.076 MB/sec
[info]                  ·gc.alloc.rate.norm: 1328.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 248683.861 ops/s
[info]                  ·gc.alloc.rate:            209.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2129.041 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 246806.556 ops/s
[info]                  ·gc.alloc.rate:            208.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2145.170 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter":
[info]   246080.684 ±(99.9%) 13293.056 ops/s [Average]
[info]   (min, avg, max) = (240439.472, 246080.684, 248949.952), stdev = 3452.164
[info]   CI (99.9%): [232787.628, 259373.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate":
[info]   207.648 ±(99.9%) 11.252 MB/sec [Average]
[info]   (min, avg, max) = (202.881, 207.648, 210.076), stdev = 2.922
[info]   CI (99.9%): [196.396, 218.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate.norm":
[info]   1328.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.002, 1328.002, 1328.002), stdev = 0.001
[info]   CI (99.9%): [1328.001, 1328.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.850 ±(99.9%) 709.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.850, 336.448), stdev = 184.263
[info]   CI (99.9%): [≈ 0, 911.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1286.121 ±(99.9%) 4521.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1286.121, 2156.395), stdev = 1174.103
[info]   CI (99.9%): [≈ 0, 5807.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc
[info] # Run progress: 93.75% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228622.140 ops/s
[info] # Warmup Iteration   2: 233607.156 ops/s
[info] # Warmup Iteration   3: 233811.996 ops/s
[info] # Warmup Iteration   4: 234810.713 ops/s
[info] # Warmup Iteration   5: 234544.408 ops/s
[info] Iteration   1: 234715.143 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 235100.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 234625.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 235273.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 235121.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc":
[info]   234967.193 ±(99.9%) 1081.269 ops/s [Average]
[info]   (min, avg, max) = (234625.754, 234967.193, 235273.490), stdev = 280.802
[info]   CI (99.9%): [233885.924, 236048.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay
[info] # Run progress: 94.64% complete, ETA 00:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260124.912 ops/s
[info] # Warmup Iteration   2: 278959.197 ops/s
[info] # Warmup Iteration   3: 283965.567 ops/s
[info] # Warmup Iteration   4: 279839.669 ops/s
[info] # Warmup Iteration   5: 278620.695 ops/s
[info] Iteration   1: 278383.533 ops/s
[info]                  ·gc.alloc.rate:            297.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1901.907 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 284159.927 ops/s
[info]                  ·gc.alloc.rate:            303.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1863.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 283124.967 ops/s
[info]                  ·gc.alloc.rate:            302.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1869.991 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 282985.181 ops/s
[info]                  ·gc.alloc.rate:            302.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1870.883 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 284629.713 ops/s
[info]                  ·gc.alloc.rate:      303.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 1680.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay":
[info]   282656.664 ±(99.9%) 9576.343 ops/s [Average]
[info]   (min, avg, max) = (278383.533, 282656.664, 284629.713), stdev = 2486.946
[info]   CI (99.9%): [273080.321, 292233.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate":
[info]   301.726 ±(99.9%) 10.132 MB/sec [Average]
[info]   (min, avg, max) = (297.202, 301.726, 303.770), stdev = 2.631
[info]   CI (99.9%): [291.593, 311.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.002), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen":
[info]   269.140 ±(99.9%) 579.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.140, 336.458), stdev = 150.454
[info]   CI (99.9%): [≈ 0, 848.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen.norm":
[info]   1501.200 ±(99.9%) 3231.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1501.200, 1901.907), stdev = 839.330
[info]   CI (99.9%): [≈ 0, 4733.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce
[info] # Run progress: 95.54% complete, ETA 00:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3074.066 ops/s
[info] # Warmup Iteration   2: 5011.528 ops/s
[info] # Warmup Iteration   3: 6267.806 ops/s
[info] # Warmup Iteration   4: 6306.047 ops/s
[info] # Warmup Iteration   5: 6355.732 ops/s
[info] Iteration   1: 6312.281 ops/s
[info]                  ·gc.alloc.rate:            837.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       208952.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251598.454 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 6331.081 ops/s
[info]                  ·gc.alloc.rate:                   840.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              208952.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        167229.079 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 827.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 6444.979 ops/s
[info]                  ·gc.alloc.rate:                                  855.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208952.068 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.926 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       249173.016 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                162.646 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 6462.429 ops/s
[info]                  ·gc.alloc.rate:                                  857.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208952.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.611 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       165786.614 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6446.416 ops/s
[info]                  ·gc.alloc.rate:            855.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       208952.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 249296.993 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce":
[info]   6399.437 ±(99.9%) 275.783 ops/s [Average]
[info]   (min, avg, max) = (6312.281, 6399.437, 6462.429), stdev = 71.620
[info]   CI (99.9%): [6123.654, 6675.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate":
[info]   849.581 ±(99.9%) 36.847 MB/sec [Average]
[info]   (min, avg, max) = (837.873, 849.581, 857.976), stdev = 9.569
[info]   CI (99.9%): [812.734, 886.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm":
[info]   208952.065 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (208952.063, 208952.065, 208952.068), stdev = 0.002
[info]   CI (99.9%): [208952.057, 208952.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.308 ±(99.9%) 9.995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.308, 5.926), stdev = 2.596
[info]   CI (99.9%): [≈ 0, 11.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   880.760 ±(99.9%) 717.589 MB/sec [Average]
[info]   (min, avg, max) = (672.686, 880.760, 1021.076), stdev = 186.356
[info]   CI (99.9%): [163.171, 1598.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   216616.831 ±(99.9%) 176190.347 B/op [Average]
[info]   (min, avg, max) = (165786.614, 216616.831, 251598.454), stdev = 45756.074
[info]   CI (99.9%): [40426.484, 392807.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   198.102 ±(99.9%) 1382.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 198.102, 827.867), stdev = 359.024
[info]   CI (99.9%): [≈ 0, 1580.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 18.000), stdev = 6.419
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson
[info] # Run progress: 96.43% complete, ETA 00:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_93ebdd00/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 16641.618 ops/s
[info] # Warmup Iteration   2: 32870.495 ops/s
[info] # Warmup Iteration   3: 33801.017 ops/s
[info] # Warmup Iteration   4: 33265.169 ops/s
[info] # Warmup Iteration   5: 33608.012 ops/s
[info] Iteration   1: 33276.105 ops/s
[info]                  ·gc.alloc.rate:                   424.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31725.386 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 33649.655 ops/s
[info]                  ·gc.alloc.rate:            429.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15702.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 33661.968 ops/s
[info]                  ·gc.alloc.rate:            429.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15695.940 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 33675.613 ops/s
[info]                  ·gc.alloc.rate:            430.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15690.348 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 33245.674 ops/s
[info]                  ·gc.alloc.rate:                   424.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31754.963 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson":
[info]   33501.803 ±(99.9%) 848.594 ops/s [Average]
[info]   (min, avg, max) = (33245.674, 33501.803, 33675.613), stdev = 220.377
[info]   CI (99.9%): [32653.209, 34350.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate":
[info]   427.767 ±(99.9%) 10.957 MB/sec [Average]
[info]   (min, avg, max) = (424.499, 427.767, 430.027), stdev = 2.846
[info]   CI (99.9%): [416.809, 438.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   20100.010 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (20099.942, 20100.010, 20100.077), stdev = 0.054
[info]   CI (99.9%): [20099.801, 20100.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   469.633 ±(99.9%) 706.350 MB/sec [Average]
[info]   (min, avg, max) = (335.661, 469.633, 670.645), stdev = 183.437
[info]   CI (99.9%): [≈ 0, 1175.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   22113.915 ±(99.9%) 33837.689 B/op [Average]
[info]   (min, avg, max) = (15690.348, 22113.915, 31754.963), stdev = 8787.540
[info]   CI (99.9%): [≈ 0, 55951.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.608 ±(99.9%) 66.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.608, 31.534), stdev = 17.264
[info]   CI (99.9%): [≈ 0, 79.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 14.000), stdev = 3.782
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter
[info] # Run progress: 97.32% complete, ETA 00:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26909.976 ops/s
[info] # Warmup Iteration   2: 36394.349 ops/s
[info] # Warmup Iteration   3: 35834.790 ops/s
[info] # Warmup Iteration   4: 36901.001 ops/s
[info] # Warmup Iteration   5: 36749.280 ops/s
[info] Iteration   1: 36254.868 ops/s
[info]                  ·gc.alloc.rate:            241.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       10504.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14602.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 36944.862 ops/s
[info]                  ·gc.alloc.rate:            246.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       10504.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14330.624 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 35988.546 ops/s
[info]                  ·gc.alloc.rate:      240.199 MB/sec
[info]                  ·gc.alloc.rate.norm: 10504.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36253.684 ops/s
[info]                  ·gc.alloc.rate:            241.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       10504.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14603.720 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 35503.735 ops/s
[info]                  ·gc.alloc.rate:            236.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       10504.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14912.162 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter":
[info]   36189.139 ±(99.9%) 2009.745 ops/s [Average]
[info]   (min, avg, max) = (35503.735, 36189.139, 36944.862), stdev = 521.924
[info]   CI (99.9%): [34179.394, 38198.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate":
[info]   241.534 ±(99.9%) 13.369 MB/sec [Average]
[info]   (min, avg, max) = (236.963, 241.534, 246.549), stdev = 3.472
[info]   CI (99.9%): [228.164, 254.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   10504.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (10504.011, 10504.011, 10504.012), stdev = 0.001
[info]   CI (99.9%): [10504.010, 10504.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   269.116 ±(99.9%) 579.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.116, 336.452), stdev = 150.441
[info]   CI (99.9%): [≈ 0, 848.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   11689.723 ±(99.9%) 25175.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11689.723, 14912.162), stdev = 6537.994
[info]   CI (99.9%): [≈ 0, 36865.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc
[info] # Run progress: 98.21% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24240.092 ops/s
[info] # Warmup Iteration   2: 33944.737 ops/s
[info] # Warmup Iteration   3: 34300.742 ops/s
[info] # Warmup Iteration   4: 34126.465 ops/s
[info] # Warmup Iteration   5: 35049.818 ops/s
[info] Iteration   1: 34522.804 ops/s
[info]                  ·gc.alloc.rate:      14.211 MB/sec
[info]                  ·gc.alloc.rate.norm: 648.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 33332.960 ops/s
[info]                  ·gc.alloc.rate:      13.723 MB/sec
[info]                  ·gc.alloc.rate.norm: 648.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34166.526 ops/s
[info]                  ·gc.alloc.rate:      14.065 MB/sec
[info]                  ·gc.alloc.rate.norm: 648.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34091.790 ops/s
[info]                  ·gc.alloc.rate:      14.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 648.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34985.447 ops/s
[info]                  ·gc.alloc.rate:      14.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 648.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc":
[info]   34219.905 ±(99.9%) 2345.210 ops/s [Average]
[info]   (min, avg, max) = (33332.960, 34219.905, 34985.447), stdev = 609.044
[info]   CI (99.9%): [31874.695, 36565.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   14.088 ±(99.9%) 0.967 MB/sec [Average]
[info]   (min, avg, max) = (13.723, 14.088, 14.406), stdev = 0.251
[info]   CI (99.9%): [13.121, 15.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   648.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.012, 648.012, 648.012), stdev = 0.001
[info]   CI (99.9%): [648.011, 648.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay
[info] # Run progress: 99.11% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1960.537 ops/s
[info] # Warmup Iteration   2: 4177.034 ops/s
[info] # Warmup Iteration   3: 4156.413 ops/s
[info] # Warmup Iteration   4: 4346.949 ops/s
[info] # Warmup Iteration   5: 4286.365 ops/s
[info] Iteration   1: 4287.531 ops/s
[info]                  ·gc.alloc.rate:            861.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       316205.737 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 370387.652 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4346.242 ops/s
[info]                  ·gc.alloc.rate:                   873.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              316207.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244836.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1447.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4385.726 ops/s
[info]                  ·gc.alloc.rate:                                  881.111 MB/sec
[info]                  ·gc.alloc.rate.norm:                             316204.871 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.760 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       366416.004 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4398.877 ops/s
[info]                  ·gc.alloc.rate:            883.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       316206.118 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243555.607 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4386.479 ops/s
[info]                  ·gc.alloc.rate:            881.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       316205.716 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 366332.500 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay":
[info]   4360.971 ±(99.9%) 175.518 ops/s [Average]
[info]   (min, avg, max) = (4287.531, 4360.971, 4398.877), stdev = 45.581
[info]   CI (99.9%): [4185.453, 4536.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate":
[info]   876.130 ±(99.9%) 35.244 MB/sec [Average]
[info]   (min, avg, max) = (861.404, 876.130, 883.809), stdev = 9.153
[info]   CI (99.9%): [840.887, 911.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   316205.927 ±(99.9%) 3.243 B/op [Average]
[info]   (min, avg, max) = (316204.871, 316205.927, 316207.194), stdev = 0.842
[info]   CI (99.9%): [316202.684, 316209.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.152 ±(99.9%) 35.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.152, 20.760), stdev = 9.284
[info]   CI (99.9%): [≈ 0, 39.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   881.544 ±(99.9%) 714.329 MB/sec [Average]
[info]   (min, avg, max) = (676.068, 881.544, 1021.026), stdev = 185.509
[info]   CI (99.9%): [167.215, 1595.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   318305.670 ±(99.9%) 260587.840 B/op [Average]
[info]   (min, avg, max) = (243555.607, 318305.670, 370387.652), stdev = 67673.835
[info]   CI (99.9%): [57717.829, 578893.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   289.462 ±(99.9%) 2492.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 289.462, 1447.310), stdev = 647.257
[info]   CI (99.9%): [≈ 0, 2781.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 18.000), stdev = 6.269
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # Run complete. Total time: 00:30:35
[info] Benchmark                                                                                              Mode  Cnt         Score         Error   Units
[info] JsonCodecMakerBenchmark.missingReqFieldCirce                                                          thrpt    5   1436766.845 ±   18444.754   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate                                           thrpt    5      2161.483 ±      27.868  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm                                      thrpt    5      2368.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.002 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.002 ±       0.006    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen                                     thrpt    5      2110.217 ±     585.672  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2312.140 ±     662.708    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count                                                thrpt    5        31.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time                                                 thrpt    5        55.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJackson                                                        thrpt    5    168250.461 ±    4405.365   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate                                         thrpt    5       302.730 ±       7.912  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm                                    thrpt    5      2832.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       336.377 ±       0.062  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      3146.882 ±      82.308    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count                                              thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time                                               thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter                                                       thrpt    5    309237.937 ±   16487.033   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate                                        thrpt    5       204.226 ±      11.071  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm                                   thrpt    5      1040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       201.834 ±     709.476  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5      1033.254 ±    3632.152    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count                                             thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time                                              thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless                                              thrpt    5    680313.442 ±   44262.414   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate                               thrpt    5       231.660 ±      14.972  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm                          thrpt    5       536.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen                         thrpt    5       269.073 ±     579.200  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm                    thrpt    5       620.538 ±    1336.474    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count                                    thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time                                     thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump                                        thrpt    5   2863813.623 ±   64444.072   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate                         thrpt    5       320.230 ±       7.210  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm                    thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                   thrpt    5       336.378 ±       0.177  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm              thrpt    5       184.880 ±       4.172    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count                              thrpt    5         5.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time                               thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.missingReqFieldPlay                                                           thrpt    5    118993.804 ±   21474.707   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate                                            thrpt    5       764.005 ±     137.819  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm                                       thrpt    5     10104.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.042 ±       0.360  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.538 ±       4.586    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       812.101 ±     714.348  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     10700.653 ±    8234.285    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.884  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        11.025 ±      94.928    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count                                                 thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time                                                  thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.readAdtCirce                                                                  thrpt    5    524466.467 ±   10666.738   ops/s
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate                                                   thrpt    5      1354.029 ±      26.431  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm                                              thrpt    5      4064.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.003 ±       0.008  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.008 ±       0.025    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1360.953 ±       3.453  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      4084.864 ±      79.340    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.count                                                        thrpt    5        20.000                counts
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.time                                                         thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJackson                                                                thrpt    5   1050120.233 ±  230444.913   ops/s
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate                                                 thrpt    5       747.303 ±     164.651  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm                                            thrpt    5      1120.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.010 ±       0.082  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.014 ±       0.118    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen                                           thrpt    5       744.757 ±     569.893  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1116.541 ±     805.074    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       5.562  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.194 ±       8.113    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.count                                                      thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.time                                                       thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readAdtJsoniter                                                               thrpt    5   2796980.971 ±  111029.564   ops/s
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate                                                thrpt    5       184.807 ±       7.332  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm                                           thrpt    5       104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen                                          thrpt    5       201.823 ±     709.435  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       114.295 ±     401.784    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count                                                     thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time                                                      thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.readAdtPlay                                                                   thrpt    5    111525.884 ±    6152.352   ops/s
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate                                                    thrpt    5       944.854 ±      52.080  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm                                               thrpt    5     13336.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.009 ±       0.079  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.130 ±       1.118    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen                                              thrpt    5       950.398 ±     581.026  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     13424.258 ±    8414.156    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        11.509 ±      80.299    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.count                                                         thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.time                                                          thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsCirce                                                              thrpt    5   1117835.492 ±   18356.496   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate                                               thrpt    5      1755.596 ±      29.438  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm                                          thrpt    5      2472.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.001 ±       0.005  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.002 ±       0.008    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1769.904 ±     586.041  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2492.030 ±     816.437    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count                                                    thrpt    5        26.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time                                                     thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJackson                                                            thrpt    5   1503255.633 ±   40996.133   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate                                             thrpt    5      1054.480 ±      28.947  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm                                        thrpt    5      1104.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.037 ±       0.274  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.039 ±       0.290    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1020.114 ±       7.929  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1068.054 ±      22.410    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.846 ±       7.286    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count                                                  thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time                                                   thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter                                                           thrpt    5   7312228.484 ±  327731.587   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate                                            thrpt    5       929.050 ±      41.697  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       200.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.030 ±       0.249  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.006 ±       0.053    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       883.281 ±     726.370  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       189.900 ±     150.932    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.176 ±       1.513    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count                                                 thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time                                                  thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readAnyRefsPlay                                                               thrpt    5    337705.082 ±   29608.618   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate                                                thrpt    5       901.068 ±      79.002  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm                                           thrpt    5      4200.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.011 ±       0.064  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.052 ±       0.296    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       882.345 ±     723.093  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4106.282 ±    3212.715    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         3.730 ±      32.121    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count                                                     thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time                                                      thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readArraysCirce                                                               thrpt    5    591838.588 ±    9380.671   ops/s
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate                                                thrpt    5      1916.196 ±      30.175  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm                                           thrpt    5      5096.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.002 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.004 ±       0.011    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1974.147 ±     586.774  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5250.089 ±    1557.270    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.count                                                     thrpt    5        29.000                counts
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.time                                                      thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJackson                                                             thrpt    5    929314.486 ±   23416.397   ops/s
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate                                              thrpt    5       873.855 ±      21.622  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm                                         thrpt    5      1480.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.011 ±       0.072  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.019 ±       0.123    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen                                        thrpt    5       814.386 ±     718.840  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1379.453 ±    1221.014    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.365 ±      11.750    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.count                                                   thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.time                                                    thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readArraysJsoniter                                                            thrpt    5   2575376.311 ±   61114.242   ops/s
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate                                             thrpt    5      1073.360 ±      25.317  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm                                        thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.032 ±       0.264  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.019 ±       0.161    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5      1089.153 ±     586.144  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       665.402 ±     347.393    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count                                                  thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time                                                   thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readArraysPlay                                                                thrpt    5    175195.300 ±    3401.736   ops/s
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate                                                 thrpt    5      1055.031 ±      20.850  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm                                            thrpt    5      9480.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.011 ±       0.093  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.103 ±       0.838    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1087.253 ±     590.082  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      9770.185 ±    5324.710    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         7.239 ±      62.333    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.count                                                      thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.time                                                       thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJackson                                                            thrpt    5   1302879.783 ±   35834.096   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate                                             thrpt    5       827.695 ±      22.944  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm                                        thrpt    5      1000.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.019 ±       0.164  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.024 ±       0.199    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5       813.218 ±     714.372  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       982.241 ±     856.447    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         1.133 ±       9.753    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count                                                  thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time                                                   thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter                                                           thrpt    5   3982437.193 ±   62737.084   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate                                            thrpt    5       525.970 ±      10.348  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       208.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       537.979 ±     710.296  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       212.649 ±     279.637    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.316 ±       2.722    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count                                                 thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time                                                  thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.readBitSetsPlay                                                               thrpt    5    216512.378 ±    8562.472   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate                                                thrpt    5      1002.480 ±      39.555  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm                                           thrpt    5      7288.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.014 ±       0.117  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.099 ±       0.848    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       951.240 ±     582.408  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      6920.873 ±    4353.739    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         5.913 ±      50.912    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count                                                     thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time                                                      thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce                                                        thrpt    5    533362.342 ±   11533.244   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate                                         thrpt    5      1743.149 ±      37.972  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm                                    thrpt    5      5144.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.006 ±       0.018    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1769.933 ±     586.737  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5      5222.287 ±    1679.141    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count                                              thrpt    5        26.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time                                               thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson                                                      thrpt    5    471553.549 ±   47359.873   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate                                       thrpt    5       584.774 ±      58.803  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm                                  thrpt    5      1952.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       606.110 ±     580.650  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5      2028.189 ±    2000.279    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.643 ±      22.760    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count                                            thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time                                             thrpt    5        50.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter                                                     thrpt    5   4882325.120 ±  167159.260   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate                                      thrpt    5       223.340 ±       7.554  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       269.111 ±     579.281  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5        86.869 ±     187.027    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count                                           thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time                                            thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay                                                         thrpt    5    160172.242 ±    5716.395   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate                                          thrpt    5       885.710 ±      31.692  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm                                     thrpt    5      8704.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.033 ±       0.287  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.327 ±       2.817    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen                                    thrpt    5       881.581 ±     720.319  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5      8663.572 ±    7075.521    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         7.915 ±      68.150    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count                                               thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time                                                thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce                                                        thrpt    5      4575.435 ±      97.432   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate                                         thrpt    5      1101.282 ±      23.323  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm                                    thrpt    5    378808.092 ±       0.014    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.063 ±       0.294  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        21.562 ±     101.818    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1156.104 ±     712.157  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5    397821.890 ±  249723.094    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                            thrpt    5         0.932 ±       8.027  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       322.285 ±    2774.968    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count                                              thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time                                               thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson                                                      thrpt    5      9116.772 ±     226.426   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate                                       thrpt    5       231.035 ±       5.711  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm                                  thrpt    5     39888.047 ±       0.012    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       201.539 ±     708.440  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5     34913.515 ±  122728.671    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space                          thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Survivor_Space.norm                     thrpt    5        23.224 ±     199.968    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count                                            thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time                                             thrpt    5        20.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter                                                     thrpt    5     17375.977 ±     211.481   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate                                      thrpt    5       296.884 ±       3.675  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                 thrpt    5     26896.025 ±       0.010    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       269.054 ±     579.158  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5     24399.657 ±   52522.767    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count                                           thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time                                            thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay                                                         thrpt    5      1718.897 ±     269.379   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate                                          thrpt    5      1073.645 ±     168.346  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm                                     thrpt    5    982976.241 ±       0.042    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.018 ±       0.084  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5        16.165 ±      75.127    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                    thrpt    5      1019.971 ±     926.722  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5    928987.912 ±  748988.304    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       725.658 ±    6248.135    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count                                               thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time                                                thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter                                                    thrpt    5   3533386.910 ±   72260.196   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate                                     thrpt    5      1059.527 ±      21.708  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm                                thrpt    5       472.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.031 ±       0.260  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.014 ±       0.117    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5      1021.051 ±       0.171  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5       454.870 ±       9.347    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count                                          thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time                                           thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay                                                        thrpt    5    184973.466 ±    3610.467   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate                                         thrpt    5      1061.325 ±      20.809  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm                                    thrpt    5      9032.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.014 ±       0.074  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.119 ±       0.627    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1088.130 ±     588.208  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5      9258.986 ±    4955.277    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         6.864 ±      59.099    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count                                              thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time                                               thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesCirce                                                            thrpt    5    467562.825 ±   12256.007   ops/s
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate                                             thrpt    5      1689.900 ±      44.134  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm                                        thrpt    5      5688.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.003 ±       0.012  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.010 ±       0.039    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen                                       thrpt    5      1702.102 ±       0.775  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5729.283 ±     150.316    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.time                                                   thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJackson                                                          thrpt    5    467638.514 ±   11530.329   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate                                           thrpt    5       544.266 ±      13.397  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm                                      thrpt    5      1832.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen                                     thrpt    5       537.092 ±     707.957  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1810.586 ±    2416.137    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space                              thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.261 ±      19.467    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.count                                                thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.time                                                 thrpt    5        51.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesJsoniter                                                         thrpt    5   2995825.731 ±   61990.337   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate                                          thrpt    5      1187.582 ±      24.699  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm                                     thrpt    5       624.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.033 ±       0.288  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.018 ±       0.152    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen                                    thrpt    5      1225.198 ±     717.384  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                               thrpt    5       643.914 ±     381.124    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count                                               thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time                                                thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.readIterablesPlay                                                             thrpt    5    136166.489 ±   21038.636   ops/s
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate                                              thrpt    5       946.071 ±     146.189  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm                                         thrpt    5     10936.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.006 ±       0.048  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.067 ±       0.548    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen                                        thrpt    5       950.468 ±     582.343  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     11007.844 ±    7120.907    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         9.815 ±      69.262    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.count                                                   thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.time                                                    thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readMapsCirce                                                                 thrpt    5    398032.192 ±   18391.876   ops/s
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate                                                  thrpt    5      1383.657 ±      63.999  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm                                             thrpt    5      5472.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.003 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.010 ±       0.025    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1361.345 ±       0.371  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5384.391 ±     251.332    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.count                                                       thrpt    5        20.000                counts
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.time                                                        thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJackson                                                               thrpt    5    741368.162 ±   12687.808   ops/s
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate                                                thrpt    5       874.207 ±      15.045  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm                                           thrpt    5      1856.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.013 ±       0.105  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.027 ±       0.225    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       881.219 ±     714.447  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1871.841 ±    1536.428    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.974 ±      16.993    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.count                                                     thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.time                                                      thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.readMapsJsoniter                                                              thrpt    5   3630409.145 ±   94297.137   ops/s
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate                                               thrpt    5       904.013 ±      23.462  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm                                          thrpt    5       392.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.025 ±       0.207  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.011 ±       0.090    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       883.228 ±     726.215  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       382.717 ±     309.102    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.351 ±       3.019    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count                                                    thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time                                                     thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.readMapsPlay                                                                  thrpt    5    191646.261 ±    6396.188   ops/s
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate                                                   thrpt    5      1041.205 ±      34.716  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm                                              thrpt    5      8552.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.014 ±       0.077  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.111 ±       0.628    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen                                             thrpt    5      1020.092 ±       8.214  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      8379.028 ±     252.076    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.618 ±      56.984    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.count                                                        thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.time                                                         thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce                                                     thrpt    5    482018.490 ±    9585.236   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate                                      thrpt    5      1842.284 ±      36.305  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm                                 thrpt    5      6016.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.007 ±       0.019    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen                                thrpt    5      1905.941 ±     717.505  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                           thrpt    5      6225.418 ±    2412.322    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count                                           thrpt    5        28.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time                                            thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter                                                  thrpt    5   2664014.358 ±   44366.335   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate                                   thrpt    5      1719.569 ±      28.813  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm                              thrpt    5      1016.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.002 ±       0.004  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         0.001 ±       0.003    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                             thrpt    5      1701.776 ±       0.623  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                        thrpt    5      1005.502 ±      16.710    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count                                        thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time                                         thrpt    5        37.000                    ms
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay                                                      thrpt    5    128826.773 ±    4606.608   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate                                       thrpt    5       928.520 ±      33.197  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm                                  thrpt    5     11344.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.042 ±       0.303  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.509 ±       3.709    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen                                 thrpt    5       949.702 ±     579.033  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                            thrpt    5     11613.073 ±    7307.485    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         9.781 ±      84.217    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count                                            thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time                                             thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJackson                                                        thrpt    5    599045.709 ±   23608.010   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate                                         thrpt    5       776.210 ±      29.288  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm                                    thrpt    5      2040.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.051 ±       0.434  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.133 ±       1.126    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       810.985 ±     714.477  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      2132.791 ±    1907.358    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.933 ±       8.030  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         2.440 ±      21.010    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count                                              thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time                                               thrpt    5        46.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter                                                       thrpt    5   1651699.091 ±   57347.879   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate                                        thrpt    5       780.705 ±      26.985  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm                                   thrpt    5       744.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.025 ±       0.212  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.023 ±       0.202    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       813.514 ±     708.560  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       775.853 ±     688.036    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         0.761 ±       6.554    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count                                             thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time                                              thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readMutableMapsPlay                                                           thrpt    5    169198.304 ±    5927.259   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate                                            thrpt    5       952.774 ±      33.451  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm                                       thrpt    5      8864.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.014 ±       0.122  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.133 ±       1.132    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       950.397 ±     580.924  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8842.434 ±    5410.311    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.529 ±      52.540    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time                                                  thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesCirce                                                           thrpt    5    404838.995 ±    8132.550   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate                                            thrpt    5      1253.025 ±      24.782  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm                                       thrpt    5      4872.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.015 ±       0.123  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.059 ±       0.478    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.307 ±     586.169  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      5029.355 ±    2302.955    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count                                                 thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time                                                  thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJackson                                                         thrpt    5    876714.923 ±   29808.183   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate                                          thrpt    5       664.100 ±      22.910  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm                                     thrpt    5      1192.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.012 ±       0.068  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.021 ±       0.122    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       607.653 ±     575.319  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1091.819 ±    1047.081    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       5.562  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.443 ±      10.063    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count                                               thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time                                                thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter                                                        thrpt    5   3797049.464 ± 2815752.326   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate                                         thrpt    5       115.802 ±      85.844  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm                                    thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       134.270 ±     707.971  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5        51.292 ±     270.448    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.266 ±       2.294  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.102 ±       0.879    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count                                              thrpt    5         2.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time                                               thrpt    5        11.000                    ms
[info] JsonCodecMakerBenchmark.readPrimitivesPlay                                                            thrpt    5    140062.556 ±    6657.670   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate                                             thrpt    5       963.912 ±      46.091  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm                                        thrpt    5     10832.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.011 ±       0.093  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.121 ±       1.037    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       950.499 ±     580.786  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     10687.629 ±    6662.431    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         9.140 ±      63.864    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count                                                  thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time                                                   thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readStringCirce                                                               thrpt    5    121771.332 ±    3444.813   ops/s
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate                                                thrpt    5       903.568 ±      25.623  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate.norm                                           thrpt    5     11680.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.017 ±       0.133  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.215 ±       1.717    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       883.151 ±     725.712  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     11411.396 ±    9278.473    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        10.431 ±      72.774    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.count                                                     thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.time                                                      thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.readStringJackson                                                             thrpt    5    555843.651 ±   14604.116   ops/s
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate                                              thrpt    5       728.965 ±      19.523  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate.norm                                         thrpt    5      2064.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.016 ±       0.089  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.045 ±       0.251    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen                                        thrpt    5       744.776 ±     585.544  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      2108.329 ±    1643.383    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.800 ±       6.884  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         2.258 ±      19.442    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.count                                                   thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.time                                                    thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.readStringJsoniter                                                            thrpt    5    611825.890 ±   32849.461   ops/s
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate                                             thrpt    5       522.429 ±      28.194  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate.norm                                        thrpt    5      1344.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5       538.190 ±     709.430  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1386.737 ±    1851.061    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         2.021 ±      17.403    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.count                                                  thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.time                                                   thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.readStringPlay                                                                thrpt    5    188242.652 ±    2512.974   ops/s
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate                                                 thrpt    5      1715.186 ±      22.628  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate.norm                                            thrpt    5     14344.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.002 ±       0.007  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.015 ±       0.055    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1701.535 ±       0.599  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     14229.978 ±     191.390    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.count                                                      thrpt    5        25.000                counts
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.time                                                       thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPICirce                                                           thrpt    5      7585.474 ±     195.580   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate                                            thrpt    5      1116.415 ±      29.135  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm                                       thrpt    5    231659.826 ±      32.448    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.038 ±       0.129  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         7.966 ±      26.636    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1087.362 ±     590.086  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    225536.974 ±  118408.129    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       167.549 ±    1442.645    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count                                                 thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time                                                  thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson                                                         thrpt    5     10458.662 ±     270.421   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate                                          thrpt    5       147.757 ±       3.794  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm                                     thrpt    5     22235.065 ±      27.966    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       200.907 ±     706.228  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5     30305.970 ±  106531.679    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.533 ±       4.588  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5        80.605 ±     694.037    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count                                               thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time                                                thrpt    5        21.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter                                                        thrpt    5     20411.311 ±     746.468   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate                                         thrpt    5       184.053 ±       6.771  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm                                    thrpt    5     14191.701 ±       2.769    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       201.845 ±     709.513  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5     15558.284 ±   54690.069    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count                                              thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time                                               thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay                                                            thrpt    5      3127.559 ±     142.065   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate                                             thrpt    5       917.076 ±      42.219  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm                                        thrpt    5    461480.133 ±       0.024    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.003 ±       0.019  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.746 ±       9.359    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       949.637 ±     579.087  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    478155.898 ±  297681.241    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       402.911 ±    3469.186    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count                                                  thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time                                                   thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtCirce                                                                 thrpt    5    327422.116 ±   12150.772   ops/s
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate                                                  thrpt    5      1079.891 ±      39.933  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm                                             thrpt    5      5192.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.010 ±       0.083  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.048 ±       0.400    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1088.064 ±     587.769  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5232.918 ±    2882.628    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.892 ±      33.510    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.count                                                       thrpt    5        16.000                counts
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.time                                                        thrpt    5        34.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJackson                                                               thrpt    5   1312417.016 ±   21511.688   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate                                                thrpt    5       546.945 ±       9.076  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm                                           thrpt    5       656.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       537.226 ±     708.354  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       644.858 ±     855.856    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.933 ±       6.688  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.120 ±       8.023    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.count                                                     thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.time                                                      thrpt    5        48.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtJsoniter                                                              thrpt    5   9602828.830 ±  293638.658   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate                                               thrpt    5       488.105 ±      14.979  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm                                          thrpt    5        80.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       470.930 ±     709.255  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5        77.315 ±     118.040    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count                                                    thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time                                                     thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeAdtPlay                                                                  thrpt    5    203692.439 ±    2074.982   ops/s
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate                                                   thrpt    5       690.489 ±       7.024  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm                                              thrpt    5      5336.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.008 ±       0.072  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.064 ±       0.555    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen                                             thrpt    5       675.749 ±      16.265  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5222.070 ±      98.143    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.192 ±      43.113    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.count                                                        thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.time                                                         thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce                                                             thrpt    5   1236102.782 ±   15529.172   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate                                              thrpt    5      1244.032 ±      15.972  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm                                         thrpt    5      1584.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.002 ±       0.008  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.003 ±       0.010    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen                                        thrpt    5      1225.363 ±     717.680  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1560.817 ±     930.975    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count                                                   thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time                                                    thrpt    5        27.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson                                                           thrpt    5   3677494.942 ±  145237.925   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate                                            thrpt    5      1009.264 ±      40.150  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm                                       thrpt    5       432.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.021 ±       0.175  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.009 ±       0.075    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5      1019.012 ±      17.216  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       436.197 ±      12.018    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.405 ±       3.489    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count                                                 thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time                                                  thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter                                                          thrpt    5  15681879.902 ±  333345.852   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate                                           thrpt    5       478.218 ±      10.187  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm                                      thrpt    5        48.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       470.910 ±     709.417  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5        47.337 ±      72.187    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count                                                thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time                                                 thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc                                                  thrpt    5  15110864.301 ±  382995.419   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                  B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count                                        thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay                                                              thrpt    5    818326.168 ±   83619.782   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate                                               thrpt    5      1181.152 ±     120.867  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm                                          thrpt    5      2272.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.018 ±       0.157  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.037 ±       0.317    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1157.177 ±     717.779  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2223.311 ±    1271.934    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count                                                    thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time                                                     thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysCirce                                                              thrpt    5    682682.066 ±    7388.525   ops/s
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate                                               thrpt    5      1557.849 ±      17.188  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm                                          thrpt    5      3592.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.002 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.004 ±       0.014    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1565.614 ±     717.539  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3610.840 ±    1689.720    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.count                                                    thrpt    5        23.000                counts
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.time                                                     thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJackson                                                            thrpt    5   2626256.808 ±    6132.841   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate                                             thrpt    5      1294.714 ±       3.011  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm                                        thrpt    5       776.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.041 ±       0.343  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.024 ±       0.206    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1293.320 ±     585.938  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       775.161 ±     351.054    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.count                                                  thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.time                                                   thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysJsoniter                                                           thrpt    5   4884054.025 ±   73408.626   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate                                            thrpt    5      1291.060 ±      19.439  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm                                       thrpt    5       416.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.001 ±       0.003  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5        ≈ 10⁻⁴                  B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.624 ±     585.886  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       416.914 ±     191.711    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count                                                 thrpt    5        19.000                counts
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time                                                  thrpt    5        25.000                    ms
[info] JsonCodecMakerBenchmark.writeArraysPlay                                                               thrpt    5    279660.979 ±   37049.447   ops/s
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate                                                thrpt    5       972.388 ±     128.749  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm                                           thrpt    5      5472.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.010 ±       0.086  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.057 ±       0.476    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1018.727 ±      20.710  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5738.586 ±     823.318    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         4.455 ±      31.050    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.count                                                     thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.time                                                      thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJackson                                                           thrpt    5   1825133.725 ±   56488.597   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate                                            thrpt    5       964.272 ±      29.725  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm                                       thrpt    5       832.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.016 ±       0.138  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.014 ±       0.119    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5       950.487 ±     580.507  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       820.109 ±     500.463    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.933 ±       8.029  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.815 ±       7.015    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count                                                 thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time                                                  thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter                                                          thrpt    5   4680208.258 ±  165912.905   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate                                           thrpt    5       856.395 ±      30.550  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm                                      thrpt    5       288.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.024 ±       0.169  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.008 ±       0.057    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       882.473 ±     723.319  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5       296.722 ±     242.081    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.272 ±       2.340    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time                                                 thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeBitSetsPlay                                                              thrpt    5    380810.875 ±    7760.838   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate                                               thrpt    5      1103.153 ±      22.500  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm                                          thrpt    5      4560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.015 ±       0.121  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.062 ±       0.502    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1156.182 ±     713.033  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      4781.663 ±    3023.198    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         3.307 ±      28.476    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count                                                    thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time                                                     thrpt    5        30.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce                                                       thrpt    5      4469.070 ±      45.605   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate                                        thrpt    5      1087.259 ±      11.356  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm                                   thrpt    5    382912.094 ±       0.016    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.063 ±       0.179  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5        22.240 ±      63.513    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                  thrpt    5      1156.208 ±     712.807  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                             thrpt    5    407265.669 ±  253244.829    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                      thrpt    5       282.381 ±    2431.388    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count                                             thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time                                              thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson                                                     thrpt    5     26724.434 ±     349.702   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate                                      thrpt    5       387.193 ±       5.198  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm                                 thrpt    5     22807.857 ±       0.644    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                thrpt    5       402.778 ±     578.076  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                           thrpt    5     23724.057 ±   34012.638    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count                                           thrpt    5         6.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time                                            thrpt    5        38.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter                                                    thrpt    5     23962.133 ±     305.741   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate                                     thrpt    5       183.649 ±       2.352  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                thrpt    5     12064.018 ±       0.003    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5       201.800 ±     709.354  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5     13287.559 ±   46707.699    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count                                          thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time                                           thrpt    5        17.000                    ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc                                            thrpt    5     30590.740 ±   11732.078   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate                             thrpt    5         4.509 ±       1.731  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm                        thrpt    5       232.013 ±       0.006    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count                                  thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay                                                        thrpt    5      3825.028 ±      32.434   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate                                         thrpt    5      1156.176 ±       9.815  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm                                    thrpt    5    475639.965 ±       2.564    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.026 ±       0.096  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        10.555 ±      39.511    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1157.240 ±     718.067  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5    476108.815 ±  296351.176    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±       1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        54.942 ±     473.071    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count                                              thrpt    5        17.000                counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time                                               thrpt    5        24.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson                                                    thrpt    5    469764.198 ±   17082.272   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate                                     thrpt    5      1052.849 ±      38.304  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm                                thrpt    5      3528.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.055 ±       0.476  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.184 ±       1.584    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen                               thrpt    5      1018.875 ±      18.344  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3414.284 ±      65.595    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space                        thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         3.177 ±      27.356    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count                                          thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time                                           thrpt    5        31.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter                                                   thrpt    5   2327749.127 ±   67181.756   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate                                    thrpt    5       485.068 ±      13.934  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm                               thrpt    5       328.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                              thrpt    5       470.913 ±     709.472  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                         thrpt    5       319.091 ±     488.904    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count                                         thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time                                          thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay                                                       thrpt    5    217199.618 ±    6625.621   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate                                        thrpt    5       863.210 ±      26.515  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm                                   thrpt    5      6256.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.016 ±       0.139  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.118 ±       1.000    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                  thrpt    5       813.480 ±     714.638  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                             thrpt    5      5896.060 ±    5186.795    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         5.802 ±      49.957    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count                                             thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time                                              thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesCirce                                                           thrpt    5    550814.375 ±    8261.888   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate                                            thrpt    5      1332.674 ±      20.095  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm                                       thrpt    5      3808.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.001 ±       0.006  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.003 ±       0.017    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1361.493 ±       0.565  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3890.396 ±      57.902    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count                                                 thrpt    5        20.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time                                                  thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJackson                                                         thrpt    5   1026032.431 ±   34950.256   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate                                          thrpt    5       693.534 ±      23.710  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm                                     thrpt    5      1064.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.012 ±       0.104  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.018 ±       0.158    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       674.828 ±      18.465  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1035.316 ±       8.694    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.932 ±       5.619  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.432 ±       8.661    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count                                               thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time                                                thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter                                                        thrpt    5   4353465.714 ±  452345.604   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate                                         thrpt    5       774.494 ±      80.294  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm                                    thrpt    5       280.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.029 ±       0.251  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.010 ±       0.090    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       745.674 ±     593.501  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5       269.475 ±     208.138    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.284 ±       2.449    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count                                              thrpt    5        11.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time                                               thrpt    5        32.000                    ms
[info] JsonCodecMakerBenchmark.writeIterablesPlay                                                            thrpt    5    301501.427 ±    6507.484   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate                                             thrpt    5      1031.227 ±      22.413  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm                                        thrpt    5      5384.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.014 ±       0.123  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.074 ±       0.641    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5      1019.274 ±      15.061  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5321.645 ±      53.188    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         4.211 ±      36.262    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count                                                  thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time                                                   thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsCirce                                                                thrpt    5    289011.869 ±    7742.662   ops/s
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate                                                 thrpt    5       799.376 ±      20.170  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm                                            thrpt    5      4352.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±       0.063  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.064 ±       0.341    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       811.953 ±     707.517  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      4420.334 ±    3846.615    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±       5.561  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.380 ±      30.501    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.count                                                      thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.time                                                       thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJackson                                                              thrpt    5    568704.226 ±    9208.838   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate                                               thrpt    5       893.108 ±      14.480  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm                                          thrpt    5      2472.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.057 ±       0.489  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.157 ±       1.350    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen                                         thrpt    5       880.883 ±     720.413  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2438.770 ±    2006.232    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.932 ±       8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         2.597 ±      22.363    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.count                                                    thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.time                                                     thrpt    5        40.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsJsoniter                                                             thrpt    5   2358088.751 ±   97979.583   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate                                              thrpt    5       563.358 ±      23.292  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm                                         thrpt    5       376.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen                                        thrpt    5       539.049 ±     712.415  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       360.430 ±     483.314    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±       6.884  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.530 ±       4.563    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count                                                   thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time                                                    thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeMapsPlay                                                                 thrpt    5    244687.284 ±   10655.520   ops/s
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate                                                  thrpt    5       884.118 ±      38.776  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm                                             thrpt    5      5688.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.012 ±       0.105  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.078 ±       0.673    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen                                            thrpt    5       881.513 ±     714.622  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5671.246 ±    4591.186    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±       6.880  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         5.196 ±      44.740    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.count                                                       thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.time                                                        thrpt    5        35.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce                                                    thrpt    5    526500.121 ±    8101.047   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate                                     thrpt    5      1214.898 ±      19.247  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm                                thrpt    5      3632.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.035 ±       0.296  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.106 ±       0.890    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen                               thrpt    5      1225.299 ±     717.565  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3664.222 ±    2178.065    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count                                          thrpt    5        18.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time                                           thrpt    5        26.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson                                                  thrpt    5   1220283.006 ±   28257.523   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate                                   thrpt    5       607.756 ±      13.996  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm                              thrpt    5       784.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.053 ±       0.460  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         0.069 ±       0.591    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen                             thrpt    5       605.758 ±     581.653  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm                        thrpt    5       782.165 ±     759.565    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space                      thrpt    5         0.932 ±       5.618  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm                 thrpt    5         1.203 ±       7.261    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count                                        thrpt    5         9.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time                                         thrpt    5        49.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter                                                 thrpt    5   3747691.462 ±  104860.379   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate                                  thrpt    5       514.273 ±      14.207  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm                             thrpt    5       216.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                            thrpt    5       538.169 ±     709.496  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                       thrpt    5       226.421 ±     302.637    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space                     thrpt    5         0.799 ±       6.883  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                thrpt    5         0.337 ±       2.903    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count                                       thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time                                        thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay                                                     thrpt    5    288920.173 ±   11524.503   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate                                      thrpt    5       976.525 ±      38.972  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm                                 thrpt    5      5320.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.011 ±       0.088  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.059 ±       0.477    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen                                thrpt    5      1018.554 ±      20.432  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                           thrpt    5      5549.220 ±     120.726    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space                         thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                    thrpt    5         4.418 ±      30.840    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count                                           thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time                                            thrpt    5        41.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce                                                         thrpt    5    297452.469 ±    7285.569   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate                                          thrpt    5       796.748 ±      19.749  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm                                     thrpt    5      4216.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.012 ±       0.065  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.063 ±       0.342    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen                                    thrpt    5       812.747 ±     711.764  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm                               thrpt    5      4299.873 ±    3746.588    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         4.250 ±      29.611    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count                                               thrpt    5        12.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time                                                thrpt    5        42.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson                                                       thrpt    5    568821.997 ±   15511.133   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate                                        thrpt    5       924.893 ±      25.529  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm                                   thrpt    5      2560.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.029 ±       0.155  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.080 ±       0.429    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen                                  thrpt    5       948.390 ±     576.627  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2626.794 ±    1636.080    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space                           thrpt    5         0.931 ±       8.020  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         2.581 ±      22.224    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count                                             thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time                                              thrpt    5        39.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter                                                      thrpt    5   2034368.449 ±   69012.581   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate                                       thrpt    5       527.360 ±      17.745  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm                                  thrpt    5       408.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                 thrpt    5       538.213 ±     709.428  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                            thrpt    5       415.967 ±     543.371    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±       6.884  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         0.628 ±       5.404    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count                                            thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time                                             thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay                                                          thrpt    5    244558.853 ±    4428.297   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate                                           thrpt    5       939.636 ±      17.025  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm                                      thrpt    5      6048.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.014 ±       0.078  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.091 ±       0.503    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen                                     thrpt    5       950.405 ±     597.853  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                thrpt    5      6116.952 ±    3838.608    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         5.178 ±      44.581    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count                                                thrpt    5        14.000                counts
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time                                                 thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesCirce                                                          thrpt    5    541550.976 ±   13731.569   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate                                           thrpt    5       946.828 ±      23.977  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm                                      thrpt    5      2752.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.014 ±       0.118  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.041 ±       0.343    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen                                     thrpt    5       883.183 ±     726.005  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2568.650 ±    2143.285    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.328 ±      16.199    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time                                                 thrpt    5        28.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJackson                                                        thrpt    5   1538992.024 ±   39571.165   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate                                         thrpt    5       633.550 ±      16.335  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm                                    thrpt    5       648.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.015 ±       0.126  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.015 ±       0.128    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       674.284 ±      15.105  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5       689.669 ±       8.596    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         1.066 ±       7.821  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         1.088 ±       7.977    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count                                              thrpt    5        10.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time                                               thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter                                                       thrpt    5   4025119.602 ±   56962.123   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate                                        thrpt    5       450.123 ±       6.422  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       403.677 ±     579.125  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       157.966 ±     228.867    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count                                             thrpt    5         6.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time                                              thrpt    5        33.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc                                               thrpt    5   4054900.726 ±  449060.943   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate                                thrpt    5       247.345 ±      27.425  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm                           thrpt    5        96.000 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen                          thrpt    5       269.129 ±     579.321  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm                     thrpt    5       104.592 ±     225.640    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count                                     thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time                                      thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writePrimitivesPlay                                                           thrpt    5    167688.249 ±    4266.559   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate                                            thrpt    5       997.998 ±      25.516  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm                                       thrpt    5      9368.003 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.018 ±       0.153  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.171 ±       1.444    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen                                      thrpt    5      1019.314 ±      15.073  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      9568.318 ±     204.566    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.881  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.551 ±      65.017    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count                                                 thrpt    5        15.000                counts
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time                                                  thrpt    5        29.000                    ms
[info] JsonCodecMakerBenchmark.writeStringCirce                                                              thrpt    5    105716.839 ±    1281.737   ops/s
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate                                               thrpt    5       536.818 ±       6.558  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate.norm                                          thrpt    5      7992.004 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen                                         thrpt    5       538.228 ±     709.422  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      8019.051 ±   10635.453    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.666 ±       5.735  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         9.871 ±      84.993    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.count                                                    thrpt    5         8.000                counts
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.time                                                     thrpt    5        45.000                    ms
[info] JsonCodecMakerBenchmark.writeStringJackson                                                            thrpt    5    281690.098 ±    4710.262   ops/s
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate                                             thrpt    5       297.779 ±       4.939  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate.norm                                        thrpt    5      1664.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen                                       thrpt    5       269.068 ±     579.188  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1504.368 ±    3238.406    B/op
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.count                                                  thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.time                                                   thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.writeStringJsoniter                                                           thrpt    5    246080.684 ±   13293.056   ops/s
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate                                            thrpt    5       207.648 ±      11.252  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate.norm                                       thrpt    5      1328.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       201.850 ±     709.530  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1286.121 ±    4521.052    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.count                                                 thrpt    5         3.000                counts
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.time                                                  thrpt    5        16.000                    ms
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc                                                   thrpt    5    234967.193 ±    1081.269   ops/s
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate.norm                               thrpt    5         0.002 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.count                                         thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeStringPlay                                                               thrpt    5    282656.664 ±    9576.343   ops/s
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate                                                thrpt    5       301.726 ±      10.132  MB/sec
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate.norm                                           thrpt    5      1680.001 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       269.140 ±     579.343  MB/sec
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1501.200 ±    3231.960    B/op
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.count                                                     thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.time                                                      thrpt    5        22.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce                                                          thrpt    5      6399.437 ±     275.783   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate                                           thrpt    5       849.581 ±      36.847  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm                                      thrpt    5    208952.065 ±       0.008    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.005 ±       0.041  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         1.308 ±       9.995    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen                                     thrpt    5       880.760 ±     717.589  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5    216616.831 ±  176190.347    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±       5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5       198.102 ±    1382.475    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count                                                thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time                                                 thrpt    5        44.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson                                                        thrpt    5     33501.803 ±     848.594   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate                                         thrpt    5       427.767 ±      10.957  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm                                    thrpt    5     20100.010 ±       0.209    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       469.633 ±     706.350  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5     22113.915 ±   33837.689    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.266 ±       1.404  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        12.608 ±      66.477    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count                                              thrpt    5         7.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time                                               thrpt    5        47.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter                                                       thrpt    5     36189.139 ±    2009.745   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate                                        thrpt    5       241.534 ±      13.369  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm                                   thrpt    5     10504.011 ±       0.002    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       269.116 ±     579.293  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5     11689.723 ±   25175.487    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count                                             thrpt    5         4.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time                                              thrpt    5        23.000                    ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc                                               thrpt    5     34219.905 ±    2345.210   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate                                thrpt    5        14.088 ±       0.967  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm                           thrpt    5       648.012 ±       0.001    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count                                     thrpt    5           ≈ 0                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay                                                           thrpt    5      4360.971 ±     175.518   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate                                            thrpt    5       876.130 ±      35.244  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm                                       thrpt    5    316205.927 ±       3.243    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.012 ±       0.100  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         4.152 ±      35.749    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       881.544 ±     714.329  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    318305.670 ±  260587.840    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±       6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       289.462 ±    2492.355    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count                                                 thrpt    5        13.000                counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time                                                  thrpt    5        38.000                    ms
[success] Total time: 1890 s, completed Dec 4, 2017, 3:56:59 PM
