[info] Loading settings from build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Dec 5, 2017, 8:29:05 AM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonWriter.scala:189:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] one warning found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.1-SNAPSHOT.jar ...
[info] Compiling 6 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:32:62: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -854843732 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1882203379 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -739937554 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1690673754 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -553105946 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 14144516 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case -11755678 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -270730887 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Value, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.GoogleMapsAPI.DistanceMatrix, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:27:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:28:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/GoogleMapsAPI.scala:29:18: local val v3 in value format is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:63:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MissingReqFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:65:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1868115770 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 135249149 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AnyRefs, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:67:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[Array[Int]];
[info]             do 
[info]               x.+=(d2(in, v2))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = collection.mutable.ArrayBuilder.make[scala.math.BigInt];
[info]             do 
[info]               x.+=(in.readBigInt(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Arrays): com.github.plokhotnyuk.jsoniter_scala.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1396692260 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e2(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Arrays, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:69:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.BitSets): com.github.plokhotnyuk.jsoniter_scala.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -311899171 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 395882128 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.BitSets, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:71:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Iterables): com.github.plokhotnyuk.jsoniter_scala.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Iterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:73:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 753022030 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableIterables, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:75:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Maps): com.github.plokhotnyuk.jsoniter_scala.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Maps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:77:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.MutableMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:79:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1098479999 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case -188455160 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.IntAndLongMaps, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:81:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.Primitives): com.github.plokhotnyuk.jsoniter_scala.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = 0.toByte;
[info]           var _s: Short = 0.toShort;
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = 0.toChar;
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608352987 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -986815646 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1128364876 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 977778859 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2108804597 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.Primitives, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:83:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1511246974 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.ExtractFields, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:85:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.A): com.github.plokhotnyuk.jsoniter_scala.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 272946562 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.B): com.github.plokhotnyuk.jsoniter_scala.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 479329913 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.C): com.github.plokhotnyuk.jsoniter_scala.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1696035452 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1283270383 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -115772676 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.AdtBase): com.github.plokhotnyuk.jsoniter_scala.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readValueAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 1042714897 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 1249097774 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case -251352298 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.A, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("type");
[info]             out.writeVal("A")
[info]           };
[info]           {
[info]             out.writeKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.B, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("type");
[info]             out.writeVal("B")
[info]           };
[info]           {
[info]             out.writeKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.C, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("type");
[info]             out.writeVal("C")
[info]           };
[info]           {
[info]             out.writeKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/JsonCodecMakerBenchmark.scala:87:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:284:54: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1125392404 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -758822041 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1070335372 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1567327321 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -2118257363 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -560369018 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1327041850 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d11(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d11(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1198843867 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 985531917 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1994874891 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -626201443 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -64069972 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d10(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -422319283 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1231204836 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1565337738 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -903425777 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1481771385 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1617333980 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1034472816 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1096575944 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1766340764 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 656981833 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1692587979 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -761280539 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1523152584 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1042811670 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1322051899 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 430342393 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1547487212 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -738485249 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -869817957 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1479864213 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 892046337 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1815398146 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1854913126 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1700955824 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2002464660 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 196017265 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1725122937 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1346866717 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1251129302 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1343246339 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 929396071 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 356376530 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, req0, req1)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet): com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -165119785 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1500338773 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1434111844 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1749161762 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -957169247 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1962218059 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1722056278 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -56041286 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -685957369 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1195124586 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1480131160 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -836182436 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1249433185 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -779037686 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -1764808365 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -232934172 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case 2116377836 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(in.readString(null))
[info]                     else
[info]                       in.skip()
[info]                     case -350359215 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d12(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1834482941 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1363420571 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1279943733 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -941232733 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -41089286 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -724879728 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1733553572 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, req0)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Entities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.isEmpty)
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Url, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.UserEntities, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.User, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.RetweetedStatus, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet, out: JsonWriter): Unit = if (x.!=(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.TwitterAPI.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val codec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:134:18: local val v1 in value format is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:135:18: local val v2 in value format is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/TwitterAPI.scala:137:18: local val v4 in value format is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/CustomPlayJsonFormats.scala:65:45: Reference to uninitialized value v14
[warn]   implicit val v13: OFormat[C] = Json.format[C]
[warn]                                             ^
[warn] 7 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT.jar ...
Processing 293 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 116 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*JsonCodecMakerBenchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_1c167fa3/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce
[info] # Run progress: 0.00% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 944314.462 ops/s
[info] # Warmup Iteration   2: 1332379.037 ops/s
[info] # Warmup Iteration   3: 1367452.077 ops/s
[info] # Warmup Iteration   4: 1433828.583 ops/s
[info] # Warmup Iteration   5: 1441374.491 ops/s
[info] Iteration   1: 1433493.273 ops/s
[info]                  ·gc.alloc.rate:                                  2200.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2616.061 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 1413319.662 ops/s
[info]                  ·gc.alloc.rate:            2169.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2274.362 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 1438834.436 ops/s
[info]                  ·gc.alloc.rate:            2208.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2606.268 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1440631.080 ops/s
[info]                  ·gc.alloc.rate:                                  2211.495 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2231.259 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 1432756.796 ops/s
[info]                  ·gc.alloc.rate:                                  2199.121 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2617.397 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce":
[info]   1431807.049 ±(99.9%) 41863.094 ops/s [Average]
[info]   (min, avg, max) = (1413319.662, 1431807.049, 1440631.080), stdev = 10871.713
[info]   CI (99.9%): [1389943.955, 1473670.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate":
[info]   2197.711 ±(99.9%) 64.306 MB/sec [Average]
[info]   (min, avg, max) = (2169.379, 2197.711, 2211.495), stdev = 16.700
[info]   CI (99.9%): [2133.405, 2262.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm":
[info]   2416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2416.000, 2416.000, 2416.000), stdev = 0.001
[info]   CI (99.9%): [2416.000, 2416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen":
[info]   2246.339 ±(99.9%) 717.243 MB/sec [Average]
[info]   (min, avg, max) = (2042.199, 2246.339, 2382.439), stdev = 186.266
[info]   CI (99.9%): [1529.097, 2963.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2469.070 ±(99.9%) 762.621 B/op [Average]
[info]   (min, avg, max) = (2231.259, 2469.070, 2617.397), stdev = 198.050
[info]   CI (99.9%): [1706.448, 3231.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.600, 15.000), stdev = 2.881
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson
[info] # Run progress: 0.89% complete, ETA 00:30:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60380.207 ops/s
[info] # Warmup Iteration   2: 162871.967 ops/s
[info] # Warmup Iteration   3: 165836.226 ops/s
[info] # Warmup Iteration   4: 160683.742 ops/s
[info] # Warmup Iteration   5: 161525.770 ops/s
[info] Iteration   1: 163260.193 ops/s
[info]                  ·gc.alloc.rate:            291.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3242.966 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 163552.124 ops/s
[info]                  ·gc.alloc.rate:            291.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3237.236 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 164729.384 ops/s
[info]                  ·gc.alloc.rate:            293.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3213.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 164410.822 ops/s
[info]                  ·gc.alloc.rate:            293.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3220.344 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 164220.788 ops/s
[info]                  ·gc.alloc.rate:            292.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       2808.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3224.050 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson":
[info]   164034.662 ±(99.9%) 2351.277 ops/s [Average]
[info]   (min, avg, max) = (163260.193, 164034.662, 164729.384), stdev = 610.619
[info]   CI (99.9%): [161683.385, 166385.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate":
[info]   292.623 ±(99.9%) 4.202 MB/sec [Average]
[info]   (min, avg, max) = (291.221, 292.623, 293.849), stdev = 1.091
[info]   CI (99.9%): [288.421, 296.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm":
[info]   2808.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2808.002, 2808.003, 2808.003), stdev = 0.001
[info]   CI (99.9%): [2808.002, 2808.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen":
[info]   336.357 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (336.330, 336.357, 336.379), stdev = 0.024
[info]   CI (99.9%): [336.264, 336.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3227.710 ±(99.9%) 46.383 B/op [Average]
[info]   (min, avg, max) = (3213.953, 3227.710, 3242.966), stdev = 12.046
[info]   CI (99.9%): [3181.327, 3274.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 11.000), stdev = 2.739
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter
[info] # Run progress: 1.79% complete, ETA 00:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317019.020 ops/s
[info] # Warmup Iteration   2: 324032.923 ops/s
[info] # Warmup Iteration   3: 322671.106 ops/s
[info] # Warmup Iteration   4: 327277.195 ops/s
[info] # Warmup Iteration   5: 329732.175 ops/s
[info] Iteration   1: 333217.193 ops/s
[info]                  ·gc.alloc.rate:      220.117 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 330229.071 ops/s
[info]                  ·gc.alloc.rate:            218.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1603.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 329417.648 ops/s
[info]                  ·gc.alloc.rate:            217.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1607.191 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 335528.224 ops/s
[info]                  ·gc.alloc.rate:      221.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 1040.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 328824.036 ops/s
[info]                  ·gc.alloc.rate:            217.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       1040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1610.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter":
[info]   331443.235 ±(99.9%) 10937.365 ops/s [Average]
[info]   (min, avg, max) = (328824.036, 331443.235, 335528.224), stdev = 2840.399
[info]   CI (99.9%): [320505.870, 342380.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate":
[info]   218.982 ±(99.9%) 7.205 MB/sec [Average]
[info]   (min, avg, max) = (217.272, 218.982, 221.696), stdev = 1.871
[info]   CI (99.9%): [211.777, 226.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm":
[info]   1040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1040.001, 1040.001, 1040.001), stdev = 0.001
[info]   CI (99.9%): [1040.001, 1040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.814 ±(99.9%) 709.406 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.814, 336.382), stdev = 184.230
[info]   CI (99.9%): [≈ 0, 911.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   964.118 ±(99.9%) 3389.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 964.118, 1610.138), stdev = 880.118
[info]   CI (99.9%): [≈ 0, 4353.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 13.000), stdev = 6.042
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless
[info] # Run progress: 2.68% complete, ETA 00:29:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753332.226 ops/s
[info] # Warmup Iteration   2: 786928.358 ops/s
[info] # Warmup Iteration   3: 749340.163 ops/s
[info] # Warmup Iteration   4: 718397.966 ops/s
[info] # Warmup Iteration   5: 735646.810 ops/s
[info] Iteration   1: 740305.267 ops/s
[info]                  ·gc.alloc.rate:            259.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 715.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 761144.250 ops/s
[info]                  ·gc.alloc.rate:            266.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 695.589 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 770400.230 ops/s
[info]                  ·gc.alloc.rate:            270.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 687.237 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 774384.224 ops/s
[info]                  ·gc.alloc.rate:            271.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 683.713 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   5: 772875.015 ops/s
[info]                  ·gc.alloc.rate:      271.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless":
[info]   763821.797 ±(99.9%) 54354.053 ops/s [Average]
[info]   (min, avg, max) = (740305.267, 763821.797, 774384.224), stdev = 14115.575
[info]   CI (99.9%): [709467.745, 818175.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate":
[info]   267.868 ±(99.9%) 19.075 MB/sec [Average]
[info]   (min, avg, max) = (259.613, 267.868, 271.573), stdev = 4.954
[info]   CI (99.9%): [248.793, 286.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm":
[info]   552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (552.001, 552.001, 552.001), stdev = 0.001
[info]   CI (99.9%): [552.000, 552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   269.095 ±(99.9%) 579.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.095, 336.380), stdev = 150.429
[info]   CI (99.9%): [≈ 0, 848.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   556.344 ±(99.9%) 1198.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 556.344, 715.180), stdev = 311.244
[info]   CI (99.9%): [≈ 0, 1754.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 11.000, 15.000), stdev = 6.205
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump
[info] # Run progress: 3.57% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2739808.056 ops/s
[info] # Warmup Iteration   2: 2704161.007 ops/s
[info] # Warmup Iteration   3: 2788960.698 ops/s
[info] # Warmup Iteration   4: 2848685.997 ops/s
[info] # Warmup Iteration   5: 2845157.225 ops/s
[info] Iteration   1: 2798003.748 ops/s
[info]                  ·gc.alloc.rate:            312.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2821728.153 ops/s
[info]                  ·gc.alloc.rate:            315.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.633 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2846386.150 ops/s
[info]                  ·gc.alloc.rate:            318.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.006 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2853422.944 ops/s
[info]                  ·gc.alloc.rate:            319.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.548 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2860125.756 ops/s
[info]                  ·gc.alloc.rate:            319.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.113 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump":
[info]   2835933.350 ±(99.9%) 98940.978 ops/s [Average]
[info]   (min, avg, max) = (2798003.748, 2835933.350, 2860125.756), stdev = 25694.658
[info]   CI (99.9%): [2736992.372, 2934874.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   317.084 ±(99.9%) 11.155 MB/sec [Average]
[info]   (min, avg, max) = (312.793, 317.084, 319.804), stdev = 2.897
[info]   CI (99.9%): [305.930, 328.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   336.346 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (336.287, 336.346, 336.384), stdev = 0.037
[info]   CI (99.9%): [336.205, 336.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   186.704 ±(99.9%) 6.542 B/op [Average]
[info]   (min, avg, max) = (185.113, 186.704, 189.219), stdev = 1.699
[info]   CI (99.9%): [180.162, 193.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay
[info] # Run progress: 4.46% complete, ETA 00:29:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37133.298 ops/s
[info] # Warmup Iteration   2: 95786.975 ops/s
[info] # Warmup Iteration   3: 97011.376 ops/s
[info] # Warmup Iteration   4: 101809.754 ops/s
[info] # Warmup Iteration   5: 102253.307 ops/s
[info] Iteration   1: 101847.567 ops/s
[info]                  ·gc.alloc.rate:            653.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       10096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10396.821 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 102173.432 ops/s
[info]                  ·gc.alloc.rate:            655.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       10096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10363.349 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 102123.702 ops/s
[info]                  ·gc.alloc.rate:            655.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       10096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10368.118 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 99996.373 ops/s
[info]                  ·gc.alloc.rate:                   641.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              10096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10641.769 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 62.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 101744.646 ops/s
[info]                  ·gc.alloc.rate:                                  652.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10096.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.196 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10531.099 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay":
[info]   101577.144 ±(99.9%) 3473.223 ops/s [Average]
[info]   (min, avg, max) = (99996.373, 101577.144, 102173.432), stdev = 901.985
[info]   CI (99.9%): [98103.921, 105050.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate":
[info]   651.566 ±(99.9%) 22.300 MB/sec [Average]
[info]   (min, avg, max) = (641.395, 651.566, 655.276), stdev = 5.791
[info]   CI (99.9%): [629.265, 673.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm":
[info]   10096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10096.004, 10096.004, 10096.004), stdev = 0.001
[info]   CI (99.9%): [10096.004, 10096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.196), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.605 ±(99.9%) 5.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.605, 3.024), stdev = 1.352
[info]   CI (99.9%): [≈ 0, 5.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen":
[info]   675.021 ±(99.9%) 13.604 MB/sec [Average]
[info]   (min, avg, max) = (672.628, 675.021, 680.792), stdev = 3.533
[info]   CI (99.9%): [661.417, 688.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10460.231 ±(99.9%) 471.095 B/op [Average]
[info]   (min, avg, max) = (10363.349, 10460.231, 10641.769), stdev = 122.342
[info]   CI (99.9%): [9989.136, 10931.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   12.581 ±(99.9%) 108.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.581, 62.907), stdev = 28.133
[info]   CI (99.9%): [≈ 0, 120.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 13.600, 20.000), stdev = 7.021
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce
[info] # Run progress: 5.36% complete, ETA 00:29:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349040.470 ops/s
[info] # Warmup Iteration   2: 478968.177 ops/s
[info] # Warmup Iteration   3: 479269.858 ops/s
[info] # Warmup Iteration   4: 494025.821 ops/s
[info] # Warmup Iteration   5: 492801.356 ops/s
[info] Iteration   1: 502994.667 ops/s
[info]                  ·gc.alloc.rate:                                  1298.428 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4260.335 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 496826.166 ops/s
[info]                  ·gc.alloc.rate:            1282.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4313.365 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 501481.860 ops/s
[info]                  ·gc.alloc.rate:            1294.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4273.118 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 504721.631 ops/s
[info]                  ·gc.alloc.rate:                                  1302.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3184.074 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 500733.886 ops/s
[info]                  ·gc.alloc.rate:            1292.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4279.381 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce":
[info]   501351.642 ±(99.9%) 11379.755 ops/s [Average]
[info]   (min, avg, max) = (496826.166, 501351.642, 504721.631), stdev = 2955.286
[info]   CI (99.9%): [489971.887, 512731.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate":
[info]   1294.306 ±(99.9%) 28.980 MB/sec [Average]
[info]   (min, avg, max) = (1282.752, 1294.306, 1302.842), stdev = 7.526
[info]   CI (99.9%): [1265.325, 1323.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm":
[info]   4064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4064.001, 4064.001, 4064.001), stdev = 0.001
[info]   CI (99.9%): [4064.001, 4064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1293.202 ±(99.9%) 586.466 MB/sec [Average]
[info]   (min, avg, max) = (1020.754, 1293.202, 1361.526), stdev = 152.303
[info]   CI (99.9%): [706.736, 1879.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4062.055 ±(99.9%) 1891.427 B/op [Average]
[info]   (min, avg, max) = (3184.074, 4062.055, 4313.365), stdev = 491.198
[info]   CI (99.9%): [2170.627, 5953.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson
[info] # Run progress: 6.25% complete, ETA 00:28:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 681199.045 ops/s
[info] # Warmup Iteration   2: 1048455.039 ops/s
[info] # Warmup Iteration   3: 1046261.773 ops/s
[info] # Warmup Iteration   4: 1048315.273 ops/s
[info] # Warmup Iteration   5: 1047575.913 ops/s
[info] Iteration   1: 1060214.949 ops/s
[info]                  ·gc.alloc.rate:            754.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 998.777 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1055233.083 ops/s
[info]                  ·gc.alloc.rate:            750.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1003.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 1034401.542 ops/s
[info]                  ·gc.alloc.rate:                                  736.046 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1546.631 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.081 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        22.000 ms
[info] Iteration   4: 1067820.157 ops/s
[info]                  ·gc.alloc.rate:                                  759.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1003.430 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1066284.284 ops/s
[info]                  ·gc.alloc.rate:            758.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1004.798 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson":
[info]   1056790.803 ±(99.9%) 51919.587 ops/s [Average]
[info]   (min, avg, max) = (1034401.542, 1056790.803, 1067820.157), stdev = 13483.352
[info]   CI (99.9%): [1004871.216, 1108710.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate":
[info]   751.941 ±(99.9%) 36.821 MB/sec [Average]
[info]   (min, avg, max) = (736.046, 751.941, 759.786), stdev = 9.562
[info]   CI (99.9%): [715.121, 788.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen":
[info]   744.642 ±(99.9%) 585.221 MB/sec [Average]
[info]   (min, avg, max) = (672.685, 744.642, 1016.420), stdev = 151.980
[info]   CI (99.9%): [159.421, 1329.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1111.425 ±(99.9%) 936.854 B/op [Average]
[info]   (min, avg, max) = (998.777, 1111.425, 1546.631), stdev = 243.298
[info]   CI (99.9%): [174.572, 2048.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.216 ±(99.9%) 10.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.216, 6.081), stdev = 2.720
[info]   CI (99.9%): [≈ 0, 11.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJackson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 11.400, 22.000), stdev = 8.473
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter
[info] # Run progress: 7.14% complete, ETA 00:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2155387.505 ops/s
[info] # Warmup Iteration   2: 2747767.680 ops/s
[info] # Warmup Iteration   3: 2793101.601 ops/s
[info] # Warmup Iteration   4: 2766062.057 ops/s
[info] # Warmup Iteration   5: 2802444.743 ops/s
[info] Iteration   1: 2772210.595 ops/s
[info]                  ·gc.alloc.rate:            183.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.987 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2791915.703 ops/s
[info]                  ·gc.alloc.rate:      184.480 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2789391.504 ops/s
[info]                  ·gc.alloc.rate:            184.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2803931.822 ops/s
[info]                  ·gc.alloc.rate:      185.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2776111.871 ops/s
[info]                  ·gc.alloc.rate:            183.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.714 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter":
[info]   2786712.299 ±(99.9%) 49215.764 ops/s [Average]
[info]   (min, avg, max) = (2772210.595, 2786712.299, 2803931.822), stdev = 12781.178
[info]   CI (99.9%): [2737496.535, 2835928.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate":
[info]   184.123 ±(99.9%) 3.277 MB/sec [Average]
[info]   (min, avg, max) = (183.130, 184.123, 185.265), stdev = 0.851
[info]   CI (99.9%): [180.846, 187.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.811 ±(99.9%) 709.393 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.811, 336.410), stdev = 184.227
[info]   CI (99.9%): [≈ 0, 911.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   114.301 ±(99.9%) 401.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.301, 190.987), stdev = 104.343
[info]   CI (99.9%): [≈ 0, 516.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 10.000), stdev = 4.604
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay
[info] # Run progress: 8.04% complete, ETA 00:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57385.756 ops/s
[info] # Warmup Iteration   2: 100556.544 ops/s
[info] # Warmup Iteration   3: 103778.727 ops/s
[info] # Warmup Iteration   4: 104820.772 ops/s
[info] # Warmup Iteration   5: 104855.773 ops/s
[info] Iteration   1: 105835.419 ops/s
[info]                  ·gc.alloc.rate:            896.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15007.252 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 106779.428 ops/s
[info]                  ·gc.alloc.rate:                                  904.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.291 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14982.182 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                58.908 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 108264.423 ops/s
[info]                  ·gc.alloc.rate:                                  917.149 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.457 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14845.054 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 108252.447 ops/s
[info]                  ·gc.alloc.rate:                                  917.165 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9897.891 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 108160.314 ops/s
[info]                  ·gc.alloc.rate:            916.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14858.914 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay":
[info]   107458.406 ±(99.9%) 4247.916 ops/s [Average]
[info]   (min, avg, max) = (105835.419, 107458.406, 108264.423), stdev = 1103.170
[info]   CI (99.9%): [103210.490, 111706.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate":
[info]   910.366 ±(99.9%) 36.106 MB/sec [Average]
[info]   (min, avg, max) = (896.574, 910.366, 917.165), stdev = 9.377
[info]   CI (99.9%): [874.260, 946.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm":
[info]   13336.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.004, 13336.004, 13336.004), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.154 ±(99.9%) 0.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.457), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen":
[info]   949.564 ±(99.9%) 579.031 MB/sec [Average]
[info]   (min, avg, max) = (680.714, 949.564, 1020.996), stdev = 150.373
[info]   CI (99.9%): [370.533, 1528.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   13918.259 ±(99.9%) 8658.594 B/op [Average]
[info]   (min, avg, max) = (9897.891, 13918.259, 15007.252), stdev = 2248.609
[info]   CI (99.9%): [5259.665, 22576.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   11.782 ±(99.9%) 101.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.782, 58.908), stdev = 26.344
[info]   CI (99.9%): [≈ 0, 113.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAdtPlay:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 5.630
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce
[info] # Run progress: 8.93% complete, ETA 00:27:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 809025.318 ops/s
[info] # Warmup Iteration   2: 1124800.510 ops/s
[info] # Warmup Iteration   3: 1134312.984 ops/s
[info] # Warmup Iteration   4: 1163472.901 ops/s
[info] # Warmup Iteration   5: 1171284.841 ops/s
[info] Iteration   1: 1172573.064 ops/s
[info]                  ·gc.alloc.rate:            1829.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2284.417 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1178158.579 ops/s
[info]                  ·gc.alloc.rate:                                  1838.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2273.468 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1183394.752 ops/s
[info]                  ·gc.alloc.rate:                                  1846.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2716.296 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1184873.060 ops/s
[info]                  ·gc.alloc.rate:                                  1848.602 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2260.797 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 1185186.970 ops/s
[info]                  ·gc.alloc.rate:                                  1849.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2712.059 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce":
[info]   1180837.285 ±(99.9%) 20845.174 ops/s [Average]
[info]   (min, avg, max) = (1172573.064, 1180837.285, 1185186.970), stdev = 5413.425
[info]   CI (99.9%): [1159992.112, 1201682.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate":
[info]   1842.518 ±(99.9%) 32.648 MB/sec [Average]
[info]   (min, avg, max) = (1829.601, 1842.518, 1849.779), stdev = 8.479
[info]   CI (99.9%): [1809.870, 1875.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1837.947 ±(99.9%) 718.217 MB/sec [Average]
[info]   (min, avg, max) = (1701.675, 1837.947, 2042.634), stdev = 186.519
[info]   CI (99.9%): [1119.730, 2556.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2449.407 ±(99.9%) 931.278 B/op [Average]
[info]   (min, avg, max) = (2260.797, 2449.407, 2716.296), stdev = 241.850
[info]   CI (99.9%): [1518.129, 3380.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson
[info] # Run progress: 9.82% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1004701.860 ops/s
[info] # Warmup Iteration   2: 1599819.763 ops/s
[info] # Warmup Iteration   3: 1658068.679 ops/s
[info] # Warmup Iteration   4: 1621517.658 ops/s
[info] # Warmup Iteration   5: 1622035.707 ops/s
[info] Iteration   1: 1667431.223 ops/s
[info]                  ·gc.alloc.rate:                                  1169.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.191 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1284.556 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.629 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 1673873.353 ops/s
[info]                  ·gc.alloc.rate:                                  1173.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       960.166 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1663233.876 ops/s
[info]                  ·gc.alloc.rate:                                  1166.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1288.370 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1667846.856 ops/s
[info]                  ·gc.alloc.rate:            1169.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 963.649 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1679350.369 ops/s
[info]                  ·gc.alloc.rate:                                  1177.856 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       957.023 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson":
[info]   1670347.135 ±(99.9%) 24265.538 ops/s [Average]
[info]   (min, avg, max) = (1663233.876, 1670347.135, 1679350.369), stdev = 6301.683
[info]   CI (99.9%): [1646081.598, 1694612.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate":
[info]   1171.501 ±(99.9%) 16.961 MB/sec [Average]
[info]   (min, avg, max) = (1166.569, 1171.501, 1177.856), stdev = 4.405
[info]   CI (99.9%): [1154.540, 1188.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.180), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1157.023 ±(99.9%) 717.121 MB/sec [Average]
[info]   (min, avg, max) = (1020.934, 1157.023, 1361.387), stdev = 186.234
[info]   CI (99.9%): [439.902, 1874.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1090.753 ±(99.9%) 688.028 B/op [Average]
[info]   (min, avg, max) = (957.023, 1090.753, 1288.370), stdev = 178.679
[info]   CI (99.9%): [402.725, 1778.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.126 ±(99.9%) 1.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.629), stdev = 0.281
[info]   CI (99.9%): [≈ 0, 1.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter
[info] # Run progress: 10.71% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6741223.571 ops/s
[info] # Warmup Iteration   2: 6801505.973 ops/s
[info] # Warmup Iteration   3: 7054851.818 ops/s
[info] # Warmup Iteration   4: 6877672.260 ops/s
[info] # Warmup Iteration   5: 6967330.983 ops/s
[info] Iteration   1: 7085787.217 ops/s
[info]                  ·gc.alloc.rate:                   900.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        149.440 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 7174012.956 ops/s
[info]                  ·gc.alloc.rate:                                  911.587 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.149 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       224.030 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 7222934.057 ops/s
[info]                  ·gc.alloc.rate:                                  917.795 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       222.508 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7210594.638 ops/s
[info]                  ·gc.alloc.rate:            916.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 148.588 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7177615.089 ops/s
[info]                  ·gc.alloc.rate:            911.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 223.920 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter":
[info]   7174188.792 ±(99.9%) 206719.833 ops/s [Average]
[info]   (min, avg, max) = (7085787.217, 7174188.792, 7222934.057), stdev = 53684.484
[info]   CI (99.9%): [6967468.959, 7380908.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate":
[info]   911.543 ±(99.9%) 26.546 MB/sec [Average]
[info]   (min, avg, max) = (900.169, 911.543, 917.795), stdev = 6.894
[info]   CI (99.9%): [884.998, 938.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.149), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   883.306 ±(99.9%) 726.560 MB/sec [Average]
[info]   (min, avg, max) = (672.606, 883.306, 1021.115), stdev = 188.685
[info]   CI (99.9%): [156.746, 1609.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   193.697 ±(99.9%) 157.088 B/op [Average]
[info]   (min, avg, max) = (148.588, 193.697, 224.030), stdev = 40.795
[info]   CI (99.9%): [36.609, 350.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 1.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.888), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.647
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay
[info] # Run progress: 11.61% complete, ETA 00:27:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190190.458 ops/s
[info] # Warmup Iteration   2: 327577.540 ops/s
[info] # Warmup Iteration   3: 332168.408 ops/s
[info] # Warmup Iteration   4: 333349.135 ops/s
[info] # Warmup Iteration   5: 333949.091 ops/s
[info] Iteration   1: 329105.675 ops/s
[info]                  ·gc.alloc.rate:            866.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       4144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4826.158 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  28.000 ms
[info] Iteration   2: 332915.303 ops/s
[info]                  ·gc.alloc.rate:                                  876.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4805.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.895 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 338559.932 ops/s
[info]                  ·gc.alloc.rate:                                  891.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3164.751 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 337941.739 ops/s
[info]                  ·gc.alloc.rate:            889.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       4144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4755.960 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 336601.151 ops/s
[info]                  ·gc.alloc.rate:            887.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       4144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1017.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4751.686 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay":
[info]   335024.760 ±(99.9%) 15278.930 ops/s [Average]
[info]   (min, avg, max) = (329105.675, 335024.760, 338559.932), stdev = 3967.890
[info]   CI (99.9%): [319745.830, 350303.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate":
[info]   882.337 ±(99.9%) 41.211 MB/sec [Average]
[info]   (min, avg, max) = (866.333, 882.337, 891.372), stdev = 10.702
[info]   CI (99.9%): [841.126, 923.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.001, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.192), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   949.030 ±(99.9%) 577.784 MB/sec [Average]
[info]   (min, avg, max) = (680.736, 949.030, 1021.266), stdev = 150.049
[info]   CI (99.9%): [371.246, 1526.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4460.815 ±(99.9%) 2792.577 B/op [Average]
[info]   (min, avg, max) = (3164.751, 4460.815, 4826.158), stdev = 725.223
[info]   CI (99.9%): [1668.238, 7253.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   3.779 ±(99.9%) 32.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.779, 18.895), stdev = 8.450
[info]   CI (99.9%): [≈ 0, 36.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 11.000, 28.000), stdev = 10.100
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce
[info] # Run progress: 12.50% complete, ETA 00:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 372333.510 ops/s
[info] # Warmup Iteration   2: 550441.977 ops/s
[info] # Warmup Iteration   3: 587464.213 ops/s
[info] # Warmup Iteration   4: 592642.125 ops/s
[info] # Warmup Iteration   5: 597656.553 ops/s
[info] Iteration   1: 608901.982 ops/s
[info]                  ·gc.alloc.rate:                                  1971.258 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4399.039 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 600948.902 ops/s
[info]                  ·gc.alloc.rate:                                  1945.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5348.783 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 603834.727 ops/s
[info]                  ·gc.alloc.rate:                                  1955.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5323.161 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 603299.703 ops/s
[info]                  ·gc.alloc.rate:                                  1953.324 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5327.952 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 593775.690 ops/s
[info]                  ·gc.alloc.rate:                                  1922.498 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4511.390 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce":
[info]   602152.201 ±(99.9%) 21206.621 ops/s [Average]
[info]   (min, avg, max) = (593775.690, 602152.201, 608901.982), stdev = 5507.292
[info]   CI (99.9%): [580945.580, 623358.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate":
[info]   1949.533 ±(99.9%) 68.463 MB/sec [Average]
[info]   (min, avg, max) = (1922.498, 1949.533, 1971.258), stdev = 17.780
[info]   CI (99.9%): [1881.070, 2017.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm":
[info]   5096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.001, 5096.001, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.001, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.003, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.007, 0.011), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1906.016 ±(99.9%) 717.836 MB/sec [Average]
[info]   (min, avg, max) = (1701.656, 1906.016, 2042.242), stdev = 186.420
[info]   CI (99.9%): [1188.179, 2623.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4982.065 ±(99.9%) 1858.629 B/op [Average]
[info]   (min, avg, max) = (4399.039, 4982.065, 5348.783), stdev = 482.680
[info]   CI (99.9%): [3123.436, 6840.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 14.000), stdev = 3.000
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson
[info] # Run progress: 13.39% complete, ETA 00:26:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591789.747 ops/s
[info] # Warmup Iteration   2: 942750.706 ops/s
[info] # Warmup Iteration   3: 955605.385 ops/s
[info] # Warmup Iteration   4: 951414.594 ops/s
[info] # Warmup Iteration   5: 949512.020 ops/s
[info] Iteration   1: 952405.679 ops/s
[info]                  ·gc.alloc.rate:                   866.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1666.664 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 945070.391 ops/s
[info]                  ·gc.alloc.rate:                                  859.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1691.765 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.765 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        24.000 ms
[info] Iteration   3: 969225.731 ops/s
[info]                  ·gc.alloc.rate:                                  882.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1105.444 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 955976.592 ops/s
[info]                  ·gc.alloc.rate:            869.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1681.249 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 967202.742 ops/s
[info]                  ·gc.alloc.rate:            880.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1107.829 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson":
[info]   957976.227 ±(99.9%) 39139.958 ops/s [Average]
[info]   (min, avg, max) = (945070.391, 957976.227, 969225.731), stdev = 10164.523
[info]   CI (99.9%): [918836.269, 997116.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate":
[info]   871.678 ±(99.9%) 35.931 MB/sec [Average]
[info]   (min, avg, max) = (859.872, 871.678, 882.033), stdev = 9.331
[info]   CI (99.9%): [835.747, 907.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen":
[info]   881.476 ±(99.9%) 705.288 MB/sec [Average]
[info]   (min, avg, max) = (680.892, 881.476, 1021.228), stdev = 183.161
[info]   CI (99.9%): [176.188, 1586.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1450.590 ±(99.9%) 1209.538 B/op [Average]
[info]   (min, avg, max) = (1105.444, 1450.590, 1691.765), stdev = 314.113
[info]   CI (99.9%): [241.052, 2660.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.773 ±(99.9%) 13.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.773, 7.765), stdev = 3.383
[info]   CI (99.9%): [≈ 0, 14.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJackson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 12.400, 24.000), stdev = 8.735
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter
[info] # Run progress: 14.29% complete, ETA 00:26:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2357527.381 ops/s
[info] # Warmup Iteration   2: 2707912.934 ops/s
[info] # Warmup Iteration   3: 2755798.429 ops/s
[info] # Warmup Iteration   4: 2667663.903 ops/s
[info] # Warmup Iteration   5: 2729095.381 ops/s
[info] Iteration   1: 2808475.013 ops/s
[info]                  ·gc.alloc.rate:                                  1170.548 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       572.271 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 2783527.469 ops/s
[info]                  ·gc.alloc.rate:                                  1160.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       769.857 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 2798919.619 ops/s
[info]                  ·gc.alloc.rate:            1166.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 574.165 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2759936.545 ops/s
[info]                  ·gc.alloc.rate:            1150.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 776.409 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2754930.722 ops/s
[info]                  ·gc.alloc.rate:            1148.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 583.386 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter":
[info]   2781157.873 ±(99.9%) 90419.009 ops/s [Average]
[info]   (min, avg, max) = (2754930.722, 2781157.873, 2808475.013), stdev = 23481.530
[info]   CI (99.9%): [2690738.864, 2871576.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate":
[info]   1159.044 ±(99.9%) 37.814 MB/sec [Average]
[info]   (min, avg, max) = (1148.085, 1159.044, 1170.548), stdev = 9.820
[info]   CI (99.9%): [1121.230, 1196.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1157.137 ±(99.9%) 717.816 MB/sec [Average]
[info]   (min, avg, max) = (1020.853, 1157.137, 1361.409), stdev = 186.415
[info]   CI (99.9%): [439.321, 1874.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   655.218 ±(99.9%) 414.902 B/op [Average]
[info]   (min, avg, max) = (572.271, 655.218, 776.409), stdev = 107.749
[info]   CI (99.9%): [240.315, 1070.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.793
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay
[info] # Run progress: 15.18% complete, ETA 00:25:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83852.715 ops/s
[info] # Warmup Iteration   2: 177050.416 ops/s
[info] # Warmup Iteration   3: 178419.191 ops/s
[info] # Warmup Iteration   4: 176627.860 ops/s
[info] # Warmup Iteration   5: 176795.766 ops/s
[info] Iteration   1: 176826.659 ops/s
[info]                  ·gc.alloc.rate:                                  1064.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9480.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9047.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                35.572 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 181272.950 ops/s
[info]                  ·gc.alloc.rate:                                  1091.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9480.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.408 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8865.555 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 179997.949 ops/s
[info]                  ·gc.alloc.rate:            1084.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       9480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8928.735 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 179299.981 ops/s
[info]                  ·gc.alloc.rate:            1079.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       9480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11952.050 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 181192.119 ops/s
[info]                  ·gc.alloc.rate:                                  1091.288 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9480.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8870.105 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay":
[info]   179717.932 ±(99.9%) 6996.065 ops/s [Average]
[info]   (min, avg, max) = (176826.659, 179717.932, 181272.950), stdev = 1816.856
[info]   CI (99.9%): [172721.867, 186713.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate":
[info]   1082.353 ±(99.9%) 42.335 MB/sec [Average]
[info]   (min, avg, max) = (1064.822, 1082.353, 1091.673), stdev = 10.994
[info]   CI (99.9%): [1040.019, 1124.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm":
[info]   9480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9480.002, 9480.002, 9480.002), stdev = 0.001
[info]   CI (99.9%): [9480.002, 9480.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.047), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.119 ±(99.9%) 0.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.408), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1088.148 ±(99.9%) 588.321 MB/sec [Average]
[info]   (min, avg, max) = (1016.216, 1088.148, 1361.433), stdev = 152.785
[info]   CI (99.9%): [499.826, 1676.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9532.743 ±(99.9%) 5215.379 B/op [Average]
[info]   (min, avg, max) = (8865.555, 9532.743, 11952.050), stdev = 1354.417
[info]   CI (99.9%): [4317.364, 14748.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.114 ±(99.9%) 61.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.114, 35.572), stdev = 15.908
[info]   CI (99.9%): [≈ 0, 68.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readArraysPlay:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 12.000), stdev = 4.037
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson
[info] # Run progress: 16.07% complete, ETA 00:25:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 855337.163 ops/s
[info] # Warmup Iteration   2: 1324968.632 ops/s
[info] # Warmup Iteration   3: 1347460.741 ops/s
[info] # Warmup Iteration   4: 1333002.909 ops/s
[info] # Warmup Iteration   5: 1341734.814 ops/s
[info] Iteration   1: 1324582.914 ops/s
[info]                  ·gc.alloc.rate:            841.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1199.157 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  27.000 ms
[info] Iteration   2: 1342117.488 ops/s
[info]                  ·gc.alloc.rate:                   852.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        792.896 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1345891.071 ops/s
[info]                  ·gc.alloc.rate:                                  854.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1194.188 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1355068.387 ops/s
[info]                  ·gc.alloc.rate:            860.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 790.683 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 1349873.315 ops/s
[info]                  ·gc.alloc.rate:            857.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1190.640 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson":
[info]   1343506.635 ±(99.9%) 44737.590 ops/s [Average]
[info]   (min, avg, max) = (1324582.914, 1343506.635, 1355068.387), stdev = 11618.210
[info]   CI (99.9%): [1298769.045, 1388244.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate":
[info]   853.482 ±(99.9%) 28.606 MB/sec [Average]
[info]   (min, avg, max) = (841.414, 853.482, 860.909), stdev = 7.429
[info]   CI (99.9%): [824.876, 882.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   881.545 ±(99.9%) 714.543 MB/sec [Average]
[info]   (min, avg, max) = (675.990, 881.545, 1021.101), stdev = 185.565
[info]   CI (99.9%): [167.001, 1596.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1033.513 ±(99.9%) 849.777 B/op [Average]
[info]   (min, avg, max) = (790.683, 1033.513, 1199.157), stdev = 220.684
[info]   CI (99.9%): [183.736, 1883.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.937 ±(99.9%) 8.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.937, 4.687), stdev = 2.096
[info]   CI (99.9%): [≈ 0, 9.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 27.000), stdev = 10.183
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter
[info] # Run progress: 16.96% complete, ETA 00:25:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2965024.187 ops/s
[info] # Warmup Iteration   2: 3952600.792 ops/s
[info] # Warmup Iteration   3: 3954712.511 ops/s
[info] # Warmup Iteration   4: 3942968.723 ops/s
[info] # Warmup Iteration   5: 3955412.486 ops/s
[info] Iteration   1: 3989438.188 ops/s
[info]                  ·gc.alloc.rate:            527.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 265.423 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4017170.173 ops/s
[info]                  ·gc.alloc.rate:            530.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3952128.054 ops/s
[info]                  ·gc.alloc.rate:            522.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 267.930 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 3999592.972 ops/s
[info]                  ·gc.alloc.rate:            528.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132.369 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 3947887.375 ops/s
[info]                  ·gc.alloc.rate:                   521.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        268.224 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter":
[info]   3981243.352 ±(99.9%) 116397.172 ops/s [Average]
[info]   (min, avg, max) = (3947887.375, 3981243.352, 4017170.173), stdev = 30227.976
[info]   CI (99.9%): [3864846.181, 4097640.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate":
[info]   526.064 ±(99.9%) 15.350 MB/sec [Average]
[info]   (min, avg, max) = (521.681, 526.064, 530.792), stdev = 3.986
[info]   CI (99.9%): [510.713, 541.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.135 ±(99.9%) 709.349 MB/sec [Average]
[info]   (min, avg, max) = (336.313, 538.135, 672.727), stdev = 184.216
[info]   CI (99.9%): [≈ 0, 1247.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   213.147 ±(99.9%) 284.996 B/op [Average]
[info]   (min, avg, max) = (131.790, 213.147, 268.224), stdev = 74.013
[info]   CI (99.9%): [≈ 0, 498.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.319 ±(99.9%) 2.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.593), stdev = 0.713
[info]   CI (99.9%): [≈ 0, 3.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 13.200, 23.000), stdev = 6.535
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay
[info] # Run progress: 17.86% complete, ETA 00:25:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95058.249 ops/s
[info] # Warmup Iteration   2: 204573.058 ops/s
[info] # Warmup Iteration   3: 208778.600 ops/s
[info] # Warmup Iteration   4: 211134.991 ops/s
[info] # Warmup Iteration   5: 206553.175 ops/s
[info] Iteration   1: 208632.849 ops/s
[info]                  ·gc.alloc.rate:                   961.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7613.088 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 210914.012 ops/s
[info]                  ·gc.alloc.rate:                                  972.201 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.325 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7615.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.971 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 212918.315 ops/s
[info]                  ·gc.alloc.rate:            979.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1018.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7548.388 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 213715.288 ops/s
[info]                  ·gc.alloc.rate:            985.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7519.997 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 212487.737 ops/s
[info]                  ·gc.alloc.rate:            979.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7562.949 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay":
[info]   211733.640 ±(99.9%) 7745.861 ops/s [Average]
[info]   (min, avg, max) = (208632.849, 211733.640, 213715.288), stdev = 2011.575
[info]   CI (99.9%): [203987.779, 219479.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate":
[info]   975.654 ±(99.9%) 34.583 MB/sec [Average]
[info]   (min, avg, max) = (961.870, 975.654, 985.184), stdev = 8.981
[info]   CI (99.9%): [941.071, 1010.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm":
[info]   7256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7256.002, 7256.002, 7256.002), stdev = 0.001
[info]   CI (99.9%): [7256.002, 7256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.065 ±(99.9%) 0.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.325), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   1018.093 ±(99.9%) 19.527 MB/sec [Average]
[info]   (min, avg, max) = (1009.206, 1018.093, 1021.260), stdev = 5.071
[info]   CI (99.9%): [998.566, 1037.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   7571.895 ±(99.9%) 159.762 B/op [Average]
[info]   (min, avg, max) = (7519.997, 7571.895, 7615.054), stdev = 41.490
[info]   CI (99.9%): [7412.133, 7731.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.019 ±(99.9%) 41.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.019, 25.126), stdev = 10.896
[info]   CI (99.9%): [≈ 0, 47.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 24.000), stdev = 8.832
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce
[info] # Run progress: 18.75% complete, ETA 00:24:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348512.647 ops/s
[info] # Warmup Iteration   2: 495305.146 ops/s
[info] # Warmup Iteration   3: 503584.851 ops/s
[info] # Warmup Iteration   4: 512286.926 ops/s
[info] # Warmup Iteration   5: 522879.297 ops/s
[info] Iteration   1: 516811.542 ops/s
[info]                  ·gc.alloc.rate:            1688.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5183.057 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 513104.556 ops/s
[info]                  ·gc.alloc.rate:                                  1676.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5220.110 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 520238.025 ops/s
[info]                  ·gc.alloc.rate:                                  1700.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5148.890 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 518789.300 ops/s
[info]                  ·gc.alloc.rate:                                  1695.408 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5163.418 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 517625.747 ops/s
[info]                  ·gc.alloc.rate:            1691.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       5144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5174.847 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce":
[info]   517313.834 ±(99.9%) 10331.556 ops/s [Average]
[info]   (min, avg, max) = (513104.556, 517313.834, 520238.025), stdev = 2683.072
[info]   CI (99.9%): [506982.278, 527645.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate":
[info]   1690.494 ±(99.9%) 33.976 MB/sec [Average]
[info]   (min, avg, max) = (1676.761, 1690.494, 1700.157), stdev = 8.823
[info]   CI (99.9%): [1656.518, 1724.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.001, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.001, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen":
[info]   1701.652 ±(99.9%) 0.807 MB/sec [Average]
[info]   (min, avg, max) = (1701.319, 1701.652, 1701.808), stdev = 0.210
[info]   CI (99.9%): [1700.845, 1702.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5178.064 ±(99.9%) 103.121 B/op [Average]
[info]   (min, avg, max) = (5148.890, 5178.064, 5220.110), stdev = 26.780
[info]   CI (99.9%): [5074.943, 5281.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.342
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson
[info] # Run progress: 19.64% complete, ETA 00:24:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253988.687 ops/s
[info] # Warmup Iteration   2: 460397.123 ops/s
[info] # Warmup Iteration   3: 459819.377 ops/s
[info] # Warmup Iteration   4: 459131.986 ops/s
[info] # Warmup Iteration   5: 465024.843 ops/s
[info] Iteration   1: 458811.762 ops/s
[info]                  ·gc.alloc.rate:            568.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2307.943 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 461249.753 ops/s
[info]                  ·gc.alloc.rate:            572.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2295.725 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 465138.934 ops/s
[info]                  ·gc.alloc.rate:            576.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1138.252 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 457595.300 ops/s
[info]                  ·gc.alloc.rate:            567.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2314.065 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   5: 459675.957 ops/s
[info]                  ·gc.alloc.rate:                   570.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2314.939 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson":
[info]   460494.341 ±(99.9%) 11234.407 ops/s [Average]
[info]   (min, avg, max) = (457595.300, 460494.341, 465138.934), stdev = 2917.540
[info]   CI (99.9%): [449259.934, 471728.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate":
[info]   571.084 ±(99.9%) 13.959 MB/sec [Average]
[info]   (min, avg, max) = (567.494, 571.084, 576.839), stdev = 3.625
[info]   CI (99.9%): [557.125, 585.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen":
[info]   606.136 ±(99.9%) 580.725 MB/sec [Average]
[info]   (min, avg, max) = (336.367, 606.136, 676.047), stdev = 150.812
[info]   CI (99.9%): [25.411, 1186.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2074.185 ±(99.9%) 2014.882 B/op [Average]
[info]   (min, avg, max) = (1138.252, 2074.185, 2314.939), stdev = 523.258
[info]   CI (99.9%): [59.303, 4089.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.737 ±(99.9%) 23.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.737, 13.684), stdev = 6.120
[info]   CI (99.9%): [≈ 0, 26.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.000, 20.000), stdev = 5.339
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter
[info] # Run progress: 20.54% complete, ETA 00:24:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4863383.391 ops/s
[info] # Warmup Iteration   2: 4858199.336 ops/s
[info] # Warmup Iteration   3: 4884132.009 ops/s
[info] # Warmup Iteration   4: 4939260.035 ops/s
[info] # Warmup Iteration   5: 4907870.721 ops/s
[info] Iteration   1: 4904818.126 ops/s
[info]                  ·gc.alloc.rate:            224.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107.940 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4934111.662 ops/s
[info]                  ·gc.alloc.rate:      225.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4890641.796 ops/s
[info]                  ·gc.alloc.rate:            223.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 4892167.242 ops/s
[info]                  ·gc.alloc.rate:            223.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4939612.670 ops/s
[info]                  ·gc.alloc.rate:      225.959 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter":
[info]   4912270.299 ±(99.9%) 89317.310 ops/s [Average]
[info]   (min, avg, max) = (4890641.796, 4912270.299, 4939612.670), stdev = 23195.422
[info]   CI (99.9%): [4822952.990, 5001587.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate":
[info]   224.701 ±(99.9%) 4.105 MB/sec [Average]
[info]   (min, avg, max) = (223.741, 224.701, 225.959), stdev = 1.066
[info]   CI (99.9%): [220.596, 228.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.807 ±(99.9%) 709.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.807, 336.407), stdev = 184.224
[info]   CI (99.9%): [≈ 0, 911.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   64.883 ±(99.9%) 228.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.883, 108.256), stdev = 59.230
[info]   CI (99.9%): [≈ 0, 292.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay
[info] # Run progress: 21.43% complete, ETA 00:24:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63404.045 ops/s
[info] # Warmup Iteration   2: 157407.997 ops/s
[info] # Warmup Iteration   3: 156932.146 ops/s
[info] # Warmup Iteration   4: 156716.004 ops/s
[info] # Warmup Iteration   5: 155447.309 ops/s
[info] Iteration   1: 157487.945 ops/s
[info]                  ·gc.alloc.rate:            868.429 MB/sec
[info]                  ·gc.alloc.rate.norm:       8680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10085.086 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 159222.198 ops/s
[info]                  ·gc.alloc.rate:                   878.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6683.358 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 160691.180 ops/s
[info]                  ·gc.alloc.rate:                                  886.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10001.039 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 162040.147 ops/s
[info]                  ·gc.alloc.rate:            893.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       8680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6612.356 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 161902.263 ops/s
[info]                  ·gc.alloc.rate:            892.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       8680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9926.864 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay":
[info]   160268.747 ±(99.9%) 7410.066 ops/s [Average]
[info]   (min, avg, max) = (157487.945, 160268.747, 162040.147), stdev = 1924.371
[info]   CI (99.9%): [152858.681, 167678.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate":
[info]   883.786 ±(99.9%) 40.895 MB/sec [Average]
[info]   (min, avg, max) = (868.429, 883.786, 893.591), stdev = 10.620
[info]   CI (99.9%): [842.891, 924.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm":
[info]   8680.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.003, 8680.003, 8680.003), stdev = 0.001
[info]   CI (99.9%): [8680.002, 8680.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.167 ±(99.9%) 1.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.833), stdev = 0.373
[info]   CI (99.9%): [≈ 0, 1.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen":
[info]   881.553 ±(99.9%) 714.357 MB/sec [Average]
[info]   (min, avg, max) = (676.087, 881.553, 1021.061), stdev = 185.516
[info]   CI (99.9%): [167.196, 1595.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8661.740 ±(99.9%) 7083.025 B/op [Average]
[info]   (min, avg, max) = (6612.356, 8661.740, 10085.086), stdev = 1839.439
[info]   CI (99.9%): [1578.715, 15744.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.902 ±(99.9%) 68.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.902, 39.508), stdev = 17.668
[info]   CI (99.9%): [≈ 0, 75.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 17.000), stdev = 7.314
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce
[info] # Run progress: 22.32% complete, ETA 00:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2916.982 ops/s
[info] # Warmup Iteration   2: 4289.855 ops/s
[info] # Warmup Iteration   3: 4431.992 ops/s
[info] # Warmup Iteration   4: 4454.315 ops/s
[info] # Warmup Iteration   5: 4461.508 ops/s
[info] Iteration   1: 4509.750 ops/s
[info]                  ·gc.alloc.rate:                                  1085.258 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.177 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 61.840 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       473497.963 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1394.692 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 4542.923 ops/s
[info]                  ·gc.alloc.rate:                                  1093.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.104 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 31.764 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       353755.944 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4590.728 ops/s
[info]                  ·gc.alloc.rate:                                  1104.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.096 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.420 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       350058.146 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4580.789 ops/s
[info]                  ·gc.alloc.rate:                                  1102.694 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.096 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 30.919 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       350822.132 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 4579.292 ops/s
[info]                  ·gc.alloc.rate:                                  1102.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.089 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.611 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       350898.714 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce":
[info]   4560.696 ±(99.9%) 130.053 ops/s [Average]
[info]   (min, avg, max) = (4509.750, 4560.696, 4590.728), stdev = 33.774
[info]   CI (99.9%): [4430.643, 4690.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1097.683 ±(99.9%) 31.866 MB/sec [Average]
[info]   (min, avg, max) = (1085.258, 1097.683, 1104.951), stdev = 8.276
[info]   CI (99.9%): [1065.817, 1129.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   378808.096 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (378808.089, 378808.096, 378808.104), stdev = 0.005
[info]   CI (99.9%): [378808.076, 378808.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.079 ±(99.9%) 0.252 MB/sec [Average]
[info]   (min, avg, max) = (0.016, 0.079, 0.177), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   27.511 ±(99.9%) 88.066 B/op [Average]
[info]   (min, avg, max) = (5.420, 27.511, 61.840), stdev = 22.870
[info]   CI (99.9%): [≈ 0, 115.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1088.171 ±(99.9%) 577.680 MB/sec [Average]
[info]   (min, avg, max) = (1020.897, 1088.171, 1356.538), stdev = 150.022
[info]   CI (99.9%): [510.491, 1665.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   375806.580 ±(99.9%) 210357.996 B/op [Average]
[info]   (min, avg, max) = (350058.146, 375806.580, 473497.963), stdev = 54629.303
[info]   CI (99.9%): [165448.584, 586164.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   278.938 ±(99.9%) 2401.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 278.938, 1394.692), stdev = 623.725
[info]   CI (99.9%): [≈ 0, 2680.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 18.000), stdev = 5.941
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson
[info] # Run progress: 23.21% complete, ETA 00:23:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5536.393 ops/s
[info] # Warmup Iteration   2: 9107.816 ops/s
[info] # Warmup Iteration   3: 9202.814 ops/s
[info] # Warmup Iteration   4: 9118.720 ops/s
[info] # Warmup Iteration   5: 9073.476 ops/s
[info] Iteration   1: 9235.460 ops/s
[info]                  ·gc.alloc.rate:      234.046 MB/sec
[info]                  ·gc.alloc.rate.norm: 39888.048 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9182.910 ops/s
[info]                  ·gc.alloc.rate:            232.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57651.702 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 9176.548 ops/s
[info]                  ·gc.alloc.rate:            232.589 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57575.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 9161.611 ops/s
[info]                  ·gc.alloc.rate:            232.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57669.392 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   5: 9130.507 ops/s
[info]                  ·gc.alloc.rate:      231.448 MB/sec
[info]                  ·gc.alloc.rate.norm: 39888.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson":
[info]   9177.407 ±(99.9%) 147.263 ops/s [Average]
[info]   (min, avg, max) = (9130.507, 9177.407, 9235.460), stdev = 38.244
[info]   CI (99.9%): [9030.144, 9324.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   232.604 ±(99.9%) 3.633 MB/sec [Average]
[info]   (min, avg, max) = (231.448, 232.604, 234.046), stdev = 0.943
[info]   CI (99.9%): [228.971, 236.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   39888.049 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (39888.045, 39888.049, 39888.053), stdev = 0.003
[info]   CI (99.9%): [39888.036, 39888.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   201.564 ±(99.9%) 708.526 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.564, 336.334), stdev = 184.002
[info]   CI (99.9%): [≈ 0, 910.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   34579.249 ±(99.9%) 121551.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34579.249, 57669.392), stdev = 31566.411
[info]   CI (99.9%): [≈ 0, 156130.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.000, 13.000), stdev = 5.385
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter
[info] # Run progress: 24.11% complete, ETA 00:23:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12832.200 ops/s
[info] # Warmup Iteration   2: 17309.130 ops/s
[info] # Warmup Iteration   3: 17361.261 ops/s
[info] # Warmup Iteration   4: 17267.492 ops/s
[info] # Warmup Iteration   5: 17287.089 ops/s
[info] Iteration   1: 17252.432 ops/s
[info]                  ·gc.alloc.rate:            294.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30688.547 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 17282.123 ops/s
[info]                  ·gc.alloc.rate:            296.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      334.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30404.851 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 17452.027 ops/s
[info]                  ·gc.alloc.rate:      298.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 26896.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17227.463 ops/s
[info]                  ·gc.alloc.rate:            294.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30733.075 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 17287.923 ops/s
[info]                  ·gc.alloc.rate:            295.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30624.653 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter":
[info]   17300.393 ±(99.9%) 339.542 ops/s [Average]
[info]   (min, avg, max) = (17227.463, 17300.393, 17452.027), stdev = 88.178
[info]   CI (99.9%): [16960.852, 17639.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   295.777 ±(99.9%) 5.789 MB/sec [Average]
[info]   (min, avg, max) = (294.356, 295.777, 298.213), stdev = 1.503
[info]   CI (99.9%): [289.988, 301.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   26896.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (26896.023, 26896.025, 26896.029), stdev = 0.003
[info]   CI (99.9%): [26896.015, 26896.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   268.763 ±(99.9%) 578.540 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.763, 336.417), stdev = 150.245
[info]   CI (99.9%): [≈ 0, 847.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   24490.225 ±(99.9%) 52719.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24490.225, 30733.075), stdev = 13691.033
[info]   CI (99.9%): [≈ 0, 77209.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 11.000), stdev = 4.393
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay
[info] # Run progress: 25.00% complete, ETA 00:22:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 738.063 ops/s
[info] # Warmup Iteration   2: 1649.906 ops/s
[info] # Warmup Iteration   3: 1682.188 ops/s
[info] # Warmup Iteration   4: 1658.863 ops/s
[info] # Warmup Iteration   5: 1680.811 ops/s
[info] Iteration   1: 1681.273 ops/s
[info]                  ·gc.alloc.rate:                   1050.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              983184.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        947583.543 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3740.461 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 1715.103 ops/s
[info]                  ·gc.alloc.rate:                                  1071.719 MB/sec
[info]                  ·gc.alloc.rate.norm:                             983184.238 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1249003.114 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1720.366 ops/s
[info]                  ·gc.alloc.rate:            1074.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       983184.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 934030.801 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1720.152 ops/s
[info]                  ·gc.alloc.rate:                                  1074.649 MB/sec
[info]                  ·gc.alloc.rate.norm:                             983184.274 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       934030.801 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 1708.319 ops/s
[info]                  ·gc.alloc.rate:            1066.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       983184.239 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 940589.238 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay":
[info]   1709.043 ±(99.9%) 62.686 ops/s [Average]
[info]   (min, avg, max) = (1681.273, 1709.043, 1720.366), stdev = 16.279
[info]   CI (99.9%): [1646.357, 1771.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1067.737 ±(99.9%) 39.119 MB/sec [Average]
[info]   (min, avg, max) = (1050.472, 1067.737, 1074.848), stdev = 10.159
[info]   CI (99.9%): [1028.618, 1106.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   983184.250 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (983184.238, 983184.250, 983184.274), stdev = 0.015
[info]   CI (99.9%): [983184.190, 983184.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.155 ±(99.9%) 19.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.155, 11.524), stdev = 5.028
[info]   CI (99.9%): [≈ 0, 22.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1087.343 ±(99.9%) 590.260 MB/sec [Average]
[info]   (min, avg, max) = (1012.435, 1087.343, 1361.475), stdev = 153.289
[info]   CI (99.9%): [497.083, 1677.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   1001047.499 ±(99.9%) 534179.039 B/op [Average]
[info]   (min, avg, max) = (934030.801, 1001047.499, 1249003.114), stdev = 138724.600
[info]   CI (99.9%): [466868.460, 1535226.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   748.092 ±(99.9%) 6441.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 748.092, 3740.461), stdev = 1672.785
[info]   CI (99.9%): [≈ 0, 7189.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.200, 17.000), stdev = 5.020
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter
[info] # Run progress: 25.89% complete, ETA 00:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2990651.231 ops/s
[info] # Warmup Iteration   2: 3347656.787 ops/s
[info] # Warmup Iteration   3: 3394154.957 ops/s
[info] # Warmup Iteration   4: 3366072.810 ops/s
[info] # Warmup Iteration   5: 3391759.688 ops/s
[info] Iteration   1: 3392322.827 ops/s
[info]                  ·gc.alloc.rate:                                  1017.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.156 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       471.617 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.854 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 3397612.734 ops/s
[info]                  ·gc.alloc.rate:                                  1018.711 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       472.990 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3407871.007 ops/s
[info]                  ·gc.alloc.rate:            1021.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 471.604 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3421087.779 ops/s
[info]                  ·gc.alloc.rate:                                  1025.893 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       469.808 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3423082.853 ops/s
[info]                  ·gc.alloc.rate:                                  1026.470 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       469.509 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter":
[info]   3408395.440 ±(99.9%) 52786.354 ops/s [Average]
[info]   (min, avg, max) = (3392322.827, 3408395.440, 3423082.853), stdev = 13708.448
[info]   CI (99.9%): [3355609.087, 3461181.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   1021.991 ±(99.9%) 16.115 MB/sec [Average]
[info]   (min, avg, max) = (1017.094, 1021.991, 1026.470), stdev = 4.185
[info]   CI (99.9%): [1005.876, 1038.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.156), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   1020.046 ±(99.9%) 8.141 MB/sec [Average]
[info]   (min, avg, max) = (1016.269, 1020.046, 1021.128), stdev = 2.114
[info]   CI (99.9%): [1011.905, 1028.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   471.106 ±(99.9%) 5.544 B/op [Average]
[info]   (min, avg, max) = (469.509, 471.106, 472.990), stdev = 1.440
[info]   CI (99.9%): [465.561, 476.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.371 ±(99.9%) 3.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.854), stdev = 0.829
[info]   CI (99.9%): [≈ 0, 3.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay
[info] # Run progress: 26.79% complete, ETA 00:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99072.694 ops/s
[info] # Warmup Iteration   2: 176792.440 ops/s
[info] # Warmup Iteration   3: 180388.663 ops/s
[info] # Warmup Iteration   4: 178607.168 ops/s
[info] # Warmup Iteration   5: 179469.920 ops/s
[info] Iteration   1: 177504.836 ops/s
[info]                  ·gc.alloc.rate:                                  1018.820 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9032.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.165 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11981.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.993 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                35.395 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 182980.956 ops/s
[info]                  ·gc.alloc.rate:                                  1049.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9032.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.387 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8783.541 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 181985.226 ops/s
[info]                  ·gc.alloc.rate:            1044.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       9032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8831.703 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 182070.058 ops/s
[info]                  ·gc.alloc.rate:            1044.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       9032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8827.483 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 183305.849 ops/s
[info]                  ·gc.alloc.rate:            1051.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       9032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8768.161 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay":
[info]   181569.385 ±(99.9%) 9020.702 ops/s [Average]
[info]   (min, avg, max) = (177504.836, 181569.385, 183305.849), stdev = 2342.648
[info]   CI (99.9%): [172548.683, 190590.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate":
[info]   1041.883 ±(99.9%) 51.225 MB/sec [Average]
[info]   (min, avg, max) = (1018.820, 1041.883, 1051.866), stdev = 13.303
[info]   CI (99.9%): [990.658, 1093.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   9032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9032.002, 9032.002, 9032.002), stdev = 0.001
[info]   CI (99.9%): [9032.002, 9032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.110 ±(99.9%) 0.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.387), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1087.137 ±(99.9%) 569.078 MB/sec [Average]
[info]   (min, avg, max) = (1020.936, 1087.137, 1351.507), stdev = 147.788
[info]   CI (99.9%): [518.058, 1656.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   9438.444 ±(99.9%) 5474.780 B/op [Average]
[info]   (min, avg, max) = (8768.161, 9438.444, 11981.332), stdev = 1421.783
[info]   CI (99.9%): [3963.664, 14913.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.876 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.993), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.079 ±(99.9%) 60.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.079, 35.395), stdev = 15.829
[info]   CI (99.9%): [≈ 0, 68.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce
[info] # Run progress: 27.68% complete, ETA 00:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276960.912 ops/s
[info] # Warmup Iteration   2: 417382.878 ops/s
[info] # Warmup Iteration   3: 431527.497 ops/s
[info] # Warmup Iteration   4: 434441.525 ops/s
[info] # Warmup Iteration   5: 446035.469 ops/s
[info] Iteration   1: 445389.686 ops/s
[info]                  ·gc.alloc.rate:                                  1609.214 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6014.056 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 445337.742 ops/s
[info]                  ·gc.alloc.rate:                                  1609.472 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6014.880 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 446596.146 ops/s
[info]                  ·gc.alloc.rate:                                  1613.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4797.976 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 434517.312 ops/s
[info]                  ·gc.alloc.rate:                                  1570.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6164.617 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 441799.321 ops/s
[info]                  ·gc.alloc.rate:                                  1596.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6062.875 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce":
[info]   442728.041 ±(99.9%) 18975.484 ops/s [Average]
[info]   (min, avg, max) = (434517.312, 442728.041, 446596.146), stdev = 4927.873
[info]   CI (99.9%): [423752.558, 461703.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate":
[info]   1599.939 ±(99.9%) 67.799 MB/sec [Average]
[info]   (min, avg, max) = (1570.659, 1599.939, 1613.864), stdev = 17.607
[info]   CI (99.9%): [1532.140, 1667.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1633.746 ±(99.9%) 586.385 MB/sec [Average]
[info]   (min, avg, max) = (1361.336, 1633.746, 1702.270), stdev = 152.282
[info]   CI (99.9%): [1047.362, 2220.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5810.881 ±(99.9%) 2193.095 B/op [Average]
[info]   (min, avg, max) = (4797.976, 5810.881, 6164.617), stdev = 569.540
[info]   CI (99.9%): [3617.785, 8003.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson
[info] # Run progress: 28.57% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233791.253 ops/s
[info] # Warmup Iteration   2: 436445.989 ops/s
[info] # Warmup Iteration   3: 446545.594 ops/s
[info] # Warmup Iteration   4: 439650.921 ops/s
[info] # Warmup Iteration   5: 442336.871 ops/s
[info] Iteration   1: 444934.138 ops/s
[info]                  ·gc.alloc.rate:            517.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1187.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 440251.529 ops/s
[info]                  ·gc.alloc.rate:            512.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2400.332 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 444220.889 ops/s
[info]                  ·gc.alloc.rate:            517.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1189.442 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 441872.907 ops/s
[info]                  ·gc.alloc.rate:            514.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2391.707 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 446088.590 ops/s
[info]                  ·gc.alloc.rate:            519.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1184.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson":
[info]   443473.611 ±(99.9%) 9127.273 ops/s [Average]
[info]   (min, avg, max) = (440251.529, 443473.611, 446088.590), stdev = 2370.324
[info]   CI (99.9%): [434346.337, 452600.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate":
[info]   516.140 ±(99.9%) 10.704 MB/sec [Average]
[info]   (min, avg, max) = (512.384, 516.140, 519.240), stdev = 2.780
[info]   CI (99.9%): [505.436, 526.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   469.952 ±(99.9%) 707.913 MB/sec [Average]
[info]   (min, avg, max) = (335.662, 469.952, 671.346), stdev = 183.843
[info]   CI (99.9%): [≈ 0, 1177.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1670.716 ±(99.9%) 2549.579 B/op [Average]
[info]   (min, avg, max) = (1184.529, 1670.716, 2400.332), stdev = 662.118
[info]   CI (99.9%): [≈ 0, 4220.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJackson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.600, 19.000), stdev = 6.269
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter
[info] # Run progress: 29.46% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2626871.632 ops/s
[info] # Warmup Iteration   2: 2988473.812 ops/s
[info] # Warmup Iteration   3: 2934583.950 ops/s
[info] # Warmup Iteration   4: 2985206.283 ops/s
[info] # Warmup Iteration   5: 2999091.237 ops/s
[info] Iteration   1: 3035822.157 ops/s
[info]                  ·gc.alloc.rate:                                  1203.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       529.423 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 3016952.461 ops/s
[info]                  ·gc.alloc.rate:                                  1196.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       710.314 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 3020187.997 ops/s
[info]                  ·gc.alloc.rate:            1197.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.145 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3020526.307 ops/s
[info]                  ·gc.alloc.rate:            1197.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 709.480 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3054063.703 ops/s
[info]                  ·gc.alloc.rate:                                  1210.622 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       526.261 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter":
[info]   3029510.525 ±(99.9%) 59902.764 ops/s [Average]
[info]   (min, avg, max) = (3016952.461, 3029510.525, 3054063.703), stdev = 15556.558
[info]   CI (99.9%): [2969607.761, 3089413.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate":
[info]   1200.893 ±(99.9%) 23.668 MB/sec [Average]
[info]   (min, avg, max) = (1196.035, 1200.893, 1210.622), stdev = 6.146
[info]   CI (99.9%): [1177.225, 1224.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1157.142 ±(99.9%) 718.186 MB/sec [Average]
[info]   (min, avg, max) = (1020.848, 1157.142, 1361.474), stdev = 186.511
[info]   CI (99.9%): [438.956, 1875.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   601.524 ±(99.9%) 381.029 B/op [Average]
[info]   (min, avg, max) = (526.261, 601.524, 710.314), stdev = 98.952
[info]   CI (99.9%): [220.495, 982.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay
[info] # Run progress: 30.36% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48999.863 ops/s
[info] # Warmup Iteration   2: 133101.591 ops/s
[info] # Warmup Iteration   3: 132832.095 ops/s
[info] # Warmup Iteration   4: 134805.883 ops/s
[info] # Warmup Iteration   5: 134227.183 ops/s
[info] Iteration   1: 135759.698 ops/s
[info]                  ·gc.alloc.rate:            943.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7799.147 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 137326.620 ops/s
[info]                  ·gc.alloc.rate:                                  954.137 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10936.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.255 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11649.996 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.806 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 135983.468 ops/s
[info]                  ·gc.alloc.rate:                                  944.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10936.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11818.394 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 136382.647 ops/s
[info]                  ·gc.alloc.rate:            947.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11783.998 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 136747.119 ops/s
[info]                  ·gc.alloc.rate:            950.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       10936.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11752.638 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay":
[info]   136439.910 ±(99.9%) 2400.822 ops/s [Average]
[info]   (min, avg, max) = (135759.698, 136439.910, 137326.620), stdev = 623.486
[info]   CI (99.9%): [134039.088, 138840.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate":
[info]   947.926 ±(99.9%) 16.688 MB/sec [Average]
[info]   (min, avg, max) = (943.242, 947.926, 954.137), stdev = 4.334
[info]   CI (99.9%): [931.238, 964.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm":
[info]   10936.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10936.003, 10936.003, 10936.003), stdev = 0.001
[info]   CI (99.9%): [10936.003, 10936.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.036), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.133 ±(99.9%) 0.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.412), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   950.401 ±(99.9%) 597.853 MB/sec [Average]
[info]   (min, avg, max) = (672.685, 950.401, 1020.990), stdev = 155.260
[info]   CI (99.9%): [352.548, 1548.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10960.835 ±(99.9%) 6810.082 B/op [Average]
[info]   (min, avg, max) = (7799.147, 10960.835, 11818.394), stdev = 1768.557
[info]   CI (99.9%): [4150.753, 17770.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.161 ±(99.9%) 78.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.161, 45.806), stdev = 20.485
[info]   CI (99.9%): [≈ 0, 88.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readIterablesPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 14.000), stdev = 4.604
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce
[info] # Run progress: 31.25% complete, ETA 00:21:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206552.582 ops/s
[info] # Warmup Iteration   2: 384186.996 ops/s
[info] # Warmup Iteration   3: 398038.244 ops/s
[info] # Warmup Iteration   4: 397745.148 ops/s
[info] # Warmup Iteration   5: 398823.963 ops/s
[info] Iteration   1: 409958.903 ops/s
[info]                  ·gc.alloc.rate:                                  1425.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5227.153 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 401103.316 ops/s
[info]                  ·gc.alloc.rate:                                  1394.456 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5342.530 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 403367.913 ops/s
[info]                  ·gc.alloc.rate:                                  1402.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5312.430 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 403666.433 ops/s
[info]                  ·gc.alloc.rate:                                  1403.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6635.653 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 403998.291 ops/s
[info]                  ·gc.alloc.rate:                                  1404.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5304.003 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce":
[info]   404418.971 ±(99.9%) 12703.102 ops/s [Average]
[info]   (min, avg, max) = (401103.316, 404418.971, 409958.903), stdev = 3298.955
[info]   CI (99.9%): [391715.869, 417122.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate":
[info]   1405.897 ±(99.9%) 43.933 MB/sec [Average]
[info]   (min, avg, max) = (1394.456, 1405.897, 1425.056), stdev = 11.409
[info]   CI (99.9%): [1361.964, 1449.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.011, 0.019), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen":
[info]   1429.419 ±(99.9%) 585.683 MB/sec [Average]
[info]   (min, avg, max) = (1361.291, 1429.419, 1701.503), stdev = 152.100
[info]   CI (99.9%): [843.736, 2015.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5564.354 ±(99.9%) 2311.862 B/op [Average]
[info]   (min, avg, max) = (5227.153, 5564.354, 6635.653), stdev = 600.383
[info]   CI (99.9%): [3252.491, 7876.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson
[info] # Run progress: 32.14% complete, ETA 00:20:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318174.946 ops/s
[info] # Warmup Iteration   2: 723893.352 ops/s
[info] # Warmup Iteration   3: 728156.192 ops/s
[info] # Warmup Iteration   4: 736558.230 ops/s
[info] # Warmup Iteration   5: 724405.874 ops/s
[info] Iteration   1: 730357.734 ops/s
[info]                  ·gc.alloc.rate:                   861.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2171.955 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 740320.840 ops/s
[info]                  ·gc.alloc.rate:                   872.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1435.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 739825.060 ops/s
[info]                  ·gc.alloc.rate:                                  872.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2172.394 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 750969.095 ops/s
[info]                  ·gc.alloc.rate:            885.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1426.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 741357.821 ops/s
[info]                  ·gc.alloc.rate:            874.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       1856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2167.978 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson":
[info]   740566.110 ±(99.9%) 28143.253 ops/s [Average]
[info]   (min, avg, max) = (730357.734, 740566.110, 750969.095), stdev = 7308.713
[info]   CI (99.9%): [712422.857, 768709.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate":
[info]   873.189 ±(99.9%) 33.523 MB/sec [Average]
[info]   (min, avg, max) = (861.047, 873.189, 885.606), stdev = 8.706
[info]   CI (99.9%): [839.666, 906.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.000, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.045 ±(99.9%) 0.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.224), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen":
[info]   881.173 ±(99.9%) 714.542 MB/sec [Average]
[info]   (min, avg, max) = (675.182, 881.173, 1021.204), stdev = 185.564
[info]   CI (99.9%): [166.631, 1595.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1875.010 ±(99.9%) 1559.549 B/op [Average]
[info]   (min, avg, max) = (1426.814, 1875.010, 2172.394), stdev = 405.010
[info]   CI (99.9%): [315.461, 3434.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.661), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.270 ±(99.9%) 16.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.270, 9.913), stdev = 4.318
[info]   CI (99.9%): [≈ 0, 18.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJackson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 19.000), stdev = 6.686
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter
[info] # Run progress: 33.04% complete, ETA 00:20:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3159036.485 ops/s
[info] # Warmup Iteration   2: 3412451.239 ops/s
[info] # Warmup Iteration   3: 3481018.534 ops/s
[info] # Warmup Iteration   4: 3543153.053 ops/s
[info] # Warmup Iteration   5: 3534844.933 ops/s
[info] Iteration   1: 3506974.379 ops/s
[info]                  ·gc.alloc.rate:                   873.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        452.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 3608899.225 ops/s
[info]                  ·gc.alloc.rate:                                  898.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       296.878 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3604270.393 ops/s
[info]                  ·gc.alloc.rate:                                  897.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       445.869 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3574983.526 ops/s
[info]                  ·gc.alloc.rate:                                  890.399 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       449.578 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3610067.558 ops/s
[info]                  ·gc.alloc.rate:            899.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 296.805 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter":
[info]   3581039.016 ±(99.9%) 168735.374 ops/s [Average]
[info]   (min, avg, max) = (3506974.379, 3581039.016, 3610067.558), stdev = 43820.041
[info]   CI (99.9%): [3412303.643, 3749774.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate":
[info]   891.835 ±(99.9%) 42.274 MB/sec [Average]
[info]   (min, avg, max) = (873.255, 891.835, 899.321), stdev = 10.979
[info]   CI (99.9%): [849.561, 934.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.129), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   882.516 ±(99.9%) 709.713 MB/sec [Average]
[info]   (min, avg, max) = (680.452, 882.516, 1021.183), stdev = 184.310
[info]   CI (99.9%): [172.803, 1592.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   388.407 ±(99.9%) 322.007 B/op [Average]
[info]   (min, avg, max) = (296.805, 388.407, 452.903), stdev = 83.624
[info]   CI (99.9%): [66.399, 710.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.359 ±(99.9%) 3.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.359, 1.794), stdev = 0.802
[info]   CI (99.9%): [≈ 0, 3.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 27.000), stdev = 10.310
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay
[info] # Run progress: 33.93% complete, ETA 00:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109573.065 ops/s
[info] # Warmup Iteration   2: 186708.976 ops/s
[info] # Warmup Iteration   3: 189453.851 ops/s
[info] # Warmup Iteration   4: 191879.039 ops/s
[info] # Warmup Iteration   5: 190131.881 ops/s
[info] Iteration   1: 192836.027 ops/s
[info]                  ·gc.alloc.rate:                                  1073.018 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8296.445 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                32.620 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 194383.329 ops/s
[info]                  ·gc.alloc.rate:                                  1081.622 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8267.928 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 195383.462 ops/s
[info]                  ·gc.alloc.rate:            1087.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       8760.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10968.166 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 195752.315 ops/s
[info]                  ·gc.alloc.rate:            1089.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       8760.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8210.578 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 195375.414 ops/s
[info]                  ·gc.alloc.rate:                                  1087.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8760.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8226.167 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay":
[info]   194746.109 ±(99.9%) 4553.993 ops/s [Average]
[info]   (min, avg, max) = (192836.027, 194746.109, 195752.315), stdev = 1182.658
[info]   CI (99.9%): [190192.116, 199300.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate":
[info]   1083.701 ±(99.9%) 25.520 MB/sec [Average]
[info]   (min, avg, max) = (1073.018, 1083.701, 1089.356), stdev = 6.627
[info]   CI (99.9%): [1058.181, 1109.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm":
[info]   8760.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8760.002, 8760.002, 8760.002), stdev = 0.001
[info]   CI (99.9%): [8760.002, 8760.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.354), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen":
[info]   1088.090 ±(99.9%) 588.200 MB/sec [Average]
[info]   (min, avg, max) = (1016.236, 1088.090, 1361.320), stdev = 152.754
[info]   CI (99.9%): [499.890, 1676.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8793.857 ±(99.9%) 4682.186 B/op [Average]
[info]   (min, avg, max) = (8210.578, 8793.857, 10968.166), stdev = 1215.949
[info]   CI (99.9%): [4111.670, 13476.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.524 ±(99.9%) 56.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.524, 32.620), stdev = 14.588
[info]   CI (99.9%): [≈ 0, 62.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMapsPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce
[info] # Run progress: 34.82% complete, ETA 00:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261557.168 ops/s
[info] # Warmup Iteration   2: 428430.811 ops/s
[info] # Warmup Iteration   3: 423939.594 ops/s
[info] # Warmup Iteration   4: 422130.839 ops/s
[info] # Warmup Iteration   5: 438656.679 ops/s
[info] Iteration   1: 435396.270 ops/s
[info]                  ·gc.alloc.rate:                                  1663.943 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6152.202 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 438738.238 ops/s
[info]                  ·gc.alloc.rate:                                  1676.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6105.305 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 439201.500 ops/s
[info]                  ·gc.alloc.rate:                                  1678.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6099.092 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 439659.387 ops/s
[info]                  ·gc.alloc.rate:            1680.115 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6092.587 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 438166.962 ops/s
[info]                  ·gc.alloc.rate:                                  1674.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6113.260 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce":
[info]   438232.471 ±(99.9%) 6466.112 ops/s [Average]
[info]   (min, avg, max) = (435396.270, 438232.471, 439659.387), stdev = 1679.229
[info]   CI (99.9%): [431766.360, 444698.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate":
[info]   1674.903 ±(99.9%) 24.794 MB/sec [Average]
[info]   (min, avg, max) = (1663.943, 1674.903, 1680.115), stdev = 6.439
[info]   CI (99.9%): [1650.109, 1699.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1701.746 ±(99.9%) 0.680 MB/sec [Average]
[info]   (min, avg, max) = (1701.504, 1701.746, 1701.894), stdev = 0.176
[info]   CI (99.9%): [1701.067, 1702.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6112.489 ±(99.9%) 90.405 B/op [Average]
[info]   (min, avg, max) = (6092.587, 6112.489, 6152.202), stdev = 23.478
[info]   CI (99.9%): [6022.084, 6202.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter
[info] # Run progress: 35.71% complete, ETA 00:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2140947.571 ops/s
[info] # Warmup Iteration   2: 2516488.320 ops/s
[info] # Warmup Iteration   3: 2522747.420 ops/s
[info] # Warmup Iteration   4: 2572573.087 ops/s
[info] # Warmup Iteration   5: 2614695.287 ops/s
[info] Iteration   1: 2581722.050 ops/s
[info]                  ·gc.alloc.rate:                                  1666.378 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1037.523 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2586855.766 ops/s
[info]                  ·gc.alloc.rate:            1669.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1035.492 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2592894.412 ops/s
[info]                  ·gc.alloc.rate:                                  1673.639 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1033.019 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2575735.742 ops/s
[info]                  ·gc.alloc.rate:                                  1662.474 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1039.977 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 2572136.866 ops/s
[info]                  ·gc.alloc.rate:            1660.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1041.406 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter":
[info]   2581868.967 ±(99.9%) 32146.560 ops/s [Average]
[info]   (min, avg, max) = (2572136.866, 2581868.967, 2592894.412), stdev = 8348.359
[info]   CI (99.9%): [2549722.408, 2614015.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate":
[info]   1666.507 ±(99.9%) 20.730 MB/sec [Average]
[info]   (min, avg, max) = (1660.312, 1666.507, 1673.639), stdev = 5.383
[info]   CI (99.9%): [1645.777, 1687.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   1701.730 ±(99.9%) 0.254 MB/sec [Average]
[info]   (min, avg, max) = (1701.674, 1701.730, 1701.829), stdev = 0.066
[info]   CI (99.9%): [1701.476, 1701.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1037.483 ±(99.9%) 12.988 B/op [Average]
[info]   (min, avg, max) = (1033.019, 1037.483, 1041.406), stdev = 3.373
[info]   CI (99.9%): [1024.495, 1050.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay
[info] # Run progress: 36.61% complete, ETA 00:19:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48661.250 ops/s
[info] # Warmup Iteration   2: 135163.077 ops/s
[info] # Warmup Iteration   3: 137217.546 ops/s
[info] # Warmup Iteration   4: 138895.951 ops/s
[info] # Warmup Iteration   5: 138352.902 ops/s
[info] Iteration   1: 138029.728 ops/s
[info]                  ·gc.alloc.rate:                   983.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11507.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.978 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 139784.952 ops/s
[info]                  ·gc.alloc.rate:                                  996.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11216.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11490.093 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.500 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 141631.617 ops/s
[info]                  ·gc.alloc.rate:                                  1009.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11216.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11347.760 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 140458.807 ops/s
[info]                  ·gc.alloc.rate:                                  1000.838 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11216.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11442.186 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 141037.584 ops/s
[info]                  ·gc.alloc.rate:                                  1004.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11216.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11395.868 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay":
[info]   140188.537 ±(99.9%) 5342.463 ops/s [Average]
[info]   (min, avg, max) = (138029.728, 140188.537, 141631.617), stdev = 1387.421
[info]   CI (99.9%): [134846.075, 145531.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate":
[info]   998.902 ±(99.9%) 37.914 MB/sec [Average]
[info]   (min, avg, max) = (983.517, 998.902, 1009.128), stdev = 9.846
[info]   CI (99.9%): [960.987, 1036.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   11216.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11216.003, 11216.003, 11216.003), stdev = 0.001
[info]   CI (99.9%): [11216.003, 11216.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.080 ±(99.9%) 0.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.351), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1018.509 ±(99.9%) 20.356 MB/sec [Average]
[info]   (min, avg, max) = (1009.060, 1018.509, 1021.021), stdev = 5.286
[info]   CI (99.9%): [998.153, 1038.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   11436.639 ±(99.9%) 254.267 B/op [Average]
[info]   (min, avg, max) = (11347.760, 11436.639, 11507.288), stdev = 66.032
[info]   CI (99.9%): [11182.372, 11690.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.096 ±(99.9%) 63.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.096, 37.978), stdev = 16.469
[info]   CI (99.9%): [≈ 0, 72.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 17.000), stdev = 5.805
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson
[info] # Run progress: 37.50% complete, ETA 00:19:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231016.513 ops/s
[info] # Warmup Iteration   2: 745584.135 ops/s
[info] # Warmup Iteration   3: 732248.623 ops/s
[info] # Warmup Iteration   4: 738461.513 ops/s
[info] # Warmup Iteration   5: 739965.944 ops/s
[info] Iteration   1: 731572.549 ops/s
[info]                  ·gc.alloc.rate:                   948.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2166.802 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   2: 749366.914 ops/s
[info]                  ·gc.alloc.rate:                                  970.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.294 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.619 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2143.186 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.399 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 757904.614 ops/s
[info]                  ·gc.alloc.rate:            982.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1413.682 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 740450.563 ops/s
[info]                  ·gc.alloc.rate:            959.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       2040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2170.566 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 745045.985 ops/s
[info]                  ·gc.alloc.rate:                                  965.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2157.022 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson":
[info]   744868.125 ±(99.9%) 37851.456 ops/s [Average]
[info]   (min, avg, max) = (731572.549, 744868.125, 757904.614), stdev = 9829.903
[info]   CI (99.9%): [707016.669, 782719.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate":
[info]   965.288 ±(99.9%) 48.948 MB/sec [Average]
[info]   (min, avg, max) = (948.084, 965.288, 982.185), stdev = 12.712
[info]   CI (99.9%): [916.339, 1014.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2040.001, 2040.001, 2040.001), stdev = 0.001
[info]   CI (99.9%): [2040.000, 2040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.059 ±(99.9%) 0.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.294), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.124 ±(99.9%) 1.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.619), stdev = 0.276
[info]   CI (99.9%): [≈ 0, 1.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   949.948 ±(99.9%) 580.165 MB/sec [Average]
[info]   (min, avg, max) = (680.636, 949.948, 1021.124), stdev = 150.667
[info]   CI (99.9%): [369.783, 1530.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2010.252 ±(99.9%) 1284.807 B/op [Average]
[info]   (min, avg, max) = (1413.682, 2010.252, 2170.566), stdev = 333.660
[info]   CI (99.9%): [725.445, 3295.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.999 ±(99.9%) 14.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.999, 8.598), stdev = 3.738
[info]   CI (99.9%): [≈ 0, 16.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 29.000), stdev = 11.345
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter
[info] # Run progress: 38.39% complete, ETA 00:18:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2036098.008 ops/s
[info] # Warmup Iteration   2: 2336203.833 ops/s
[info] # Warmup Iteration   3: 2375574.186 ops/s
[info] # Warmup Iteration   4: 2393810.316 ops/s
[info] # Warmup Iteration   5: 2386999.427 ops/s
[info] Iteration   1: 2433674.989 ops/s
[info]                  ·gc.alloc.rate:                                  1150.110 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       660.405 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 2419407.267 ops/s
[info]                  ·gc.alloc.rate:            1143.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 885.757 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2432375.984 ops/s
[info]                  ·gc.alloc.rate:            1149.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 660.753 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2450084.029 ops/s
[info]                  ·gc.alloc.rate:            1158.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 655.986 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2420857.412 ops/s
[info]                  ·gc.alloc.rate:            1144.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 885.204 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter":
[info]   2431279.936 ±(99.9%) 47556.652 ops/s [Average]
[info]   (min, avg, max) = (2419407.267, 2431279.936, 2450084.029), stdev = 12350.312
[info]   CI (99.9%): [2383723.284, 2478836.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate":
[info]   1149.216 ±(99.9%) 22.306 MB/sec [Average]
[info]   (min, avg, max) = (1143.554, 1149.216, 1158.124), stdev = 5.793
[info]   CI (99.9%): [1126.910, 1171.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.160), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   1157.263 ±(99.9%) 718.304 MB/sec [Average]
[info]   (min, avg, max) = (1020.884, 1157.263, 1361.779), stdev = 186.541
[info]   CI (99.9%): [438.959, 1875.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   749.621 ±(99.9%) 477.621 B/op [Average]
[info]   (min, avg, max) = (655.986, 749.621, 885.757), stdev = 124.037
[info]   CI (99.9%): [272.001, 1227.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay
[info] # Run progress: 39.29% complete, ETA 00:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90001.237 ops/s
[info] # Warmup Iteration   2: 159322.883 ops/s
[info] # Warmup Iteration   3: 164673.981 ops/s
[info] # Warmup Iteration   4: 162278.182 ops/s
[info] # Warmup Iteration   5: 165338.565 ops/s
[info] Iteration   1: 163628.093 ops/s
[info]                  ·gc.alloc.rate:            874.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       8416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9706.961 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 162962.695 ops/s
[info]                  ·gc.alloc.rate:                                  871.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8416.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9817.453 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                38.601 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 166910.084 ops/s
[info]                  ·gc.alloc.rate:                                  892.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8416.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6419.033 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 166062.198 ops/s
[info]                  ·gc.alloc.rate:            887.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       8416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9678.347 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 167069.866 ops/s
[info]                  ·gc.alloc.rate:            893.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       8416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6413.309 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay":
[info]   165326.587 ±(99.9%) 7346.680 ops/s [Average]
[info]   (min, avg, max) = (162962.695, 165326.587, 167069.866), stdev = 1907.910
[info]   CI (99.9%): [157979.907, 172673.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate":
[info]   883.923 ±(99.9%) 39.370 MB/sec [Average]
[info]   (min, avg, max) = (871.274, 883.923, 893.324), stdev = 10.224
[info]   CI (99.9%): [844.553, 923.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm":
[info]   8416.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8416.002, 8416.002, 8416.003), stdev = 0.001
[info]   CI (99.9%): [8416.002, 8416.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.126 ±(99.9%) 0.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.413), stdev = 0.186
[info]   CI (99.9%): [≈ 0, 0.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.554 ±(99.9%) 706.383 MB/sec [Average]
[info]   (min, avg, max) = (680.565, 881.554, 1021.131), stdev = 183.445
[info]   CI (99.9%): [175.171, 1587.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8407.020 ±(99.9%) 7000.979 B/op [Average]
[info]   (min, avg, max) = (6413.309, 8407.020, 9817.453), stdev = 1818.132
[info]   CI (99.9%): [1406.041, 15407.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.720 ±(99.9%) 66.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.720, 38.601), stdev = 17.263
[info]   CI (99.9%): [≈ 0, 74.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 20.000), stdev = 7.694
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce
[info] # Run progress: 40.18% complete, ETA 00:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211083.393 ops/s
[info] # Warmup Iteration   2: 390580.074 ops/s
[info] # Warmup Iteration   3: 383692.491 ops/s
[info] # Warmup Iteration   4: 391720.031 ops/s
[info] # Warmup Iteration   5: 388255.869 ops/s
[info] Iteration   1: 401940.792 ops/s
[info]                  ·gc.alloc.rate:                                  1235.831 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.460 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3998.525 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 398132.593 ops/s
[info]                  ·gc.alloc.rate:                                  1224.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5382.079 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 401374.730 ops/s
[info]                  ·gc.alloc.rate:            1234.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       4840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5339.083 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 401818.316 ops/s
[info]                  ·gc.alloc.rate:                                  1235.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3999.888 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 401807.676 ops/s
[info]                  ·gc.alloc.rate:                                  1235.499 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5333.330 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce":
[info]   401014.821 ±(99.9%) 6259.050 ops/s [Average]
[info]   (min, avg, max) = (398132.593, 401014.821, 401940.792), stdev = 1625.455
[info]   CI (99.9%): [394755.772, 407273.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate":
[info]   1233.077 ±(99.9%) 19.250 MB/sec [Average]
[info]   (min, avg, max) = (1224.204, 1233.077, 1235.831), stdev = 4.999
[info]   CI (99.9%): [1213.827, 1252.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm":
[info]   4840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4840.001, 4840.001, 4840.001), stdev = 0.001
[info]   CI (99.9%): [4840.001, 4840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.094 ±(99.9%) 0.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.460), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 0.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   1225.272 ±(99.9%) 717.845 MB/sec [Average]
[info]   (min, avg, max) = (1020.971, 1225.272, 1361.502), stdev = 186.422
[info]   CI (99.9%): [507.427, 1943.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4810.581 ±(99.9%) 2853.019 B/op [Average]
[info]   (min, avg, max) = (3998.525, 4810.581, 5382.079), stdev = 740.920
[info]   CI (99.9%): [1957.562, 7663.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson
[info] # Run progress: 41.07% complete, ETA 00:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597579.529 ops/s
[info] # Warmup Iteration   2: 915473.449 ops/s
[info] # Warmup Iteration   3: 923062.720 ops/s
[info] # Warmup Iteration   4: 920853.808 ops/s
[info] # Warmup Iteration   5: 922813.399 ops/s
[info] Iteration   1: 918323.505 ops/s
[info]                  ·gc.alloc.rate:            695.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1153.099 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 919104.561 ops/s
[info]                  ·gc.alloc.rate:            696.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1152.107 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 911155.383 ops/s
[info]                  ·gc.alloc.rate:                   690.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1162.106 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 921279.333 ops/s
[info]                  ·gc.alloc.rate:                                  697.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1161.889 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.138 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 926368.798 ops/s
[info]                  ·gc.alloc.rate:                                  701.543 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1734.983 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson":
[info]   919246.316 ±(99.9%) 21195.842 ops/s [Average]
[info]   (min, avg, max) = (911155.383, 919246.316, 926368.798), stdev = 5504.493
[info]   CI (99.9%): [898050.474, 940442.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate":
[info]   696.198 ±(99.9%) 15.951 MB/sec [Average]
[info]   (min, avg, max) = (690.094, 696.198, 701.543), stdev = 4.142
[info]   CI (99.9%): [680.247, 712.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.036), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.061), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   743.926 ±(99.9%) 596.787 MB/sec [Average]
[info]   (min, avg, max) = (672.786, 743.926, 1021.112), stdev = 154.984
[info]   CI (99.9%): [147.139, 1340.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1272.837 ±(99.9%) 994.970 B/op [Average]
[info]   (min, avg, max) = (1152.107, 1272.837, 1734.983), stdev = 258.391
[info]   CI (99.9%): [277.867, 2267.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.378 ±(99.9%) 9.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.378, 5.753), stdev = 2.495
[info]   CI (99.9%): [≈ 0, 10.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.200, 18.000), stdev = 5.450
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter
[info] # Run progress: 41.96% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3761163.590 ops/s
[info] # Warmup Iteration   2: 4036602.334 ops/s
[info] # Warmup Iteration   3: 4039049.291 ops/s
[info] # Warmup Iteration   4: 4089401.345 ops/s
[info] # Warmup Iteration   5: 4094112.130 ops/s
[info] Iteration   1: 4040985.719 ops/s
[info]                  ·gc.alloc.rate:                   123.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        130.501 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 4099227.133 ops/s
[info]                  ·gc.alloc.rate:      124.999 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4084939.470 ops/s
[info]                  ·gc.alloc.rate:      124.552 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4073420.281 ops/s
[info]                  ·gc.alloc.rate:            124.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4099086.193 ops/s
[info]                  ·gc.alloc.rate:      125.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter":
[info]   4079531.759 ±(99.9%) 92789.220 ops/s [Average]
[info]   (min, avg, max) = (4040985.719, 4079531.759, 4099227.133), stdev = 24097.066
[info]   CI (99.9%): [3986742.539, 4172320.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate":
[info]   124.392 ±(99.9%) 2.878 MB/sec [Average]
[info]   (min, avg, max) = (123.193, 124.392, 125.001), stdev = 0.747
[info]   CI (99.9%): [121.514, 127.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.257 ±(99.9%) 707.901 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.257, 336.353), stdev = 183.840
[info]   CI (99.9%): [≈ 0, 842.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   52.095 ±(99.9%) 274.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.095, 130.501), stdev = 71.335
[info]   CI (99.9%): [≈ 0, 326.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.104 ±(99.9%) 0.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.519), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 0.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 10.000), stdev = 4.604
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay
[info] # Run progress: 42.86% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74628.940 ops/s
[info] # Warmup Iteration   2: 131309.614 ops/s
[info] # Warmup Iteration   3: 132857.143 ops/s
[info] # Warmup Iteration   4: 132875.226 ops/s
[info] # Warmup Iteration   5: 132994.513 ops/s
[info] Iteration   1: 131925.380 ops/s
[info]                  ·gc.alloc.rate:            865.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       10328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12039.809 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 132574.443 ops/s
[info]                  ·gc.alloc.rate:                                  869.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10328.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.237 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12067.596 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                47.448 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   3: 135340.335 ops/s
[info]                  ·gc.alloc.rate:                                  887.946 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10328.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.360 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7917.055 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 132992.486 ops/s
[info]                  ·gc.alloc.rate:            872.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       10328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12085.128 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 132553.056 ops/s
[info]                  ·gc.alloc.rate:            869.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       10328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8083.431 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay":
[info]   133077.140 ±(99.9%) 5087.783 ops/s [Average]
[info]   (min, avg, max) = (131925.380, 133077.140, 135340.335), stdev = 1321.281
[info]   CI (99.9%): [127989.357, 138164.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate":
[info]   873.139 ±(99.9%) 33.335 MB/sec [Average]
[info]   (min, avg, max) = (865.538, 873.139, 887.946), stdev = 8.657
[info]   CI (99.9%): [839.805, 906.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm":
[info]   10328.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10328.003, 10328.003, 10328.003), stdev = 0.001
[info]   CI (99.9%): [10328.003, 10328.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.119 ±(99.9%) 0.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.360), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   881.569 ±(99.9%) 706.361 MB/sec [Average]
[info]   (min, avg, max) = (680.665, 881.569, 1021.107), stdev = 183.440
[info]   CI (99.9%): [175.208, 1587.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   10438.604 ±(99.9%) 8574.400 B/op [Average]
[info]   (min, avg, max) = (7917.055, 10438.604, 12085.128), stdev = 2226.744
[info]   CI (99.9%): [1864.204, 19013.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   9.490 ±(99.9%) 81.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.490, 47.448), stdev = 21.219
[info]   CI (99.9%): [≈ 0, 91.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 22.000), stdev = 9.209
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce
[info] # Run progress: 43.75% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104291.521 ops/s
[info] # Warmup Iteration   2: 119599.817 ops/s
[info] # Warmup Iteration   3: 120192.864 ops/s
[info] # Warmup Iteration   4: 119324.942 ops/s
[info] # Warmup Iteration   5: 119578.968 ops/s
[info] Iteration   1: 119010.217 ops/s
[info]                  ·gc.alloc.rate:                   883.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13345.369 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 122449.495 ops/s
[info]                  ·gc.alloc.rate:                                  908.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.132 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.698 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13115.975 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.561 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 123429.066 ops/s
[info]                  ·gc.alloc.rate:                                  915.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8680.870 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 122057.176 ops/s
[info]                  ·gc.alloc.rate:                                  905.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13167.756 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 122055.159 ops/s
[info]                  ·gc.alloc.rate:                                  905.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11680.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13167.972 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce":
[info]   121800.223 ±(99.9%) 6382.619 ops/s [Average]
[info]   (min, avg, max) = (119010.217, 121800.223, 123429.066), stdev = 1657.546
[info]   CI (99.9%): [115417.604, 128182.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate":
[info]   903.762 ±(99.9%) 47.461 MB/sec [Average]
[info]   (min, avg, max) = (883.016, 903.762, 915.870), stdev = 12.326
[info]   CI (99.9%): [856.301, 951.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate.norm":
[info]   11680.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11680.003, 11680.003, 11680.004), stdev = 0.001
[info]   CI (99.9%): [11680.003, 11680.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.132), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.360 ±(99.9%) 2.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.360, 1.698), stdev = 0.749
[info]   CI (99.9%): [≈ 0, 3.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen":
[info]   950.396 ±(99.9%) 580.885 MB/sec [Average]
[info]   (min, avg, max) = (680.698, 950.396, 1021.123), stdev = 150.854
[info]   CI (99.9%): [369.511, 1531.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen.norm":
[info]   12295.588 ±(99.9%) 7788.158 B/op [Average]
[info]   (min, avg, max) = (8680.870, 12295.588, 13345.369), stdev = 2022.560
[info]   CI (99.9%): [4507.430, 20083.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.521 ±(99.9%) 73.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.521, 44.044), stdev = 19.103
[info]   CI (99.9%): [≈ 0, 84.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 21.000), stdev = 7.382
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson
[info] # Run progress: 44.64% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 485227.532 ops/s
[info] # Warmup Iteration   2: 554892.346 ops/s
[info] # Warmup Iteration   3: 550528.726 ops/s
[info] # Warmup Iteration   4: 576272.234 ops/s
[info] # Warmup Iteration   5: 558772.250 ops/s
[info] Iteration   1: 567210.913 ops/s
[info]                  ·gc.alloc.rate:            743.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1866.833 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 548148.216 ops/s
[info]                  ·gc.alloc.rate:                   718.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2897.612 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   3: 566582.563 ops/s
[info]                  ·gc.alloc.rate:            743.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1891.073 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 564872.665 ops/s
[info]                  ·gc.alloc.rate:                                  740.914 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2064.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1896.783 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 572645.379 ops/s
[info]                  ·gc.alloc.rate:            751.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       2064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1871.149 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson":
[info]   563891.947 ±(99.9%) 35694.056 ops/s [Average]
[info]   (min, avg, max) = (548148.216, 563891.947, 572645.379), stdev = 9269.633
[info]   CI (99.9%): [528197.891, 599586.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate":
[info]   739.518 ±(99.9%) 47.014 MB/sec [Average]
[info]   (min, avg, max) = (718.779, 739.518, 751.084), stdev = 12.209
[info]   CI (99.9%): [692.504, 786.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate.norm":
[info]   2064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2064.001, 2064.001, 2064.001), stdev = 0.001
[info]   CI (99.9%): [2064.001, 2064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen":
[info]   744.877 ±(99.9%) 568.882 MB/sec [Average]
[info]   (min, avg, max) = (672.671, 744.877, 1009.080), stdev = 147.737
[info]   CI (99.9%): [175.995, 1313.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2084.690 ±(99.9%) 1750.561 B/op [Average]
[info]   (min, avg, max) = (1866.833, 2084.690, 2897.612), stdev = 454.615
[info]   CI (99.9%): [334.129, 3835.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.295 ±(99.9%) 19.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.295, 11.476), stdev = 5.132
[info]   CI (99.9%): [≈ 0, 22.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJackson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 21.000), stdev = 7.649
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter
[info] # Run progress: 45.54% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576944.032 ops/s
[info] # Warmup Iteration   2: 597086.594 ops/s
[info] # Warmup Iteration   3: 604231.737 ops/s
[info] # Warmup Iteration   4: 600879.162 ops/s
[info] # Warmup Iteration   5: 599915.072 ops/s
[info] Iteration   1: 591756.726 ops/s
[info]                  ·gc.alloc.rate:            505.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1789.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 602640.966 ops/s
[info]                  ·gc.alloc.rate:            514.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 878.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 606295.468 ops/s
[info]                  ·gc.alloc.rate:            517.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1746.339 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 605111.028 ops/s
[info]                  ·gc.alloc.rate:            516.707 MB/sec
[info]                  ·gc.alloc.rate.norm:       1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 874.964 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   5: 608082.053 ops/s
[info]                  ·gc.alloc.rate:                   519.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1741.405 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter":
[info]   602777.248 ±(99.9%) 24913.088 ops/s [Average]
[info]   (min, avg, max) = (591756.726, 602777.248, 608082.053), stdev = 6469.850
[info]   CI (99.9%): [577864.160, 627690.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate":
[info]   514.692 ±(99.9%) 21.338 MB/sec [Average]
[info]   (min, avg, max) = (505.249, 514.692, 519.241), stdev = 5.541
[info]   CI (99.9%): [493.354, 536.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.001, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.001, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.172 ±(99.9%) 709.337 MB/sec [Average]
[info]   (min, avg, max) = (336.370, 538.172, 672.775), stdev = 184.213
[info]   CI (99.9%): [≈ 0, 1247.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1406.126 ±(99.9%) 1862.245 B/op [Average]
[info]   (min, avg, max) = (874.964, 1406.126, 1789.397), stdev = 483.619
[info]   CI (99.9%): [≈ 0, 3268.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   1.724 ±(99.9%) 14.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.724, 8.621), stdev = 3.855
[info]   CI (99.9%): [≈ 0, 16.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringJsoniter:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.400, 14.000), stdev = 1.517
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay
[info] # Run progress: 46.43% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157172.471 ops/s
[info] # Warmup Iteration   2: 188766.951 ops/s
[info] # Warmup Iteration   3: 189452.124 ops/s
[info] # Warmup Iteration   4: 195413.738 ops/s
[info] # Warmup Iteration   5: 196917.095 ops/s
[info] Iteration   1: 195888.309 ops/s
[info]                  ·gc.alloc.rate:            1785.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       14344.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13674.239 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 195784.012 ops/s
[info]                  ·gc.alloc.rate:                                  1784.260 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13681.711 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 194970.635 ops/s
[info]                  ·gc.alloc.rate:                                  1776.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16485.404 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 197653.090 ops/s
[info]                  ·gc.alloc.rate:            1801.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       14344.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13552.565 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 198537.237 ops/s
[info]                  ·gc.alloc.rate:                                  1809.436 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14344.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13492.094 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay":
[info]   196566.657 ±(99.9%) 5673.496 ops/s [Average]
[info]   (min, avg, max) = (194970.635, 196566.657, 198537.237), stdev = 1473.389
[info]   CI (99.9%): [190893.161, 202240.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate":
[info]   1791.388 ±(99.9%) 52.445 MB/sec [Average]
[info]   (min, avg, max) = (1776.541, 1791.388, 1809.436), stdev = 13.620
[info]   CI (99.9%): [1738.944, 1843.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate.norm":
[info]   14344.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14344.002, 14344.002, 14344.002), stdev = 0.001
[info]   CI (99.9%): [14344.002, 14344.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen":
[info]   1769.911 ±(99.9%) 585.174 MB/sec [Average]
[info]   (min, avg, max) = (1701.716, 1769.911, 2041.760), stdev = 151.968
[info]   CI (99.9%): [1184.737, 2355.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen.norm":
[info]   14177.203 ±(99.9%) 4978.297 B/op [Average]
[info]   (min, avg, max) = (13492.094, 14177.203, 16485.404), stdev = 1292.848
[info]   CI (99.9%): [9198.906, 19155.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readStringPlay:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 11.000), stdev = 2.168
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce
[info] # Run progress: 47.32% complete, ETA 00:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2778.837 ops/s
[info] # Warmup Iteration   2: 5107.285 ops/s
[info] # Warmup Iteration   3: 6942.348 ops/s
[info] # Warmup Iteration   4: 7605.559 ops/s
[info] # Warmup Iteration   5: 7514.977 ops/s
[info] Iteration   1: 7585.323 ops/s
[info]                  ·gc.alloc.rate:                   1116.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              231656.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        209908.664 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 967.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 7570.714 ops/s
[info]                  ·gc.alloc.rate:                                  1114.279 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.557 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       212262.909 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7654.241 ops/s
[info]                  ·gc.alloc.rate:                                  1126.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.572 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       279948.974 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 7730.956 ops/s
[info]                  ·gc.alloc.rate:                                  1137.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231656.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.919 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       207871.073 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7685.001 ops/s
[info]                  ·gc.alloc.rate:                                  1131.143 MB/sec
[info]                  ·gc.alloc.rate.norm:                             231677.157 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       209115.000 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce":
[info]   7645.247 ±(99.9%) 259.407 ops/s [Average]
[info]   (min, avg, max) = (7570.714, 7645.247, 7730.956), stdev = 67.367
[info]   CI (99.9%): [7385.840, 7904.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate":
[info]   1125.233 ±(99.9%) 38.622 MB/sec [Average]
[info]   (min, avg, max) = (1114.279, 1125.233, 1137.998), stdev = 10.030
[info]   CI (99.9%): [1086.611, 1163.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm":
[info]   231660.276 ±(99.9%) 36.338 B/op [Average]
[info]   (min, avg, max) = (231656.053, 231660.276, 231677.157), stdev = 9.437
[info]   CI (99.9%): [231623.938, 231696.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.075), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   8.049 ±(99.9%) 22.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.049, 15.557), stdev = 5.891
[info]   CI (99.9%): [≈ 0, 30.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   1087.192 ±(99.9%) 590.607 MB/sec [Average]
[info]   (min, avg, max) = (1011.361, 1087.192, 1361.462), stdev = 153.379
[info]   CI (99.9%): [496.585, 1677.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   223821.324 ±(99.9%) 120976.401 B/op [Average]
[info]   (min, avg, max) = (207871.073, 223821.324, 279948.974), stdev = 31417.187
[info]   CI (99.9%): [102844.923, 344797.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 8.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   193.464 ±(99.9%) 1665.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 193.464, 967.321), stdev = 432.599
[info]   CI (99.9%): [≈ 0, 1859.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 15.000), stdev = 4.393
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson
[info] # Run progress: 48.21% complete, ETA 00:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3930.829 ops/s
[info] # Warmup Iteration   2: 9811.654 ops/s
[info] # Warmup Iteration   3: 10391.574 ops/s
[info] # Warmup Iteration   4: 10564.008 ops/s
[info] # Warmup Iteration   5: 10585.660 ops/s
[info] Iteration   1: 10378.588 ops/s
[info]                  ·gc.alloc.rate:                   142.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              21664.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50504.576 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 404.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10624.701 ops/s
[info]                  ·gc.alloc.rate:      146.314 MB/sec
[info]                  ·gc.alloc.rate.norm: 21671.356 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10487.251 ops/s
[info]                  ·gc.alloc.rate:            144.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       21680.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50379.629 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 10537.315 ops/s
[info]                  ·gc.alloc.rate:      145.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 21680.042 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10472.510 ops/s
[info]                  ·gc.alloc.rate:            144.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       21680.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50451.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson":
[info]   10500.073 ±(99.9%) 347.635 ops/s [Average]
[info]   (min, avg, max) = (10378.588, 10500.073, 10624.701), stdev = 90.280
[info]   CI (99.9%): [10152.438, 10847.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate":
[info]   144.620 ±(99.9%) 4.857 MB/sec [Average]
[info]   (min, avg, max) = (142.876, 144.620, 146.314), stdev = 1.261
[info]   CI (99.9%): [139.763, 149.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   21675.105 ±(99.9%) 27.865 B/op [Average]
[info]   (min, avg, max) = (21664.045, 21675.105, 21680.042), stdev = 7.236
[info]   CI (99.9%): [21647.240, 21702.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   200.906 ±(99.9%) 706.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 200.906, 335.765), stdev = 183.405
[info]   CI (99.9%): [≈ 0, 907.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   30267.195 ±(99.9%) 106393.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30267.195, 50504.576), stdev = 27630.078
[info]   CI (99.9%): [≈ 0, 136660.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   80.807 ±(99.9%) 695.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.807, 404.037), stdev = 180.691
[info]   CI (99.9%): [≈ 0, 776.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 7.000), stdev = 3.674
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter
[info] # Run progress: 49.11% complete, ETA 00:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7556.553 ops/s
[info] # Warmup Iteration   2: 12687.426 ops/s
[info] # Warmup Iteration   3: 20117.122 ops/s
[info] # Warmup Iteration   4: 19936.563 ops/s
[info] # Warmup Iteration   5: 20246.861 ops/s
[info] Iteration   1: 20427.081 ops/s
[info]                  ·gc.alloc.rate:      184.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 14192.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20446.399 ops/s
[info]                  ·gc.alloc.rate:            184.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       14192.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25893.931 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 20468.763 ops/s
[info]                  ·gc.alloc.rate:      184.531 MB/sec
[info]                  ·gc.alloc.rate.norm: 14192.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20422.622 ops/s
[info]                  ·gc.alloc.rate:            184.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       14192.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25924.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 20667.393 ops/s
[info]                  ·gc.alloc.rate:      186.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 14192.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter":
[info]   20486.452 ±(99.9%) 395.775 ops/s [Average]
[info]   (min, avg, max) = (20422.622, 20486.452, 20667.393), stdev = 102.781
[info]   CI (99.9%): [20090.677, 20882.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate":
[info]   184.704 ±(99.9%) 3.588 MB/sec [Average]
[info]   (min, avg, max) = (184.130, 184.704, 186.344), stdev = 0.932
[info]   CI (99.9%): [181.116, 188.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   14192.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (14192.020, 14192.022, 14192.025), stdev = 0.002
[info]   CI (99.9%): [14192.013, 14192.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   134.545 ±(99.9%) 709.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.545, 336.377), stdev = 184.233
[info]   CI (99.9%): [≈ 0, 843.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   10363.657 ±(99.9%) 54644.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10363.657, 25924.355), stdev = 14191.026
[info]   CI (99.9%): [≈ 0, 65008.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay
[info] # Run progress: 50.00% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1023.045 ops/s
[info] # Warmup Iteration   2: 2855.007 ops/s
[info] # Warmup Iteration   3: 2969.196 ops/s
[info] # Warmup Iteration   4: 3059.257 ops/s
[info] # Warmup Iteration   5: 3075.454 ops/s
[info] Iteration   1: 3065.686 ops/s
[info]                  ·gc.alloc.rate:            900.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       462584.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 517963.039 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   2: 3114.146 ops/s
[info]                  ·gc.alloc.rate:                   915.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              462584.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        341670.831 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2019.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 3129.225 ops/s
[info]                  ·gc.alloc.rate:                                  919.677 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462584.151 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       513567.734 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3135.488 ops/s
[info]                  ·gc.alloc.rate:                                  921.604 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462584.130 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.816 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       512421.743 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3134.381 ops/s
[info]                  ·gc.alloc.rate:                                  921.344 MB/sec
[info]                  ·gc.alloc.rate.norm:                             462584.130 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       512585.143 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay":
[info]   3115.785 ±(99.9%) 112.714 ops/s [Average]
[info]   (min, avg, max) = (3065.686, 3115.785, 3135.488), stdev = 29.271
[info]   CI (99.9%): [3003.072, 3228.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate":
[info]   915.776 ±(99.9%) 33.339 MB/sec [Average]
[info]   (min, avg, max) = (900.963, 915.776, 921.604), stdev = 8.658
[info]   CI (99.9%): [882.436, 949.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   462584.135 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (462584.130, 462584.135, 462584.151), stdev = 0.009
[info]   CI (99.9%): [462584.101, 462584.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.851 ±(99.9%) 15.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.851, 8.816), stdev = 4.083
[info]   CI (99.9%): [≈ 0, 19.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   949.547 ±(99.9%) 589.080 MB/sec [Average]
[info]   (min, avg, max) = (676.045, 949.547, 1021.039), stdev = 152.982
[info]   CI (99.9%): [360.467, 1538.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   479641.698 ±(99.9%) 297119.432 B/op [Average]
[info]   (min, avg, max) = (341670.831, 479641.698, 517963.039), stdev = 77160.973
[info]   CI (99.9%): [182522.266, 776761.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   403.946 ±(99.9%) 3478.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 403.946, 2019.729), stdev = 903.250
[info]   CI (99.9%): [≈ 0, 3882.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 24.000), stdev = 8.706
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce
[info] # Run progress: 50.89% complete, ETA 00:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193223.286 ops/s
[info] # Warmup Iteration   2: 316367.821 ops/s
[info] # Warmup Iteration   3: 319909.209 ops/s
[info] # Warmup Iteration   4: 322105.654 ops/s
[info] # Warmup Iteration   5: 321915.634 ops/s
[info] Iteration   1: 324620.801 ops/s
[info]                  ·gc.alloc.rate:                                  1070.824 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.477 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4928.381 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.378 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 329995.137 ops/s
[info]                  ·gc.alloc.rate:                                  1088.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4870.359 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 330343.784 ops/s
[info]                  ·gc.alloc.rate:            1089.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6486.973 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 330038.854 ops/s
[info]                  ·gc.alloc.rate:            1088.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       5192.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4869.755 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 331595.316 ops/s
[info]                  ·gc.alloc.rate:                                  1093.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5192.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4846.878 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce":
[info]   329318.779 ±(99.9%) 10418.148 ops/s [Average]
[info]   (min, avg, max) = (324620.801, 329318.779, 331595.316), stdev = 2705.560
[info]   CI (99.9%): [318900.631, 339736.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate":
[info]   1086.459 ±(99.9%) 34.645 MB/sec [Average]
[info]   (min, avg, max) = (1070.824, 1086.459, 1093.971), stdev = 8.997
[info]   CI (99.9%): [1051.814, 1121.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm":
[info]   5192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5192.001, 5192.001, 5192.001), stdev = 0.001
[info]   CI (99.9%): [5192.001, 5192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.099 ±(99.9%) 0.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.099, 0.477), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen":
[info]   1088.406 ±(99.9%) 588.524 MB/sec [Average]
[info]   (min, avg, max) = (1016.453, 1088.406, 1361.785), stdev = 152.838
[info]   CI (99.9%): [499.882, 1676.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5200.469 ±(99.9%) 2771.725 B/op [Average]
[info]   (min, avg, max) = (4846.878, 5200.469, 6486.973), stdev = 719.808
[info]   CI (99.9%): [2428.744, 7972.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.876 ±(99.9%) 33.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.876, 19.378), stdev = 8.666
[info]   CI (99.9%): [≈ 0, 37.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson
[info] # Run progress: 51.79% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 747964.320 ops/s
[info] # Warmup Iteration   2: 1329946.820 ops/s
[info] # Warmup Iteration   3: 1317778.776 ops/s
[info] # Warmup Iteration   4: 1335862.543 ops/s
[info] # Warmup Iteration   5: 1316521.707 ops/s
[info] Iteration   1: 1318072.890 ops/s
[info]                  ·gc.alloc.rate:                   549.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        802.577 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 1338174.127 ops/s
[info]                  ·gc.alloc.rate:            557.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 394.862 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1317987.420 ops/s
[info]                  ·gc.alloc.rate:            549.322 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 801.800 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1321033.712 ops/s
[info]                  ·gc.alloc.rate:                   550.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        799.960 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 1339730.357 ops/s
[info]                  ·gc.alloc.rate:                   558.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        395.188 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.913 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson":
[info]   1326999.701 ±(99.9%) 42332.554 ops/s [Average]
[info]   (min, avg, max) = (1317987.420, 1326999.701, 1339730.357), stdev = 10993.630
[info]   CI (99.9%): [1284667.147, 1369332.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate":
[info]   553.075 ±(99.9%) 17.690 MB/sec [Average]
[info]   (min, avg, max) = (549.322, 553.075, 558.321), stdev = 4.594
[info]   CI (99.9%): [535.385, 570.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen":
[info]   537.400 ±(99.9%) 707.750 MB/sec [Average]
[info]   (min, avg, max) = (335.770, 537.400, 672.086), stdev = 183.800
[info]   CI (99.9%): [≈ 0, 1245.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm":
[info]   638.878 ±(99.9%) 857.183 B/op [Average]
[info]   (min, avg, max) = (394.862, 638.878, 802.577), stdev = 222.608
[info]   CI (99.9%): [≈ 0, 1496.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.100 ±(99.9%) 6.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.100, 3.913), stdev = 1.622
[info]   CI (99.9%): [≈ 0, 7.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJackson:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.600, 17.000), stdev = 5.505
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter
[info] # Run progress: 52.68% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8416345.495 ops/s
[info] # Warmup Iteration   2: 6819924.970 ops/s
[info] # Warmup Iteration   3: 6841190.631 ops/s
[info] # Warmup Iteration   4: 6830749.471 ops/s
[info] # Warmup Iteration   5: 6824539.508 ops/s
[info] Iteration   1: 6783530.997 ops/s
[info]                  ·gc.alloc.rate:            344.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.050 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 6637750.944 ops/s
[info]                  ·gc.alloc.rate:            337.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79.761 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 6797580.541 ops/s
[info]                  ·gc.alloc.rate:            345.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77.885 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 6923813.816 ops/s
[info]                  ·gc.alloc.rate:            351.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 6953553.956 ops/s
[info]                  ·gc.alloc.rate:            353.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.141 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter":
[info]   6819246.051 ±(99.9%) 485770.842 ops/s [Average]
[info]   (min, avg, max) = (6637750.944, 6819246.051, 6953553.956), stdev = 126153.145
[info]   CI (99.9%): [6333475.209, 7305016.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate":
[info]   346.540 ±(99.9%) 24.735 MB/sec [Average]
[info]   (min, avg, max) = (337.313, 346.540, 353.414), stdev = 6.424
[info]   CI (99.9%): [321.805, 371.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen":
[info]   336.317 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (336.256, 336.317, 336.368), stdev = 0.044
[info]   CI (99.9%): [336.147, 336.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   77.662 ±(99.9%) 5.561 B/op [Average]
[info]   (min, avg, max) = (76.141, 77.662, 79.761), stdev = 1.444
[info]   CI (99.9%): [72.100, 83.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 11.000), stdev = 2.881
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay
[info] # Run progress: 53.57% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127964.845 ops/s
[info] # Warmup Iteration   2: 206203.813 ops/s
[info] # Warmup Iteration   3: 206356.347 ops/s
[info] # Warmup Iteration   4: 207508.140 ops/s
[info] # Warmup Iteration   5: 206657.679 ops/s
[info] Iteration   1: 206533.217 ops/s
[info]                  ·gc.alloc.rate:            668.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5126.642 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 207336.947 ops/s
[info]                  ·gc.alloc.rate:            671.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5107.013 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 207203.619 ops/s
[info]                  ·gc.alloc.rate:                   670.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5110.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   4: 208020.973 ops/s
[info]                  ·gc.alloc.rate:                   673.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             679.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5139.782 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 210892.699 ops/s
[info]                  ·gc.alloc.rate:                                  682.783 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.314 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5080.594 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay":
[info]   207997.491 ±(99.9%) 6555.554 ops/s [Average]
[info]   (min, avg, max) = (206533.217, 207997.491, 210892.699), stdev = 1702.456
[info]   CI (99.9%): [201441.937, 214553.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate":
[info]   673.499 ±(99.9%) 21.184 MB/sec [Average]
[info]   (min, avg, max) = (668.653, 673.499, 682.783), stdev = 5.501
[info]   CI (99.9%): [652.316, 694.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm":
[info]   5096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.002, 5096.002, 5096.002), stdev = 0.001
[info]   CI (99.9%): [5096.002, 5096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.063 ±(99.9%) 0.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.314), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen":
[info]   675.708 ±(99.9%) 15.705 MB/sec [Average]
[info]   (min, avg, max) = (672.673, 675.708, 680.719), stdev = 4.079
[info]   CI (99.9%): [660.003, 691.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5112.815 ±(99.9%) 86.059 B/op [Average]
[info]   (min, avg, max) = (5080.594, 5112.815, 5139.782), stdev = 22.349
[info]   CI (99.9%): [5026.757, 5198.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.066 ±(99.9%) 42.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.066, 25.297), stdev = 10.969
[info]   CI (99.9%): [≈ 0, 48.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAdtPlay:·gc.time":
[info]   71.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 14.200, 22.000), stdev = 9.418
[info]   CI (99.9%): [71.000, 71.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce
[info] # Run progress: 54.46% complete, ETA 00:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 921373.136 ops/s
[info] # Warmup Iteration   2: 1197095.588 ops/s
[info] # Warmup Iteration   3: 1215384.191 ops/s
[info] # Warmup Iteration   4: 1224801.925 ops/s
[info] # Warmup Iteration   5: 1233659.423 ops/s
[info] Iteration   1: 1259808.160 ops/s
[info]                  ·gc.alloc.rate:                                  1286.888 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1700.992 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 1253987.723 ops/s
[info]                  ·gc.alloc.rate:            1281.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       1608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1708.813 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1257793.165 ops/s
[info]                  ·gc.alloc.rate:            1284.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       1608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1703.752 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1254434.165 ops/s
[info]                  ·gc.alloc.rate:            1281.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       1608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1281.181 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1242984.437 ops/s
[info]                  ·gc.alloc.rate:                                  1269.660 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1723.975 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce":
[info]   1253801.530 ±(99.9%) 25063.016 ops/s [Average]
[info]   (min, avg, max) = (1242984.437, 1253801.530, 1259808.160), stdev = 6508.786
[info]   CI (99.9%): [1228738.514, 1278864.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate":
[info]   1280.807 ±(99.9%) 25.716 MB/sec [Average]
[info]   (min, avg, max) = (1269.660, 1280.807, 1286.888), stdev = 6.678
[info]   CI (99.9%): [1255.092, 1306.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm":
[info]   1608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.000, 1608.000, 1608.000), stdev = 0.001
[info]   CI (99.9%): [1608.000, 1608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen":
[info]   1293.280 ±(99.9%) 586.029 MB/sec [Average]
[info]   (min, avg, max) = (1021.035, 1293.280, 1361.431), stdev = 152.190
[info]   CI (99.9%): [707.251, 1879.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1623.743 ±(99.9%) 738.182 B/op [Average]
[info]   (min, avg, max) = (1281.181, 1623.743, 1723.975), stdev = 191.704
[info]   CI (99.9%): [885.560, 2361.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson
[info] # Run progress: 55.36% complete, ETA 00:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2202557.078 ops/s
[info] # Warmup Iteration   2: 3517984.811 ops/s
[info] # Warmup Iteration   3: 3567292.717 ops/s
[info] # Warmup Iteration   4: 3573779.289 ops/s
[info] # Warmup Iteration   5: 3585824.071 ops/s
[info] Iteration   1: 3593006.528 ops/s
[info]                  ·gc.alloc.rate:                   986.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        443.208 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 3672256.152 ops/s
[info]                  ·gc.alloc.rate:                                  1007.733 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       437.657 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3671422.995 ops/s
[info]                  ·gc.alloc.rate:            1007.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 437.758 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3664191.263 ops/s
[info]                  ·gc.alloc.rate:            1005.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 438.614 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3652521.817 ops/s
[info]                  ·gc.alloc.rate:                                  1002.362 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       440.038 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson":
[info]   3650679.751 ±(99.9%) 127827.142 ops/s [Average]
[info]   (min, avg, max) = (3593006.528, 3650679.751, 3672256.152), stdev = 33196.303
[info]   CI (99.9%): [3522852.609, 3778506.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate":
[info]   1001.860 ±(99.9%) 35.095 MB/sec [Average]
[info]   (min, avg, max) = (986.028, 1001.860, 1007.733), stdev = 9.114
[info]   CI (99.9%): [966.765, 1036.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen":
[info]   1019.110 ±(99.9%) 16.146 MB/sec [Average]
[info]   (min, avg, max) = (1011.610, 1019.110, 1021.052), stdev = 4.193
[info]   CI (99.9%): [1002.964, 1035.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   439.455 ±(99.9%) 8.875 B/op [Average]
[info]   (min, avg, max) = (437.657, 439.455, 443.208), stdev = 2.305
[info]   CI (99.9%): [430.579, 448.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.408 ±(99.9%) 3.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 2.042), stdev = 0.913
[info]   CI (99.9%): [≈ 0, 3.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 15.000), stdev = 4.658
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter
[info] # Run progress: 56.25% complete, ETA 00:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13279116.949 ops/s
[info] # Warmup Iteration   2: 14416206.736 ops/s
[info] # Warmup Iteration   3: 14827569.088 ops/s
[info] # Warmup Iteration   4: 14778135.497 ops/s
[info] # Warmup Iteration   5: 14711439.279 ops/s
[info] Iteration   1: 14844587.961 ops/s
[info]                  ·gc.alloc.rate:            452.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 14670259.733 ops/s
[info]                  ·gc.alloc.rate:            447.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.179 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 14874984.033 ops/s
[info]                  ·gc.alloc.rate:            453.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35.593 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14680795.471 ops/s
[info]                  ·gc.alloc.rate:            447.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36.064 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 14411228.896 ops/s
[info]                  ·gc.alloc.rate:            439.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73.475 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter":
[info]   14696371.219 ±(99.9%) 710288.035 ops/s [Average]
[info]   (min, avg, max) = (14411228.896, 14696371.219, 14874984.033), stdev = 184459.547
[info]   CI (99.9%): [13986083.184, 15406659.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate":
[info]   448.178 ±(99.9%) 21.502 MB/sec [Average]
[info]   (min, avg, max) = (439.545, 448.178, 453.613), stdev = 5.584
[info]   CI (99.9%): [426.676, 469.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.927 ±(99.9%) 709.585 MB/sec [Average]
[info]   (min, avg, max) = (336.317, 470.927, 672.821), stdev = 184.277
[info]   CI (99.9%): [≈ 0, 1180.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   50.595 ±(99.9%) 78.170 B/op [Average]
[info]   (min, avg, max) = (35.593, 50.595, 73.475), stdev = 20.301
[info]   CI (99.9%): [≈ 0, 128.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 13.000), stdev = 3.347
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc
[info] # Run progress: 57.14% complete, ETA 00:13:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14070037.871 ops/s
[info] # Warmup Iteration   2: 14164127.094 ops/s
[info] # Warmup Iteration   3: 14300736.464 ops/s
[info] # Warmup Iteration   4: 14308532.686 ops/s
[info] # Warmup Iteration   5: 14318424.797 ops/s
[info] Iteration   1: 14353114.059 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14286981.184 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14276999.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 14305684.099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14192748.824 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc":
[info]   14283105.538 ±(99.9%) 224757.111 ops/s [Average]
[info]   (min, avg, max) = (14192748.824, 14283105.538, 14353114.059), stdev = 58368.708
[info]   CI (99.9%): [14058348.426, 14507862.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay
[info] # Run progress: 58.04% complete, ETA 00:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468880.264 ops/s
[info] # Warmup Iteration   2: 799100.625 ops/s
[info] # Warmup Iteration   3: 810537.797 ops/s
[info] # Warmup Iteration   4: 813535.632 ops/s
[info] # Warmup Iteration   5: 810377.340 ops/s
[info] Iteration   1: 831588.554 ops/s
[info]                  ·gc.alloc.rate:                                  1229.812 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.174 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2576.992 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 830985.710 ops/s
[info]                  ·gc.alloc.rate:            1229.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1934.072 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 830981.426 ops/s
[info]                  ·gc.alloc.rate:            1228.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2578.800 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 833269.091 ops/s
[info]                  ·gc.alloc.rate:                                  1232.390 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1928.790 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 826851.461 ops/s
[info]                  ·gc.alloc.rate:            1222.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2591.590 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay":
[info]   830735.248 ±(99.9%) 9103.257 ops/s [Average]
[info]   (min, avg, max) = (826851.461, 830735.248, 833269.091), stdev = 2364.087
[info]   CI (99.9%): [821631.991, 839838.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate":
[info]   1228.627 ±(99.9%) 13.412 MB/sec [Average]
[info]   (min, avg, max) = (1222.911, 1228.627, 1232.390), stdev = 3.483
[info]   CI (99.9%): [1215.215, 1242.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.174), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.330), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen":
[info]   1225.247 ±(99.9%) 717.759 MB/sec [Average]
[info]   (min, avg, max) = (1021.057, 1225.247, 1361.400), stdev = 186.400
[info]   CI (99.9%): [507.489, 1943.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   2322.049 ±(99.9%) 1373.267 B/op [Average]
[info]   (min, avg, max) = (1928.790, 2322.049, 2591.590), stdev = 356.633
[info]   CI (99.9%): [948.782, 3695.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce
[info] # Run progress: 58.93% complete, ETA 00:12:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368622.265 ops/s
[info] # Warmup Iteration   2: 610180.811 ops/s
[info] # Warmup Iteration   3: 598401.122 ops/s
[info] # Warmup Iteration   4: 607876.303 ops/s
[info] # Warmup Iteration   5: 617752.961 ops/s
[info] Iteration   1: 615905.816 ops/s
[info]                  ·gc.alloc.rate:            1405.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       3592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3479.349 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 622265.645 ops/s
[info]                  ·gc.alloc.rate:            1420.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       3592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3443.588 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 615556.260 ops/s
[info]                  ·gc.alloc.rate:            1404.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       3592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3481.208 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 613476.883 ops/s
[info]                  ·gc.alloc.rate:                                  1399.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3493.066 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 616843.333 ops/s
[info]                  ·gc.alloc.rate:                                  1407.503 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3592.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3474.115 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce":
[info]   616809.587 ±(99.9%) 12663.915 ops/s [Average]
[info]   (min, avg, max) = (613476.883, 616809.587, 622265.645), stdev = 3288.778
[info]   CI (99.9%): [604145.672, 629473.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate":
[info]   1407.439 ±(99.9%) 29.291 MB/sec [Average]
[info]   (min, avg, max) = (1399.608, 1407.439, 1420.016), stdev = 7.607
[info]   CI (99.9%): [1378.148, 1436.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm":
[info]   3592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3592.001, 3592.001, 3592.001), stdev = 0.001
[info]   CI (99.9%): [3592.001, 3592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen":
[info]   1361.276 ±(99.9%) 0.502 MB/sec [Average]
[info]   (min, avg, max) = (1361.059, 1361.276, 1361.398), stdev = 0.130
[info]   CI (99.9%): [1360.774, 1361.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3474.265 ±(99.9%) 71.227 B/op [Average]
[info]   (min, avg, max) = (3443.588, 3474.265, 3493.066), stdev = 18.497
[info]   CI (99.9%): [3403.038, 3545.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson
[info] # Run progress: 59.82% complete, ETA 00:12:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1459932.931 ops/s
[info] # Warmup Iteration   2: 2535227.056 ops/s
[info] # Warmup Iteration   3: 2509856.212 ops/s
[info] # Warmup Iteration   4: 2494631.919 ops/s
[info] # Warmup Iteration   5: 2492099.543 ops/s
[info] Iteration   1: 2568653.428 ops/s
[info]                  ·gc.alloc.rate:                                  1266.362 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.190 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       834.269 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2557681.766 ops/s
[info]                  ·gc.alloc.rate:            1260.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       776.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 837.847 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2581902.147 ops/s
[info]                  ·gc.alloc.rate:                                  1273.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       830.006 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 2534583.607 ops/s
[info]                  ·gc.alloc.rate:            1249.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       776.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 634.107 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 2546536.189 ops/s
[info]                  ·gc.alloc.rate:                                  1255.244 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       841.521 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson":
[info]   2557871.427 ±(99.9%) 71121.644 ops/s [Average]
[info]   (min, avg, max) = (2534583.607, 2557871.427, 2581902.147), stdev = 18470.065
[info]   CI (99.9%): [2486749.783, 2628993.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate":
[info]   1261.070 ±(99.9%) 35.570 MB/sec [Average]
[info]   (min, avg, max) = (1249.594, 1261.070, 1273.222), stdev = 9.238
[info]   CI (99.9%): [1225.500, 1296.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm":
[info]   776.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (776.000, 776.000, 776.000), stdev = 0.001
[info]   CI (99.9%): [776.000, 776.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.190), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.116), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen":
[info]   1293.408 ±(99.9%) 586.157 MB/sec [Average]
[info]   (min, avg, max) = (1021.104, 1293.408, 1361.832), stdev = 152.223
[info]   CI (99.9%): [707.251, 1879.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm":
[info]   795.550 ±(99.9%) 347.906 B/op [Average]
[info]   (min, avg, max) = (634.107, 795.550, 841.521), stdev = 90.350
[info]   CI (99.9%): [447.644, 1143.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJackson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 12.000), stdev = 2.775
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter
[info] # Run progress: 60.71% complete, ETA 00:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4302368.292 ops/s
[info] # Warmup Iteration   2: 4747728.897 ops/s
[info] # Warmup Iteration   3: 4764733.366 ops/s
[info] # Warmup Iteration   4: 4697431.554 ops/s
[info] # Warmup Iteration   5: 4779889.550 ops/s
[info] Iteration   1: 4830139.242 ops/s
[info]                  ·gc.alloc.rate:                                  1276.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       443.633 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4843985.701 ops/s
[info]                  ·gc.alloc.rate:                                  1280.136 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       331.790 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 4859237.855 ops/s
[info]                  ·gc.alloc.rate:                                  1284.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       441.005 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4845459.599 ops/s
[info]                  ·gc.alloc.rate:            1280.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 442.260 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4816951.952 ops/s
[info]                  ·gc.alloc.rate:                                  1272.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       444.865 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter":
[info]   4839154.869 ±(99.9%) 62109.584 ops/s [Average]
[info]   (min, avg, max) = (4816951.952, 4839154.869, 4859237.855), stdev = 16129.662
[info]   CI (99.9%): [4777045.286, 4901264.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate":
[info]   1278.787 ±(99.9%) 16.529 MB/sec [Average]
[info]   (min, avg, max) = (1272.937, 1278.787, 1284.120), stdev = 4.292
[info]   CI (99.9%): [1262.258, 1295.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen":
[info]   1293.183 ±(99.9%) 585.896 MB/sec [Average]
[info]   (min, avg, max) = (1021.000, 1293.183, 1361.306), stdev = 152.155
[info]   CI (99.9%): [707.288, 1879.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   420.711 ±(99.9%) 191.491 B/op [Average]
[info]   (min, avg, max) = (331.790, 420.711, 444.865), stdev = 49.729
[info]   CI (99.9%): [229.220, 612.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay
[info] # Run progress: 61.61% complete, ETA 00:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132043.852 ops/s
[info] # Warmup Iteration   2: 288647.028 ops/s
[info] # Warmup Iteration   3: 295715.225 ops/s
[info] # Warmup Iteration   4: 296012.512 ops/s
[info] # Warmup Iteration   5: 295767.513 ops/s
[info] Iteration   1: 297207.342 ops/s
[info]                  ·gc.alloc.rate:                   1042.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              5520.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5361.810 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 300218.967 ops/s
[info]                  ·gc.alloc.rate:                                  1052.915 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5520.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.362 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5353.049 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 299100.197 ops/s
[info]                  ·gc.alloc.rate:            1048.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       5520.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7164.430 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 302336.082 ops/s
[info]                  ·gc.alloc.rate:            1060.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       5520.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5315.874 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 300165.454 ops/s
[info]                  ·gc.alloc.rate:            1052.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       5520.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5354.154 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay":
[info]   299805.608 ±(99.9%) 7191.599 ops/s [Average]
[info]   (min, avg, max) = (297207.342, 299805.608, 302336.082), stdev = 1867.635
[info]   CI (99.9%): [292614.010, 306997.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate":
[info]   1051.462 ±(99.9%) 25.626 MB/sec [Average]
[info]   (min, avg, max) = (1042.191, 1051.462, 1060.484), stdev = 6.655
[info]   CI (99.9%): [1025.836, 1077.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm":
[info]   5520.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5520.001, 5520.001, 5520.001), stdev = 0.001
[info]   CI (99.9%): [5520.001, 5520.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.072 ±(99.9%) 0.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.362), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen":
[info]   1087.450 ±(99.9%) 590.078 MB/sec [Average]
[info]   (min, avg, max) = (1012.324, 1087.450, 1361.491), stdev = 153.241
[info]   CI (99.9%): [497.372, 1677.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5709.863 ±(99.9%) 3131.818 B/op [Average]
[info]   (min, avg, max) = (5315.874, 5709.863, 7164.430), stdev = 813.323
[info]   CI (99.9%): [2578.045, 8841.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.233 ±(99.9%) 36.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.233, 21.165), stdev = 9.465
[info]   CI (99.9%): [≈ 0, 40.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeArraysPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 14.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson
[info] # Run progress: 62.50% complete, ETA 00:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1253889.104 ops/s
[info] # Warmup Iteration   2: 1873663.905 ops/s
[info] # Warmup Iteration   3: 1869717.227 ops/s
[info] # Warmup Iteration   4: 1858168.543 ops/s
[info] # Warmup Iteration   5: 1865299.498 ops/s
[info] Iteration   1: 1850869.821 ops/s
[info]                  ·gc.alloc.rate:                   978.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        859.266 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 1894847.956 ops/s
[info]                  ·gc.alloc.rate:                                  1001.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.218 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.181 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       848.127 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1903555.040 ops/s
[info]                  ·gc.alloc.rate:            1006.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 844.236 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1909516.416 ops/s
[info]                  ·gc.alloc.rate:                                  1009.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       841.649 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1888999.195 ops/s
[info]                  ·gc.alloc.rate:                                  998.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       850.734 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson":
[info]   1889557.686 ±(99.9%) 88634.400 ops/s [Average]
[info]   (min, avg, max) = (1850869.821, 1889557.686, 1909516.416), stdev = 23018.072
[info]   CI (99.9%): [1800923.285, 1978192.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate":
[info]   998.935 ±(99.9%) 47.291 MB/sec [Average]
[info]   (min, avg, max) = (978.286, 998.935, 1009.552), stdev = 12.281
[info]   CI (99.9%): [951.645, 1046.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.374 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.218), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen":
[info]   1019.029 ±(99.9%) 18.694 MB/sec [Average]
[info]   (min, avg, max) = (1010.346, 1019.029, 1021.259), stdev = 4.855
[info]   CI (99.9%): [1000.336, 1037.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   848.802 ±(99.9%) 26.237 B/op [Average]
[info]   (min, avg, max) = (841.649, 848.802, 859.266), stdev = 6.814
[info]   CI (99.9%): [822.565, 875.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.793 ±(99.9%) 6.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.965), stdev = 1.773
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 21.000), stdev = 7.603
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter
[info] # Run progress: 63.39% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4285067.395 ops/s
[info] # Warmup Iteration   2: 4661115.108 ops/s
[info] # Warmup Iteration   3: 4685185.885 ops/s
[info] # Warmup Iteration   4: 4696184.607 ops/s
[info] # Warmup Iteration   5: 4694123.131 ops/s
[info] Iteration   1: 4687577.895 ops/s
[info]                  ·gc.alloc.rate:            714.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 225.891 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4716256.403 ops/s
[info]                  ·gc.alloc.rate:            719.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.516 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 4755467.570 ops/s
[info]                  ·gc.alloc.rate:                   724.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        223.990 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.323 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 4717685.239 ops/s
[info]                  ·gc.alloc.rate:                                  719.304 MB/sec
[info]                  ·gc.alloc.rate.norm:                             240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       340.672 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 4772938.134 ops/s
[info]                  ·gc.alloc.rate:            727.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter":
[info]   4729985.048 ±(99.9%) 131041.523 ops/s [Average]
[info]   (min, avg, max) = (4687577.895, 4729985.048, 4772938.134), stdev = 34031.067
[info]   CI (99.9%): [4598943.525, 4861026.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate":
[info]   721.188 ±(99.9%) 19.991 MB/sec [Average]
[info]   (min, avg, max) = (714.671, 721.188, 727.783), stdev = 5.192
[info]   CI (99.9%): [701.197, 741.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen":
[info]   744.771 ±(99.9%) 594.801 MB/sec [Average]
[info]   (min, avg, max) = (672.657, 744.771, 1021.028), stdev = 154.468
[info]   CI (99.9%): [149.970, 1339.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   247.912 ±(99.9%) 199.692 B/op [Average]
[info]   (min, avg, max) = (223.990, 247.912, 340.672), stdev = 51.859
[info]   CI (99.9%): [48.220, 447.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.265 ±(99.9%) 2.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.265, 1.323), stdev = 0.592
[info]   CI (99.9%): [≈ 0, 2.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.800, 18.000), stdev = 3.633
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay
[info] # Run progress: 64.29% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211927.497 ops/s
[info] # Warmup Iteration   2: 378815.278 ops/s
[info] # Warmup Iteration   3: 385679.410 ops/s
[info] # Warmup Iteration   4: 383536.619 ops/s
[info] # Warmup Iteration   5: 379594.840 ops/s
[info] Iteration   1: 392280.617 ops/s
[info]                  ·gc.alloc.rate:                                  1136.223 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4094.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.673 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 389598.992 ops/s
[info]                  ·gc.alloc.rate:                                  1128.453 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4124.936 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 391835.123 ops/s
[info]                  ·gc.alloc.rate:                                  1134.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5468.537 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 392100.634 ops/s
[info]                  ·gc.alloc.rate:                                  1135.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4098.642 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 391293.231 ops/s
[info]                  ·gc.alloc.rate:            1133.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4107.146 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay":
[info]   391421.719 ±(99.9%) 4177.716 ops/s [Average]
[info]   (min, avg, max) = (389598.992, 391421.719, 392280.617), stdev = 1084.940
[info]   CI (99.9%): [387244.003, 395599.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate":
[info]   1133.810 ±(99.9%) 12.182 MB/sec [Average]
[info]   (min, avg, max) = (1128.453, 1133.810, 1136.223), stdev = 3.164
[info]   CI (99.9%): [1121.627, 1145.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.190), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen":
[info]   1088.802 ±(99.9%) 586.163 MB/sec [Average]
[info]   (min, avg, max) = (1020.209, 1088.802, 1361.109), stdev = 152.225
[info]   CI (99.9%): [502.639, 1674.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   4378.733 ±(99.9%) 2346.320 B/op [Average]
[info]   (min, avg, max) = (4094.403, 4378.733, 5468.537), stdev = 609.332
[info]   CI (99.9%): [2032.413, 6725.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   0.535 ±(99.9%) 4.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.535, 2.673), stdev = 1.195
[info]   CI (99.9%): [≈ 0, 5.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce
[info] # Run progress: 65.18% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3267.253 ops/s
[info] # Warmup Iteration   2: 4362.773 ops/s
[info] # Warmup Iteration   3: 4430.216 ops/s
[info] # Warmup Iteration   4: 4428.408 ops/s
[info] # Warmup Iteration   5: 4438.969 ops/s
[info] Iteration   1: 4501.531 ops/s
[info]                  ·gc.alloc.rate:                                  1094.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 28.966 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       356744.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                232.862 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4504.404 ops/s
[info]                  ·gc.alloc.rate:                                  1095.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.453 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       356739.238 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 4529.101 ops/s
[info]                  ·gc.alloc.rate:                                  1101.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       354849.229 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4508.315 ops/s
[info]                  ·gc.alloc.rate:                                  1096.847 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       475230.453 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4525.125 ops/s
[info]                  ·gc.alloc.rate:                                  1100.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             382912.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.418 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       355162.839 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce":
[info]   4513.695 ±(99.9%) 48.371 ops/s [Average]
[info]   (min, avg, max) = (4501.531, 4513.695, 4529.101), stdev = 12.562
[info]   CI (99.9%): [4465.323, 4562.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate":
[info]   1098.020 ±(99.9%) 12.023 MB/sec [Average]
[info]   (min, avg, max) = (1094.898, 1098.020, 1101.822), stdev = 3.122
[info]   CI (99.9%): [1085.997, 1110.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm":
[info]   382912.092 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (382912.090, 382912.092, 382912.098), stdev = 0.003
[info]   CI (99.9%): [382912.079, 382912.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.055 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (0.013, 0.055, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   19.120 ±(99.9%) 35.806 B/op [Average]
[info]   (min, avg, max) = (4.453, 19.120, 28.966), stdev = 9.299
[info]   CI (99.9%): [≈ 0, 54.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen":
[info]   1088.860 ±(99.9%) 586.431 MB/sec [Average]
[info]   (min, avg, max) = (1020.073, 1088.860, 1361.291), stdev = 152.294
[info]   CI (99.9%): [502.429, 1675.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   379745.161 ±(99.9%) 205566.896 B/op [Average]
[info]   (min, avg, max) = (354849.229, 379745.161, 475230.453), stdev = 53385.070
[info]   CI (99.9%): [174178.264, 585312.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   46.572 ±(99.9%) 401.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.572, 232.862), stdev = 104.139
[info]   CI (99.9%): [≈ 0, 447.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson
[info] # Run progress: 66.07% complete, ETA 00:10:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 17216.727 ops/s
[info] # Warmup Iteration   2: 26770.943 ops/s
[info] # Warmup Iteration   3: 26135.840 ops/s
[info] # Warmup Iteration   4: 26864.759 ops/s
[info] # Warmup Iteration   5: 26596.600 ops/s
[info] Iteration   1: 26837.109 ops/s
[info]                  ·gc.alloc.rate:            388.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.921 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19687.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 26878.162 ops/s
[info]                  ·gc.alloc.rate:            389.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.848 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19657.875 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 26705.977 ops/s
[info]                  ·gc.alloc.rate:            387.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19783.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 26774.813 ops/s
[info]                  ·gc.alloc.rate:            387.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.926 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39468.432 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 26741.152 ops/s
[info]                  ·gc.alloc.rate:            387.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.640 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19759.302 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson":
[info]   26787.442 ±(99.9%) 269.790 ops/s [Average]
[info]   (min, avg, max) = (26705.977, 26787.442, 26878.162), stdev = 70.064
[info]   CI (99.9%): [26517.652, 27057.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate":
[info]   388.141 ±(99.9%) 3.629 MB/sec [Average]
[info]   (min, avg, max) = (387.068, 388.141, 389.366), stdev = 0.942
[info]   CI (99.9%): [384.513, 391.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm":
[info]   22807.822 ±(99.9%) 0.457 B/op [Average]
[info]   (min, avg, max) = (22807.640, 22807.822, 22807.926), stdev = 0.119
[info]   CI (99.9%): [22807.365, 22808.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen":
[info]   402.808 ±(99.9%) 578.175 MB/sec [Average]
[info]   (min, avg, max) = (335.591, 402.808, 671.404), stdev = 150.150
[info]   CI (99.9%): [≈ 0, 980.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   23671.298 ±(99.9%) 34005.096 B/op [Average]
[info]   (min, avg, max) = (19657.875, 23671.298, 39468.432), stdev = 8831.016
[info]   CI (99.9%): [≈ 0, 57676.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 12.000), stdev = 2.702
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter
[info] # Run progress: 66.96% complete, ETA 00:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20457.772 ops/s
[info] # Warmup Iteration   2: 24179.483 ops/s
[info] # Warmup Iteration   3: 23835.980 ops/s
[info] # Warmup Iteration   4: 23497.685 ops/s
[info] # Warmup Iteration   5: 23705.486 ops/s
[info] Iteration   1: 21840.374 ops/s
[info]                  ·gc.alloc.rate:            164.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       11856.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24241.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 23981.568 ops/s
[info]                  ·gc.alloc.rate:      180.647 MB/sec
[info]                  ·gc.alloc.rate.norm: 11856.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23632.222 ops/s
[info]                  ·gc.alloc.rate:            178.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       11856.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22402.626 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 23805.357 ops/s
[info]                  ·gc.alloc.rate:      179.307 MB/sec
[info]                  ·gc.alloc.rate.norm: 11856.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23692.789 ops/s
[info]                  ·gc.alloc.rate:            178.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       11856.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22345.904 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter":
[info]   23390.462 ±(99.9%) 3375.724 ops/s [Average]
[info]   (min, avg, max) = (21840.374, 23390.462, 23981.568), stdev = 876.665
[info]   CI (99.9%): [20014.737, 26766.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate":
[info]   176.180 ±(99.9%) 25.519 MB/sec [Average]
[info]   (min, avg, max) = (164.461, 176.180, 180.647), stdev = 6.627
[info]   CI (99.9%): [150.660, 201.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm":
[info]   11856.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (11856.017, 11856.018, 11856.019), stdev = 0.001
[info]   CI (99.9%): [11856.015, 11856.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.801 ±(99.9%) 709.360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.801, 336.382), stdev = 184.219
[info]   CI (99.9%): [≈ 0, 911.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   13798.002 ±(99.9%) 48590.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13798.002, 24241.480), stdev = 12618.856
[info]   CI (99.9%): [≈ 0, 62388.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 9.000), stdev = 3.937
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc
[info] # Run progress: 67.86% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27710.128 ops/s
[info] # Warmup Iteration   2: 32423.997 ops/s
[info] # Warmup Iteration   3: 31416.391 ops/s
[info] # Warmup Iteration   4: 31450.219 ops/s
[info] # Warmup Iteration   5: 31693.581 ops/s
[info] Iteration   1: 31655.383 ops/s
[info]                  ·gc.alloc.rate:      0.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 31703.710 ops/s
[info]                  ·gc.alloc.rate:      0.484 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 31703.258 ops/s
[info]                  ·gc.alloc.rate:      0.484 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 31658.047 ops/s
[info]                  ·gc.alloc.rate:      0.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 31644.094 ops/s
[info]                  ·gc.alloc.rate:      0.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc":
[info]   31672.898 ±(99.9%) 109.389 ops/s [Average]
[info]   (min, avg, max) = (31644.094, 31672.898, 31703.710), stdev = 28.408
[info]   CI (99.9%): [31563.509, 31782.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   0.483 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (0.483, 0.483, 0.484), stdev = 0.001
[info]   CI (99.9%): [0.481, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   24.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (24.013, 24.013, 24.014), stdev = 0.001
[info]   CI (99.9%): [24.011, 24.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay
[info] # Run progress: 68.75% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2009.616 ops/s
[info] # Warmup Iteration   2: 3779.063 ops/s
[info] # Warmup Iteration   3: 3984.291 ops/s
[info] # Warmup Iteration   4: 3931.699 ops/s
[info] # Warmup Iteration   5: 3962.255 ops/s
[info] Iteration   1: 4037.211 ops/s
[info]                  ·gc.alloc.rate:                                  1211.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472327.336 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       530388.900 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                259.613 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 4057.756 ops/s
[info]                  ·gc.alloc.rate:                                  1217.455 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472328.390 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.494 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       528033.837 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4071.011 ops/s
[info]                  ·gc.alloc.rate:            1221.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       472327.593 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 394761.053 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4082.691 ops/s
[info]                  ·gc.alloc.rate:                                  1225.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472328.255 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.831 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       524801.504 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4063.682 ops/s
[info]                  ·gc.alloc.rate:                                  1219.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472326.900 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       395440.838 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay":
[info]   4062.470 ±(99.9%) 65.108 ops/s [Average]
[info]   (min, avg, max) = (4037.211, 4062.470, 4082.691), stdev = 16.908
[info]   CI (99.9%): [3997.362, 4127.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate":
[info]   1218.926 ±(99.9%) 19.751 MB/sec [Average]
[info]   (min, avg, max) = (1211.281, 1218.926, 1225.128), stdev = 5.129
[info]   CI (99.9%): [1199.175, 1238.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm":
[info]   472327.695 ±(99.9%) 2.411 B/op [Average]
[info]   (min, avg, max) = (472326.900, 472327.695, 472328.390), stdev = 0.626
[info]   CI (99.9%): [472325.284, 472330.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.058), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   16.067 ±(99.9%) 35.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.067, 22.337), stdev = 9.221
[info]   CI (99.9%): [≈ 0, 51.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen":
[info]   1224.829 ±(99.9%) 717.027 MB/sec [Average]
[info]   (min, avg, max) = (1020.786, 1224.829, 1361.233), stdev = 186.210
[info]   CI (99.9%): [507.802, 1941.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   474685.227 ±(99.9%) 279855.739 B/op [Average]
[info]   (min, avg, max) = (394761.053, 474685.227, 530388.900), stdev = 72677.647
[info]   CI (99.9%): [194829.487, 754540.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   51.923 ±(99.9%) 447.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.923, 259.613), stdev = 116.102
[info]   CI (99.9%): [≈ 0, 498.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson
[info] # Run progress: 69.64% complete, ETA 00:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 106789.635 ops/s
[info] # Warmup Iteration   2: 461837.243 ops/s
[info] # Warmup Iteration   3: 463635.458 ops/s
[info] # Warmup Iteration   4: 467442.692 ops/s
[info] # Warmup Iteration   5: 465608.922 ops/s
[info] Iteration   1: 465096.496 ops/s
[info]                  ·gc.alloc.rate:                   1042.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3419.331 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 469949.468 ops/s
[info]                  ·gc.alloc.rate:                                  1053.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.336 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3419.924 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 470982.049 ops/s
[info]                  ·gc.alloc.rate:                                  1055.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3412.417 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 466631.130 ops/s
[info]                  ·gc.alloc.rate:                                  1045.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3444.223 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 469680.499 ops/s
[info]                  ·gc.alloc.rate:            1052.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       3528.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3421.839 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson":
[info]   468467.928 ±(99.9%) 9573.802 ops/s [Average]
[info]   (min, avg, max) = (465096.496, 468467.928, 470982.049), stdev = 2486.286
[info]   CI (99.9%): [458894.127, 478041.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate":
[info]   1049.878 ±(99.9%) 21.447 MB/sec [Average]
[info]   (min, avg, max) = (1042.326, 1049.878, 1055.588), stdev = 5.570
[info]   CI (99.9%): [1028.430, 1071.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm":
[info]   3528.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3528.001, 3528.001, 3528.001), stdev = 0.001
[info]   CI (99.9%): [3528.001, 3528.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.067 ±(99.9%) 0.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.336), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.226 ±(99.9%) 1.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.226, 1.126), stdev = 0.503
[info]   CI (99.9%): [≈ 0, 2.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen":
[info]   1018.786 ±(99.9%) 18.442 MB/sec [Average]
[info]   (min, avg, max) = (1010.220, 1018.786, 1021.005), stdev = 4.789
[info]   CI (99.9%): [1000.345, 1037.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   3423.547 ±(99.9%) 46.574 B/op [Average]
[info]   (min, avg, max) = (3412.417, 3423.547, 3444.223), stdev = 12.095
[info]   CI (99.9%): [3376.973, 3470.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.156 ±(99.9%) 27.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.156, 15.778), stdev = 7.056
[info]   CI (99.9%): [≈ 0, 30.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 24.000), stdev = 8.526
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter
[info] # Run progress: 70.54% complete, ETA 00:09:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2168120.895 ops/s
[info] # Warmup Iteration   2: 2411459.759 ops/s
[info] # Warmup Iteration   3: 2414467.407 ops/s
[info] # Warmup Iteration   4: 2403122.030 ops/s
[info] # Warmup Iteration   5: 2402562.403 ops/s
[info] Iteration   1: 2377921.240 ops/s
[info]                  ·gc.alloc.rate:            386.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 222.661 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2383196.544 ops/s
[info]                  ·gc.alloc.rate:            387.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 444.305 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2357155.005 ops/s
[info]                  ·gc.alloc.rate:            383.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.614 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 2396628.626 ops/s
[info]                  ·gc.alloc.rate:            389.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 220.920 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2394275.298 ops/s
[info]                  ·gc.alloc.rate:            389.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 221.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter":
[info]   2381835.343 ±(99.9%) 60880.551 ops/s [Average]
[info]   (min, avg, max) = (2357155.005, 2381835.343, 2396628.626), stdev = 15810.486
[info]   CI (99.9%): [2320954.792, 2442715.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate":
[info]   387.427 ±(99.9%) 9.975 MB/sec [Average]
[info]   (min, avg, max) = (383.448, 387.427, 389.921), stdev = 2.591
[info]   CI (99.9%): [377.452, 397.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   403.681 ±(99.9%) 579.159 MB/sec [Average]
[info]   (min, avg, max) = (336.317, 403.681, 672.735), stdev = 150.406
[info]   CI (99.9%): [≈ 0, 982.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   266.726 ±(99.9%) 382.293 B/op [Average]
[info]   (min, avg, max) = (220.920, 266.726, 444.305), stdev = 99.280
[info]   CI (99.9%): [≈ 0, 649.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 11.000), stdev = 2.302
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay
[info] # Run progress: 71.43% complete, ETA 00:08:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74535.999 ops/s
[info] # Warmup Iteration   2: 205489.817 ops/s
[info] # Warmup Iteration   3: 208860.265 ops/s
[info] # Warmup Iteration   4: 205437.847 ops/s
[info] # Warmup Iteration   5: 209880.156 ops/s
[info] Iteration   1: 208598.348 ops/s
[info]                  ·gc.alloc.rate:            829.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       6256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7614.438 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 206614.717 ops/s
[info]                  ·gc.alloc.rate:                   821.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              6256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5125.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 209071.922 ops/s
[info]                  ·gc.alloc.rate:                                  830.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.196 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7682.059 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.014 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 211813.946 ops/s
[info]                  ·gc.alloc.rate:            841.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       6256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5058.555 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 211820.500 ops/s
[info]                  ·gc.alloc.rate:                                  841.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7587.545 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay":
[info]   209583.886 ±(99.9%) 8615.674 ops/s [Average]
[info]   (min, avg, max) = (206614.717, 209583.886, 211820.500), stdev = 2237.463
[info]   CI (99.9%): [200968.213, 218199.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate":
[info]   832.970 ±(99.9%) 34.188 MB/sec [Average]
[info]   (min, avg, max) = (821.216, 832.970, 841.842), stdev = 8.878
[info]   CI (99.9%): [798.782, 867.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm":
[info]   6256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6256.002, 6256.002, 6256.002), stdev = 0.001
[info]   CI (99.9%): [6256.002, 6256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.196), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.297 ±(99.9%) 2.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.297, 1.473), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen":
[info]   880.773 ±(99.9%) 717.547 MB/sec [Average]
[info]   (min, avg, max) = (672.758, 880.773, 1021.022), stdev = 186.345
[info]   CI (99.9%): [163.225, 1598.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6613.530 ±(99.9%) 5351.490 B/op [Average]
[info]   (min, avg, max) = (5058.555, 6613.530, 7682.059), stdev = 1389.765
[info]   CI (99.9%): [1262.041, 11965.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   6.077 ±(99.9%) 42.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.077, 25.372), stdev = 11.002
[info]   CI (99.9%): [≈ 0, 48.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 17.000), stdev = 7.382
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce
[info] # Run progress: 72.32% complete, ETA 00:08:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366901.302 ops/s
[info] # Warmup Iteration   2: 502597.207 ops/s
[info] # Warmup Iteration   3: 518192.199 ops/s
[info] # Warmup Iteration   4: 521939.846 ops/s
[info] # Warmup Iteration   5: 520428.203 ops/s
[info] Iteration   1: 528694.138 ops/s
[info]                  ·gc.alloc.rate:                                  1278.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4053.242 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 530573.993 ops/s
[info]                  ·gc.alloc.rate:                                  1283.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4038.882 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 535875.492 ops/s
[info]                  ·gc.alloc.rate:            1296.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       3808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2999.207 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 531308.976 ops/s
[info]                  ·gc.alloc.rate:                                  1285.321 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4033.273 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 532515.147 ops/s
[info]                  ·gc.alloc.rate:                                  1288.213 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3808.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4024.027 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce":
[info]   531793.549 ±(99.9%) 10280.468 ops/s [Average]
[info]   (min, avg, max) = (528694.138, 531793.549, 535875.492), stdev = 2669.805
[info]   CI (99.9%): [521513.081, 542074.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate":
[info]   1286.438 ±(99.9%) 25.235 MB/sec [Average]
[info]   (min, avg, max) = (1278.815, 1286.438, 1296.441), stdev = 6.554
[info]   CI (99.9%): [1261.203, 1311.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm":
[info]   3808.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3808.001, 3808.001, 3808.001), stdev = 0.001
[info]   CI (99.9%): [3808.001, 3808.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.021), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1293.225 ±(99.9%) 585.799 MB/sec [Average]
[info]   (min, avg, max) = (1021.086, 1293.225, 1361.358), stdev = 152.130
[info]   CI (99.9%): [707.426, 1879.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3829.726 ±(99.9%) 1788.220 B/op [Average]
[info]   (min, avg, max) = (2999.207, 3829.726, 4053.242), stdev = 464.395
[info]   CI (99.9%): [2041.506, 5617.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson
[info] # Run progress: 73.21% complete, ETA 00:08:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 563686.931 ops/s
[info] # Warmup Iteration   2: 1023555.239 ops/s
[info] # Warmup Iteration   3: 1018706.061 ops/s
[info] # Warmup Iteration   4: 1018478.831 ops/s
[info] # Warmup Iteration   5: 1024022.807 ops/s
[info] Iteration   1: 1017376.746 ops/s
[info]                  ·gc.alloc.rate:            687.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1038.762 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 1021110.485 ops/s
[info]                  ·gc.alloc.rate:            690.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1034.940 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 1007519.617 ops/s
[info]                  ·gc.alloc.rate:                   681.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1048.799 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1012798.756 ops/s
[info]                  ·gc.alloc.rate:                                  684.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            679.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1055.787 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.070 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1009405.104 ops/s
[info]                  ·gc.alloc.rate:                                  682.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1061.420 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson":
[info]   1013642.141 ±(99.9%) 21600.750 ops/s [Average]
[info]   (min, avg, max) = (1007519.617, 1013642.141, 1021110.485), stdev = 5609.646
[info]   CI (99.9%): [992041.392, 1035242.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate":
[info]   685.139 ±(99.9%) 14.654 MB/sec [Average]
[info]   (min, avg, max) = (681.058, 685.139, 690.209), stdev = 3.806
[info]   CI (99.9%): [670.485, 699.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.096), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   674.772 ±(99.9%) 18.115 MB/sec [Average]
[info]   (min, avg, max) = (671.327, 674.772, 680.521), stdev = 4.704
[info]   CI (99.9%): [656.658, 692.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1047.942 ±(99.9%) 42.933 B/op [Average]
[info]   (min, avg, max) = (1034.940, 1047.942, 1061.420), stdev = 11.150
[info]   CI (99.9%): [1005.008, 1090.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.455 ±(99.9%) 8.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.455, 5.202), stdev = 2.279
[info]   CI (99.9%): [≈ 0, 10.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 19.000), stdev = 6.782
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter
[info] # Run progress: 74.11% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4916144.199 ops/s
[info] # Warmup Iteration   2: 4758205.313 ops/s
[info] # Warmup Iteration   3: 4813122.841 ops/s
[info] # Warmup Iteration   4: 4762064.948 ops/s
[info] # Warmup Iteration   5: 4857097.999 ops/s
[info] Iteration   1: 4826195.529 ops/s
[info]                  ·gc.alloc.rate:            539.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 219.395 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 4833997.526 ops/s
[info]                  ·gc.alloc.rate:            540.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 219.049 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4829120.742 ops/s
[info]                  ·gc.alloc.rate:            539.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109.632 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4812239.690 ops/s
[info]                  ·gc.alloc.rate:            538.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 220.042 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 4836811.313 ops/s
[info]                  ·gc.alloc.rate:                   540.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        109.461 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.301 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter":
[info]   4827672.960 ±(99.9%) 36832.286 ops/s [Average]
[info]   (min, avg, max) = (4812239.690, 4827672.960, 4836811.313), stdev = 9565.228
[info]   CI (99.9%): [4790840.674, 4864505.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate":
[info]   539.761 ±(99.9%) 4.169 MB/sec [Average]
[info]   (min, avg, max) = (538.032, 539.761, 540.800), stdev = 1.083
[info]   CI (99.9%): [535.592, 543.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   538.127 ±(99.9%) 709.350 MB/sec [Average]
[info]   (min, avg, max) = (336.311, 538.127, 672.714), stdev = 184.216
[info]   CI (99.9%): [≈ 0, 1247.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   175.516 ±(99.9%) 231.895 B/op [Average]
[info]   (min, avg, max) = (109.461, 175.516, 220.042), stdev = 60.222
[info]   CI (99.9%): [≈ 0, 407.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 2.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.301), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 2.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 12.000), stdev = 3.240
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay
[info] # Run progress: 75.00% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133438.441 ops/s
[info] # Warmup Iteration   2: 294399.187 ops/s
[info] # Warmup Iteration   3: 293236.198 ops/s
[info] # Warmup Iteration   4: 292382.515 ops/s
[info] # Warmup Iteration   5: 294675.067 ops/s
[info] Iteration   1: 294408.845 ops/s
[info]                  ·gc.alloc.rate:                   1006.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5412.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 297681.535 ops/s
[info]                  ·gc.alloc.rate:                                  1018.085 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5398.786 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 300325.929 ops/s
[info]                  ·gc.alloc.rate:                                  1027.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5351.409 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 299792.208 ops/s
[info]                  ·gc.alloc.rate:            1025.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5361.172 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 298861.926 ops/s
[info]                  ·gc.alloc.rate:                                  1022.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5377.691 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay":
[info]   298214.089 ±(99.9%) 9057.922 ops/s [Average]
[info]   (min, avg, max) = (294408.845, 298214.089, 300325.929), stdev = 2352.314
[info]   CI (99.9%): [289156.167, 307272.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate":
[info]   1019.959 ±(99.9%) 31.266 MB/sec [Average]
[info]   (min, avg, max) = (1006.824, 1019.959, 1027.199), stdev = 8.120
[info]   CI (99.9%): [988.692, 1051.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.089), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.469), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.248 ±(99.9%) 15.089 MB/sec [Average]
[info]   (min, avg, max) = (1012.240, 1019.248, 1021.094), stdev = 3.919
[info]   CI (99.9%): [1004.159, 1034.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5380.404 ±(99.9%) 98.470 B/op [Average]
[info]   (min, avg, max) = (5351.409, 5380.404, 5412.961), stdev = 25.572
[info]   CI (99.9%): [5281.934, 5478.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.273 ±(99.9%) 36.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.273, 21.367), stdev = 9.556
[info]   CI (99.9%): [≈ 0, 41.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.658
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce
[info] # Run progress: 75.89% complete, ETA 00:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141880.361 ops/s
[info] # Warmup Iteration   2: 284449.819 ops/s
[info] # Warmup Iteration   3: 296216.659 ops/s
[info] # Warmup Iteration   4: 295125.675 ops/s
[info] # Warmup Iteration   5: 296742.327 ops/s
[info] Iteration   1: 294707.416 ops/s
[info]                  ·gc.alloc.rate:            808.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5389.646 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 296365.215 ops/s
[info]                  ·gc.alloc.rate:                   813.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3573.011 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 299975.099 ops/s
[info]                  ·gc.alloc.rate:                                  823.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.327 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5354.246 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.495 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 300559.870 ops/s
[info]                  ·gc.alloc.rate:            824.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3564.758 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 301118.109 ops/s
[info]                  ·gc.alloc.rate:            826.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3558.283 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce":
[info]   298545.142 ±(99.9%) 10925.975 ops/s [Average]
[info]   (min, avg, max) = (294707.416, 298545.142, 301118.109), stdev = 2837.441
[info]   CI (99.9%): [287619.167, 309471.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate":
[info]   819.321 ±(99.9%) 30.267 MB/sec [Average]
[info]   (min, avg, max) = (808.641, 819.321, 826.432), stdev = 7.860
[info]   CI (99.9%): [789.054, 849.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm":
[info]   4320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.001, 4320.001), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.065 ±(99.9%) 0.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.327), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen":
[info]   812.670 ±(99.9%) 710.141 MB/sec [Average]
[info]   (min, avg, max) = (672.711, 812.670, 1020.362), stdev = 184.421
[info]   CI (99.9%): [102.529, 1522.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4287.989 ±(99.9%) 3810.620 B/op [Average]
[info]   (min, avg, max) = (3558.283, 4287.989, 5389.646), stdev = 989.606
[info]   CI (99.9%): [477.369, 8098.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.237 ±(99.9%) 29.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.237, 17.688), stdev = 7.670
[info]   CI (99.9%): [≈ 0, 33.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 17.000), stdev = 6.309
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson
[info] # Run progress: 76.79% complete, ETA 00:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 100331.932 ops/s
[info] # Warmup Iteration   2: 555635.241 ops/s
[info] # Warmup Iteration   3: 568566.172 ops/s
[info] # Warmup Iteration   4: 565153.742 ops/s
[info] # Warmup Iteration   5: 564228.163 ops/s
[info] Iteration   1: 571337.050 ops/s
[info]                  ·gc.alloc.rate:            897.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1849.696 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 569119.916 ops/s
[info]                  ·gc.alloc.rate:                   893.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2794.326 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.894 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 574318.087 ops/s
[info]                  ·gc.alloc.rate:                                  901.912 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.302 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.827 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2798.218 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 578782.688 ops/s
[info]                  ·gc.alloc.rate:            908.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1851.273 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 576016.272 ops/s
[info]                  ·gc.alloc.rate:            904.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2790.228 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson":
[info]   573914.802 ±(99.9%) 14651.544 ops/s [Average]
[info]   (min, avg, max) = (569119.916, 573914.802, 578782.688), stdev = 3804.959
[info]   CI (99.9%): [559263.258, 588566.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate":
[info]   901.259 ±(99.9%) 23.066 MB/sec [Average]
[info]   (min, avg, max) = (893.647, 901.259, 908.915), stdev = 5.990
[info]   CI (99.9%): [878.193, 924.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.060 ±(99.9%) 0.520 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.302), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.165 ±(99.9%) 1.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.827), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 1.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen":
[info]   880.833 ±(99.9%) 720.181 MB/sec [Average]
[info]   (min, avg, max) = (671.400, 880.833, 1020.979), stdev = 187.029
[info]   CI (99.9%): [160.652, 1601.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2416.748 ±(99.9%) 1990.527 B/op [Average]
[info]   (min, avg, max) = (1849.696, 2416.748, 2798.218), stdev = 516.934
[info]   CI (99.9%): [426.221, 4407.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.579 ±(99.9%) 22.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.579, 12.894), stdev = 5.766
[info]   CI (99.9%): [≈ 0, 24.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJackson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 15.000), stdev = 5.941
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter
[info] # Run progress: 77.68% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2124832.621 ops/s
[info] # Warmup Iteration   2: 2357376.394 ops/s
[info] # Warmup Iteration   3: 2321910.106 ops/s
[info] # Warmup Iteration   4: 2374176.282 ops/s
[info] # Warmup Iteration   5: 2351183.671 ops/s
[info] Iteration   1: 2365084.808 ops/s
[info]                  ·gc.alloc.rate:            504.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 223.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1893592.465 ops/s
[info]                  ·gc.alloc.rate:            404.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 559.182 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2363428.903 ops/s
[info]                  ·gc.alloc.rate:            504.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.015 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2356474.619 ops/s
[info]                  ·gc.alloc.rate:            503.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 449.366 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 2355156.171 ops/s
[info]                  ·gc.alloc.rate:            502.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter":
[info]   2266747.393 ±(99.9%) 803413.693 ops/s [Average]
[info]   (min, avg, max) = (1893592.465, 2266747.393, 2365084.808), stdev = 208643.985
[info]   CI (99.9%): [1463333.700, 3070161.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate":
[info]   483.871 ±(99.9%) 171.489 MB/sec [Average]
[info]   (min, avg, max) = (404.219, 483.871, 504.767), stdev = 44.535
[info]   CI (99.9%): [312.382, 655.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm":
[info]   336.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (336.000, 336.000, 336.000), stdev = 0.001
[info]   CI (99.9%): [336.000, 336.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.912 ±(99.9%) 709.449 MB/sec [Average]
[info]   (min, avg, max) = (336.302, 470.912, 672.763), stdev = 184.242
[info]   CI (99.9%): [≈ 0, 1180.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   336.246 ±(99.9%) 609.271 B/op [Average]
[info]   (min, avg, max) = (223.861, 336.246, 559.182), stdev = 158.226
[info]   CI (99.9%): [≈ 0, 945.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay
[info] # Run progress: 78.57% complete, ETA 00:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82409.626 ops/s
[info] # Warmup Iteration   2: 236348.084 ops/s
[info] # Warmup Iteration   3: 237341.243 ops/s
[info] # Warmup Iteration   4: 239517.166 ops/s
[info] # Warmup Iteration   5: 237974.891 ops/s
[info] Iteration   1: 239951.647 ops/s
[info]                  ·gc.alloc.rate:            874.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       5736.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4413.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 238266.014 ops/s
[info]                  ·gc.alloc.rate:                   868.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6687.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 241907.343 ops/s
[info]                  ·gc.alloc.rate:                                  881.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5736.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.575 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6643.826 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 241197.609 ops/s
[info]                  ·gc.alloc.rate:            879.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       5736.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4442.345 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 240213.988 ops/s
[info]                  ·gc.alloc.rate:            875.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       5736.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6690.670 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay":
[info]   240307.320 ±(99.9%) 5326.860 ops/s [Average]
[info]   (min, avg, max) = (238266.014, 240307.320, 241907.343), stdev = 1383.369
[info]   CI (99.9%): [234980.460, 245634.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate":
[info]   875.698 ±(99.9%) 19.421 MB/sec [Average]
[info]   (min, avg, max) = (868.312, 875.698, 881.540), stdev = 5.044
[info]   CI (99.9%): [856.276, 895.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm":
[info]   5736.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.002, 5736.002, 5736.002), stdev = 0.001
[info]   CI (99.9%): [5736.002, 5736.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.115 ±(99.9%) 0.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.575), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen":
[info]   881.584 ±(99.9%) 720.403 MB/sec [Average]
[info]   (min, avg, max) = (672.642, 881.584, 1021.059), stdev = 187.086
[info]   CI (99.9%): [161.181, 1601.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5775.581 ±(99.9%) 4738.673 B/op [Average]
[info]   (min, avg, max) = (4413.070, 5775.581, 6690.670), stdev = 1230.618
[info]   CI (99.9%): [1036.907, 10514.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.280 ±(99.9%) 45.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.280, 26.400), stdev = 11.806
[info]   CI (99.9%): [≈ 0, 50.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMapsPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 14.000), stdev = 4.827
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce
[info] # Run progress: 79.46% complete, ETA 00:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 394081.693 ops/s
[info] # Warmup Iteration   2: 522788.778 ops/s
[info] # Warmup Iteration   3: 530554.077 ops/s
[info] # Warmup Iteration   4: 537135.658 ops/s
[info] # Warmup Iteration   5: 537104.987 ops/s
[info] Iteration   1: 536552.004 ops/s
[info]                  ·gc.alloc.rate:                                  1237.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3993.920 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 539742.724 ops/s
[info]                  ·gc.alloc.rate:                                  1245.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2977.480 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 535992.355 ops/s
[info]                  ·gc.alloc.rate:            1236.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       3632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3997.764 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 535549.146 ops/s
[info]                  ·gc.alloc.rate:            1235.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       3632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3000.831 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 533871.685 ops/s
[info]                  ·gc.alloc.rate:                                  1231.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3632.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4013.936 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce":
[info]   536341.583 ±(99.9%) 8272.692 ops/s [Average]
[info]   (min, avg, max) = (533871.685, 536341.583, 539742.724), stdev = 2148.392
[info]   CI (99.9%): [528068.890, 544614.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate":
[info]   1237.459 ±(99.9%) 19.022 MB/sec [Average]
[info]   (min, avg, max) = (1231.722, 1237.459, 1245.284), stdev = 4.940
[info]   CI (99.9%): [1218.437, 1256.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm":
[info]   3632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.001, 3632.001, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.001, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen":
[info]   1225.109 ±(99.9%) 717.653 MB/sec [Average]
[info]   (min, avg, max) = (1020.872, 1225.109, 1361.272), stdev = 186.372
[info]   CI (99.9%): [507.456, 1942.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3596.786 ±(99.9%) 2136.340 B/op [Average]
[info]   (min, avg, max) = (2977.480, 3596.786, 4013.936), stdev = 554.801
[info]   CI (99.9%): [1460.446, 5733.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson
[info] # Run progress: 80.36% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 370288.974 ops/s
[info] # Warmup Iteration   2: 1026926.307 ops/s
[info] # Warmup Iteration   3: 1035297.571 ops/s
[info] # Warmup Iteration   4: 1036134.579 ops/s
[info] # Warmup Iteration   5: 1044836.995 ops/s
[info] Iteration   1: 1032678.487 ops/s
[info]                  ·gc.alloc.rate:            593.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1023.338 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1027313.189 ops/s
[info]                  ·gc.alloc.rate:            590.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1028.691 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1024836.920 ops/s
[info]                  ·gc.alloc.rate:                   588.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1030.121 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1039870.771 ops/s
[info]                  ·gc.alloc.rate:            597.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 508.116 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1034494.613 ops/s
[info]                  ·gc.alloc.rate:                   594.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1026.587 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson":
[info]   1031838.796 ±(99.9%) 22924.955 ops/s [Average]
[info]   (min, avg, max) = (1024836.920, 1031838.796, 1039870.771), stdev = 5953.538
[info]   CI (99.9%): [1008913.841, 1054763.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate":
[info]   592.619 ±(99.9%) 13.140 MB/sec [Average]
[info]   (min, avg, max) = (588.628, 592.619, 597.245), stdev = 3.412
[info]   CI (99.9%): [579.480, 605.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen":
[info]   604.782 ±(99.9%) 579.258 MB/sec [Average]
[info]   (min, avg, max) = (335.697, 604.782, 674.714), stdev = 150.431
[info]   CI (99.9%): [25.525, 1184.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   923.371 ±(99.9%) 893.920 B/op [Average]
[info]   (min, avg, max) = (508.116, 923.371, 1030.121), stdev = 232.148
[info]   CI (99.9%): [29.451, 1817.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.623 ±(99.9%) 11.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.623, 7.094), stdev = 3.090
[info]   CI (99.9%): [≈ 0, 13.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.600, 13.000), stdev = 3.050
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter
[info] # Run progress: 81.25% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4233297.513 ops/s
[info] # Warmup Iteration   2: 4639869.785 ops/s
[info] # Warmup Iteration   3: 4718538.357 ops/s
[info] # Warmup Iteration   4: 4653747.529 ops/s
[info] # Warmup Iteration   5: 4704328.557 ops/s
[info] Iteration   1: 4705545.537 ops/s
[info]                  ·gc.alloc.rate:            358.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4686513.191 ops/s
[info]                  ·gc.alloc.rate:            357.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4694032.738 ops/s
[info]                  ·gc.alloc.rate:            357.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112.776 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4641157.349 ops/s
[info]                  ·gc.alloc.rate:            353.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114.073 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4592299.386 ops/s
[info]                  ·gc.alloc.rate:            350.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter":
[info]   4663909.640 ±(99.9%) 180586.217 ops/s [Average]
[info]   (min, avg, max) = (4592299.386, 4663909.640, 4705545.537), stdev = 46897.667
[info]   CI (99.9%): [4483323.423, 4844495.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate":
[info]   355.603 ±(99.9%) 13.777 MB/sec [Average]
[info]   (min, avg, max) = (350.127, 355.603, 358.779), stdev = 3.578
[info]   CI (99.9%): [341.826, 369.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen":
[info]   336.391 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (336.362, 336.391, 336.419), stdev = 0.022
[info]   CI (99.9%): [336.305, 336.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   113.526 ±(99.9%) 4.437 B/op [Average]
[info]   (min, avg, max) = (112.516, 113.526, 115.293), stdev = 1.152
[info]   CI (99.9%): [109.089, 117.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay
[info] # Run progress: 82.14% complete, ETA 00:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142131.673 ops/s
[info] # Warmup Iteration   2: 293407.813 ops/s
[info] # Warmup Iteration   3: 295489.542 ops/s
[info] # Warmup Iteration   4: 298183.490 ops/s
[info] # Warmup Iteration   5: 299914.595 ops/s
[info] Iteration   1: 296866.728 ops/s
[info]                  ·gc.alloc.rate:                   1003.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5368.004 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 303875.642 ops/s
[info]                  ·gc.alloc.rate:                                  1026.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5288.573 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 304523.056 ops/s
[info]                  ·gc.alloc.rate:            1029.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5277.703 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 303447.177 ops/s
[info]                  ·gc.alloc.rate:                                  1025.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5296.467 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 300439.471 ops/s
[info]                  ·gc.alloc.rate:            1015.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5349.593 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay":
[info]   301830.415 ±(99.9%) 12270.829 ops/s [Average]
[info]   (min, avg, max) = (296866.728, 301830.415, 304523.056), stdev = 3186.695
[info]   CI (99.9%): [289559.586, 314101.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate":
[info]   1019.994 ±(99.9%) 41.516 MB/sec [Average]
[info]   (min, avg, max) = (1003.141, 1019.994, 1029.029), stdev = 10.782
[info]   CI (99.9%): [978.477, 1061.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm":
[info]   5320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5320.001, 5320.001, 5320.001), stdev = 0.001
[info]   CI (99.9%): [5320.001, 5320.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.095 ±(99.9%) 0.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.467), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen":
[info]   1019.177 ±(99.9%) 15.039 MB/sec [Average]
[info]   (min, avg, max) = (1012.193, 1019.177, 1021.034), stdev = 3.905
[info]   CI (99.9%): [1004.138, 1034.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   5316.068 ±(99.9%) 154.426 B/op [Average]
[info]   (min, avg, max) = (5277.703, 5316.068, 5368.004), stdev = 40.104
[info]   CI (99.9%): [5161.642, 5470.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   4.238 ±(99.9%) 36.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.238, 21.189), stdev = 9.476
[info]   CI (99.9%): [≈ 0, 40.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce
[info] # Run progress: 83.04% complete, ETA 00:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149324.680 ops/s
[info] # Warmup Iteration   2: 290490.983 ops/s
[info] # Warmup Iteration   3: 297677.175 ops/s
[info] # Warmup Iteration   4: 301274.202 ops/s
[info] # Warmup Iteration   5: 295518.783 ops/s
[info] Iteration   1: 298355.835 ops/s
[info]                  ·gc.alloc.rate:            803.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5323.541 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 301923.007 ops/s
[info]                  ·gc.alloc.rate:                   813.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3507.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 305161.361 ops/s
[info]                  ·gc.alloc.rate:                                  822.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.327 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5263.408 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.436 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 306137.110 ops/s
[info]                  ·gc.alloc.rate:                                  824.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3500.002 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 305300.028 ops/s
[info]                  ·gc.alloc.rate:            822.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       4240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3509.631 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce":
[info]   303375.468 ±(99.9%) 12451.693 ops/s [Average]
[info]   (min, avg, max) = (298355.835, 303375.468, 306137.110), stdev = 3233.665
[info]   CI (99.9%): [290923.775, 315827.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate":
[info]   817.258 ±(99.9%) 33.703 MB/sec [Average]
[info]   (min, avg, max) = (803.658, 817.258, 824.732), stdev = 8.752
[info]   CI (99.9%): [783.555, 850.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm":
[info]   4240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4240.001, 4240.001, 4240.001), stdev = 0.001
[info]   CI (99.9%): [4240.001, 4240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.327), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen":
[info]   812.781 ±(99.9%) 710.316 MB/sec [Average]
[info]   (min, avg, max) = (672.782, 812.781, 1020.513), stdev = 184.467
[info]   CI (99.9%): [102.466, 1523.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4220.756 ±(99.9%) 3771.670 B/op [Average]
[info]   (min, avg, max) = (3500.002, 4220.756, 5323.541), stdev = 979.491
[info]   CI (99.9%): [449.086, 7992.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.160 ±(99.9%) 28.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.160, 17.362), stdev = 7.529
[info]   CI (99.9%): [≈ 0, 33.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 17.000), stdev = 6.309
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson
[info] # Run progress: 83.93% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 91586.680 ops/s
[info] # Warmup Iteration   2: 557819.283 ops/s
[info] # Warmup Iteration   3: 561393.503 ops/s
[info] # Warmup Iteration   4: 567732.048 ops/s
[info] # Warmup Iteration   5: 559460.417 ops/s
[info] Iteration   1: 561335.998 ops/s
[info]                  ·gc.alloc.rate:            921.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       2584.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2823.959 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 564015.163 ops/s
[info]                  ·gc.alloc.rate:                                  925.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.253 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.705 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2832.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.012 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 571223.426 ops/s
[info]                  ·gc.alloc.rate:                                  937.678 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1875.616 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 565430.930 ops/s
[info]                  ·gc.alloc.rate:                                  928.224 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2842.473 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 564734.413 ops/s
[info]                  ·gc.alloc.rate:                                  927.126 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2845.800 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson":
[info]   565347.986 ±(99.9%) 13986.985 ops/s [Average]
[info]   (min, avg, max) = (561335.998, 565347.986, 571223.426), stdev = 3632.376
[info]   CI (99.9%): [551361.001, 579334.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate":
[info]   928.065 ±(99.9%) 22.997 MB/sec [Average]
[info]   (min, avg, max) = (921.374, 928.065, 937.678), stdev = 5.972
[info]   CI (99.9%): [905.068, 951.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm":
[info]   2584.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2584.001, 2584.001, 2584.001), stdev = 0.001
[info]   CI (99.9%): [2584.001, 2584.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.061 ±(99.9%) 0.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.253), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.170 ±(99.9%) 1.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.705), stdev = 0.305
[info]   CI (99.9%): [≈ 0, 1.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen":
[info]   948.957 ±(99.9%) 578.045 MB/sec [Average]
[info]   (min, avg, max) = (680.620, 948.957, 1021.072), stdev = 150.116
[info]   CI (99.9%): [370.912, 1527.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm":
[info]   2644.142 ±(99.9%) 1654.638 B/op [Average]
[info]   (min, avg, max) = (1875.616, 2644.142, 2845.800), stdev = 429.704
[info]   CI (99.9%): [989.504, 4298.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.602 ±(99.9%) 22.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.602, 13.012), stdev = 5.819
[info]   CI (99.9%): [≈ 0, 25.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 18.000), stdev = 6.340
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter
[info] # Run progress: 84.82% complete, ETA 00:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1872029.276 ops/s
[info] # Warmup Iteration   2: 2032223.063 ops/s
[info] # Warmup Iteration   3: 2068322.083 ops/s
[info] # Warmup Iteration   4: 2084075.052 ops/s
[info] # Warmup Iteration   5: 2069853.097 ops/s
[info] Iteration   1: 2081948.496 ops/s
[info]                  ·gc.alloc.rate:            423.165 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254.305 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2089459.642 ops/s
[info]                  ·gc.alloc.rate:            424.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2087998.665 ops/s
[info]                  ·gc.alloc.rate:            424.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2076821.264 ops/s
[info]                  ·gc.alloc.rate:            422.167 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 509.877 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 2082221.283 ops/s
[info]                  ·gc.alloc.rate:            423.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254.273 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter":
[info]   2083689.870 ±(99.9%) 19655.536 ops/s [Average]
[info]   (min, avg, max) = (2076821.264, 2083689.870, 2089459.642), stdev = 5104.480
[info]   CI (99.9%): [2064034.334, 2103345.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate":
[info]   423.552 ±(99.9%) 4.009 MB/sec [Average]
[info]   (min, avg, max) = (422.167, 423.552, 424.722), stdev = 1.041
[info]   CI (99.9%): [419.544, 427.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen":
[info]   403.587 ±(99.9%) 579.210 MB/sec [Average]
[info]   (min, avg, max) = (336.290, 403.587, 672.665), stdev = 150.419
[info]   CI (99.9%): [≈ 0, 982.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   305.084 ±(99.9%) 440.834 B/op [Average]
[info]   (min, avg, max) = (253.395, 305.084, 509.877), stdev = 114.483
[info]   CI (99.9%): [≈ 0, 745.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 12.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay
[info] # Run progress: 85.71% complete, ETA 00:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81531.369 ops/s
[info] # Warmup Iteration   2: 237050.282 ops/s
[info] # Warmup Iteration   3: 235306.612 ops/s
[info] # Warmup Iteration   4: 234169.032 ops/s
[info] # Warmup Iteration   5: 236006.245 ops/s
[info] Iteration   1: 235631.274 ops/s
[info]                  ·gc.alloc.rate:            900.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       6016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6740.750 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 236469.082 ops/s
[info]                  ·gc.alloc.rate:                                  903.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6765.521 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.601 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 238891.181 ops/s
[info]                  ·gc.alloc.rate:                                  913.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4485.089 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 237301.693 ops/s
[info]                  ·gc.alloc.rate:                                  907.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6772.959 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 236902.867 ops/s
[info]                  ·gc.alloc.rate:                                  905.643 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6784.365 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay":
[info]   237039.219 ±(99.9%) 4646.617 ops/s [Average]
[info]   (min, avg, max) = (235631.274, 237039.219, 238891.181), stdev = 1206.712
[info]   CI (99.9%): [232392.602, 241685.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate":
[info]   906.044 ±(99.9%) 18.170 MB/sec [Average]
[info]   (min, avg, max) = (900.442, 906.044, 913.175), stdev = 4.719
[info]   CI (99.9%): [887.873, 924.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm":
[info]   6016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.002, 6016.002, 6016.002), stdev = 0.001
[info]   CI (99.9%): [6016.002, 6016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.082 ±(99.9%) 0.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.266), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen":
[info]   949.746 ±(99.9%) 579.264 MB/sec [Average]
[info]   (min, avg, max) = (680.796, 949.746, 1021.364), stdev = 150.433
[info]   CI (99.9%): [370.481, 1529.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm":
[info]   6309.737 ±(99.9%) 3928.176 B/op [Average]
[info]   (min, avg, max) = (4485.089, 6309.737, 6784.365), stdev = 1020.135
[info]   CI (99.9%): [2381.561, 10237.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   5.320 ±(99.9%) 45.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.320, 26.601), stdev = 11.896
[info]   CI (99.9%): [≈ 0, 51.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 17.000), stdev = 5.595
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce
[info] # Run progress: 86.61% complete, ETA 00:04:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352466.985 ops/s
[info] # Warmup Iteration   2: 527616.735 ops/s
[info] # Warmup Iteration   3: 545167.990 ops/s
[info] # Warmup Iteration   4: 547379.823 ops/s
[info] # Warmup Iteration   5: 543468.893 ops/s
[info] Iteration   1: 550173.674 ops/s
[info]                  ·gc.alloc.rate:                   970.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              2776.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2898.361 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 556845.555 ops/s
[info]                  ·gc.alloc.rate:                                  981.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2776.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2886.217 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 560802.275 ops/s
[info]                  ·gc.alloc.rate:            989.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       2776.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1910.601 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 559191.498 ops/s
[info]                  ·gc.alloc.rate:            986.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       2776.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2874.136 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 559699.045 ops/s
[info]                  ·gc.alloc.rate:            987.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       2776.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2871.590 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce":
[info]   557342.409 ±(99.9%) 16402.699 ops/s [Average]
[info]   (min, avg, max) = (550173.674, 557342.409, 560802.275), stdev = 4259.729
[info]   CI (99.9%): [540939.711, 573745.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate":
[info]   982.996 ±(99.9%) 29.325 MB/sec [Average]
[info]   (min, avg, max) = (970.216, 982.996, 989.143), stdev = 7.616
[info]   CI (99.9%): [953.671, 1012.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm":
[info]   2776.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2776.001, 2776.001, 2776.001), stdev = 0.001
[info]   CI (99.9%): [2776.001, 2776.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.229), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen":
[info]   951.448 ±(99.9%) 582.784 MB/sec [Average]
[info]   (min, avg, max) = (680.784, 951.448, 1021.377), stdev = 151.347
[info]   CI (99.9%): [368.664, 1534.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2688.181 ±(99.9%) 1674.302 B/op [Average]
[info]   (min, avg, max) = (1910.601, 2688.181, 2898.361), stdev = 434.811
[info]   CI (99.9%): [1013.879, 4362.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.287 ±(99.9%) 19.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.287, 11.433), stdev = 5.113
[info]   CI (99.9%): [≈ 0, 21.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 13.000), stdev = 4.207
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson
[info] # Run progress: 87.50% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 902968.827 ops/s
[info] # Warmup Iteration   2: 1609852.056 ops/s
[info] # Warmup Iteration   3: 1581235.755 ops/s
[info] # Warmup Iteration   4: 1595317.494 ops/s
[info] # Warmup Iteration   5: 1593208.028 ops/s
[info] Iteration   1: 1603233.448 ops/s
[info]                  ·gc.alloc.rate:            659.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 330.239 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1588081.329 ops/s
[info]                  ·gc.alloc.rate:                   653.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        666.074 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1590292.992 ops/s
[info]                  ·gc.alloc.rate:                   654.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        664.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 1589169.572 ops/s
[info]                  ·gc.alloc.rate:                   654.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        669.607 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1604592.424 ops/s
[info]                  ·gc.alloc.rate:                                  660.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       667.765 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson":
[info]   1595073.953 ±(99.9%) 31270.614 ops/s [Average]
[info]   (min, avg, max) = (1588081.329, 1595073.953, 1604592.424), stdev = 8120.879
[info]   CI (99.9%): [1563803.338, 1626344.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate":
[info]   656.618 ±(99.9%) 12.964 MB/sec [Average]
[info]   (min, avg, max) = (653.593, 656.618, 660.547), stdev = 3.367
[info]   CI (99.9%): [643.654, 669.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen":
[info]   607.267 ±(99.9%) 583.340 MB/sec [Average]
[info]   (min, avg, max) = (336.354, 607.267, 680.694), stdev = 151.491
[info]   CI (99.9%): [23.927, 1190.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm":
[info]   599.643 ±(99.9%) 579.958 B/op [Average]
[info]   (min, avg, max) = (330.239, 599.643, 669.607), stdev = 150.613
[info]   CI (99.9%): [19.685, 1179.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.056 ±(99.9%) 6.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.056, 3.958), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter
[info] # Run progress: 88.39% complete, ETA 00:03:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3461103.519 ops/s
[info] # Warmup Iteration   2: 3920672.773 ops/s
[info] # Warmup Iteration   3: 4028245.232 ops/s
[info] # Warmup Iteration   4: 4022152.310 ops/s
[info] # Warmup Iteration   5: 4040736.172 ops/s
[info] Iteration   1: 4038112.657 ops/s
[info]                  ·gc.alloc.rate:            451.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4019701.826 ops/s
[info]                  ·gc.alloc.rate:            449.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 263.414 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 4003613.433 ops/s
[info]                  ·gc.alloc.rate:            447.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4047090.530 ops/s
[info]                  ·gc.alloc.rate:            452.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.824 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4019024.801 ops/s
[info]                  ·gc.alloc.rate:            449.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 263.473 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter":
[info]   4025508.650 ±(99.9%) 66131.337 ops/s [Average]
[info]   (min, avg, max) = (4003613.433, 4025508.650, 4047090.530), stdev = 17174.098
[info]   CI (99.9%): [3959377.313, 4091639.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate":
[info]   450.102 ±(99.9%) 7.357 MB/sec [Average]
[info]   (min, avg, max) = (447.668, 450.102, 452.523), stdev = 1.911
[info]   CI (99.9%): [442.745, 457.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen":
[info]   470.896 ±(99.9%) 709.410 MB/sec [Average]
[info]   (min, avg, max) = (336.320, 470.896, 672.723), stdev = 184.231
[info]   CI (99.9%): [≈ 0, 1180.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   184.212 ±(99.9%) 278.516 B/op [Average]
[info]   (min, avg, max) = (130.824, 184.212, 263.473), stdev = 72.330
[info]   CI (99.9%): [≈ 0, 462.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 12.000), stdev = 3.209
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc
[info] # Run progress: 89.29% complete, ETA 00:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3424415.334 ops/s
[info] # Warmup Iteration   2: 4046919.884 ops/s
[info] # Warmup Iteration   3: 3960778.859 ops/s
[info] # Warmup Iteration   4: 4099739.812 ops/s
[info] # Warmup Iteration   5: 4076390.629 ops/s
[info] Iteration   1: 4047737.833 ops/s
[info]                  ·gc.alloc.rate:            246.831 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.802 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 3995989.745 ops/s
[info]                  ·gc.alloc.rate:            243.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4092657.258 ops/s
[info]                  ·gc.alloc.rate:      249.604 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4043371.518 ops/s
[info]                  ·gc.alloc.rate:            246.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.940 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4055680.971 ops/s
[info]                  ·gc.alloc.rate:            247.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.543 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc":
[info]   4047087.465 ±(99.9%) 133051.624 ops/s [Average]
[info]   (min, avg, max) = (3995989.745, 4047087.465, 4092657.258), stdev = 34553.084
[info]   CI (99.9%): [3914035.841, 4180139.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate":
[info]   246.813 ±(99.9%) 8.161 MB/sec [Average]
[info]   (min, avg, max) = (243.676, 246.813, 249.604), stdev = 2.119
[info]   CI (99.9%): [238.652, 254.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.062 ±(99.9%) 579.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.062, 336.360), stdev = 150.410
[info]   CI (99.9%): [≈ 0, 848.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   104.954 ±(99.9%) 225.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.954, 132.486), stdev = 58.676
[info]   CI (99.9%): [≈ 0, 330.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay
[info] # Run progress: 90.18% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92273.570 ops/s
[info] # Warmup Iteration   2: 176839.824 ops/s
[info] # Warmup Iteration   3: 179025.531 ops/s
[info] # Warmup Iteration   4: 178525.284 ops/s
[info] # Warmup Iteration   5: 180074.861 ops/s
[info] Iteration   1: 176581.805 ops/s
[info]                  ·gc.alloc.rate:                   910.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              8112.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8995.123 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.687 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 181031.630 ops/s
[info]                  ·gc.alloc.rate:                   932.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              8112.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             679.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5912.250 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 180538.820 ops/s
[info]                  ·gc.alloc.rate:                                  930.299 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8901.886 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 180904.534 ops/s
[info]                  ·gc.alloc.rate:            932.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       8112.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8884.027 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 180249.937 ops/s
[info]                  ·gc.alloc.rate:                                  928.838 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8916.106 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay":
[info]   179861.345 ±(99.9%) 7158.255 ops/s [Average]
[info]   (min, avg, max) = (176581.805, 179861.345, 181031.630), stdev = 1858.976
[info]   CI (99.9%): [172703.090, 187019.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate":
[info]   926.849 ±(99.9%) 36.641 MB/sec [Average]
[info]   (min, avg, max) = (910.062, 926.849, 932.815), stdev = 9.516
[info]   CI (99.9%): [890.207, 963.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm":
[info]   8112.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8112.002, 8112.002, 8112.002), stdev = 0.001
[info]   CI (99.9%): [8112.002, 8112.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.276), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen":
[info]   950.348 ±(99.9%) 582.574 MB/sec [Average]
[info]   (min, avg, max) = (679.861, 950.348, 1020.950), stdev = 151.293
[info]   CI (99.9%): [367.774, 1532.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm":
[info]   8321.878 ±(99.9%) 5189.482 B/op [Average]
[info]   (min, avg, max) = (5912.250, 8321.878, 8995.123), stdev = 1347.692
[info]   CI (99.9%): [3132.396, 13511.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   7.096 ±(99.9%) 49.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.096, 29.687), stdev = 12.875
[info]   CI (99.9%): [≈ 0, 56.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 18.000), stdev = 6.387
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce
[info] # Run progress: 91.07% complete, ETA 00:02:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98733.962 ops/s
[info] # Warmup Iteration   2: 105774.715 ops/s
[info] # Warmup Iteration   3: 105069.425 ops/s
[info] # Warmup Iteration   4: 104554.590 ops/s
[info] # Warmup Iteration   5: 104740.592 ops/s
[info] Iteration   1: 104261.013 ops/s
[info]                  ·gc.alloc.rate:            529.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10156.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 104046.083 ops/s
[info]                  ·gc.alloc.rate:            528.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10177.121 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 104819.076 ops/s
[info]                  ·gc.alloc.rate:            532.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5050.848 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 105218.296 ops/s
[info]                  ·gc.alloc.rate:            534.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10063.396 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 105515.730 ops/s
[info]                  ·gc.alloc.rate:                   535.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              7992.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5017.585 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce":
[info]   104772.040 ±(99.9%) 2391.272 ops/s [Average]
[info]   (min, avg, max) = (104046.083, 104772.040, 105515.730), stdev = 621.006
[info]   CI (99.9%): [102380.768, 107163.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate":
[info]   532.040 ±(99.9%) 11.859 MB/sec [Average]
[info]   (min, avg, max) = (528.446, 532.040, 535.749), stdev = 3.080
[info]   CI (99.9%): [520.180, 543.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate.norm":
[info]   7992.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7992.004, 7992.004, 7992.004), stdev = 0.001
[info]   CI (99.9%): [7992.003, 7992.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen":
[info]   538.253 ±(99.9%) 709.641 MB/sec [Average]
[info]   (min, avg, max) = (336.357, 538.253, 672.929), stdev = 184.292
[info]   CI (99.9%): [≈ 0, 1247.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8093.037 ±(99.9%) 10753.544 B/op [Average]
[info]   (min, avg, max) = (5017.585, 8093.037, 10177.121), stdev = 2792.661
[info]   CI (99.9%): [≈ 0, 18846.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.936 ±(99.9%) 85.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.936, 49.679), stdev = 22.217
[info]   CI (99.9%): [≈ 0, 95.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 12.000), stdev = 3.240
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson
[info] # Run progress: 91.96% complete, ETA 00:02:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266396.593 ops/s
[info] # Warmup Iteration   2: 281166.746 ops/s
[info] # Warmup Iteration   3: 270172.784 ops/s
[info] # Warmup Iteration   4: 279809.718 ops/s
[info] # Warmup Iteration   5: 276967.216 ops/s
[info] Iteration   1: 280401.286 ops/s
[info]                  ·gc.alloc.rate:            296.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1888.208 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 282592.920 ops/s
[info]                  ·gc.alloc.rate:            298.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1873.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 283288.890 ops/s
[info]                  ·gc.alloc.rate:            299.497 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1868.922 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 285617.527 ops/s
[info]                  ·gc.alloc.rate:      301.906 MB/sec
[info]                  ·gc.alloc.rate.norm: 1664.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 281804.361 ops/s
[info]                  ·gc.alloc.rate:            297.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       1664.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1878.802 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson":
[info]   282740.997 ±(99.9%) 7443.821 ops/s [Average]
[info]   (min, avg, max) = (280401.286, 282740.997, 285617.527), stdev = 1933.137
[info]   CI (99.9%): [275297.176, 290184.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate":
[info]   298.884 ±(99.9%) 7.857 MB/sec [Average]
[info]   (min, avg, max) = (296.399, 298.884, 301.906), stdev = 2.041
[info]   CI (99.9%): [291.026, 306.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate.norm":
[info]   1664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1664.001, 1664.002), stdev = 0.001
[info]   CI (99.9%): [1664.001, 1664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen":
[info]   269.081 ±(99.9%) 579.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.081, 336.380), stdev = 150.421
[info]   CI (99.9%): [≈ 0, 848.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen.norm":
[info]   1501.896 ±(99.9%) 3233.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1501.896, 1888.208), stdev = 839.616
[info]   CI (99.9%): [≈ 0, 4734.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJackson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter
[info] # Run progress: 92.86% complete, ETA 00:02:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245395.349 ops/s
[info] # Warmup Iteration   2: 249861.905 ops/s
[info] # Warmup Iteration   3: 252912.464 ops/s
[info] # Warmup Iteration   4: 249408.179 ops/s
[info] # Warmup Iteration   5: 248984.719 ops/s
[info] Iteration   1: 249464.778 ops/s
[info]                  ·gc.alloc.rate:      210.418 MB/sec
[info]                  ·gc.alloc.rate.norm: 1328.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 252326.016 ops/s
[info]                  ·gc.alloc.rate:            212.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2098.282 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 252145.040 ops/s
[info]                  ·gc.alloc.rate:            212.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2099.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 242701.210 ops/s
[info]                  ·gc.alloc.rate:      204.774 MB/sec
[info]                  ·gc.alloc.rate.norm: 1328.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 246855.060 ops/s
[info]                  ·gc.alloc.rate:            208.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       1328.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2144.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter":
[info]   248698.421 ±(99.9%) 15521.302 ops/s [Average]
[info]   (min, avg, max) = (242701.210, 248698.421, 252326.016), stdev = 4030.833
[info]   CI (99.9%): [233177.119, 264219.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate":
[info]   209.815 ±(99.9%) 13.057 MB/sec [Average]
[info]   (min, avg, max) = (204.774, 209.815, 212.876), stdev = 3.391
[info]   CI (99.9%): [196.758, 222.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate.norm":
[info]   1328.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.002, 1328.002, 1328.002), stdev = 0.001
[info]   CI (99.9%): [1328.001, 1328.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.820 ±(99.9%) 709.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.820, 336.385), stdev = 184.235
[info]   CI (99.9%): [≈ 0, 911.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   1268.585 ±(99.9%) 4459.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1268.585, 2144.814), stdev = 1158.205
[info]   CI (99.9%): [≈ 0, 5728.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniter:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc
[info] # Run progress: 93.75% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229993.031 ops/s
[info] # Warmup Iteration   2: 231485.032 ops/s
[info] # Warmup Iteration   3: 233822.393 ops/s
[info] # Warmup Iteration   4: 234416.182 ops/s
[info] # Warmup Iteration   5: 234472.152 ops/s
[info] Iteration   1: 200619.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 234445.380 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 234029.046 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 225350.536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 226967.341 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc":
[info]   224282.402 ±(99.9%) 53305.904 ops/s [Average]
[info]   (min, avg, max) = (200619.709, 224282.402, 234445.380), stdev = 13843.374
[info]   CI (99.9%): [170976.499, 277588.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay
[info] # Run progress: 94.64% complete, ETA 00:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256635.636 ops/s
[info] # Warmup Iteration   2: 278638.106 ops/s
[info] # Warmup Iteration   3: 282785.886 ops/s
[info] # Warmup Iteration   4: 278468.770 ops/s
[info] # Warmup Iteration   5: 275822.149 ops/s
[info] Iteration   1: 280652.894 ops/s
[info]                  ·gc.alloc.rate:            299.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1886.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 275120.443 ops/s
[info]                  ·gc.alloc.rate:            293.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1924.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 273879.906 ops/s
[info]                  ·gc.alloc.rate:            292.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1933.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 285159.283 ops/s
[info]                  ·gc.alloc.rate:      304.339 MB/sec
[info]                  ·gc.alloc.rate.norm: 1680.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 283760.392 ops/s
[info]                  ·gc.alloc.rate:            302.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       1680.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1865.872 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay":
[info]   279714.584 ±(99.9%) 19448.928 ops/s [Average]
[info]   (min, avg, max) = (273879.906, 279714.584, 285159.283), stdev = 5050.825
[info]   CI (99.9%): [260265.655, 299163.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate":
[info]   298.529 ±(99.9%) 20.751 MB/sec [Average]
[info]   (min, avg, max) = (292.314, 298.529, 304.339), stdev = 5.389
[info]   CI (99.9%): [277.778, 319.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate.norm":
[info]   1680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.002, 1680.002), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen":
[info]   269.081 ±(99.9%) 579.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.081, 336.363), stdev = 150.421
[info]   CI (99.9%): [≈ 0, 848.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen.norm":
[info]   1522.002 ±(99.9%) 3277.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1522.002, 1933.166), stdev = 851.269
[info]   CI (99.9%): [≈ 0, 4799.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeStringPlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce
[info] # Run progress: 95.54% complete, ETA 00:01:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3030.640 ops/s
[info] # Warmup Iteration   2: 5065.416 ops/s
[info] # Warmup Iteration   3: 6298.435 ops/s
[info] # Warmup Iteration   4: 6326.565 ops/s
[info] # Warmup Iteration   5: 6384.145 ops/s
[info] Iteration   1: 6339.234 ops/s
[info]                  ·gc.alloc.rate:            845.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       209992.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250527.147 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 6365.466 ops/s
[info]                  ·gc.alloc.rate:                   849.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              209992.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        166336.070 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 823.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 6411.384 ops/s
[info]                  ·gc.alloc.rate:                                  855.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             209992.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250494.064 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                163.508 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 6494.795 ops/s
[info]                  ·gc.alloc.rate:            866.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       209992.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247454.897 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 6512.551 ops/s
[info]                  ·gc.alloc.rate:                                  868.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             209992.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.703 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       164514.073 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce":
[info]   6424.686 ±(99.9%) 295.908 ops/s [Average]
[info]   (min, avg, max) = (6339.234, 6424.686, 6512.551), stdev = 76.846
[info]   CI (99.9%): [6128.778, 6720.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate":
[info]   857.214 ±(99.9%) 39.070 MB/sec [Average]
[info]   (min, avg, max) = (845.962, 857.214, 868.823), stdev = 10.146
[info]   CI (99.9%): [818.145, 896.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm":
[info]   209992.064 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (209992.063, 209992.064, 209992.068), stdev = 0.002
[info]   CI (99.9%): [209992.057, 209992.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.220 ±(99.9%) 7.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.220, 4.397), stdev = 1.923
[info]   CI (99.9%): [≈ 0, 8.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen":
[info]   880.831 ±(99.9%) 717.601 MB/sec [Average]
[info]   (min, avg, max) = (672.881, 880.831, 1021.124), stdev = 186.359
[info]   CI (99.9%): [163.230, 1598.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm":
[info]   215865.250 ±(99.9%) 177386.743 B/op [Average]
[info]   (min, avg, max) = (164514.073, 215865.250, 250527.147), stdev = 46066.774
[info]   CI (99.9%): [38478.507, 393251.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm":
[info]   197.391 ±(99.9%) 1374.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 197.391, 823.446), stdev = 357.065
[info]   CI (99.9%): [≈ 0, 1572.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 6.309
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson
[info] # Run progress: 96.43% complete, ETA 00:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1c167fa3/target/1f542b95/jackson-module-afterburner-2.9.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 16597.304 ops/s
[info] # Warmup Iteration   2: 33331.503 ops/s
[info] # Warmup Iteration   3: 33756.811 ops/s
[info] # Warmup Iteration   4: 34091.326 ops/s
[info] # Warmup Iteration   5: 33975.026 ops/s
[info] Iteration   1: 33317.661 ops/s
[info]                  ·gc.alloc.rate:            425.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31717.819 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 33815.169 ops/s
[info]                  ·gc.alloc.rate:            431.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15624.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 34047.744 ops/s
[info]                  ·gc.alloc.rate:            434.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.974 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15518.038 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 26574.472 ops/s
[info]                  ·gc.alloc.rate:            339.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19843.255 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 33576.097 ops/s
[info]                  ·gc.alloc.rate:                   428.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.957 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31411.692 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson":
[info]   32266.229 ±(99.9%) 12296.519 ops/s [Average]
[info]   (min, avg, max) = (26574.472, 32266.229, 34047.744), stdev = 3193.367
[info]   CI (99.9%): [19969.709, 44562.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate":
[info]   412.041 ±(99.9%) 157.019 MB/sec [Average]
[info]   (min, avg, max) = (339.359, 412.041, 434.816), stdev = 40.777
[info]   CI (99.9%): [255.022, 569.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm":
[info]   20100.029 ±(99.9%) 0.360 B/op [Average]
[info]   (min, avg, max) = (20099.957, 20100.029, 20100.190), stdev = 0.094
[info]   CI (99.9%): [20099.669, 20100.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen":
[info]   469.572 ±(99.9%) 707.198 MB/sec [Average]
[info]   (min, avg, max) = (335.021, 469.572, 671.422), stdev = 183.657
[info]   CI (99.9%): [≈ 0, 1176.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm":
[info]   22823.149 ±(99.9%) 31456.301 B/op [Average]
[info]   (min, avg, max) = (15518.038, 22823.149, 31717.819), stdev = 8169.102
[info]   CI (99.9%): [≈ 0, 54279.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.245 ±(99.9%) 53.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.245, 31.224), stdev = 13.964
[info]   CI (99.9%): [≈ 0, 60.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.200, 13.000), stdev = 3.493
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter
[info] # Run progress: 97.32% complete, ETA 00:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21664.588 ops/s
[info] # Warmup Iteration   2: 33640.946 ops/s
[info] # Warmup Iteration   3: 34022.893 ops/s
[info] # Warmup Iteration   4: 33498.866 ops/s
[info] # Warmup Iteration   5: 33809.980 ops/s
[info] Iteration   1: 34115.743 ops/s
[info]                  ·gc.alloc.rate:      218.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 10096.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 33752.902 ops/s
[info]                  ·gc.alloc.rate:            216.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       10096.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15684.692 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 33805.215 ops/s
[info]                  ·gc.alloc.rate:            216.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       10096.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15661.034 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 33978.956 ops/s
[info]                  ·gc.alloc.rate:      217.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 10096.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 33750.776 ops/s
[info]                  ·gc.alloc.rate:            216.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       10096.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15686.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter":
[info]   33880.718 ±(99.9%) 620.330 ops/s [Average]
[info]   (min, avg, max) = (33750.776, 33880.718, 34115.743), stdev = 161.098
[info]   CI (99.9%): [33260.388, 34501.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate":
[info]   217.298 ±(99.9%) 3.913 MB/sec [Average]
[info]   (min, avg, max) = (216.469, 217.298, 218.764), stdev = 1.016
[info]   CI (99.9%): [213.384, 221.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm":
[info]   10096.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (10096.012, 10096.012, 10096.013), stdev = 0.001
[info]   CI (99.9%): [10096.010, 10096.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen":
[info]   201.801 ±(99.9%) 709.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.801, 336.363), stdev = 184.218
[info]   CI (99.9%): [≈ 0, 911.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm":
[info]   9406.455 ±(99.9%) 33065.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9406.455, 15686.550), stdev = 8586.885
[info]   CI (99.9%): [≈ 0, 42471.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc
[info] # Run progress: 98.21% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25600.655 ops/s
[info] # Warmup Iteration   2: 38944.245 ops/s
[info] # Warmup Iteration   3: 38651.731 ops/s
[info] # Warmup Iteration   4: 39291.494 ops/s
[info] # Warmup Iteration   5: 38877.676 ops/s
[info] Iteration   1: 38849.646 ops/s
[info]                  ·gc.alloc.rate:      5.725 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38929.252 ops/s
[info]                  ·gc.alloc.rate:      5.739 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 39162.588 ops/s
[info]                  ·gc.alloc.rate:      5.773 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 39007.076 ops/s
[info]                  ·gc.alloc.rate:      5.751 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 39118.163 ops/s
[info]                  ·gc.alloc.rate:      5.766 MB/sec
[info]                  ·gc.alloc.rate.norm: 232.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc":
[info]   39013.345 ±(99.9%) 498.983 ops/s [Average]
[info]   (min, avg, max) = (38849.646, 39013.345, 39162.588), stdev = 129.584
[info]   CI (99.9%): [38514.362, 39512.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate":
[info]   5.751 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (5.725, 5.751, 5.773), stdev = 0.019
[info]   CI (99.9%): [5.676, 5.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   232.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.010, 232.010, 232.011), stdev = 0.001
[info]   CI (99.9%): [232.010, 232.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay
[info] # Run progress: 99.11% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1818.805 ops/s
[info] # Warmup Iteration   2: 4190.931 ops/s
[info] # Warmup Iteration   3: 4366.636 ops/s
[info] # Warmup Iteration   4: 4405.568 ops/s
[info] # Warmup Iteration   5: 4408.562 ops/s
[info] Iteration   1: 4405.920 ops/s
[info]                  ·gc.alloc.rate:            887.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       317022.570 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 360470.306 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4390.644 ops/s
[info]                  ·gc.alloc.rate:                   884.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              317020.852 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242328.015 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1432.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4409.930 ops/s
[info]                  ·gc.alloc.rate:                                  888.275 MB/sec
[info]                  ·gc.alloc.rate.norm:                             317022.914 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       364339.757 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4460.909 ops/s
[info]                  ·gc.alloc.rate:                                  898.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             317021.427 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.994 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       360257.061 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4473.945 ops/s
[info]                  ·gc.alloc.rate:                                  901.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             317022.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.562 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       239473.670 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay":
[info]   4428.270 ±(99.9%) 141.521 ops/s [Average]
[info]   (min, avg, max) = (4390.644, 4428.270, 4473.945), stdev = 36.753
[info]   CI (99.9%): [4286.748, 4569.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate":
[info]   891.951 ±(99.9%) 28.241 MB/sec [Average]
[info]   (min, avg, max) = (884.423, 891.951, 901.117), stdev = 7.334
[info]   CI (99.9%): [863.710, 920.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm":
[info]   317021.953 ±(99.9%) 3.218 B/op [Average]
[info]   (min, avg, max) = (317020.852, 317021.953, 317022.914), stdev = 0.836
[info]   CI (99.9%): [317018.735, 317025.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.516 ±(99.9%) 5.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.516, 3.023), stdev = 1.431
[info]   CI (99.9%): [≈ 0, 7.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen":
[info]   881.538 ±(99.9%) 714.436 MB/sec [Average]
[info]   (min, avg, max) = (676.045, 881.538, 1020.919), stdev = 185.537
[info]   CI (99.9%): [167.102, 1595.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm":
[info]   313373.762 ±(99.9%) 254858.984 B/op [Average]
[info]   (min, avg, max) = (239473.670, 313373.762, 364339.757), stdev = 66186.069
[info]   CI (99.9%): [58514.778, 568232.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm":
[info]   286.496 ±(99.9%) 2466.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 286.496, 1432.481), stdev = 640.625
[info]   CI (99.9%): [≈ 0, 2753.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 18.000), stdev = 6.309
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # Run complete. Total time: 00:30:37
[info] Benchmark                                                                                              Mode  Cnt         Score        Error   Units
[info] JsonCodecMakerBenchmark.missingReqFieldCirce                                                          thrpt    5   1431807.049 ±  41863.094   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate                                           thrpt    5      2197.711 ±     64.306  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.alloc.rate.norm                                      thrpt    5      2416.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.001 ±      0.005  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.001 ±      0.005    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen                                     thrpt    5      2246.339 ±    717.243  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2469.070 ±    762.621    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.count                                                thrpt    5        33.000               counts
[info] JsonCodecMakerBenchmark.missingReqFieldCirce:·gc.time                                                 thrpt    5        58.000                   ms
[info] JsonCodecMakerBenchmark.missingReqFieldJackson                                                        thrpt    5    164034.662 ±   2351.277   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate                                         thrpt    5       292.623 ±      4.202  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.alloc.rate.norm                                    thrpt    5      2808.003 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       336.357 ±      0.093  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      3227.710 ±     46.383    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.count                                              thrpt    5         5.000               counts
[info] JsonCodecMakerBenchmark.missingReqFieldJackson:·gc.time                                               thrpt    5        40.000                   ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter                                                       thrpt    5    331443.235 ±  10937.365   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate                                        thrpt    5       218.982 ±      7.205  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.alloc.rate.norm                                   thrpt    5      1040.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       201.814 ±    709.406  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       964.118 ±   3389.022    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.count                                             thrpt    5         3.000               counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniter:·gc.time                                              thrpt    5        30.000                   ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless                                              thrpt    5    763821.797 ±  54354.053   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate                               thrpt    5       267.868 ±     19.075  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.alloc.rate.norm                          thrpt    5       552.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen                         thrpt    5       269.095 ±    579.248  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.churn.G1_Old_Gen.norm                    thrpt    5       556.344 ±   1198.492    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.count                                    thrpt    5         4.000               counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStackless:·gc.time                                     thrpt    5        55.000                   ms
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump                                        thrpt    5   2835933.350 ±  98940.978   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate                         thrpt    5       317.084 ±     11.155  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.alloc.rate.norm                    thrpt    5       176.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                   thrpt    5       336.346 ±      0.141  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm              thrpt    5       186.704 ±      6.542    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.count                              thrpt    5         5.000               counts
[info] JsonCodecMakerBenchmark.missingReqFieldJsoniterStacklessNoDump:·gc.time                               thrpt    5        28.000                   ms
[info] JsonCodecMakerBenchmark.missingReqFieldPlay                                                           thrpt    5    101577.144 ±   3473.223   ops/s
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate                                            thrpt    5       651.566 ±     22.300  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.alloc.rate.norm                                       thrpt    5     10096.004 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.039 ±      0.337  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.605 ±      5.208    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       675.021 ±     13.604  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     10460.231 ±    471.095    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        12.581 ±    108.330    B/op
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.count                                                 thrpt    5        10.000               counts
[info] JsonCodecMakerBenchmark.missingReqFieldPlay:·gc.time                                                  thrpt    5        68.000                   ms
[info] JsonCodecMakerBenchmark.readAdtCirce                                                                  thrpt    5    501351.642 ±  11379.755   ops/s
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate                                                   thrpt    5      1294.306 ±     28.980  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.alloc.rate.norm                                              thrpt    5      4064.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.003 ±      0.019  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.008 ±      0.060    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1293.202 ±    586.466  MB/sec
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      4062.055 ±   1891.427    B/op
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.count                                                        thrpt    5        19.000               counts
[info] JsonCodecMakerBenchmark.readAdtCirce:·gc.time                                                         thrpt    5        28.000                   ms
[info] JsonCodecMakerBenchmark.readAdtJackson                                                                thrpt    5   1056790.803 ±  51919.587   ops/s
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate                                                 thrpt    5       751.941 ±     36.821  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.alloc.rate.norm                                            thrpt    5      1120.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.014 ±      0.080  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.021 ±      0.119    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen                                           thrpt    5       744.642 ±    585.221  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1111.425 ±    936.854    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.216 ±     10.472    B/op
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.count                                                      thrpt    5        11.000               counts
[info] JsonCodecMakerBenchmark.readAdtJackson:·gc.time                                                       thrpt    5        57.000                   ms
[info] JsonCodecMakerBenchmark.readAdtJsoniter                                                               thrpt    5   2786712.299 ±  49215.764   ops/s
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate                                                thrpt    5       184.123 ±      3.277  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.alloc.rate.norm                                           thrpt    5       104.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen                                          thrpt    5       201.811 ±    709.393  MB/sec
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       114.301 ±    401.789    B/op
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.count                                                     thrpt    5         3.000               counts
[info] JsonCodecMakerBenchmark.readAdtJsoniter:·gc.time                                                      thrpt    5        24.000                   ms
[info] JsonCodecMakerBenchmark.readAdtPlay                                                                   thrpt    5    107458.406 ±   4247.916   ops/s
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate                                                    thrpt    5       910.366 ±     36.106  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.alloc.rate.norm                                               thrpt    5     13336.004 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.011 ±      0.055  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.154 ±      0.807    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen                                              thrpt    5       949.564 ±    579.031  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     13918.259 ±   8658.594    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        11.782 ±    101.443    B/op
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.count                                                         thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.readAdtPlay:·gc.time                                                          thrpt    5        41.000                   ms
[info] JsonCodecMakerBenchmark.readAnyRefsCirce                                                              thrpt    5   1180837.285 ±  20845.174   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate                                               thrpt    5      1842.518 ±     32.648  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.alloc.rate.norm                                          thrpt    5      2456.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.002 ±      0.006  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.003 ±      0.008    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1837.947 ±    718.217  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2449.407 ±    931.278    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.count                                                    thrpt    5        27.000               counts
[info] JsonCodecMakerBenchmark.readAnyRefsCirce:·gc.time                                                     thrpt    5        35.000                   ms
[info] JsonCodecMakerBenchmark.readAnyRefsJackson                                                            thrpt    5   1670347.135 ±  24265.538   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate                                             thrpt    5      1171.501 ±     16.961  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.alloc.rate.norm                                        thrpt    5      1104.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.039 ±      0.327  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.037 ±      0.309    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1157.023 ±    717.121  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1090.753 ±    688.028    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±      1.147  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.126 ±      1.083    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.count                                                  thrpt    5        17.000               counts
[info] JsonCodecMakerBenchmark.readAnyRefsJackson:·gc.time                                                   thrpt    5        27.000                   ms
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter                                                           thrpt    5   7174188.792 ± 206719.833   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate                                            thrpt    5       911.543 ±     26.546  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       200.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.030 ±      0.256  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.007 ±      0.056    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       883.306 ±    726.560  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       193.697 ±    157.088    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.178 ±      1.529    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.count                                                 thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.readAnyRefsJsoniter:·gc.time                                                  thrpt    5        32.000                   ms
[info] JsonCodecMakerBenchmark.readAnyRefsPlay                                                               thrpt    5    335024.760 ±  15278.930   ops/s
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate                                                thrpt    5       882.337 ±     41.211  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.alloc.rate.norm                                           thrpt    5      4144.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.012 ±      0.071  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.058 ±      0.330    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       949.030 ±    577.784  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4460.815 ±   2792.577    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         3.779 ±     32.538    B/op
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.count                                                     thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.readAnyRefsPlay:·gc.time                                                      thrpt    5        55.000                   ms
[info] JsonCodecMakerBenchmark.readArraysCirce                                                               thrpt    5    602152.201 ±  21206.621   ops/s
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate                                                thrpt    5      1949.533 ±     68.463  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.alloc.rate.norm                                           thrpt    5      5096.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.003 ±      0.007  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.007 ±      0.017    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1906.016 ±    717.836  MB/sec
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4982.065 ±   1858.629    B/op
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.count                                                     thrpt    5        28.000               counts
[info] JsonCodecMakerBenchmark.readArraysCirce:·gc.time                                                      thrpt    5        45.000                   ms
[info] JsonCodecMakerBenchmark.readArraysJackson                                                             thrpt    5    957976.227 ±  39139.958   ops/s
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate                                              thrpt    5       871.678 ±     35.931  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.alloc.rate.norm                                         thrpt    5      1432.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.011 ±      0.072  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.018 ±      0.116    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen                                        thrpt    5       881.476 ±    705.288  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1450.590 ±   1209.538    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.066 ±      7.822  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.773 ±     13.029    B/op
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.count                                                   thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.readArraysJackson:·gc.time                                                    thrpt    5        62.000                   ms
[info] JsonCodecMakerBenchmark.readArraysJsoniter                                                            thrpt    5   2781157.873 ±  90419.009   ops/s
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate                                             thrpt    5      1159.044 ±     37.814  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.alloc.rate.norm                                        thrpt    5       656.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.032 ±      0.270  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.018 ±      0.152    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5      1157.137 ±    717.816  MB/sec
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       655.218 ±    414.902    B/op
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.count                                                  thrpt    5        17.000               counts
[info] JsonCodecMakerBenchmark.readArraysJsoniter:·gc.time                                                   thrpt    5        27.000                   ms
[info] JsonCodecMakerBenchmark.readArraysPlay                                                                thrpt    5    179717.932 ±   6996.065   ops/s
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate                                                 thrpt    5      1082.353 ±     42.335  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.alloc.rate.norm                                            thrpt    5      9480.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.014 ±      0.078  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.119 ±      0.682    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1088.148 ±    588.321  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      9532.743 ±   5215.379    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         7.114 ±     61.258    B/op
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.count                                                      thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.readArraysPlay:·gc.time                                                       thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.readBitSetsJackson                                                            thrpt    5   1343506.635 ±  44737.590   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate                                             thrpt    5       853.482 ±     28.606  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.alloc.rate.norm                                        thrpt    5      1000.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.019 ±      0.163  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.022 ±      0.191    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen                                       thrpt    5       881.545 ±    714.543  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1033.513 ±    849.777    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.937 ±      8.071    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.count                                                  thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.readBitSetsJackson:·gc.time                                                   thrpt    5        46.000                   ms
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter                                                           thrpt    5   3981243.352 ± 116397.172   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate                                            thrpt    5       526.064 ±     15.350  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.alloc.rate.norm                                       thrpt    5       208.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       538.135 ±    709.349  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       213.147 ±    284.996    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.319 ±      2.744    B/op
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.count                                                 thrpt    5         8.000               counts
[info] JsonCodecMakerBenchmark.readBitSetsJsoniter:·gc.time                                                  thrpt    5        66.000                   ms
[info] JsonCodecMakerBenchmark.readBitSetsPlay                                                               thrpt    5    211733.640 ±   7745.861   ops/s
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate                                                thrpt    5       975.654 ±     34.583  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.alloc.rate.norm                                           thrpt    5      7256.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.009 ±      0.075  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.065 ±      0.560    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1018.093 ±     19.527  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      7571.895 ±    159.762    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±      5.561  MB/sec
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         6.019 ±     41.955    B/op
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.count                                                     thrpt    5        15.000               counts
[info] JsonCodecMakerBenchmark.readBitSetsPlay:·gc.time                                                      thrpt    5        45.000                   ms
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce                                                        thrpt    5    517313.834 ±  10331.556   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate                                         thrpt    5      1690.494 ±     33.976  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.alloc.rate.norm                                    thrpt    5      5144.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.001 ±      0.004  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.003 ±      0.014    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1701.652 ±      0.807  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5      5178.064 ±    103.121    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.count                                              thrpt    5        25.000               counts
[info] JsonCodecMakerBenchmark.readExtractFieldsCirce:·gc.time                                               thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson                                                      thrpt    5    460494.341 ±  11234.407   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate                                       thrpt    5       571.084 ±     13.959  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.alloc.rate.norm                                  thrpt    5      1952.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       606.136 ±    580.725  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5      2074.185 ±   2014.882    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.737 ±     23.565    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.count                                            thrpt    5         9.000               counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJackson:·gc.time                                             thrpt    5        65.000                   ms
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter                                                     thrpt    5   4912270.299 ±  89317.310   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate                                      thrpt    5       224.701 ±      4.105  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       201.807 ±    709.379  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5        64.883 ±    228.075    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.count                                           thrpt    5         3.000               counts
[info] JsonCodecMakerBenchmark.readExtractFieldsJsoniter:·gc.time                                            thrpt    5        16.000                   ms
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay                                                         thrpt    5    160268.747 ±   7410.066   ops/s
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate                                          thrpt    5       883.786 ±     40.895  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.alloc.rate.norm                                     thrpt    5      8680.003 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.017 ±      0.146  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.167 ±      1.434    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen                                    thrpt    5       881.553 ±    714.357  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5      8661.740 ±   7083.025    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         7.902 ±     68.034    B/op
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.count                                               thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.readExtractFieldsPlay:·gc.time                                                thrpt    5        45.000                   ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce                                                        thrpt    5      4560.696 ±    130.053   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate                                         thrpt    5      1097.683 ±     31.866  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.alloc.rate.norm                                    thrpt    5    378808.096 ±      0.020    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.079 ±      0.252  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        27.511 ±     88.066    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                   thrpt    5      1088.171 ±    577.680  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                              thrpt    5    375806.580 ± 210357.996    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       278.938 ±   2401.744    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.count                                              thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPICirce:·gc.time                                               thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson                                                      thrpt    5      9177.407 ±    147.263   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate                                       thrpt    5       232.604 ±      3.633  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.alloc.rate.norm                                  thrpt    5     39888.049 ±      0.013    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                 thrpt    5       201.564 ±    708.526  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                            thrpt    5     34579.249 ± 121551.008    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.count                                            thrpt    5         3.000               counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJackson:·gc.time                                             thrpt    5        25.000                   ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter                                                     thrpt    5     17300.393 ±    339.542   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate                                      thrpt    5       295.777 ±      5.789  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                 thrpt    5     26896.025 ±      0.010    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                                thrpt    5       268.763 ±    578.540  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                           thrpt    5     24490.225 ±  52719.292    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.count                                           thrpt    5         4.000               counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIJsoniter:·gc.time                                            thrpt    5        32.000                   ms
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay                                                         thrpt    5      1709.043 ±     62.686   ops/s
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate                                          thrpt    5      1067.737 ±     39.119  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.alloc.rate.norm                                     thrpt    5    983184.250 ±      0.059    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.003 ±      0.021  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         3.155 ±     19.359    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                    thrpt    5      1087.343 ±    590.260  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                               thrpt    5   1001047.499 ± 534179.039    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       748.092 ±   6441.300    B/op
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.count                                               thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.readGoogleMapsAPIPlay:·gc.time                                                thrpt    5        41.000                   ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter                                                    thrpt    5   3408395.440 ±  52786.354   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate                                     thrpt    5      1021.991 ±     16.115  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.alloc.rate.norm                                thrpt    5       472.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.032 ±      0.267  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.015 ±      0.124    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5      1020.046 ±      8.141  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5       471.106 ±      5.544    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space                        thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         0.371 ±      3.193    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.count                                          thrpt    5        15.000               counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsJsoniter:·gc.time                                           thrpt    5        25.000                   ms
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay                                                        thrpt    5    181569.385 ±   9020.702   ops/s
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate                                         thrpt    5      1041.883 ±     51.225  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.alloc.rate.norm                                    thrpt    5      9032.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.013 ±      0.076  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.110 ±      0.656    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1087.137 ±    569.078  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5      9438.444 ±   5474.780    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±      6.876  MB/sec
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         7.079 ±     60.953    B/op
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.count                                              thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.readIntAndLongMapsPlay:·gc.time                                               thrpt    5        30.000                   ms
[info] JsonCodecMakerBenchmark.readIterablesCirce                                                            thrpt    5    442728.041 ±  18975.484   ops/s
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate                                             thrpt    5      1599.939 ±     67.799  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.alloc.rate.norm                                        thrpt    5      5688.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.001 ±      0.003  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.004 ±      0.012    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen                                       thrpt    5      1633.746 ±    586.385  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5810.881 ±   2193.095    B/op
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.count                                                  thrpt    5        24.000               counts
[info] JsonCodecMakerBenchmark.readIterablesCirce:·gc.time                                                   thrpt    5        34.000                   ms
[info] JsonCodecMakerBenchmark.readIterablesJackson                                                          thrpt    5    443473.611 ±   9127.273   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate                                           thrpt    5       516.140 ±     10.704  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.alloc.rate.norm                                      thrpt    5      1832.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen                                     thrpt    5       469.952 ±    707.913  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1670.716 ±   2549.579    B/op
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.count                                                thrpt    5         7.000               counts
[info] JsonCodecMakerBenchmark.readIterablesJackson:·gc.time                                                 thrpt    5        63.000                   ms
[info] JsonCodecMakerBenchmark.readIterablesJsoniter                                                         thrpt    5   3029510.525 ±  59902.764   ops/s
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate                                          thrpt    5      1200.893 ±     23.668  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.alloc.rate.norm                                     thrpt    5       624.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.004 ±      0.028  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.002 ±      0.015    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen                                    thrpt    5      1157.142 ±    718.186  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                               thrpt    5       601.524 ±    381.029    B/op
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.count                                               thrpt    5        17.000               counts
[info] JsonCodecMakerBenchmark.readIterablesJsoniter:·gc.time                                                thrpt    5        27.000                   ms
[info] JsonCodecMakerBenchmark.readIterablesPlay                                                             thrpt    5    136439.910 ±   2400.822   ops/s
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate                                              thrpt    5       947.926 ±     16.688  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.alloc.rate.norm                                         thrpt    5     10936.003 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.012 ±      0.064  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.133 ±      0.735    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen                                        thrpt    5       950.401 ±    597.853  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     10960.835 ±   6810.082    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         9.161 ±     78.881    B/op
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.count                                                   thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.readIterablesPlay:·gc.time                                                    thrpt    5        36.000                   ms
[info] JsonCodecMakerBenchmark.readMapsCirce                                                                 thrpt    5    404418.971 ±  12703.102   ops/s
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate                                                  thrpt    5      1405.897 ±     43.933  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.alloc.rate.norm                                             thrpt    5      5472.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.003 ±      0.006  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.011 ±      0.024    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1429.419 ±    585.683  MB/sec
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5564.354 ±   2311.862    B/op
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.count                                                       thrpt    5        21.000               counts
[info] JsonCodecMakerBenchmark.readMapsCirce:·gc.time                                                        thrpt    5        29.000                   ms
[info] JsonCodecMakerBenchmark.readMapsJackson                                                               thrpt    5    740566.110 ±  28143.253   ops/s
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate                                                thrpt    5       873.189 ±     33.523  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.alloc.rate.norm                                           thrpt    5      1856.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.021 ±      0.182  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.045 ±      0.386    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       881.173 ±    714.542  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1875.010 ±   1559.549    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.065 ±      7.819  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         2.270 ±     16.625    B/op
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.count                                                     thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.readMapsJackson:·gc.time                                                      thrpt    5        39.000                   ms
[info] JsonCodecMakerBenchmark.readMapsJsoniter                                                              thrpt    5   3581039.016 ± 168735.374   ops/s
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate                                               thrpt    5       891.835 ±     42.274  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.alloc.rate.norm                                          thrpt    5       392.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.029 ±      0.217  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.013 ±      0.095    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       882.516 ±    709.713  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       388.407 ±    322.007    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.359 ±      3.089    B/op
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.count                                                    thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.readMapsJsoniter:·gc.time                                                     thrpt    5        43.000                   ms
[info] JsonCodecMakerBenchmark.readMapsPlay                                                                  thrpt    5    194746.109 ±   4553.993   ops/s
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate                                                   thrpt    5      1083.701 ±     25.520  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.alloc.rate.norm                                              thrpt    5      8760.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.012 ±      0.072  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.096 ±      0.586    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen                                             thrpt    5      1088.090 ±    588.200  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      8793.857 ±   4682.186    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.524 ±     56.174    B/op
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.count                                                        thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.readMapsPlay:·gc.time                                                         thrpt    5        29.000                   ms
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce                                                     thrpt    5    438232.471 ±   6466.112   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate                                      thrpt    5      1674.903 ±     24.794  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.alloc.rate.norm                                 thrpt    5      6016.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.001 ±      0.004  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.004 ±      0.015    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen                                thrpt    5      1701.746 ±      0.680  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                           thrpt    5      6112.489 ±     90.405    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.count                                           thrpt    5        25.000               counts
[info] JsonCodecMakerBenchmark.readMutableIterablesCirce:·gc.time                                            thrpt    5        33.000                   ms
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter                                                  thrpt    5   2581868.967 ±  32146.560   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate                                   thrpt    5      1666.507 ±     20.730  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.alloc.rate.norm                              thrpt    5      1016.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.001 ±      0.003  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5        ≈ 10⁻³                 B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                             thrpt    5      1701.730 ±      0.254  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                        thrpt    5      1037.483 ±     12.988    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.count                                        thrpt    5        25.000               counts
[info] JsonCodecMakerBenchmark.readMutableIterablesJsoniter:·gc.time                                         thrpt    5        34.000                   ms
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay                                                      thrpt    5    140188.537 ±   5342.463   ops/s
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate                                       thrpt    5       998.902 ±     37.914  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.alloc.rate.norm                                  thrpt    5     11216.003 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.007 ±      0.052  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.080 ±      0.583    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen                                 thrpt    5      1018.509 ±     20.356  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                            thrpt    5     11436.639 ±    254.267    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±      5.560  MB/sec
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         9.096 ±     63.416    B/op
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.count                                            thrpt    5        15.000               counts
[info] JsonCodecMakerBenchmark.readMutableIterablesPlay:·gc.time                                             thrpt    5        36.000                   ms
[info] JsonCodecMakerBenchmark.readMutableMapsJackson                                                        thrpt    5    744868.125 ±  37851.456   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate                                         thrpt    5       965.288 ±     48.948  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.alloc.rate.norm                                    thrpt    5      2040.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.059 ±      0.507  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.124 ±      1.064    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       949.948 ±    580.165  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5      2010.252 ±   1284.807    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.932 ±      6.688  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         1.999 ±     14.395    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.count                                              thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.readMutableMapsJackson:·gc.time                                               thrpt    5        44.000                   ms
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter                                                       thrpt    5   2431279.936 ±  47556.652   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate                                        thrpt    5      1149.216 ±     22.306  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.alloc.rate.norm                                   thrpt    5       744.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.032 ±      0.275  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.021 ±      0.178    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5      1157.263 ±    718.304  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       749.621 ±    477.621    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.count                                             thrpt    5        17.000               counts
[info] JsonCodecMakerBenchmark.readMutableMapsJsoniter:·gc.time                                              thrpt    5        25.000                   ms
[info] JsonCodecMakerBenchmark.readMutableMapsPlay                                                           thrpt    5    165326.587 ±   7346.680   ops/s
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate                                            thrpt    5       883.923 ±     39.370  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.alloc.rate.norm                                       thrpt    5      8416.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.013 ±      0.076  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.126 ±      0.715    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       881.554 ±    706.383  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8407.020 ±   7000.979    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.720 ±     66.473    B/op
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.count                                                 thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.readMutableMapsPlay:·gc.time                                                  thrpt    5        41.000                   ms
[info] JsonCodecMakerBenchmark.readPrimitivesCirce                                                           thrpt    5    401014.821 ±   6259.050   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate                                            thrpt    5      1233.077 ±     19.250  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.alloc.rate.norm                                       thrpt    5      4840.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.024 ±      0.201  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.094 ±      0.787    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1225.272 ±    717.845  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      4810.581 ±   2853.019    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.count                                                 thrpt    5        18.000               counts
[info] JsonCodecMakerBenchmark.readPrimitivesCirce:·gc.time                                                  thrpt    5        23.000                   ms
[info] JsonCodecMakerBenchmark.readPrimitivesJackson                                                         thrpt    5    919246.316 ±  21195.842   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate                                          thrpt    5       696.198 ±     15.951  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.alloc.rate.norm                                     thrpt    5      1192.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.014 ±      0.075  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.024 ±      0.127    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       743.926 ±    596.787  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1272.837 ±    994.970    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±      5.561  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.378 ±      9.606    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.count                                               thrpt    5        11.000               counts
[info] JsonCodecMakerBenchmark.readPrimitivesJackson:·gc.time                                                thrpt    5        51.000                   ms
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter                                                        thrpt    5   4079531.759 ±  92789.220   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate                                         thrpt    5       124.392 ±      2.878  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.alloc.rate.norm                                    thrpt    5        48.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       134.257 ±    707.901  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5        52.095 ±    274.684    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.266 ±      2.293  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.104 ±      0.894    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.count                                              thrpt    5         2.000               counts
[info] JsonCodecMakerBenchmark.readPrimitivesJsoniter:·gc.time                                               thrpt    5        16.000                   ms
[info] JsonCodecMakerBenchmark.readPrimitivesPlay                                                            thrpt    5    133077.140 ±   5087.783   ops/s
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate                                             thrpt    5       873.139 ±     33.335  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.alloc.rate.norm                                        thrpt    5     10328.003 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.010 ±      0.056  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.119 ±      0.651    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       881.569 ±    706.361  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     10438.604 ±   8574.400    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         9.490 ±     81.708    B/op
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.count                                                  thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.readPrimitivesPlay:·gc.time                                                   thrpt    5        48.000                   ms
[info] JsonCodecMakerBenchmark.readStringCirce                                                               thrpt    5    121800.223 ±   6382.619   ops/s
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate                                                thrpt    5       903.762 ±     47.461  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.alloc.rate.norm                                           thrpt    5     11680.003 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.028 ±      0.224  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.360 ±      2.882    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       950.396 ±    580.885  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     12295.588 ±   7788.158    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±      5.559  MB/sec
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        10.521 ±     73.559    B/op
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.count                                                     thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.readStringCirce:·gc.time                                                      thrpt    5        40.000                   ms
[info] JsonCodecMakerBenchmark.readStringJackson                                                             thrpt    5    563891.947 ±  35694.056   ops/s
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate                                              thrpt    5       739.518 ±     47.014  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.alloc.rate.norm                                         thrpt    5      2064.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.008 ±      0.066  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.021 ±      0.185    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen                                        thrpt    5       744.877 ±    568.882  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      2084.690 ±   1750.561    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         2.295 ±     19.762    B/op
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.count                                                   thrpt    5        11.000               counts
[info] JsonCodecMakerBenchmark.readStringJackson:·gc.time                                                    thrpt    5        45.000                   ms
[info] JsonCodecMakerBenchmark.readStringJsoniter                                                            thrpt    5    602777.248 ±  24913.088   ops/s
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate                                             thrpt    5       514.692 ±     21.338  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.alloc.rate.norm                                        thrpt    5      1344.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen                                       thrpt    5       538.172 ±    709.337  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1406.126 ±   1862.245    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space                                thrpt    5         0.666 ±      5.735  MB/sec
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         1.724 ±     14.846    B/op
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.count                                                  thrpt    5         8.000               counts
[info] JsonCodecMakerBenchmark.readStringJsoniter:·gc.time                                                   thrpt    5        57.000                   ms
[info] JsonCodecMakerBenchmark.readStringPlay                                                                thrpt    5    196566.657 ±   5673.496   ops/s
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate                                                 thrpt    5      1791.388 ±     52.445  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.alloc.rate.norm                                            thrpt    5     14344.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.001 ±      0.004  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.008 ±      0.033    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen                                           thrpt    5      1769.911 ±    585.174  MB/sec
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     14177.203 ±   4978.297    B/op
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.count                                                      thrpt    5        26.000               counts
[info] JsonCodecMakerBenchmark.readStringPlay:·gc.time                                                       thrpt    5        39.000                   ms
[info] JsonCodecMakerBenchmark.readTwitterAPICirce                                                           thrpt    5      7645.247 ±    259.407   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate                                            thrpt    5      1125.233 ±     38.622  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.alloc.rate.norm                                       thrpt    5    231660.276 ±     36.338    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.039 ±      0.109  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         8.049 ±     22.686    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1087.192 ±    590.607  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    223821.324 ± 120976.401    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±      8.026  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       193.464 ±   1665.785    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.count                                                 thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.readTwitterAPICirce:·gc.time                                                  thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson                                                         thrpt    5     10500.073 ±    347.635   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate                                          thrpt    5       144.620 ±      4.857  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.alloc.rate.norm                                     thrpt    5     21675.105 ±     27.865    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       200.906 ±    706.227  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5     30267.195 ± 106393.593    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.533 ±      4.589  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5        80.807 ±    695.775    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.count                                               thrpt    5         3.000               counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJackson:·gc.time                                                thrpt    5        20.000                   ms
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter                                                        thrpt    5     20486.452 ±    395.775   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate                                         thrpt    5       184.704 ±      3.588  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.alloc.rate.norm                                    thrpt    5     14192.022 ±      0.009    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       134.545 ±    709.417  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5     10363.657 ±  54644.588    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.count                                              thrpt    5         2.000               counts
[info] JsonCodecMakerBenchmark.readTwitterAPIJsoniter:·gc.time                                               thrpt    5        11.000                   ms
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay                                                            thrpt    5      3115.785 ±    112.714   ops/s
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate                                             thrpt    5       915.776 ±     33.339  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.alloc.rate.norm                                        thrpt    5    462584.135 ±      0.034    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.008 ±      0.031  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         3.851 ±     15.723    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen                                       thrpt    5       949.547 ±    589.080  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    479641.698 ± 297119.432    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       403.946 ±   3478.095    B/op
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.count                                                  thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.readTwitterAPIPlay:·gc.time                                                   thrpt    5        47.000                   ms
[info] JsonCodecMakerBenchmark.writeAdtCirce                                                                 thrpt    5    329318.779 ±  10418.148   ops/s
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate                                                  thrpt    5      1086.459 ±     34.645  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.alloc.rate.norm                                             thrpt    5      5192.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.020 ±      0.168  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.099 ±      0.815    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen                                            thrpt    5      1088.406 ±    588.524  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5200.469 ±   2771.725    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.876 ±     33.369    B/op
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.count                                                       thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.writeAdtCirce:·gc.time                                                        thrpt    5        29.000                   ms
[info] JsonCodecMakerBenchmark.writeAdtJackson                                                               thrpt    5   1326999.701 ±  42332.554   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate                                                thrpt    5       553.075 ±     17.690  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.alloc.rate.norm                                           thrpt    5       656.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen                                          thrpt    5       537.400 ±    707.750  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       638.878 ±    857.183    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±      5.318  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.100 ±      6.244    B/op
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.count                                                     thrpt    5         8.000               counts
[info] JsonCodecMakerBenchmark.writeAdtJackson:·gc.time                                                      thrpt    5        58.000                   ms
[info] JsonCodecMakerBenchmark.writeAdtJsoniter                                                              thrpt    5   6819246.051 ± 485770.842   ops/s
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate                                               thrpt    5       346.540 ±     24.735  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.alloc.rate.norm                                          thrpt    5        80.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen                                         thrpt    5       336.317 ±      0.170  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.churn.G1_Old_Gen.norm                                    thrpt    5        77.662 ±      5.561    B/op
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.count                                                    thrpt    5         5.000               counts
[info] JsonCodecMakerBenchmark.writeAdtJsoniter:·gc.time                                                     thrpt    5        43.000                   ms
[info] JsonCodecMakerBenchmark.writeAdtPlay                                                                  thrpt    5    207997.491 ±   6555.554   ops/s
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate                                                   thrpt    5       673.499 ±     21.184  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.alloc.rate.norm                                              thrpt    5      5096.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.008 ±      0.072  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.063 ±      0.541    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen                                             thrpt    5       675.708 ±     15.705  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5112.815 ±     86.059    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±      5.561  MB/sec
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.066 ±     42.239    B/op
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.count                                                        thrpt    5        10.000               counts
[info] JsonCodecMakerBenchmark.writeAdtPlay:·gc.time                                                         thrpt    5        71.000                   ms
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce                                                             thrpt    5   1253801.530 ±  25063.016   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate                                              thrpt    5      1280.807 ±     25.716  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.alloc.rate.norm                                         thrpt    5      1608.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.001 ±      0.009  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.002 ±      0.011    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen                                        thrpt    5      1293.280 ±    586.029  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1623.743 ±    738.182    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.count                                                   thrpt    5        19.000               counts
[info] JsonCodecMakerBenchmark.writeAnyRefsCirce:·gc.time                                                    thrpt    5        26.000                   ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson                                                           thrpt    5   3650679.751 ± 127827.142   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate                                            thrpt    5      1001.860 ±     35.095  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.alloc.rate.norm                                       thrpt    5       432.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.015 ±      0.124  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.006 ±      0.053    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5      1019.110 ±     16.146  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       439.455 ±      8.875    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±      8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.408 ±      3.517    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.count                                                 thrpt    5        15.000               counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJackson:·gc.time                                                  thrpt    5        34.000                   ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter                                                          thrpt    5  14696371.219 ± 710288.035   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate                                           thrpt    5       448.178 ±     21.502  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.alloc.rate.norm                                      thrpt    5        48.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       470.927 ±    709.585  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5        50.595 ±     78.170    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.count                                                thrpt    5         7.000               counts
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniter:·gc.time                                                 thrpt    5        44.000                   ms
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc                                                  thrpt    5  14283105.538 ± 224757.111   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴               MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                 B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsJsoniterPrealloc:·gc.count                                        thrpt    5           ≈ 0               counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay                                                              thrpt    5    830735.248 ±   9103.257   ops/s
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate                                               thrpt    5      1228.627 ±     13.412  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.alloc.rate.norm                                          thrpt    5      2328.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.036 ±      0.299  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.067 ±      0.565    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1225.247 ±    717.759  MB/sec
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2322.049 ±   1373.267    B/op
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.count                                                    thrpt    5        18.000               counts
[info] JsonCodecMakerBenchmark.writeAnyRefsPlay:·gc.time                                                     thrpt    5        24.000                   ms
[info] JsonCodecMakerBenchmark.writeArraysCirce                                                              thrpt    5    616809.587 ±  12663.915   ops/s
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate                                               thrpt    5      1407.439 ±     29.291  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.alloc.rate.norm                                          thrpt    5      3592.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.001 ±      0.005  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.002 ±      0.012    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen                                         thrpt    5      1361.276 ±      0.502  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3474.265 ±     71.227    B/op
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.count                                                    thrpt    5        20.000               counts
[info] JsonCodecMakerBenchmark.writeArraysCirce:·gc.time                                                     thrpt    5        26.000                   ms
[info] JsonCodecMakerBenchmark.writeArraysJackson                                                            thrpt    5   2557871.427 ±  71121.644   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate                                             thrpt    5      1261.070 ±     35.570  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.alloc.rate.norm                                        thrpt    5       776.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.039 ±      0.324  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.024 ±      0.199    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen                                       thrpt    5      1293.408 ±    586.157  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       795.550 ±    347.906    B/op
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.count                                                  thrpt    5        19.000               counts
[info] JsonCodecMakerBenchmark.writeArraysJackson:·gc.time                                                   thrpt    5        36.000                   ms
[info] JsonCodecMakerBenchmark.writeArraysJsoniter                                                           thrpt    5   4839154.869 ±  62109.584   ops/s
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate                                            thrpt    5      1278.787 ±     16.529  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.alloc.rate.norm                                       thrpt    5       416.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.002 ±      0.009  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.001 ±      0.003    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.183 ±    585.896  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       420.711 ±    191.491    B/op
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.count                                                 thrpt    5        19.000               counts
[info] JsonCodecMakerBenchmark.writeArraysJsoniter:·gc.time                                                  thrpt    5        25.000                   ms
[info] JsonCodecMakerBenchmark.writeArraysPlay                                                               thrpt    5    299805.608 ±   7191.599   ops/s
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate                                                thrpt    5      1051.462 ±     25.626  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.alloc.rate.norm                                           thrpt    5      5520.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.014 ±      0.119  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.072 ±      0.623    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen                                          thrpt    5      1087.450 ±    590.078  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      5709.863 ±   3131.818    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         4.233 ±     36.447    B/op
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.count                                                     thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.writeArraysPlay:·gc.time                                                      thrpt    5        31.000                   ms
[info] JsonCodecMakerBenchmark.writeBitSetsJackson                                                           thrpt    5   1889557.686 ±  88634.400   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate                                            thrpt    5       998.935 ±     47.291  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.alloc.rate.norm                                       thrpt    5       832.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.044 ±      0.374  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.037 ±      0.311    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen                                      thrpt    5      1019.029 ±     18.694  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       848.802 ±     26.237    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±      8.028  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.793 ±      6.828    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.count                                                 thrpt    5        15.000               counts
[info] JsonCodecMakerBenchmark.writeBitSetsJackson:·gc.time                                                  thrpt    5        37.000                   ms
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter                                                          thrpt    5   4729985.048 ± 131041.523   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate                                           thrpt    5       721.188 ±     19.991  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.alloc.rate.norm                                      thrpt    5       240.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.016 ±      0.135  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.005 ±      0.045    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen                                     thrpt    5       744.771 ±    594.801  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Old_Gen.norm                                thrpt    5       247.912 ±    199.692    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.265 ±      2.278    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.count                                                thrpt    5        11.000               counts
[info] JsonCodecMakerBenchmark.writeBitSetsJsoniter:·gc.time                                                 thrpt    5        59.000                   ms
[info] JsonCodecMakerBenchmark.writeBitSetsPlay                                                              thrpt    5    391421.719 ±   4177.716   ops/s
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate                                               thrpt    5      1133.810 ±     12.182  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.alloc.rate.norm                                          thrpt    5      4560.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.010 ±      0.081  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.039 ±      0.326    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen                                         thrpt    5      1088.802 ±    586.163  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      4378.733 ±   2346.320    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±      1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.535 ±      4.602    B/op
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.count                                                    thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.writeBitSetsPlay:·gc.time                                                     thrpt    5        29.000                   ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce                                                       thrpt    5      4513.695 ±     48.371   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate                                        thrpt    5      1098.020 ±     12.023  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.alloc.rate.norm                                   thrpt    5    382912.092 ±      0.012    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.055 ±      0.102  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5        19.120 ±     35.806    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen                                  thrpt    5      1088.860 ±    586.431  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Old_Gen.norm                             thrpt    5    379745.161 ± 205566.896    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space                           thrpt    5         0.133 ±      1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.churn.G1_Survivor_Space.norm                      thrpt    5        46.572 ±    401.002    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.count                                             thrpt    5        16.000               counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPICirce:·gc.time                                              thrpt    5        25.000                   ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson                                                     thrpt    5     26787.442 ±    269.790   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate                                      thrpt    5       388.141 ±      3.629  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.alloc.rate.norm                                 thrpt    5     22807.822 ±      0.457    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen                                thrpt    5       402.808 ±    578.175  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.churn.G1_Old_Gen.norm                           thrpt    5     23671.298 ±  34005.096    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.count                                           thrpt    5         6.000               counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJackson:·gc.time                                            thrpt    5        47.000                   ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter                                                    thrpt    5     23390.462 ±   3375.724   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate                                     thrpt    5       176.180 ±     25.519  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.alloc.rate.norm                                thrpt    5     11856.018 ±      0.003    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen                               thrpt    5       201.801 ±    709.360  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.churn.G1_Old_Gen.norm                          thrpt    5     13798.002 ±  48590.722    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.count                                          thrpt    5         3.000               counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniter:·gc.time                                           thrpt    5        20.000                   ms
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc                                            thrpt    5     31672.898 ±    109.389   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate                             thrpt    5         0.483 ±      0.002  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.alloc.rate.norm                        thrpt    5        24.013 ±      0.002    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIJsoniterPrealloc:·gc.count                                  thrpt    5           ≈ 0               counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay                                                        thrpt    5      4062.470 ±     65.108   ops/s
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate                                         thrpt    5      1218.926 ±     19.751  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.alloc.rate.norm                                    thrpt    5    472327.695 ±      2.411    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.041 ±      0.092  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5        16.067 ±     35.507    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen                                   thrpt    5      1224.829 ±    717.027  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Old_Gen.norm                              thrpt    5    474685.227 ± 279855.739    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±      1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        51.923 ±    447.069    B/op
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.count                                              thrpt    5        18.000               counts
[info] JsonCodecMakerBenchmark.writeGoogleMapsAPIPlay:·gc.time                                               thrpt    5        30.000                   ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson                                                    thrpt    5    468467.928 ±   9573.802   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate                                     thrpt    5      1049.878 ±     21.447  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.alloc.rate.norm                                thrpt    5      3528.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.067 ±      0.579  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.226 ±      1.938    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen                               thrpt    5      1018.786 ±     18.442  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3423.547 ±     46.574    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space                        thrpt    5         0.932 ±      8.027  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.churn.G1_Survivor_Space.norm                   thrpt    5         3.156 ±     27.171    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.count                                          thrpt    5        15.000               counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJackson:·gc.time                                           thrpt    5        46.000                   ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter                                                   thrpt    5   2381835.343 ±  60880.551   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate                                    thrpt    5       387.427 ±      9.975  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.alloc.rate.norm                               thrpt    5       256.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen                              thrpt    5       403.681 ±    579.159  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.churn.G1_Old_Gen.norm                         thrpt    5       266.726 ±    382.293    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.count                                         thrpt    5         6.000               counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsJsoniter:·gc.time                                          thrpt    5        42.000                   ms
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay                                                       thrpt    5    209583.886 ±   8615.674   ops/s
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate                                        thrpt    5       832.970 ±     34.188  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.alloc.rate.norm                                   thrpt    5      6256.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.039 ±      0.336  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.297 ±      2.533    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen                                  thrpt    5       880.773 ±    717.547  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Old_Gen.norm                             thrpt    5      6613.530 ±   5351.490    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±      5.561  MB/sec
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         6.077 ±     42.366    B/op
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.count                                             thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.writeIntAndLongMapsPlay:·gc.time                                              thrpt    5        45.000                   ms
[info] JsonCodecMakerBenchmark.writeIterablesCirce                                                           thrpt    5    531793.549 ±  10280.468   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate                                            thrpt    5      1286.438 ±     25.235  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.alloc.rate.norm                                       thrpt    5      3808.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.003 ±      0.010  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.009 ±      0.031    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen                                      thrpt    5      1293.225 ±    585.799  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3829.726 ±   1788.220    B/op
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.count                                                 thrpt    5        19.000               counts
[info] JsonCodecMakerBenchmark.writeIterablesCirce:·gc.time                                                  thrpt    5        29.000                   ms
[info] JsonCodecMakerBenchmark.writeIterablesJackson                                                         thrpt    5   1013642.141 ±  21600.750   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate                                          thrpt    5       685.139 ±     14.654  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.alloc.rate.norm                                     thrpt    5      1064.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.017 ±      0.103  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.026 ±      0.161    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen                                    thrpt    5       674.772 ±     18.115  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1047.942 ±     42.933    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space                             thrpt    5         0.932 ±      5.619  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.455 ±      8.775    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.count                                               thrpt    5        10.000               counts
[info] JsonCodecMakerBenchmark.writeIterablesJackson:·gc.time                                                thrpt    5        55.000                   ms
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter                                                        thrpt    5   4827672.960 ±  36832.286   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate                                         thrpt    5       539.761 ±      4.169  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.alloc.rate.norm                                    thrpt    5       176.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen                                   thrpt    5       538.127 ±    709.350  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                              thrpt    5       175.516 ±    231.895    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.260 ±      2.240    B/op
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.count                                              thrpt    5         8.000               counts
[info] JsonCodecMakerBenchmark.writeIterablesJsoniter:·gc.time                                               thrpt    5        45.000                   ms
[info] JsonCodecMakerBenchmark.writeIterablesPlay                                                            thrpt    5    298214.089 ±   9057.922   ops/s
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate                                             thrpt    5      1019.959 ±     31.266  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.alloc.rate.norm                                        thrpt    5      5384.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.018 ±      0.152  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.096 ±      0.802    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen                                       thrpt    5      1019.248 ±     15.089  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      5380.404 ±     98.470    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         4.273 ±     36.795    B/op
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.count                                                  thrpt    5        15.000               counts
[info] JsonCodecMakerBenchmark.writeIterablesPlay:·gc.time                                                   thrpt    5        29.000                   ms
[info] JsonCodecMakerBenchmark.writeMapsCirce                                                                thrpt    5    298545.142 ±  10925.975   ops/s
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate                                                 thrpt    5       819.321 ±     30.267  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.alloc.rate.norm                                            thrpt    5      4320.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.012 ±      0.107  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.065 ±      0.564    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       812.670 ±    710.141  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      4287.989 ±   3810.620    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±      5.560  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.237 ±     29.536    B/op
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.count                                                      thrpt    5        12.000               counts
[info] JsonCodecMakerBenchmark.writeMapsCirce:·gc.time                                                       thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.writeMapsJackson                                                              thrpt    5    573914.802 ±  14651.544   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate                                               thrpt    5       901.259 ±     23.066  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.alloc.rate.norm                                          thrpt    5      2472.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.060 ±      0.520  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.165 ±      1.424    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen                                         thrpt    5       880.833 ±    720.181  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2416.748 ±   1990.527    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.932 ±      8.027  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         2.579 ±     22.204    B/op
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.count                                                    thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.writeMapsJackson:·gc.time                                                     thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.writeMapsJsoniter                                                             thrpt    5   2266747.393 ± 803413.693   ops/s
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate                                              thrpt    5       483.871 ±    171.489  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.alloc.rate.norm                                         thrpt    5       336.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen                                        thrpt    5       470.912 ±    709.449  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       336.246 ±    609.271    B/op
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.count                                                   thrpt    5         7.000               counts
[info] JsonCodecMakerBenchmark.writeMapsJsoniter:·gc.time                                                    thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.writeMapsPlay                                                                 thrpt    5    240307.320 ±   5326.860   ops/s
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate                                                  thrpt    5       875.698 ±     19.421  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.alloc.rate.norm                                             thrpt    5      5736.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.018 ±      0.152  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.115 ±      0.990    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen                                            thrpt    5       881.584 ±    720.403  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5775.581 ±   4738.673    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         5.280 ±     45.462    B/op
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.count                                                       thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.writeMapsPlay:·gc.time                                                        thrpt    5        37.000                   ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce                                                    thrpt    5    536341.583 ±   8272.692   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate                                     thrpt    5      1237.459 ±     19.022  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.alloc.rate.norm                                thrpt    5      3632.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.003 ±      0.009  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.007 ±      0.027    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen                               thrpt    5      1225.109 ±    717.653  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.churn.G1_Old_Gen.norm                          thrpt    5      3596.786 ±   2136.340    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.count                                          thrpt    5        18.000               counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesCirce:·gc.time                                           thrpt    5        25.000                   ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson                                                  thrpt    5   1031838.796 ±  22924.955   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate                                   thrpt    5       592.619 ±     13.140  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.alloc.rate.norm                              thrpt    5       904.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen                             thrpt    5       604.782 ±    579.258  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Old_Gen.norm                        thrpt    5       923.371 ±    893.920    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space                      thrpt    5         1.066 ±      7.821  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.churn.G1_Survivor_Space.norm                 thrpt    5         1.623 ±     11.899    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.count                                        thrpt    5         9.000               counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJackson:·gc.time                                         thrpt    5        53.000                   ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter                                                 thrpt    5   4663909.640 ± 180586.217   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate                                  thrpt    5       355.603 ±     13.777  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.alloc.rate.norm                             thrpt    5       120.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen                            thrpt    5       336.391 ±      0.086  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.churn.G1_Old_Gen.norm                       thrpt    5       113.526 ±      4.437    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.count                                       thrpt    5         5.000               counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesJsoniter:·gc.time                                        thrpt    5        27.000                   ms
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay                                                     thrpt    5    301830.415 ±  12270.829   ops/s
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate                                      thrpt    5      1019.994 ±     41.516  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.alloc.rate.norm                                 thrpt    5      5320.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.018 ±      0.155  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         0.095 ±      0.801    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen                                thrpt    5      1019.177 ±     15.039  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Old_Gen.norm                           thrpt    5      5316.068 ±    154.426    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space                         thrpt    5         0.799 ±      6.880  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.churn.G1_Survivor_Space.norm                    thrpt    5         4.238 ±     36.490    B/op
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.count                                           thrpt    5        15.000               counts
[info] JsonCodecMakerBenchmark.writeMutableIterablesPlay:·gc.time                                            thrpt    5        30.000                   ms
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce                                                         thrpt    5    303375.468 ±  12451.693   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate                                          thrpt    5       817.258 ±     33.703  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.alloc.rate.norm                                     thrpt    5      4240.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.013 ±      0.108  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.068 ±      0.557    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen                                    thrpt    5       812.781 ±    710.316  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Old_Gen.norm                               thrpt    5      4220.756 ±   3771.670    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±      5.561  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         4.160 ±     28.992    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.count                                               thrpt    5        12.000               counts
[info] JsonCodecMakerBenchmark.writeMutableMapsCirce:·gc.time                                                thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson                                                       thrpt    5    565347.986 ±  13986.985   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate                                        thrpt    5       928.065 ±     22.997  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.alloc.rate.norm                                   thrpt    5      2584.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.061 ±      0.421  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.170 ±      1.174    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen                                  thrpt    5       948.957 ±    578.045  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2644.142 ±   1654.638    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space                           thrpt    5         0.933 ±      8.029  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         2.602 ±     22.407    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.count                                             thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJackson:·gc.time                                              thrpt    5        39.000                   ms
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter                                                      thrpt    5   2083689.870 ±  19655.536   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate                                       thrpt    5       423.552 ±      4.009  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.alloc.rate.norm                                  thrpt    5       320.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen                                 thrpt    5       403.587 ±    579.210  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.churn.G1_Old_Gen.norm                            thrpt    5       305.084 ±    440.834    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.count                                            thrpt    5         6.000               counts
[info] JsonCodecMakerBenchmark.writeMutableMapsJsoniter:·gc.time                                             thrpt    5        34.000                   ms
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay                                                          thrpt    5    237039.219 ±   4646.617   ops/s
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate                                           thrpt    5       906.044 ±     18.170  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.alloc.rate.norm                                      thrpt    5      6016.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.012 ±      0.068  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.082 ±      0.445    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen                                     thrpt    5       949.746 ±    579.264  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Old_Gen.norm                                thrpt    5      6309.737 ±   3928.176    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         5.320 ±     45.809    B/op
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.count                                                thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.writeMutableMapsPlay:·gc.time                                                 thrpt    5        43.000                   ms
[info] JsonCodecMakerBenchmark.writePrimitivesCirce                                                          thrpt    5    557342.409 ±  16402.699   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate                                           thrpt    5       982.996 ±     29.325  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.alloc.rate.norm                                      thrpt    5      2776.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.016 ±      0.139  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.046 ±      0.394    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen                                     thrpt    5       951.448 ±    582.784  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2688.181 ±   1674.302    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±      6.881  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.287 ±     19.689    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.count                                                thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.writePrimitivesCirce:·gc.time                                                 thrpt    5        29.000                   ms
[info] JsonCodecMakerBenchmark.writePrimitivesJackson                                                        thrpt    5   1595073.953 ±  31270.614   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate                                         thrpt    5       656.618 ±     12.964  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.alloc.rate.norm                                    thrpt    5       648.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.016 ±      0.139  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.016 ±      0.136    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       607.267 ±    583.340  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5       599.643 ±    579.958    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         1.066 ±      6.437  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         1.056 ±      6.376    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.count                                              thrpt    5         9.000               counts
[info] JsonCodecMakerBenchmark.writePrimitivesJackson:·gc.time                                               thrpt    5        42.000                   ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter                                                       thrpt    5   4025508.650 ±  66131.337   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate                                        thrpt    5       450.102 ±      7.357  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       470.896 ±    709.410  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5       184.212 ±    278.516    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.count                                             thrpt    5         7.000               counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniter:·gc.time                                              thrpt    5        38.000                   ms
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc                                               thrpt    5   4047087.465 ± 133051.624   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate                                thrpt    5       246.813 ±      8.161  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.alloc.rate.norm                           thrpt    5        96.000 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen                          thrpt    5       269.062 ±    579.177  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.churn.G1_Old_Gen.norm                     thrpt    5       104.954 ±    225.941    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.count                                     thrpt    5         4.000               counts
[info] JsonCodecMakerBenchmark.writePrimitivesJsoniterPrealloc:·gc.time                                      thrpt    5        22.000                   ms
[info] JsonCodecMakerBenchmark.writePrimitivesPlay                                                           thrpt    5    179861.345 ±   7158.255   ops/s
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate                                            thrpt    5       926.849 ±     36.641  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.alloc.rate.norm                                       thrpt    5      8112.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.006 ±      0.054  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.056 ±      0.473    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       950.348 ±    582.574  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8321.878 ±   5189.482    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±      5.561  MB/sec
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         7.096 ±     49.579    B/op
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.count                                                 thrpt    5        14.000               counts
[info] JsonCodecMakerBenchmark.writePrimitivesPlay:·gc.time                                                  thrpt    5        33.000                   ms
[info] JsonCodecMakerBenchmark.writeStringCirce                                                              thrpt    5    104772.040 ±   2391.272   ops/s
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate                                               thrpt    5       532.040 ±     11.859  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.alloc.rate.norm                                          thrpt    5      7992.004 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen                                         thrpt    5       538.253 ±    709.641  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      8093.037 ±  10753.544    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.666 ±      5.735  MB/sec
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         9.936 ±     85.550    B/op
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.count                                                    thrpt    5         8.000               counts
[info] JsonCodecMakerBenchmark.writeStringCirce:·gc.time                                                     thrpt    5        45.000                   ms
[info] JsonCodecMakerBenchmark.writeStringJackson                                                            thrpt    5    282740.997 ±   7443.821   ops/s
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate                                             thrpt    5       298.884 ±      7.857  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.alloc.rate.norm                                        thrpt    5      1664.001 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen                                       thrpt    5       269.081 ±    579.217  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1501.896 ±   3233.063    B/op
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.count                                                  thrpt    5         4.000               counts
[info] JsonCodecMakerBenchmark.writeStringJackson:·gc.time                                                   thrpt    5        23.000                   ms
[info] JsonCodecMakerBenchmark.writeStringJsoniter                                                           thrpt    5    248698.421 ±  15521.302   ops/s
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate                                            thrpt    5       209.815 ±     13.057  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.alloc.rate.norm                                       thrpt    5      1328.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen                                      thrpt    5       201.820 ±    709.425  MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1268.585 ±   4459.836    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.count                                                 thrpt    5         3.000               counts
[info] JsonCodecMakerBenchmark.writeStringJsoniter:·gc.time                                                  thrpt    5        16.000                   ms
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc                                                   thrpt    5    224282.402 ±  53305.904   ops/s
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴               MB/sec
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.alloc.rate.norm                               thrpt    5         0.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringJsoniterPrealloc:·gc.count                                         thrpt    5           ≈ 0               counts
[info] JsonCodecMakerBenchmark.writeStringPlay                                                               thrpt    5    279714.584 ±  19448.928   ops/s
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate                                                thrpt    5       298.529 ±     20.751  MB/sec
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.alloc.rate.norm                                           thrpt    5      1680.002 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen                                          thrpt    5       269.081 ±    579.217  MB/sec
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1522.002 ±   3277.933    B/op
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.count                                                     thrpt    5         4.000               counts
[info] JsonCodecMakerBenchmark.writeStringPlay:·gc.time                                                      thrpt    5        22.000                   ms
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce                                                          thrpt    5      6424.686 ±    295.908   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate                                           thrpt    5       857.214 ±     39.070  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.alloc.rate.norm                                      thrpt    5    209992.064 ±      0.007    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.005 ±      0.030  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         1.220 ±      7.405    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen                                     thrpt    5       880.831 ±    717.601  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Old_Gen.norm                                thrpt    5    215865.250 ± 177386.743    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±      5.562  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.churn.G1_Survivor_Space.norm                         thrpt    5       197.391 ±   1374.931    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.count                                                thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.writeTwitterAPICirce:·gc.time                                                 thrpt    5        43.000                   ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson                                                        thrpt    5     32266.229 ±  12296.519   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate                                         thrpt    5       412.041 ±    157.019  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.alloc.rate.norm                                    thrpt    5     20100.029 ±      0.360    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen                                   thrpt    5       469.572 ±    707.198  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Old_Gen.norm                              thrpt    5     22823.149 ±  31456.301    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±      1.147  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         6.245 ±     53.770    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.count                                              thrpt    5         7.000               counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJackson:·gc.time                                               thrpt    5        46.000                   ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter                                                       thrpt    5     33880.718 ±    620.330   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate                                        thrpt    5       217.298 ±      3.913  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.alloc.rate.norm                                   thrpt    5     10096.012 ±      0.002    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen                                  thrpt    5       201.801 ±    709.358  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.churn.G1_Old_Gen.norm                             thrpt    5      9406.455 ±  33065.038    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.count                                             thrpt    5         3.000               counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniter:·gc.time                                              thrpt    5        17.000                   ms
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc                                               thrpt    5     39013.345 ±    498.983   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate                                thrpt    5         5.751 ±      0.075  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.alloc.rate.norm                           thrpt    5       232.010 ±      0.001    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIJsoniterPrealloc:·gc.count                                     thrpt    5           ≈ 0               counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay                                                           thrpt    5      4428.270 ±    141.521   ops/s
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate                                            thrpt    5       891.951 ±     28.241  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.alloc.rate.norm                                       thrpt    5    317021.953 ±      3.218    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.004 ±      0.016  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         1.516 ±      5.509    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen                                      thrpt    5       881.538 ±    714.436  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Old_Gen.norm                                 thrpt    5    313373.762 ± 254858.984    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±      6.882  MB/sec
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.churn.G1_Survivor_Space.norm                          thrpt    5       286.496 ±   2466.818    B/op
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.count                                                 thrpt    5        13.000               counts
[info] JsonCodecMakerBenchmark.writeTwitterAPIPlay:·gc.time                                                  thrpt    5        37.000                   ms
[success] Total time: 1890 s, completed Dec 5, 2017, 9:00:35 AM
